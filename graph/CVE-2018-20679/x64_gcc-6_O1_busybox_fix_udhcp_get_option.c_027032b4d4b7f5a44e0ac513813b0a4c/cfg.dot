digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000124" [label = "(<operator>.assignment,v7 = 0)" ]
"1000127" [label = "(<operator>.assignment,v8 = 388)" ]
"1000136" [label = "(<operator>.assignment,v10 = *v6)" ]
"1000138" [label = "(<operator>.indirection,*v6)" ]
"1000141" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000142" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000145" [label = "(<operator>.preDecrement,--v8)" ]
"1000147" [label = "(<operator>.preIncrement,++v6)" ]
"1000151" [label = "(<operator>.lessEqualsThan,v8 <= 0)" ]
"1000156" [label = "(<operator>.notEquals,(_BYTE)v10 != 0xFF)" ]
"1000157" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000158" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000163" [label = "(<operator>.equals,(v7 & 0x101) == 1)" ]
"1000164" [label = "(<operator>.and,v7 & 0x101)" ]
"1000169" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000172" [label = "(<operator>.assignment,v6 = a1 + 108)" ]
"1000174" [label = "(<operator>.addition,a1 + 108)" ]
"1000177" [label = "(<operator>.assignment,v8 = 128)" ]
"1000183" [label = "(<operator>.notEquals,(v7 & 0x202) != 2)" ]
"1000184" [label = "(<operator>.and,v7 & 0x202)" ]
"1000191" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000192" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000193" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000197" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v10, a4, a5, a6))" ]
"1000198" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000199" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000207" [label = "(RETURN,return result;,return result;)" ]
"1000209" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000212" [label = "(<operator>.assignment,v6 = a1 + 44)" ]
"1000214" [label = "(<operator>.addition,a1 + 44)" ]
"1000217" [label = "(<operator>.assignment,v8 = 64)" ]
"1000221" [label = "(<operator>.lessEqualsThan,v8 <= 1)" ]
"1000225" [label = "(<operator>.assignment,a5 = v6[1])" ]
"1000227" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000230" [label = "(<operator>.assignment,a4 = (unsigned __int8)a5 + 2)" ]
"1000232" [label = "(<operator>.addition,(unsigned __int8)a5 + 2)" ]
"1000233" [label = "(<operator>.cast,(unsigned __int8)a5)" ]
"1000234" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000237" [label = "(<operator>.assignmentMinus,v8 -= a4)" ]
"1000241" [label = "(<operator>.lessThan,v8 < 0)" ]
"1000245" [label = "(<operator>.assignment,a6 = (unsigned __int8)v10)" ]
"1000247" [label = "(<operator>.cast,(unsigned __int8)v10)" ]
"1000248" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000251" [label = "(<operator>.notEquals,a2 != (unsigned __int8)v10)" ]
"1000253" [label = "(<operator>.cast,(unsigned __int8)v10)" ]
"1000254" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000258" [label = "(<operator>.logicalAnd,a4 > 2 && (_BYTE)v10 == 52)" ]
"1000259" [label = "(<operator>.greaterThan,a4 > 2)" ]
"1000262" [label = "(<operator>.equals,(_BYTE)v10 == 52)" ]
"1000263" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000264" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000268" [label = "(<operator>.assignment,v10 = v6[2])" ]
"1000270" [label = "(<operator>.indirectIndexAccess,v6[2])" ]
"1000273" [label = "(<operators>.assignmentOr,v7 |= v10)" ]
"1000276" [label = "(<operator>.assignmentPlus,v6 += a4)" ]
"1000281" [label = "(<operator>.logicalNot,!(_BYTE)a5)" ]
"1000282" [label = "(<operator>.cast,(_BYTE)a5)" ]
"1000283" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000287" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v10, a4, a5, a6))" ]
"1000288" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000289" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000297" [label = "(log_option,log_option(\"option found\", v6))" ]
"1000300" [label = "(RETURN,return v6 + 2;,return v6 + 2;)" ]
"1000301" [label = "(<operator>.addition,v6 + 2)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000304" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000124" 
  "1000121" -> "1000119" 
  "1000124" -> "1000127" 
  "1000127" -> "1000158" 
  "1000127" -> "1000138" 
  "1000127" -> "1000221" 
  "1000136" -> "1000142" 
  "1000138" -> "1000136" 
  "1000141" -> "1000158" 
  "1000141" -> "1000221" 
  "1000141" -> "1000145" 
  "1000142" -> "1000141" 
  "1000145" -> "1000147" 
  "1000147" -> "1000151" 
  "1000151" -> "1000158" 
  "1000151" -> "1000138" 
  "1000151" -> "1000289" 
  "1000156" -> "1000221" 
  "1000156" -> "1000164" 
  "1000157" -> "1000156" 
  "1000158" -> "1000157" 
  "1000163" -> "1000169" 
  "1000163" -> "1000184" 
  "1000164" -> "1000163" 
  "1000169" -> "1000174" 
  "1000172" -> "1000177" 
  "1000174" -> "1000172" 
  "1000177" -> "1000158" 
  "1000177" -> "1000138" 
  "1000177" -> "1000221" 
  "1000183" -> "1000193" 
  "1000183" -> "1000209" 
  "1000184" -> "1000183" 
  "1000191" -> "1000199" 
  "1000191" -> "1000207" 
  "1000192" -> "1000191" 
  "1000193" -> "1000192" 
  "1000197" -> "1000207" 
  "1000198" -> "1000197" 
  "1000199" -> "1000198" 
  "1000207" -> "1000304" 
  "1000209" -> "1000214" 
  "1000212" -> "1000217" 
  "1000214" -> "1000212" 
  "1000217" -> "1000158" 
  "1000217" -> "1000138" 
  "1000217" -> "1000221" 
  "1000221" -> "1000289" 
  "1000221" -> "1000227" 
  "1000225" -> "1000234" 
  "1000227" -> "1000225" 
  "1000230" -> "1000237" 
  "1000232" -> "1000230" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000237" -> "1000241" 
  "1000241" -> "1000289" 
  "1000241" -> "1000248" 
  "1000245" -> "1000254" 
  "1000247" -> "1000245" 
  "1000248" -> "1000247" 
  "1000251" -> "1000283" 
  "1000251" -> "1000259" 
  "1000253" -> "1000251" 
  "1000254" -> "1000253" 
  "1000258" -> "1000270" 
  "1000258" -> "1000276" 
  "1000259" -> "1000264" 
  "1000259" -> "1000258" 
  "1000262" -> "1000258" 
  "1000263" -> "1000262" 
  "1000264" -> "1000263" 
  "1000268" -> "1000273" 
  "1000270" -> "1000268" 
  "1000273" -> "1000276" 
  "1000276" -> "1000151" 
  "1000281" -> "1000289" 
  "1000281" -> "1000297" 
  "1000282" -> "1000281" 
  "1000283" -> "1000282" 
  "1000287" -> "1000297" 
  "1000288" -> "1000287" 
  "1000289" -> "1000288" 
  "1000297" -> "1000301" 
  "1000300" -> "1000304" 
  "1000301" -> "1000300" 
  "1000106" -> "1000121" 
}
