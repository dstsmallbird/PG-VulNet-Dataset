digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000131" [label = "(<operator>.addition,a1 + 240)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000136" [label = "(<operator>.addition,a1 + 108)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000141" [label = "(<operator>.addition,a1 + 44)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000159" [label = "(<operator>.assignment,LODWORD(v7) = 1)" ]
"1000160" [label = "(LODWORD,LODWORD(v7))" ]
"1000167" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v2 + v8))" ]
"1000169" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000170" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000171" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000172" [label = "(<operator>.addition,v2 + v8)" ]
"1000176" [label = "(<operator>.indirection,*(_BYTE *)(v2 + v8))" ]
"1000177" [label = "(<operator>.cast,(_BYTE *)(v2 + v8))" ]
"1000178" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000179" [label = "(<operator>.addition,v2 + v8)" ]
"1000183" [label = "(<operator>.preIncrement,++v8)" ]
"1000185" [label = "(<operator>.assignment,LODWORD(v7) = v7 - 1)" ]
"1000186" [label = "(LODWORD,LODWORD(v7))" ]
"1000188" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000192" [label = "(<operator>.lessThan,(int)v7 + v5 < 2)" ]
"1000193" [label = "(<operator>.addition,(int)v7 + v5)" ]
"1000194" [label = "(<operator>.cast,(int)v7)" ]
"1000195" [label = "(UNKNOWN,int,int)" ]
"1000201" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000202" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000203" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000207" [label = "(<operator>.assignment,LODWORD(v7) = v5 - v8)" ]
"1000208" [label = "(LODWORD,LODWORD(v7))" ]
"1000210" [label = "(<operator>.subtraction,v5 - v8)" ]
"1000214" [label = "(<operator>.lessThan,v5 - (int)v8 < 2)" ]
"1000215" [label = "(<operator>.subtraction,v5 - (int)v8)" ]
"1000217" [label = "(<operator>.cast,(int)v8)" ]
"1000218" [label = "(UNKNOWN,int,int)" ]
"1000222" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000224" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000225" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000226" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000227" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000229" [label = "(<operator>.addition,v8 + 1)" ]
"1000232" [label = "(<operator>.assignment,v5 = v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000234" [label = "(<operator>.subtraction,v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000236" [label = "(<operator>.subtraction,2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000238" [label = "(<operator>.subtraction,*(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000239" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000240" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000241" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000242" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000244" [label = "(<operator>.addition,v8 + 1)" ]
"1000249" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000254" [label = "(<operator>.equals,v9 == a2)" ]
"1000258" [label = "(<operator>.assignment,v10 = v2 + v8 + 2)" ]
"1000260" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000262" [label = "(<operator>.addition,v8 + 2)" ]
"1000266" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000267" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000268" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000272" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v2 + v8 + 2) = 0)" ]
"1000273" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v2 + v8 + 2))" ]
"1000274" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v2 + v8 + 2))" ]
"1000275" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000276" [label = "(bin2hex,bin2hex(v14, v2 + v8 + 2))" ]
"1000278" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000280" [label = "(<operator>.addition,v8 + 2)" ]
"1000284" [label = "(bb_error_msg,bb_error_msg(\n              (unsigned int)\"%s: 0x%02x %s\",\n              (unsigned int)\"option found\",\n              *(unsigned __int8 *)(v2 + v8),\n              (unsigned int)v14,\n              v12,\n              v13,\n              v14[0]))" ]
"1000285" [label = "(<operator>.cast,(unsigned int)\"%s: 0x%02x %s\")" ]
"1000286" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000288" [label = "(<operator>.cast,(unsigned int)\"option found\")" ]
"1000289" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000291" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000292" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000293" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000294" [label = "(<operator>.addition,v2 + v8)" ]
"1000297" [label = "(<operator>.cast,(unsigned int)v14)" ]
"1000298" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000302" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000305" [label = "(RETURN,return v10;,return v10;)" ]
"1000308" [label = "(<operator>.logicalAnd,(_BYTE)v9 == 52 && (_BYTE)v7)" ]
"1000309" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000310" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000311" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000314" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000315" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000317" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000319" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000320" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000321" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000322" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000324" [label = "(<operator>.addition,v8 + 2)" ]
"1000327" [label = "(<operator>.assignmentPlus,v2 += v8 + v7 + 2)" ]
"1000329" [label = "(<operator>.addition,v8 + v7 + 2)" ]
"1000331" [label = "(<operator>.addition,v7 + 2)" ]
"1000335" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000341" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v7, v5, v4, v3, v14[0]))" ]
"1000342" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000343" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000350" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000353" [label = "(RETURN,return v10;,return v10;)" ]
"1000356" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000357" [label = "(<operator>.and,v6 & 0x101)" ]
"1000362" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000365" [label = "(<operator>.assignment,v5 = 128)" ]
"1000368" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000370" [label = "(<operator>.addition,a1 + 108)" ]
"1000376" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000377" [label = "(<operator>.and,v6 & 0x202)" ]
"1000382" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000385" [label = "(<operator>.assignment,v5 = 64)" ]
"1000388" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000390" [label = "(<operator>.addition,a1 + 44)" ]
"1000397" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000398" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000399" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000402" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v7, v5, v4, v3, v14[0]))" ]
"1000403" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000404" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000411" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000414" [label = "(RETURN,return v10;,return v10;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000416" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000160" 
  "1000147" -> "1000357" 
  "1000147" -> "1000377" 
  "1000147" -> "1000399" 
  "1000159" -> "1000203" 
  "1000159" -> "1000171" 
  "1000160" -> "1000159" 
  "1000167" -> "1000178" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000176" -> "1000203" 
  "1000176" -> "1000357" 
  "1000176" -> "1000377" 
  "1000176" -> "1000399" 
  "1000176" -> "1000183" 
  "1000177" -> "1000176" 
  "1000178" -> "1000179" 
  "1000179" -> "1000177" 
  "1000183" -> "1000186" 
  "1000185" -> "1000195" 
  "1000186" -> "1000188" 
  "1000188" -> "1000185" 
  "1000192" -> "1000203" 
  "1000192" -> "1000171" 
  "1000192" -> "1000343" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000201" -> "1000357" 
  "1000201" -> "1000377" 
  "1000201" -> "1000399" 
  "1000201" -> "1000208" 
  "1000202" -> "1000201" 
  "1000203" -> "1000202" 
  "1000207" -> "1000218" 
  "1000208" -> "1000210" 
  "1000210" -> "1000207" 
  "1000214" -> "1000343" 
  "1000214" -> "1000226" 
  "1000215" -> "1000214" 
  "1000217" -> "1000215" 
  "1000218" -> "1000217" 
  "1000222" -> "1000241" 
  "1000224" -> "1000222" 
  "1000225" -> "1000224" 
  "1000226" -> "1000229" 
  "1000227" -> "1000225" 
  "1000229" -> "1000227" 
  "1000232" -> "1000249" 
  "1000234" -> "1000232" 
  "1000236" -> "1000234" 
  "1000238" -> "1000236" 
  "1000239" -> "1000238" 
  "1000240" -> "1000239" 
  "1000241" -> "1000244" 
  "1000242" -> "1000240" 
  "1000244" -> "1000242" 
  "1000249" -> "1000343" 
  "1000249" -> "1000254" 
  "1000254" -> "1000311" 
  "1000254" -> "1000262" 
  "1000258" -> "1000268" 
  "1000260" -> "1000258" 
  "1000262" -> "1000260" 
  "1000266" -> "1000275" 
  "1000266" -> "1000305" 
  "1000267" -> "1000266" 
  "1000268" -> "1000267" 
  "1000272" -> "1000286" 
  "1000273" -> "1000272" 
  "1000274" -> "1000273" 
  "1000275" -> "1000280" 
  "1000276" -> "1000274" 
  "1000278" -> "1000276" 
  "1000280" -> "1000278" 
  "1000284" -> "1000305" 
  "1000285" -> "1000289" 
  "1000286" -> "1000285" 
  "1000288" -> "1000293" 
  "1000289" -> "1000288" 
  "1000291" -> "1000298" 
  "1000292" -> "1000291" 
  "1000293" -> "1000294" 
  "1000294" -> "1000292" 
  "1000297" -> "1000302" 
  "1000298" -> "1000297" 
  "1000302" -> "1000284" 
  "1000305" -> "1000416" 
  "1000308" -> "1000321" 
  "1000308" -> "1000331" 
  "1000309" -> "1000315" 
  "1000309" -> "1000308" 
  "1000310" -> "1000309" 
  "1000311" -> "1000310" 
  "1000314" -> "1000308" 
  "1000315" -> "1000314" 
  "1000317" -> "1000331" 
  "1000319" -> "1000317" 
  "1000320" -> "1000319" 
  "1000321" -> "1000324" 
  "1000322" -> "1000320" 
  "1000324" -> "1000322" 
  "1000327" -> "1000335" 
  "1000329" -> "1000327" 
  "1000331" -> "1000329" 
  "1000335" -> "1000160" 
  "1000335" -> "1000357" 
  "1000335" -> "1000343" 
  "1000341" -> "1000353" 
  "1000342" -> "1000350" 
  "1000343" -> "1000342" 
  "1000350" -> "1000341" 
  "1000353" -> "1000416" 
  "1000356" -> "1000362" 
  "1000356" -> "1000377" 
  "1000356" -> "1000399" 
  "1000357" -> "1000356" 
  "1000362" -> "1000365" 
  "1000365" -> "1000370" 
  "1000368" -> "1000160" 
  "1000368" -> "1000357" 
  "1000368" -> "1000377" 
  "1000368" -> "1000399" 
  "1000368" -> "1000160" 
  "1000368" -> "1000357" 
  "1000368" -> "1000377" 
  "1000370" -> "1000368" 
  "1000376" -> "1000382" 
  "1000376" -> "1000399" 
  "1000377" -> "1000376" 
  "1000382" -> "1000385" 
  "1000385" -> "1000390" 
  "1000388" -> "1000160" 
  "1000388" -> "1000357" 
  "1000388" -> "1000377" 
  "1000388" -> "1000399" 
  "1000390" -> "1000388" 
  "1000397" -> "1000404" 
  "1000397" -> "1000414" 
  "1000398" -> "1000397" 
  "1000399" -> "1000398" 
  "1000402" -> "1000414" 
  "1000403" -> "1000411" 
  "1000404" -> "1000403" 
  "1000411" -> "1000402" 
  "1000414" -> "1000416" 
  "1000113" -> "1000131" 
}
