digraph udhcp_get_option {  
"1000133" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000135" [label = "(<operator>.addition,a1 + 108)" ]
"1000138" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000140" [label = "(<operator>.addition,a1 + 44)" ]
"1000143" [label = "(<operator>.assignment,v5 = a1 + 240)" ]
"1000145" [label = "(<operator>.addition,a1 + 240)" ]
"1000148" [label = "(<operator>.assignment,v6 = 388)" ]
"1000151" [label = "(<operator>.assignment,v7 = 0)" ]
"1000157" [label = "(<operator>.assignment,v8 = 2)" ]
"1000160" [label = "(<operator>.assignment,v9 = 0)" ]
"1000166" [label = "(<operator>.assignment,v10 = v5 + v8)" ]
"1000168" [label = "(<operator>.addition,v5 + v8)" ]
"1000171" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000173" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000174" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000175" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000176" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000178" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000182" [label = "(<operator>.indirection,*(_BYTE *)(v5 + v8 - 2))" ]
"1000183" [label = "(<operator>.cast,(_BYTE *)(v5 + v8 - 2))" ]
"1000184" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000185" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000187" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000191" [label = "(<operator>.preDecrement,--v9)" ]
"1000193" [label = "(<operator>.preIncrement,++v8)" ]
"1000196" [label = "(<operator>.lessThan,v6 + v9 + 1 < 2)" ]
"1000197" [label = "(<operator>.addition,v6 + v9 + 1)" ]
"1000199" [label = "(<operator>.addition,v9 + 1)" ]
"1000205" [label = "(<operator>.equals,v11 == 255)" ]
"1000210" [label = "(<operator>.equals,(v7 & 0x101) == 1)" ]
"1000211" [label = "(<operator>.and,v7 & 0x101)" ]
"1000216" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000219" [label = "(<operator>.assignment,v6 = 128)" ]
"1000222" [label = "(<operator>.assignment,v5 = v3)" ]
"1000227" [label = "(<operator>.equals,(v7 & 0x202) == 2)" ]
"1000228" [label = "(<operator>.and,v7 & 0x202)" ]
"1000233" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000236" [label = "(<operator>.assignment,v6 = 64)" ]
"1000239" [label = "(<operator>.assignment,v5 = v4)" ]
"1000243" [label = "(<operator>.assignment,v14 = 0)" ]
"1000247" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000248" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000249" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000252" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000257" [label = "(<operator>.assignment,v12 = v6 + v9)" ]
"1000259" [label = "(<operator>.addition,v6 + v9)" ]
"1000262" [label = "(<operator>.assignment,v13 = v6 + v9 < 2)" ]
"1000264" [label = "(<operator>.lessThan,v6 + v9 < 2)" ]
"1000265" [label = "(<operator>.addition,v6 + v9)" ]
"1000270" [label = "(<operator>.greaterEqualsThan,v6 + v9 >= 2)" ]
"1000271" [label = "(<operator>.addition,v6 + v9)" ]
"1000276" [label = "(<operator>.assignment,v2 = v5 - v9)" ]
"1000278" [label = "(<operator>.subtraction,v5 - v9)" ]
"1000281" [label = "(<operator>.assignment,v12 = *(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000283" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000284" [label = "(<operator>.cast,(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000285" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000286" [label = "(<operator>.subtraction,v5 - v9 + 1)" ]
"1000288" [label = "(<operator>.addition,v9 + 1)" ]
"1000291" [label = "(<operator>.assignment,v6 = v6 - v12 + v9 - 2)" ]
"1000293" [label = "(<operator>.subtraction,v6 - v12 + v9 - 2)" ]
"1000295" [label = "(<operator>.addition,v12 + v9 - 2)" ]
"1000297" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000300" [label = "(<operator>.assignment,v13 = v6 < 0)" ]
"1000302" [label = "(<operator>.lessThan,v6 < 0)" ]
"1000309" [label = "(<operator>.notEquals,v11 != a2)" ]
"1000314" [label = "(<operator>.logicalAnd,v11 == 52 && v12)" ]
"1000315" [label = "(<operator>.equals,v11 == 52)" ]
"1000319" [label = "(<operators>.assignmentOr,v7 |= *(unsigned __int8 *)(v5 + v8))" ]
"1000321" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8))" ]
"1000322" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8))" ]
"1000323" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000324" [label = "(<operator>.addition,v5 + v8)" ]
"1000327" [label = "(<operator>.assignment,v5 = v5 + v12 - v9 + 2)" ]
"1000329" [label = "(<operator>.addition,v5 + v12 - v9 + 2)" ]
"1000331" [label = "(<operator>.subtraction,v12 - v9 + 2)" ]
"1000333" [label = "(<operator>.addition,v9 + 2)" ]
"1000338" [label = "(<operator>.greaterEqualsThan,v6 >= 1)" ]
"1000344" [label = "(<operator>.logicalNot,!v12)" ]
"1000348" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000350" [label = "(RETURN,return 0;,return 0;)" ]
"1000353" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000354" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000355" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000359" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v16, v2 + 2) = 0)" ]
"1000360" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v16, v2 + 2))" ]
"1000361" [label = "(<operator>.cast,(_BYTE *)bin2hex(v16, v2 + 2))" ]
"1000362" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000363" [label = "(bin2hex,bin2hex(v16, v2 + 2))" ]
"1000365" [label = "(<operator>.addition,v2 + 2)" ]
"1000369" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v10 - 2), v16))" ]
"1000372" [label = "(<operator>.indirection,*(unsigned __int8 *)(v10 - 2))" ]
"1000373" [label = "(<operator>.cast,(unsigned __int8 *)(v10 - 2))" ]
"1000374" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000375" [label = "(<operator>.subtraction,v10 - 2)" ]
"1000379" [label = "(<operator>.assignment,v14 = v2 + 2)" ]
"1000381" [label = "(<operator>.addition,v2 + 2)" ]
"1000384" [label = "(RETURN,return v14;,return v14;)" ]
"1000115" [label = "(METHOD,udhcp_get_option)" ]
"1000386" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000133" -> "1000140" 
  "1000135" -> "1000133" 
  "1000138" -> "1000145" 
  "1000140" -> "1000138" 
  "1000143" -> "1000148" 
  "1000145" -> "1000143" 
  "1000148" -> "1000151" 
  "1000151" -> "1000386" 
  "1000151" -> "1000157" 
  "1000157" -> "1000160" 
  "1000160" -> "1000168" 
  "1000160" -> "1000205" 
  "1000166" -> "1000175" 
  "1000168" -> "1000166" 
  "1000171" -> "1000184" 
  "1000173" -> "1000171" 
  "1000174" -> "1000173" 
  "1000175" -> "1000178" 
  "1000176" -> "1000174" 
  "1000178" -> "1000176" 
  "1000182" -> "1000386" 
  "1000182" -> "1000205" 
  "1000182" -> "1000191" 
  "1000183" -> "1000182" 
  "1000184" -> "1000187" 
  "1000185" -> "1000183" 
  "1000187" -> "1000185" 
  "1000191" -> "1000193" 
  "1000193" -> "1000199" 
  "1000196" -> "1000168" 
  "1000196" -> "1000205" 
  "1000196" -> "1000348" 
  "1000197" -> "1000196" 
  "1000199" -> "1000197" 
  "1000205" -> "1000211" 
  "1000205" -> "1000259" 
  "1000210" -> "1000216" 
  "1000210" -> "1000228" 
  "1000211" -> "1000210" 
  "1000216" -> "1000219" 
  "1000219" -> "1000222" 
  "1000222" -> "1000338" 
  "1000227" -> "1000233" 
  "1000227" -> "1000243" 
  "1000228" -> "1000227" 
  "1000233" -> "1000236" 
  "1000236" -> "1000239" 
  "1000239" -> "1000338" 
  "1000243" -> "1000249" 
  "1000247" -> "1000252" 
  "1000247" -> "1000384" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000252" -> "1000384" 
  "1000257" -> "1000265" 
  "1000259" -> "1000257" 
  "1000262" -> "1000271" 
  "1000264" -> "1000262" 
  "1000265" -> "1000264" 
  "1000270" -> "1000278" 
  "1000270" -> "1000348" 
  "1000270" -> "1000309" 
  "1000271" -> "1000270" 
  "1000276" -> "1000285" 
  "1000278" -> "1000276" 
  "1000281" -> "1000297" 
  "1000283" -> "1000281" 
  "1000284" -> "1000283" 
  "1000285" -> "1000288" 
  "1000286" -> "1000284" 
  "1000288" -> "1000286" 
  "1000291" -> "1000302" 
  "1000293" -> "1000291" 
  "1000295" -> "1000293" 
  "1000297" -> "1000295" 
  "1000300" -> "1000348" 
  "1000300" -> "1000309" 
  "1000302" -> "1000300" 
  "1000309" -> "1000315" 
  "1000309" -> "1000344" 
  "1000314" -> "1000323" 
  "1000314" -> "1000333" 
  "1000315" -> "1000314" 
  "1000315" -> "1000314" 
  "1000319" -> "1000333" 
  "1000321" -> "1000319" 
  "1000322" -> "1000321" 
  "1000323" -> "1000324" 
  "1000324" -> "1000322" 
  "1000327" -> "1000338" 
  "1000329" -> "1000327" 
  "1000331" -> "1000329" 
  "1000333" -> "1000331" 
  "1000338" -> "1000386" 
  "1000338" -> "1000157" 
  "1000338" -> "1000348" 
  "1000344" -> "1000355" 
  "1000344" -> "1000348" 
  "1000348" -> "1000350" 
  "1000350" -> "1000386" 
  "1000353" -> "1000362" 
  "1000353" -> "1000381" 
  "1000354" -> "1000353" 
  "1000355" -> "1000354" 
  "1000359" -> "1000374" 
  "1000360" -> "1000359" 
  "1000361" -> "1000360" 
  "1000362" -> "1000365" 
  "1000363" -> "1000361" 
  "1000365" -> "1000363" 
  "1000369" -> "1000381" 
  "1000372" -> "1000369" 
  "1000373" -> "1000372" 
  "1000374" -> "1000375" 
  "1000375" -> "1000373" 
  "1000379" -> "1000384" 
  "1000381" -> "1000379" 
  "1000384" -> "1000386" 
  "1000115" -> "1000135" 
}
