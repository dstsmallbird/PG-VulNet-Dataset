digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v2 = 0)" ]
"1000124" [label = "(<operator>.assignment,v3 = a1 + 240)" ]
"1000126" [label = "(<operator>.addition,a1 + 240)" ]
"1000129" [label = "(<operator>.assignment,v4 = 388)" ]
"1000140" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v3 + v5))" ]
"1000142" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5))" ]
"1000143" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5))" ]
"1000144" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000145" [label = "(<operator>.addition,v3 + v5)" ]
"1000149" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5))" ]
"1000150" [label = "(<operator>.cast,(_BYTE *)(v3 + v5))" ]
"1000151" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000152" [label = "(<operator>.addition,v3 + v5)" ]
"1000156" [label = "(<operator>.preDecrement,--v6)" ]
"1000158" [label = "(<operator>.preIncrement,++v5)" ]
"1000161" [label = "(<operator>.lessThan,v4 + (int)v6 < 2)" ]
"1000162" [label = "(<operator>.addition,v4 + (int)v6)" ]
"1000164" [label = "(<operator>.cast,(int)v6)" ]
"1000165" [label = "(UNKNOWN,int,int)" ]
"1000170" [label = "(<operator>.equals,v7 == 255)" ]
"1000175" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000176" [label = "(<operator>.and,v2 & 0x101)" ]
"1000181" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000184" [label = "(<operator>.assignment,v4 = 128)" ]
"1000187" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000189" [label = "(<operator>.addition,a1 + 108)" ]
"1000195" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000196" [label = "(<operator>.and,v2 & 0x202)" ]
"1000202" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000203" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000204" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000207" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000211" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000214" [label = "(<operator>.assignment,v4 = 64)" ]
"1000217" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000219" [label = "(<operator>.addition,a1 + 44)" ]
"1000224" [label = "(<operator>.lessThan,v4 - (int)v5 < 2)" ]
"1000225" [label = "(<operator>.subtraction,v4 - (int)v5)" ]
"1000227" [label = "(<operator>.cast,(int)v5)" ]
"1000228" [label = "(UNKNOWN,int,int)" ]
"1000232" [label = "(<operator>.assignment,v8 = *(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000234" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000235" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000236" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000237" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000239" [label = "(<operator>.addition,v5 + 1)" ]
"1000242" [label = "(<operator>.assignment,v4 = v4 - 2 - v8 - v5)" ]
"1000244" [label = "(<operator>.subtraction,v4 - 2 - v8 - v5)" ]
"1000246" [label = "(<operator>.subtraction,2 - v8 - v5)" ]
"1000248" [label = "(<operator>.subtraction,v8 - v5)" ]
"1000252" [label = "(<operator>.notEquals,(v4 & 0x80000000) != 0)" ]
"1000253" [label = "(<operator>.and,v4 & 0x80000000)" ]
"1000259" [label = "(<operator>.notEquals,v7 != (_DWORD)a2)" ]
"1000261" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000262" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000266" [label = "(<operator>.logicalAnd,v7 == 52 && *(_BYTE *)(v3 + v5 + 1))" ]
"1000267" [label = "(<operator>.equals,v7 == 52)" ]
"1000270" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5 + 1))" ]
"1000271" [label = "(<operator>.cast,(_BYTE *)(v3 + v5 + 1))" ]
"1000272" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000273" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000275" [label = "(<operator>.addition,v5 + 1)" ]
"1000278" [label = "(<operators>.assignmentOr,v2 |= *(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000280" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000281" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000282" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000283" [label = "(<operator>.addition,v3 + v5 + 2)" ]
"1000285" [label = "(<operator>.addition,v5 + 2)" ]
"1000288" [label = "(<operator>.assignmentPlus,v3 += v8 + 2 + v5)" ]
"1000290" [label = "(<operator>.addition,v8 + 2 + v5)" ]
"1000292" [label = "(<operator>.addition,2 + v5)" ]
"1000297" [label = "(<operator>.greaterEqualsThan,v4 >= 1)" ]
"1000304" [label = "(<operator>.logicalNot,!*(_BYTE *)(v3 + v5 + 1))" ]
"1000305" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5 + 1))" ]
"1000306" [label = "(<operator>.cast,(_BYTE *)(v3 + v5 + 1))" ]
"1000307" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000308" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000310" [label = "(<operator>.addition,v5 + 1)" ]
"1000315" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000319" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000320" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000321" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000325" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v10, v3 + v5 + 2) = 0)" ]
"1000326" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v10, v3 + v5 + 2))" ]
"1000327" [label = "(<operator>.cast,(_BYTE *)bin2hex(v10, v3 + v5 + 2))" ]
"1000328" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000329" [label = "(bin2hex,bin2hex(v10, v3 + v5 + 2))" ]
"1000331" [label = "(<operator>.addition,v3 + v5 + 2)" ]
"1000333" [label = "(<operator>.addition,v5 + 2)" ]
"1000337" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v3 + v5), v10))" ]
"1000340" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5))" ]
"1000341" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5))" ]
"1000342" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000343" [label = "(<operator>.addition,v3 + v5)" ]
"1000347" [label = "(RETURN,return v3 + v5 + 2;,return v3 + v5 + 2;)" ]
"1000348" [label = "(<operator>.addition,v3 + v5 + 2)" ]
"1000350" [label = "(<operator>.addition,v5 + 2)" ]
"1000109" [label = "(METHOD,udhcp_get_option)" ]
"1000353" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000121" -> "1000126" 
  "1000124" -> "1000129" 
  "1000126" -> "1000124" 
  "1000129" -> "1000307" 
  "1000129" -> "1000144" 
  "1000129" -> "1000170" 
  "1000140" -> "1000151" 
  "1000142" -> "1000140" 
  "1000143" -> "1000142" 
  "1000144" -> "1000145" 
  "1000145" -> "1000143" 
  "1000149" -> "1000307" 
  "1000149" -> "1000170" 
  "1000149" -> "1000156" 
  "1000150" -> "1000149" 
  "1000151" -> "1000152" 
  "1000152" -> "1000150" 
  "1000156" -> "1000158" 
  "1000158" -> "1000165" 
  "1000161" -> "1000144" 
  "1000161" -> "1000170" 
  "1000161" -> "1000315" 
  "1000162" -> "1000161" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000170" -> "1000176" 
  "1000170" -> "1000228" 
  "1000175" -> "1000181" 
  "1000175" -> "1000196" 
  "1000176" -> "1000175" 
  "1000181" -> "1000184" 
  "1000184" -> "1000189" 
  "1000187" -> "1000297" 
  "1000189" -> "1000187" 
  "1000195" -> "1000204" 
  "1000195" -> "1000211" 
  "1000196" -> "1000195" 
  "1000202" -> "1000207" 
  "1000202" -> "1000211" 
  "1000203" -> "1000202" 
  "1000204" -> "1000203" 
  "1000207" -> "1000211" 
  "1000211" -> "1000214" 
  "1000214" -> "1000219" 
  "1000217" -> "1000297" 
  "1000219" -> "1000217" 
  "1000224" -> "1000315" 
  "1000224" -> "1000236" 
  "1000225" -> "1000224" 
  "1000227" -> "1000225" 
  "1000228" -> "1000227" 
  "1000232" -> "1000248" 
  "1000234" -> "1000232" 
  "1000235" -> "1000234" 
  "1000236" -> "1000239" 
  "1000237" -> "1000235" 
  "1000239" -> "1000237" 
  "1000242" -> "1000253" 
  "1000244" -> "1000242" 
  "1000246" -> "1000244" 
  "1000248" -> "1000246" 
  "1000252" -> "1000315" 
  "1000252" -> "1000262" 
  "1000253" -> "1000252" 
  "1000259" -> "1000267" 
  "1000259" -> "1000307" 
  "1000261" -> "1000259" 
  "1000262" -> "1000261" 
  "1000266" -> "1000282" 
  "1000266" -> "1000292" 
  "1000267" -> "1000272" 
  "1000267" -> "1000266" 
  "1000270" -> "1000266" 
  "1000271" -> "1000270" 
  "1000272" -> "1000275" 
  "1000273" -> "1000271" 
  "1000275" -> "1000273" 
  "1000278" -> "1000292" 
  "1000280" -> "1000278" 
  "1000281" -> "1000280" 
  "1000282" -> "1000285" 
  "1000283" -> "1000281" 
  "1000285" -> "1000283" 
  "1000288" -> "1000297" 
  "1000290" -> "1000288" 
  "1000292" -> "1000290" 
  "1000297" -> "1000307" 
  "1000297" -> "1000144" 
  "1000297" -> "1000170" 
  "1000297" -> "1000315" 
  "1000304" -> "1000321" 
  "1000304" -> "1000315" 
  "1000305" -> "1000304" 
  "1000306" -> "1000305" 
  "1000307" -> "1000310" 
  "1000308" -> "1000306" 
  "1000310" -> "1000308" 
  "1000315" -> "1000321" 
  "1000319" -> "1000328" 
  "1000319" -> "1000350" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000325" -> "1000342" 
  "1000326" -> "1000325" 
  "1000327" -> "1000326" 
  "1000328" -> "1000333" 
  "1000329" -> "1000327" 
  "1000331" -> "1000329" 
  "1000333" -> "1000331" 
  "1000337" -> "1000350" 
  "1000340" -> "1000337" 
  "1000341" -> "1000340" 
  "1000342" -> "1000343" 
  "1000343" -> "1000341" 
  "1000347" -> "1000353" 
  "1000348" -> "1000347" 
  "1000350" -> "1000348" 
  "1000109" -> "1000121" 
}
