digraph udhcp_get_option {  
"1000131" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000133" [label = "(<operator>.addition,a1 + 108)" ]
"1000136" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000138" [label = "(<operator>.addition,a1 + 44)" ]
"1000141" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000143" [label = "(<operator>.addition,a1 + 240)" ]
"1000146" [label = "(<operator>.assignment,v5 = 388)" ]
"1000149" [label = "(<operator>.assignment,v6 = 0)" ]
"1000155" [label = "(<operator>.assignment,v7 = 1)" ]
"1000158" [label = "(<operator>.assignment,v8 = 0)" ]
"1000164" [label = "(<operator>.assignment,v9 = (unsigned __int8 *)(v4 + v7))" ]
"1000166" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000167" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000168" [label = "(<operator>.addition,v4 + v7)" ]
"1000171" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000173" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000174" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000175" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000176" [label = "(<operator>.addition,v4 + v7 - 1)" ]
"1000178" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000182" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7 - 1))" ]
"1000183" [label = "(<operator>.cast,(_BYTE *)(v4 + v7 - 1))" ]
"1000184" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000185" [label = "(<operator>.addition,v4 + v7 - 1)" ]
"1000187" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000191" [label = "(<operator>.preDecrement,--v8)" ]
"1000193" [label = "(<operator>.preIncrement,++v7)" ]
"1000196" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000197" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000199" [label = "(<operator>.addition,v8 + 1)" ]
"1000205" [label = "(<operator>.equals,v10 == 255)" ]
"1000210" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000211" [label = "(<operator>.and,v6 & 0x101)" ]
"1000216" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000219" [label = "(<operator>.assignment,v5 = 128)" ]
"1000222" [label = "(<operator>.assignment,v4 = v2)" ]
"1000227" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000228" [label = "(<operator>.and,v6 & 0x202)" ]
"1000233" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000236" [label = "(<operator>.assignment,v5 = 64)" ]
"1000239" [label = "(<operator>.assignment,v4 = v3)" ]
"1000243" [label = "(<operator>.assignment,v13 = 0)" ]
"1000247" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000248" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000249" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000252" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000255" [label = "(RETURN,return v13;,return v13;)" ]
"1000258" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000259" [label = "(<operator>.addition,v5 + v8)" ]
"1000264" [label = "(<operator>.assignment,v11 = *v9)" ]
"1000266" [label = "(<operator>.indirection,*v9)" ]
"1000268" [label = "(<operator>.assignment,v5 = v5 - v11 + v8 - 2)" ]
"1000270" [label = "(<operator>.subtraction,v5 - v11 + v8 - 2)" ]
"1000272" [label = "(<operator>.addition,v11 + v8 - 2)" ]
"1000274" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000278" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000283" [label = "(<operator>.equals,v10 == a2)" ]
"1000288" [label = "(<operator>.logicalAnd,v10 == 52 && *v9)" ]
"1000289" [label = "(<operator>.equals,v10 == 52)" ]
"1000292" [label = "(<operator>.indirection,*v9)" ]
"1000294" [label = "(<operators>.assignmentOr,v6 |= v9[1])" ]
"1000296" [label = "(<operator>.indirectIndexAccess,v9[1])" ]
"1000299" [label = "(<operator>.assignment,v4 = v4 + v11 - v8 + 2)" ]
"1000301" [label = "(<operator>.addition,v4 + v11 - v8 + 2)" ]
"1000303" [label = "(<operator>.subtraction,v11 - v8 + 2)" ]
"1000305" [label = "(<operator>.addition,v8 + 2)" ]
"1000309" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000314" [label = "(<operator>.logicalNot,!*v9)" ]
"1000315" [label = "(<operator>.indirection,*v9)" ]
"1000319" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000321" [label = "(RETURN,return 0;,return 0;)" ]
"1000323" [label = "(<operator>.assignment,v12 = v4 - v8)" ]
"1000325" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000329" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000330" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000331" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000335" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v15, v12 + 2) = 0)" ]
"1000336" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v15, v12 + 2))" ]
"1000337" [label = "(<operator>.cast,(_BYTE *)bin2hex(v15, v12 + 2))" ]
"1000338" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000339" [label = "(bin2hex,bin2hex(v15, v12 + 2))" ]
"1000341" [label = "(<operator>.addition,v12 + 2)" ]
"1000345" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(v9 - 1), v15))" ]
"1000348" [label = "(<operator>.indirection,*(v9 - 1))" ]
"1000349" [label = "(<operator>.subtraction,v9 - 1)" ]
"1000353" [label = "(RETURN,return v12 + 2;,return v12 + 2;)" ]
"1000354" [label = "(<operator>.addition,v12 + 2)" ]
"1000114" [label = "(METHOD,udhcp_get_option)" ]
"1000357" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000131" -> "1000138" 
  "1000133" -> "1000131" 
  "1000136" -> "1000143" 
  "1000138" -> "1000136" 
  "1000141" -> "1000146" 
  "1000143" -> "1000141" 
  "1000146" -> "1000149" 
  "1000149" -> "1000155" 
  "1000149" -> "1000315" 
  "1000155" -> "1000158" 
  "1000158" -> "1000167" 
  "1000158" -> "1000205" 
  "1000164" -> "1000175" 
  "1000166" -> "1000164" 
  "1000167" -> "1000168" 
  "1000168" -> "1000166" 
  "1000171" -> "1000184" 
  "1000173" -> "1000171" 
  "1000174" -> "1000173" 
  "1000175" -> "1000178" 
  "1000176" -> "1000174" 
  "1000178" -> "1000176" 
  "1000182" -> "1000205" 
  "1000182" -> "1000315" 
  "1000182" -> "1000191" 
  "1000183" -> "1000182" 
  "1000184" -> "1000187" 
  "1000185" -> "1000183" 
  "1000187" -> "1000185" 
  "1000191" -> "1000193" 
  "1000193" -> "1000199" 
  "1000196" -> "1000167" 
  "1000196" -> "1000205" 
  "1000196" -> "1000319" 
  "1000197" -> "1000196" 
  "1000199" -> "1000197" 
  "1000205" -> "1000211" 
  "1000205" -> "1000259" 
  "1000210" -> "1000216" 
  "1000210" -> "1000228" 
  "1000211" -> "1000210" 
  "1000216" -> "1000219" 
  "1000219" -> "1000222" 
  "1000222" -> "1000155" 
  "1000222" -> "1000315" 
  "1000227" -> "1000233" 
  "1000227" -> "1000243" 
  "1000228" -> "1000227" 
  "1000233" -> "1000236" 
  "1000236" -> "1000239" 
  "1000239" -> "1000155" 
  "1000239" -> "1000315" 
  "1000243" -> "1000249" 
  "1000247" -> "1000252" 
  "1000247" -> "1000255" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000252" -> "1000255" 
  "1000255" -> "1000357" 
  "1000258" -> "1000319" 
  "1000258" -> "1000266" 
  "1000259" -> "1000258" 
  "1000264" -> "1000274" 
  "1000266" -> "1000264" 
  "1000268" -> "1000278" 
  "1000270" -> "1000268" 
  "1000272" -> "1000270" 
  "1000274" -> "1000272" 
  "1000278" -> "1000319" 
  "1000278" -> "1000283" 
  "1000283" -> "1000315" 
  "1000283" -> "1000289" 
  "1000288" -> "1000296" 
  "1000288" -> "1000305" 
  "1000289" -> "1000288" 
  "1000289" -> "1000292" 
  "1000292" -> "1000288" 
  "1000294" -> "1000305" 
  "1000296" -> "1000294" 
  "1000299" -> "1000309" 
  "1000301" -> "1000299" 
  "1000303" -> "1000301" 
  "1000305" -> "1000303" 
  "1000309" -> "1000155" 
  "1000309" -> "1000315" 
  "1000309" -> "1000319" 
  "1000314" -> "1000319" 
  "1000314" -> "1000325" 
  "1000315" -> "1000314" 
  "1000319" -> "1000321" 
  "1000321" -> "1000357" 
  "1000323" -> "1000331" 
  "1000325" -> "1000323" 
  "1000329" -> "1000338" 
  "1000329" -> "1000354" 
  "1000330" -> "1000329" 
  "1000331" -> "1000330" 
  "1000335" -> "1000349" 
  "1000336" -> "1000335" 
  "1000337" -> "1000336" 
  "1000338" -> "1000341" 
  "1000339" -> "1000337" 
  "1000341" -> "1000339" 
  "1000345" -> "1000354" 
  "1000348" -> "1000345" 
  "1000349" -> "1000348" 
  "1000353" -> "1000357" 
  "1000354" -> "1000353" 
  "1000114" -> "1000133" 
}
