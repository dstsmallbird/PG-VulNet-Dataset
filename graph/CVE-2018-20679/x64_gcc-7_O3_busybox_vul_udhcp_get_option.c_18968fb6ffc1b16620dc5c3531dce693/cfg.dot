digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000123" [label = "(<operator>.addition,a1 + 240)" ]
"1000128" [label = "(<operator>.assignment,LODWORD(v8) = 388)" ]
"1000129" [label = "(LODWORD,LODWORD(v8))" ]
"1000132" [label = "(<operator>.assignment,LODWORD(v8) = 64)" ]
"1000133" [label = "(LODWORD,LODWORD(v8))" ]
"1000143" [label = "(<operator>.assignment,v9 = *v6)" ]
"1000145" [label = "(<operator>.indirection,*v6)" ]
"1000148" [label = "(<operator>.logicalNot,!(_BYTE)v9)" ]
"1000149" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000150" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000153" [label = "(<operator>.assignment,LODWORD(v8) = v8 - 1)" ]
"1000154" [label = "(LODWORD,LODWORD(v8))" ]
"1000156" [label = "(<operator>.subtraction,v8 - 1)" ]
"1000159" [label = "(<operator>.preIncrement,++v6)" ]
"1000163" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000164" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000165" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000170" [label = "(<operator>.logicalOr,(_DWORD)v8 == 1 || (v10 = v6[1] + 2, v8 = (unsigned int)(v8 - v10), (int)v8 < 0))" ]
"1000171" [label = "(<operator>.equals,(_DWORD)v8 == 1)" ]
"1000172" [label = "(<operator>.cast,(_DWORD)v8)" ]
"1000173" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000177" [label = "(<operator>.assignment,v10 = v6[1] + 2)" ]
"1000179" [label = "(<operator>.addition,v6[1] + 2)" ]
"1000180" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000185" [label = "(<operator>.assignment,v8 = (unsigned int)(v8 - v10))" ]
"1000187" [label = "(<operator>.cast,(unsigned int)(v8 - v10))" ]
"1000188" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000189" [label = "(<operator>.subtraction,v8 - v10)" ]
"1000192" [label = "(<operator>.lessThan,(int)v8 < 0)" ]
"1000193" [label = "(<operator>.cast,(int)v8)" ]
"1000194" [label = "(UNKNOWN,int,int)" ]
"1000200" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v8, v9, v7, a6))" ]
"1000201" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000202" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000209" [label = "(RETURN,return (unsigned __int8 *)v11;,return (unsigned __int8 *)v11;)" ]
"1000210" [label = "(<operator>.cast,(unsigned __int8 *)v11)" ]
"1000211" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000213" [label = "(<operator>.assignment,a6 = (unsigned __int8)v9)" ]
"1000215" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000216" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000219" [label = "(<operator>.equals,(unsigned __int8)v9 == a2)" ]
"1000220" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000221" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000226" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000227" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000228" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000231" [label = "(log_option_part_0,log_option_part_0(\"option found\", v6, v8, v9, v7))" ]
"1000237" [label = "(RETURN,return v6 + 2;,return v6 + 2;)" ]
"1000238" [label = "(<operator>.addition,v6 + 2)" ]
"1000242" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000247" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000248" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000249" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000253" [label = "(<operator>.assignment,LODWORD(v9) = v6[2])" ]
"1000254" [label = "(LODWORD,LODWORD(v9))" ]
"1000256" [label = "(<operator>.indirectIndexAccess,v6[2])" ]
"1000259" [label = "(<operator>.assignment,v7 = (unsigned int)v9 | (unsigned int)v7)" ]
"1000261" [label = "(<operator>.or,(unsigned int)v9 | (unsigned int)v7)" ]
"1000262" [label = "(<operator>.cast,(unsigned int)v9)" ]
"1000263" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000265" [label = "(<operator>.cast,(unsigned int)v7)" ]
"1000266" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000268" [label = "(<operator>.assignmentPlus,v6 += v10)" ]
"1000273" [label = "(<operator>.logicalNot,!(_DWORD)v8)" ]
"1000274" [label = "(<operator>.cast,(_DWORD)v8)" ]
"1000275" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000279" [label = "(<operator>.notEquals,(v7 & 0x101) != 1)" ]
"1000280" [label = "(<operator>.and,v7 & 0x101)" ]
"1000285" [label = "(<operator>.assignment,v7 = (unsigned int)v7 | 0x101)" ]
"1000287" [label = "(<operator>.or,(unsigned int)v7 | 0x101)" ]
"1000288" [label = "(<operator>.cast,(unsigned int)v7)" ]
"1000289" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000292" [label = "(<operator>.assignment,v6 = a1 + 108)" ]
"1000294" [label = "(<operator>.addition,a1 + 108)" ]
"1000297" [label = "(<operator>.assignment,LODWORD(v8) = 128)" ]
"1000298" [label = "(LODWORD,LODWORD(v8))" ]
"1000302" [label = "(<operator>.notEquals,(v7 & 0x202) != 2)" ]
"1000303" [label = "(<operator>.and,v7 & 0x202)" ]
"1000308" [label = "(<operator>.assignment,v7 = (unsigned int)v7 | 0x202)" ]
"1000310" [label = "(<operator>.or,(unsigned int)v7 | 0x202)" ]
"1000311" [label = "(<operator>.cast,(unsigned int)v7)" ]
"1000312" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000315" [label = "(<operator>.assignment,v6 = a1 + 44)" ]
"1000317" [label = "(<operator>.addition,a1 + 44)" ]
"1000322" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 2)" ]
"1000323" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000324" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000327" [label = "(RETURN,return (unsigned __int8 *)v11;,return (unsigned __int8 *)v11;)" ]
"1000328" [label = "(<operator>.cast,(unsigned __int8 *)v11)" ]
"1000329" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000331" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v8, v9, v7, a6))" ]
"1000332" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000333" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000341" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000129" 
  "1000123" -> "1000121" 
  "1000128" -> "1000145" 
  "1000128" -> "1000280" 
  "1000128" -> "1000303" 
  "1000129" -> "1000128" 
  "1000132" -> "1000145" 
  "1000132" -> "1000280" 
  "1000132" -> "1000303" 
  "1000133" -> "1000132" 
  "1000143" -> "1000150" 
  "1000145" -> "1000143" 
  "1000148" -> "1000165" 
  "1000148" -> "1000154" 
  "1000149" -> "1000148" 
  "1000150" -> "1000149" 
  "1000153" -> "1000159" 
  "1000154" -> "1000156" 
  "1000156" -> "1000153" 
  "1000159" -> "1000275" 
  "1000163" -> "1000173" 
  "1000163" -> "1000280" 
  "1000163" -> "1000303" 
  "1000163" -> "1000324" 
  "1000164" -> "1000163" 
  "1000165" -> "1000164" 
  "1000170" -> "1000202" 
  "1000170" -> "1000216" 
  "1000171" -> "1000170" 
  "1000171" -> "1000180" 
  "1000172" -> "1000171" 
  "1000173" -> "1000172" 
  "1000177" -> "1000188" 
  "1000179" -> "1000177" 
  "1000180" -> "1000179" 
  "1000185" -> "1000194" 
  "1000187" -> "1000185" 
  "1000188" -> "1000189" 
  "1000189" -> "1000187" 
  "1000192" -> "1000170" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000200" -> "1000211" 
  "1000201" -> "1000200" 
  "1000202" -> "1000201" 
  "1000209" -> "1000341" 
  "1000210" -> "1000209" 
  "1000211" -> "1000210" 
  "1000213" -> "1000221" 
  "1000215" -> "1000213" 
  "1000216" -> "1000215" 
  "1000219" -> "1000228" 
  "1000219" -> "1000242" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000226" -> "1000231" 
  "1000226" -> "1000238" 
  "1000227" -> "1000226" 
  "1000228" -> "1000227" 
  "1000231" -> "1000238" 
  "1000237" -> "1000341" 
  "1000238" -> "1000237" 
  "1000242" -> "1000249" 
  "1000242" -> "1000268" 
  "1000247" -> "1000254" 
  "1000247" -> "1000268" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000253" -> "1000263" 
  "1000254" -> "1000256" 
  "1000256" -> "1000253" 
  "1000259" -> "1000268" 
  "1000261" -> "1000259" 
  "1000262" -> "1000266" 
  "1000263" -> "1000262" 
  "1000265" -> "1000261" 
  "1000266" -> "1000265" 
  "1000268" -> "1000275" 
  "1000273" -> "1000145" 
  "1000273" -> "1000280" 
  "1000273" -> "1000202" 
  "1000274" -> "1000273" 
  "1000275" -> "1000274" 
  "1000279" -> "1000303" 
  "1000279" -> "1000324" 
  "1000279" -> "1000289" 
  "1000280" -> "1000279" 
  "1000285" -> "1000294" 
  "1000287" -> "1000285" 
  "1000288" -> "1000287" 
  "1000289" -> "1000288" 
  "1000292" -> "1000298" 
  "1000294" -> "1000292" 
  "1000297" -> "1000145" 
  "1000297" -> "1000280" 
  "1000297" -> "1000303" 
  "1000298" -> "1000297" 
  "1000302" -> "1000324" 
  "1000302" -> "1000312" 
  "1000303" -> "1000302" 
  "1000308" -> "1000317" 
  "1000310" -> "1000308" 
  "1000311" -> "1000310" 
  "1000312" -> "1000311" 
  "1000315" -> "1000133" 
  "1000317" -> "1000315" 
  "1000322" -> "1000329" 
  "1000322" -> "1000333" 
  "1000323" -> "1000322" 
  "1000324" -> "1000323" 
  "1000327" -> "1000341" 
  "1000328" -> "1000327" 
  "1000329" -> "1000328" 
  "1000331" -> "1000341" 
  "1000332" -> "1000331" 
  "1000333" -> "1000332" 
  "1000107" -> "1000123" 
}
