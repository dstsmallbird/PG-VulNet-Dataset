digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v2 = 0)" ]
"1000124" [label = "(<operator>.assignment,v3 = 388)" ]
"1000127" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000129" [label = "(<operator>.addition,a1 + 240)" ]
"1000139" [label = "(<operator>.assignment,i = *v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000143" [label = "(<operator>.assignment,i = *v4)" ]
"1000145" [label = "(<operator>.indirection,*v4)" ]
"1000149" [label = "(<operator>.logicalNot,!i)" ]
"1000152" [label = "(<operator>.preDecrement,--v3)" ]
"1000154" [label = "(<operator>.preIncrement,++v4)" ]
"1000158" [label = "(<operator>.equals,i == 255)" ]
"1000163" [label = "(<operator>.equals,v3 == 1)" ]
"1000167" [label = "(<operator>.assignment,v8 = v4[1] + 2)" ]
"1000169" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000170" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000174" [label = "(<operator>.assignmentMinus,v3 -= v8)" ]
"1000178" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000183" [label = "(<operator>.equals,a2 == i)" ]
"1000187" [label = "(<operator>.assignment,v9 = v4)" ]
"1000191" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000192" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000197" [label = "(<operator>.assignment,v6 = 0)" ]
"1000200" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000202" [label = "(RETURN,return v6;,return v6;)" ]
"1000204" [label = "(<operator>.assignment,v6 = v4 + 2)" ]
"1000206" [label = "(<operator>.addition,v4 + 2)" ]
"1000209" [label = "(log_option,log_option(\"option found\", v9))" ]
"1000212" [label = "(RETURN,return v6;,return v6;)" ]
"1000215" [label = "(<operator>.equals,i == 52)" ]
"1000220" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000223" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000225" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000228" [label = "(<operator>.assignmentPlus,v4 += v8)" ]
"1000233" [label = "(<operator>.assignmentPlus,v4 += v8)" ]
"1000238" [label = "(<operator>.logicalNot,!v3)" ]
"1000241" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000243" [label = "(<operator>.addition,a1 + 108)" ]
"1000247" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000248" [label = "(<operator>.and,v2 & 0x101)" ]
"1000253" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000256" [label = "(<operator>.assignment,v3 = 128)" ]
"1000261" [label = "(<operator>.assignment,v7 = (v2 & 0x202) != 2)" ]
"1000263" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000264" [label = "(<operator>.and,v2 & 0x202)" ]
"1000268" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000272" [label = "(<operator>.logicalNot,!v7)" ]
"1000275" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000277" [label = "(<operator>.addition,a1 + 44)" ]
"1000280" [label = "(<operator>.assignment,v3 = 64)" ]
"1000285" [label = "(<operator>.assignment,v6 = 0)" ]
"1000289" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000290" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000291" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000294" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000297" [label = "(RETURN,return v6;,return v6;)" ]
"1000109" [label = "(METHOD,udhcp_get_option)" ]
"1000299" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000124" 
  "1000124" -> "1000129" 
  "1000127" -> "1000141" 
  "1000127" -> "1000264" 
  "1000127" -> "1000285" 
  "1000129" -> "1000127" 
  "1000139" -> "1000149" 
  "1000141" -> "1000139" 
  "1000143" -> "1000149" 
  "1000145" -> "1000143" 
  "1000149" -> "1000152" 
  "1000149" -> "1000158" 
  "1000152" -> "1000154" 
  "1000154" -> "1000238" 
  "1000158" -> "1000243" 
  "1000158" -> "1000264" 
  "1000158" -> "1000285" 
  "1000158" -> "1000163" 
  "1000163" -> "1000197" 
  "1000163" -> "1000170" 
  "1000167" -> "1000174" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000174" -> "1000178" 
  "1000178" -> "1000197" 
  "1000178" -> "1000183" 
  "1000183" -> "1000187" 
  "1000183" -> "1000215" 
  "1000187" -> "1000192" 
  "1000191" -> "1000197" 
  "1000191" -> "1000206" 
  "1000192" -> "1000191" 
  "1000197" -> "1000200" 
  "1000200" -> "1000202" 
  "1000202" -> "1000299" 
  "1000204" -> "1000209" 
  "1000206" -> "1000204" 
  "1000209" -> "1000212" 
  "1000212" -> "1000299" 
  "1000215" -> "1000220" 
  "1000215" -> "1000233" 
  "1000220" -> "1000225" 
  "1000220" -> "1000228" 
  "1000223" -> "1000228" 
  "1000225" -> "1000223" 
  "1000228" -> "1000238" 
  "1000233" -> "1000238" 
  "1000238" -> "1000197" 
  "1000238" -> "1000145" 
  "1000241" -> "1000248" 
  "1000243" -> "1000241" 
  "1000247" -> "1000253" 
  "1000247" -> "1000264" 
  "1000247" -> "1000285" 
  "1000248" -> "1000247" 
  "1000253" -> "1000256" 
  "1000256" -> "1000141" 
  "1000256" -> "1000264" 
  "1000256" -> "1000285" 
  "1000256" -> "1000141" 
  "1000256" -> "1000264" 
  "1000261" -> "1000268" 
  "1000263" -> "1000261" 
  "1000264" -> "1000263" 
  "1000268" -> "1000272" 
  "1000272" -> "1000277" 
  "1000272" -> "1000285" 
  "1000275" -> "1000280" 
  "1000277" -> "1000275" 
  "1000280" -> "1000141" 
  "1000280" -> "1000264" 
  "1000280" -> "1000285" 
  "1000285" -> "1000291" 
  "1000289" -> "1000294" 
  "1000289" -> "1000297" 
  "1000290" -> "1000289" 
  "1000291" -> "1000290" 
  "1000294" -> "1000297" 
  "1000297" -> "1000299" 
  "1000109" -> "1000121" 
}
