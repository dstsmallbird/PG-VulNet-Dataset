digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000131" [label = "(<operator>.addition,a1 + 108)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000136" [label = "(<operator>.addition,a1 + 44)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000153" [label = "(<operator>.assignment,v7 = 1)" ]
"1000156" [label = "(<operator>.assignment,v8 = 0)" ]
"1000162" [label = "(<operator>.assignment,v9 = (unsigned __int8 *)(v4 + v7))" ]
"1000164" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000165" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000166" [label = "(<operator>.addition,v4 + v7)" ]
"1000169" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000171" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000172" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000173" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000174" [label = "(<operator>.addition,v4 + v7 - 1)" ]
"1000176" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000180" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7 - 1))" ]
"1000181" [label = "(<operator>.cast,(_BYTE *)(v4 + v7 - 1))" ]
"1000182" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000183" [label = "(<operator>.addition,v4 + v7 - 1)" ]
"1000185" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000189" [label = "(<operator>.preDecrement,--v8)" ]
"1000191" [label = "(<operator>.preIncrement,++v7)" ]
"1000194" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000195" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000197" [label = "(<operator>.addition,v8 + 1)" ]
"1000203" [label = "(<operator>.equals,v10 == 255)" ]
"1000208" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000209" [label = "(<operator>.and,v6 & 0x101)" ]
"1000214" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000217" [label = "(<operator>.assignment,v5 = 128)" ]
"1000220" [label = "(<operator>.assignment,v4 = v2)" ]
"1000225" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000226" [label = "(<operator>.and,v6 & 0x202)" ]
"1000231" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000234" [label = "(<operator>.assignment,v5 = 64)" ]
"1000237" [label = "(<operator>.assignment,v4 = v3)" ]
"1000241" [label = "(<operator>.assignment,v12 = 0)" ]
"1000245" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000246" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000247" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000250" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000253" [label = "(RETURN,return v12;,return v12;)" ]
"1000256" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000257" [label = "(<operator>.addition,v5 + v8)" ]
"1000262" [label = "(<operator>.assignment,v11 = *v9)" ]
"1000264" [label = "(<operator>.indirection,*v9)" ]
"1000266" [label = "(<operator>.assignment,v5 = v5 - v11 + v8 - 2)" ]
"1000268" [label = "(<operator>.subtraction,v5 - v11 + v8 - 2)" ]
"1000270" [label = "(<operator>.addition,v11 + v8 - 2)" ]
"1000272" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000276" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000281" [label = "(<operator>.equals,v10 == a2)" ]
"1000286" [label = "(<operator>.logicalAnd,v10 == 52 && *v9)" ]
"1000287" [label = "(<operator>.equals,v10 == 52)" ]
"1000290" [label = "(<operator>.indirection,*v9)" ]
"1000292" [label = "(<operators>.assignmentOr,v6 |= v9[1])" ]
"1000294" [label = "(<operator>.indirectIndexAccess,v9[1])" ]
"1000297" [label = "(<operator>.assignment,v4 = v4 + v11 - v8 + 2)" ]
"1000299" [label = "(<operator>.addition,v4 + v11 - v8 + 2)" ]
"1000301" [label = "(<operator>.subtraction,v11 - v8 + 2)" ]
"1000303" [label = "(<operator>.addition,v8 + 2)" ]
"1000307" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000312" [label = "(<operator>.logicalNot,!*v9)" ]
"1000313" [label = "(<operator>.indirection,*v9)" ]
"1000317" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000319" [label = "(RETURN,return 0;,return 0;)" ]
"1000322" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000323" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000324" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000328" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v4 - v8 + 2) = 0)" ]
"1000329" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v4 - v8 + 2))" ]
"1000330" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v4 - v8 + 2))" ]
"1000331" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000332" [label = "(bin2hex,bin2hex(v14, v4 - v8 + 2))" ]
"1000334" [label = "(<operator>.subtraction,v4 - v8 + 2)" ]
"1000336" [label = "(<operator>.addition,v8 + 2)" ]
"1000340" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(v9 - 1), v14))" ]
"1000343" [label = "(<operator>.indirection,*(v9 - 1))" ]
"1000344" [label = "(<operator>.subtraction,v9 - 1)" ]
"1000348" [label = "(RETURN,return v4 - v8 + 2;,return v4 - v8 + 2;)" ]
"1000349" [label = "(<operator>.subtraction,v4 - v8 + 2)" ]
"1000351" [label = "(<operator>.addition,v8 + 2)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000354" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000153" 
  "1000147" -> "1000313" 
  "1000153" -> "1000156" 
  "1000156" -> "1000165" 
  "1000156" -> "1000203" 
  "1000162" -> "1000173" 
  "1000164" -> "1000162" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000169" -> "1000182" 
  "1000171" -> "1000169" 
  "1000172" -> "1000171" 
  "1000173" -> "1000176" 
  "1000174" -> "1000172" 
  "1000176" -> "1000174" 
  "1000180" -> "1000203" 
  "1000180" -> "1000313" 
  "1000180" -> "1000189" 
  "1000181" -> "1000180" 
  "1000182" -> "1000185" 
  "1000183" -> "1000181" 
  "1000185" -> "1000183" 
  "1000189" -> "1000191" 
  "1000191" -> "1000197" 
  "1000194" -> "1000165" 
  "1000194" -> "1000203" 
  "1000194" -> "1000317" 
  "1000195" -> "1000194" 
  "1000197" -> "1000195" 
  "1000203" -> "1000209" 
  "1000203" -> "1000257" 
  "1000208" -> "1000214" 
  "1000208" -> "1000226" 
  "1000209" -> "1000208" 
  "1000214" -> "1000217" 
  "1000217" -> "1000220" 
  "1000220" -> "1000153" 
  "1000220" -> "1000313" 
  "1000225" -> "1000231" 
  "1000225" -> "1000241" 
  "1000226" -> "1000225" 
  "1000231" -> "1000234" 
  "1000234" -> "1000237" 
  "1000237" -> "1000153" 
  "1000237" -> "1000313" 
  "1000241" -> "1000247" 
  "1000245" -> "1000250" 
  "1000245" -> "1000253" 
  "1000246" -> "1000245" 
  "1000247" -> "1000246" 
  "1000250" -> "1000253" 
  "1000253" -> "1000354" 
  "1000256" -> "1000317" 
  "1000256" -> "1000264" 
  "1000257" -> "1000256" 
  "1000262" -> "1000272" 
  "1000264" -> "1000262" 
  "1000266" -> "1000276" 
  "1000268" -> "1000266" 
  "1000270" -> "1000268" 
  "1000272" -> "1000270" 
  "1000276" -> "1000317" 
  "1000276" -> "1000281" 
  "1000281" -> "1000313" 
  "1000281" -> "1000287" 
  "1000286" -> "1000294" 
  "1000286" -> "1000303" 
  "1000287" -> "1000286" 
  "1000287" -> "1000290" 
  "1000290" -> "1000286" 
  "1000292" -> "1000303" 
  "1000294" -> "1000292" 
  "1000297" -> "1000307" 
  "1000299" -> "1000297" 
  "1000301" -> "1000299" 
  "1000303" -> "1000301" 
  "1000307" -> "1000153" 
  "1000307" -> "1000313" 
  "1000307" -> "1000317" 
  "1000312" -> "1000324" 
  "1000312" -> "1000317" 
  "1000313" -> "1000312" 
  "1000317" -> "1000319" 
  "1000319" -> "1000354" 
  "1000322" -> "1000331" 
  "1000322" -> "1000351" 
  "1000323" -> "1000322" 
  "1000324" -> "1000323" 
  "1000328" -> "1000344" 
  "1000329" -> "1000328" 
  "1000330" -> "1000329" 
  "1000331" -> "1000336" 
  "1000332" -> "1000330" 
  "1000334" -> "1000332" 
  "1000336" -> "1000334" 
  "1000340" -> "1000351" 
  "1000343" -> "1000340" 
  "1000344" -> "1000343" 
  "1000348" -> "1000354" 
  "1000349" -> "1000348" 
  "1000351" -> "1000349" 
  "1000113" -> "1000131" 
}
