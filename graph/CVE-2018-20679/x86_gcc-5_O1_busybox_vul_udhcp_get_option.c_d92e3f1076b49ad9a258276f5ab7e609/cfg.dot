digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000119" [label = "(<operator>.addition,a1 + 240)" ]
"1000122" [label = "(<operator>.assignment,v3 = 0)" ]
"1000126" [label = "(<operator>.assignment,i = 388)" ]
"1000129" [label = "(<operator>.assignment,i = 64)" ]
"1000139" [label = "(<operator>.assignment,v6 = *v2)" ]
"1000141" [label = "(<operator>.indirection,*v2)" ]
"1000144" [label = "(<operator>.logicalNot,!*v2)" ]
"1000145" [label = "(<operator>.indirection,*v2)" ]
"1000148" [label = "(<operator>.preDecrement,--i)" ]
"1000150" [label = "(<operator>.preIncrement,++v2)" ]
"1000154" [label = "(<operator>.equals,v6 == 0xFF)" ]
"1000159" [label = "(<operator>.logicalOr,i <= 1 || (v7 = v2[1] + 2, i -= v7, i < 0))" ]
"1000160" [label = "(<operator>.lessEqualsThan,i <= 1)" ]
"1000164" [label = "(<operator>.assignment,v7 = v2[1] + 2)" ]
"1000166" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000167" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000172" [label = "(<operator>.assignmentMinus,i -= v7)" ]
"1000175" [label = "(<operator>.lessThan,i < 0)" ]
"1000180" [label = "(bb_error_msg,bb_error_msg((char *)&GLOBAL_OFFSET_TABLE_ - 444868))" ]
"1000181" [label = "(<operator>.subtraction,(char *)&GLOBAL_OFFSET_TABLE_ - 444868)" ]
"1000182" [label = "(<operator>.cast,(char *)&GLOBAL_OFFSET_TABLE_)" ]
"1000183" [label = "(UNKNOWN,char *,char *)" ]
"1000184" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000187" [label = "(RETURN,return 0;,return 0;)" ]
"1000190" [label = "(<operator>.equals,a2 == v6)" ]
"1000194" [label = "(log_option,log_option())" ]
"1000195" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000196" [label = "(<operator>.addition,v2 + 2)" ]
"1000200" [label = "(<operator>.logicalAnd,v7 > 2 && v6 == 52)" ]
"1000201" [label = "(<operator>.greaterThan,v7 > 2)" ]
"1000204" [label = "(<operator>.equals,v6 == 52)" ]
"1000207" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000209" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000212" [label = "(<operator>.assignmentPlus,v2 += v7)" ]
"1000217" [label = "(<operator>.lessEqualsThan,i <= 0)" ]
"1000222" [label = "(<operator>.notEquals,(v3 & 0x101) != 1)" ]
"1000223" [label = "(<operator>.and,v3 & 0x101)" ]
"1000228" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000231" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000233" [label = "(<operator>.addition,a1 + 108)" ]
"1000236" [label = "(<operator>.assignment,i = 128)" ]
"1000240" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000241" [label = "(<operator>.and,v3 & 0x202)" ]
"1000246" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000249" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000251" [label = "(<operator>.addition,a1 + 44)" ]
"1000254" [label = "(<operator>.assignment,result = 0)" ]
"1000258" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000259" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000260" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000264" [label = "(bb_error_msg,bb_error_msg(&GLOBAL_OFFSET_TABLE_ - 44184))" ]
"1000265" [label = "(<operator>.subtraction,&GLOBAL_OFFSET_TABLE_ - 44184)" ]
"1000266" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000269" [label = "(<operator>.assignment,result = 0)" ]
"1000272" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000274" [label = "(METHOD_RETURN,__usercall)" ]
  "1000117" -> "1000122" 
  "1000119" -> "1000117" 
  "1000122" -> "1000126" 
  "1000126" -> "1000141" 
  "1000126" -> "1000223" 
  "1000126" -> "1000241" 
  "1000129" -> "1000141" 
  "1000129" -> "1000223" 
  "1000129" -> "1000241" 
  "1000139" -> "1000145" 
  "1000141" -> "1000139" 
  "1000144" -> "1000148" 
  "1000144" -> "1000154" 
  "1000145" -> "1000144" 
  "1000148" -> "1000150" 
  "1000150" -> "1000217" 
  "1000154" -> "1000223" 
  "1000154" -> "1000241" 
  "1000154" -> "1000254" 
  "1000154" -> "1000160" 
  "1000159" -> "1000183" 
  "1000159" -> "1000190" 
  "1000160" -> "1000159" 
  "1000160" -> "1000167" 
  "1000164" -> "1000172" 
  "1000166" -> "1000164" 
  "1000167" -> "1000166" 
  "1000172" -> "1000175" 
  "1000175" -> "1000159" 
  "1000180" -> "1000187" 
  "1000181" -> "1000180" 
  "1000182" -> "1000181" 
  "1000183" -> "1000184" 
  "1000184" -> "1000182" 
  "1000187" -> "1000274" 
  "1000190" -> "1000194" 
  "1000190" -> "1000201" 
  "1000194" -> "1000196" 
  "1000195" -> "1000274" 
  "1000196" -> "1000195" 
  "1000200" -> "1000209" 
  "1000200" -> "1000212" 
  "1000201" -> "1000200" 
  "1000201" -> "1000204" 
  "1000204" -> "1000200" 
  "1000207" -> "1000212" 
  "1000209" -> "1000207" 
  "1000212" -> "1000217" 
  "1000217" -> "1000141" 
  "1000217" -> "1000223" 
  "1000217" -> "1000183" 
  "1000222" -> "1000241" 
  "1000222" -> "1000254" 
  "1000222" -> "1000228" 
  "1000223" -> "1000222" 
  "1000228" -> "1000233" 
  "1000231" -> "1000236" 
  "1000233" -> "1000231" 
  "1000236" -> "1000141" 
  "1000236" -> "1000223" 
  "1000236" -> "1000241" 
  "1000240" -> "1000254" 
  "1000240" -> "1000246" 
  "1000241" -> "1000240" 
  "1000246" -> "1000251" 
  "1000249" -> "1000129" 
  "1000251" -> "1000249" 
  "1000254" -> "1000260" 
  "1000258" -> "1000266" 
  "1000258" -> "1000272" 
  "1000259" -> "1000258" 
  "1000260" -> "1000259" 
  "1000264" -> "1000269" 
  "1000265" -> "1000264" 
  "1000266" -> "1000265" 
  "1000269" -> "1000272" 
  "1000272" -> "1000274" 
  "1000107" -> "1000119" 
}
