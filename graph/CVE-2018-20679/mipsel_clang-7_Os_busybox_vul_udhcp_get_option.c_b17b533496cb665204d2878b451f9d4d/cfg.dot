digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000131" [label = "(<operator>.addition,a1 + 44)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000136" [label = "(<operator>.addition,a1 + 108)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000153" [label = "(<operator>.assignment,v7 = 0)" ]
"1000156" [label = "(<operator>.assignment,v8 = 0)" ]
"1000162" [label = "(<operator>.assignment,v9 = v4 + v7)" ]
"1000164" [label = "(<operator>.addition,v4 + v7)" ]
"1000167" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7))" ]
"1000169" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7))" ]
"1000170" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000171" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000172" [label = "(<operator>.addition,v4 + v7)" ]
"1000176" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7))" ]
"1000177" [label = "(<operator>.cast,(_BYTE *)(v4 + v7))" ]
"1000178" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000179" [label = "(<operator>.addition,v4 + v7)" ]
"1000183" [label = "(<operator>.preDecrement,--v8)" ]
"1000185" [label = "(<operator>.preIncrement,++v7)" ]
"1000188" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000189" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000191" [label = "(<operator>.addition,v8 + 1)" ]
"1000197" [label = "(<operator>.equals,v10 == 255)" ]
"1000202" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000203" [label = "(<operator>.and,v6 & 0x101)" ]
"1000208" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000211" [label = "(<operator>.assignment,v5 = 128)" ]
"1000214" [label = "(<operator>.assignment,v4 = v3)" ]
"1000219" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000220" [label = "(<operator>.and,v6 & 0x202)" ]
"1000225" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000228" [label = "(<operator>.assignment,v5 = 64)" ]
"1000231" [label = "(<operator>.assignment,v4 = v2)" ]
"1000235" [label = "(<operator>.assignment,v12 = 0)" ]
"1000239" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000240" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000241" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000244" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000250" [label = "(<operator>.logicalOr,v5 + v8 < 2 || (v11 = *(unsigned __int8 *)(v9 + 1), v5 = v5 - v11 + v8 - 2, v5 < 0))" ]
"1000251" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000252" [label = "(<operator>.addition,v5 + v8)" ]
"1000257" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v9 + 1))" ]
"1000259" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 1))" ]
"1000260" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 1))" ]
"1000261" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000262" [label = "(<operator>.addition,v9 + 1)" ]
"1000266" [label = "(<operator>.assignment,v5 = v5 - v11 + v8 - 2)" ]
"1000268" [label = "(<operator>.subtraction,v5 - v11 + v8 - 2)" ]
"1000270" [label = "(<operator>.addition,v11 + v8 - 2)" ]
"1000272" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000275" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000280" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, 255, 1))" ]
"1000285" [label = "(RETURN,return 0;,return 0;)" ]
"1000288" [label = "(<operator>.notEquals,v10 != a2)" ]
"1000293" [label = "(<operator>.logicalAnd,v10 == 52 && *(_BYTE *)(v9 + 1))" ]
"1000294" [label = "(<operator>.equals,v10 == 52)" ]
"1000297" [label = "(<operator>.indirection,*(_BYTE *)(v9 + 1))" ]
"1000298" [label = "(<operator>.cast,(_BYTE *)(v9 + 1))" ]
"1000299" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000300" [label = "(<operator>.addition,v9 + 1)" ]
"1000303" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v9 + 2))" ]
"1000305" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 2))" ]
"1000306" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 2))" ]
"1000307" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000308" [label = "(<operator>.addition,v9 + 2)" ]
"1000311" [label = "(<operator>.assignment,v4 = v4 + v11 - v8 + 2)" ]
"1000313" [label = "(<operator>.addition,v4 + v11 - v8 + 2)" ]
"1000315" [label = "(<operator>.subtraction,v11 - v8 + 2)" ]
"1000317" [label = "(<operator>.addition,v8 + 2)" ]
"1000322" [label = "(<operator>.greaterThan,v5 > 0)" ]
"1000327" [label = "(<operator>.assignment,v14 = v4 - v8)" ]
"1000329" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000332" [label = "(log_option,log_option(\"option found\", v4 - v8, 255, 1))" ]
"1000334" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000339" [label = "(<operator>.assignment,v12 = v14 + 2)" ]
"1000341" [label = "(<operator>.addition,v14 + 2)" ]
"1000344" [label = "(RETURN,return v12;,return v12;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000346" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000346" 
  "1000147" -> "1000153" 
  "1000153" -> "1000156" 
  "1000156" -> "1000164" 
  "1000156" -> "1000197" 
  "1000162" -> "1000171" 
  "1000164" -> "1000162" 
  "1000167" -> "1000178" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000176" -> "1000346" 
  "1000176" -> "1000197" 
  "1000176" -> "1000183" 
  "1000177" -> "1000176" 
  "1000178" -> "1000179" 
  "1000179" -> "1000177" 
  "1000183" -> "1000185" 
  "1000185" -> "1000191" 
  "1000188" -> "1000164" 
  "1000188" -> "1000197" 
  "1000188" -> "1000280" 
  "1000189" -> "1000188" 
  "1000191" -> "1000189" 
  "1000197" -> "1000203" 
  "1000197" -> "1000252" 
  "1000202" -> "1000208" 
  "1000202" -> "1000220" 
  "1000203" -> "1000202" 
  "1000208" -> "1000211" 
  "1000211" -> "1000214" 
  "1000214" -> "1000322" 
  "1000219" -> "1000225" 
  "1000219" -> "1000235" 
  "1000220" -> "1000219" 
  "1000225" -> "1000228" 
  "1000228" -> "1000231" 
  "1000231" -> "1000322" 
  "1000235" -> "1000241" 
  "1000239" -> "1000244" 
  "1000239" -> "1000344" 
  "1000240" -> "1000239" 
  "1000241" -> "1000240" 
  "1000244" -> "1000344" 
  "1000250" -> "1000280" 
  "1000250" -> "1000288" 
  "1000251" -> "1000250" 
  "1000251" -> "1000261" 
  "1000252" -> "1000251" 
  "1000257" -> "1000272" 
  "1000259" -> "1000257" 
  "1000260" -> "1000259" 
  "1000261" -> "1000262" 
  "1000262" -> "1000260" 
  "1000266" -> "1000275" 
  "1000268" -> "1000266" 
  "1000270" -> "1000268" 
  "1000272" -> "1000270" 
  "1000275" -> "1000250" 
  "1000280" -> "1000285" 
  "1000285" -> "1000346" 
  "1000288" -> "1000294" 
  "1000288" -> "1000329" 
  "1000293" -> "1000307" 
  "1000293" -> "1000317" 
  "1000294" -> "1000299" 
  "1000294" -> "1000293" 
  "1000297" -> "1000293" 
  "1000298" -> "1000297" 
  "1000299" -> "1000300" 
  "1000300" -> "1000298" 
  "1000303" -> "1000317" 
  "1000305" -> "1000303" 
  "1000306" -> "1000305" 
  "1000307" -> "1000308" 
  "1000308" -> "1000306" 
  "1000311" -> "1000322" 
  "1000313" -> "1000311" 
  "1000315" -> "1000313" 
  "1000317" -> "1000315" 
  "1000322" -> "1000346" 
  "1000322" -> "1000153" 
  "1000322" -> "1000280" 
  "1000327" -> "1000334" 
  "1000329" -> "1000327" 
  "1000332" -> "1000341" 
  "1000334" -> "1000332" 
  "1000339" -> "1000344" 
  "1000341" -> "1000339" 
  "1000344" -> "1000346" 
  "1000113" -> "1000131" 
}
