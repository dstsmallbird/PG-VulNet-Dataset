digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000131" [label = "(<operator>.addition,a1 + 240)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000136" [label = "(<operator>.addition,a1 + 44)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000141" [label = "(<operator>.addition,a1 + 108)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000159" [label = "(<operator>.assignment,LODWORD(v7) = 1)" ]
"1000160" [label = "(LODWORD,LODWORD(v7))" ]
"1000167" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v2 + v8))" ]
"1000169" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000170" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000171" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000172" [label = "(<operator>.addition,v2 + v8)" ]
"1000176" [label = "(<operator>.indirection,*(_BYTE *)(v2 + v8))" ]
"1000177" [label = "(<operator>.cast,(_BYTE *)(v2 + v8))" ]
"1000178" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000179" [label = "(<operator>.addition,v2 + v8)" ]
"1000183" [label = "(<operator>.preIncrement,++v8)" ]
"1000185" [label = "(<operator>.assignment,LODWORD(v7) = v7 - 1)" ]
"1000186" [label = "(LODWORD,LODWORD(v7))" ]
"1000188" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000191" [label = "(<operator>.assignment,v9 = v7 + v5)" ]
"1000193" [label = "(<operator>.addition,v7 + v5)" ]
"1000197" [label = "(<operator>.lessThan,(int)v7 + v5 < 2)" ]
"1000198" [label = "(<operator>.addition,(int)v7 + v5)" ]
"1000199" [label = "(<operator>.cast,(int)v7)" ]
"1000200" [label = "(UNKNOWN,int,int)" ]
"1000206" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000207" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000208" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000212" [label = "(<operator>.assignment,LODWORD(v7) = v5 - v8)" ]
"1000213" [label = "(LODWORD,LODWORD(v7))" ]
"1000215" [label = "(<operator>.subtraction,v5 - v8)" ]
"1000219" [label = "(<operator>.lessThan,v5 - (int)v8 < 2)" ]
"1000220" [label = "(<operator>.subtraction,v5 - (int)v8)" ]
"1000222" [label = "(<operator>.cast,(int)v8)" ]
"1000223" [label = "(UNKNOWN,int,int)" ]
"1000227" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000229" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000230" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000231" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000232" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000234" [label = "(<operator>.addition,v8 + 1)" ]
"1000237" [label = "(<operator>.assignment,v5 = v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000239" [label = "(<operator>.subtraction,v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000241" [label = "(<operator>.subtraction,2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000243" [label = "(<operator>.subtraction,*(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000244" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000245" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000246" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000247" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000249" [label = "(<operator>.addition,v8 + 1)" ]
"1000254" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000259" [label = "(<operator>.equals,v9 == a2)" ]
"1000264" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000265" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000266" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000270" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v2 + v8 + 2) = 0)" ]
"1000271" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v2 + v8 + 2))" ]
"1000272" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v2 + v8 + 2))" ]
"1000273" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000274" [label = "(bin2hex,bin2hex(v14, v2 + v8 + 2))" ]
"1000276" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000278" [label = "(<operator>.addition,v8 + 2)" ]
"1000282" [label = "(bb_error_msg,bb_error_msg(\n              (unsigned int)\"%s: 0x%02x %s\",\n              (unsigned int)\"option found\",\n              *(unsigned __int8 *)(v2 + v8),\n              (unsigned int)v14,\n              v12,\n              v13,\n              v14[0]))" ]
"1000283" [label = "(<operator>.cast,(unsigned int)\"%s: 0x%02x %s\")" ]
"1000284" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000286" [label = "(<operator>.cast,(unsigned int)\"option found\")" ]
"1000287" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000289" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000290" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000291" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000292" [label = "(<operator>.addition,v2 + v8)" ]
"1000295" [label = "(<operator>.cast,(unsigned int)v14)" ]
"1000296" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000300" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000303" [label = "(RETURN,return v2 + v8 + 2;,return v2 + v8 + 2;)" ]
"1000304" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000306" [label = "(<operator>.addition,v8 + 2)" ]
"1000310" [label = "(<operator>.logicalAnd,(_BYTE)v9 == 52 && (_BYTE)v7)" ]
"1000311" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000312" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000313" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000316" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000317" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000320" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000322" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000323" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000324" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000325" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000327" [label = "(<operator>.addition,v8 + 2)" ]
"1000330" [label = "(<operators>.assignmentOr,v6 |= v9)" ]
"1000333" [label = "(<operator>.assignmentPlus,v2 += v8 + v7 + 2)" ]
"1000335" [label = "(<operator>.addition,v8 + v7 + 2)" ]
"1000337" [label = "(<operator>.addition,v7 + 2)" ]
"1000341" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000347" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v7, v9, v3, v4, v14[0]))" ]
"1000348" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000349" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000356" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000359" [label = "(RETURN,return v10;,return v10;)" ]
"1000362" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000363" [label = "(<operator>.and,v6 & 0x101)" ]
"1000368" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000371" [label = "(<operator>.assignment,v5 = 128)" ]
"1000374" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000376" [label = "(<operator>.addition,a1 + 108)" ]
"1000382" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000383" [label = "(<operator>.and,v6 & 0x202)" ]
"1000388" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000391" [label = "(<operator>.assignment,v5 = 64)" ]
"1000394" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000396" [label = "(<operator>.addition,a1 + 44)" ]
"1000403" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000404" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000405" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000408" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v7, v9, v3, v4, v14[0]))" ]
"1000409" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000410" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000417" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000420" [label = "(RETURN,return v10;,return v10;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000422" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000160" 
  "1000147" -> "1000363" 
  "1000147" -> "1000383" 
  "1000147" -> "1000405" 
  "1000159" -> "1000208" 
  "1000159" -> "1000171" 
  "1000160" -> "1000159" 
  "1000167" -> "1000178" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000176" -> "1000208" 
  "1000176" -> "1000363" 
  "1000176" -> "1000383" 
  "1000176" -> "1000405" 
  "1000176" -> "1000183" 
  "1000177" -> "1000176" 
  "1000178" -> "1000179" 
  "1000179" -> "1000177" 
  "1000183" -> "1000186" 
  "1000185" -> "1000193" 
  "1000186" -> "1000188" 
  "1000188" -> "1000185" 
  "1000191" -> "1000200" 
  "1000193" -> "1000191" 
  "1000197" -> "1000208" 
  "1000197" -> "1000171" 
  "1000197" -> "1000349" 
  "1000198" -> "1000197" 
  "1000199" -> "1000198" 
  "1000200" -> "1000199" 
  "1000206" -> "1000363" 
  "1000206" -> "1000383" 
  "1000206" -> "1000405" 
  "1000206" -> "1000213" 
  "1000207" -> "1000206" 
  "1000208" -> "1000207" 
  "1000212" -> "1000223" 
  "1000213" -> "1000215" 
  "1000215" -> "1000212" 
  "1000219" -> "1000349" 
  "1000219" -> "1000231" 
  "1000220" -> "1000219" 
  "1000222" -> "1000220" 
  "1000223" -> "1000222" 
  "1000227" -> "1000246" 
  "1000229" -> "1000227" 
  "1000230" -> "1000229" 
  "1000231" -> "1000234" 
  "1000232" -> "1000230" 
  "1000234" -> "1000232" 
  "1000237" -> "1000254" 
  "1000239" -> "1000237" 
  "1000241" -> "1000239" 
  "1000243" -> "1000241" 
  "1000244" -> "1000243" 
  "1000245" -> "1000244" 
  "1000246" -> "1000249" 
  "1000247" -> "1000245" 
  "1000249" -> "1000247" 
  "1000254" -> "1000349" 
  "1000254" -> "1000259" 
  "1000259" -> "1000266" 
  "1000259" -> "1000313" 
  "1000264" -> "1000273" 
  "1000264" -> "1000306" 
  "1000265" -> "1000264" 
  "1000266" -> "1000265" 
  "1000270" -> "1000284" 
  "1000271" -> "1000270" 
  "1000272" -> "1000271" 
  "1000273" -> "1000278" 
  "1000274" -> "1000272" 
  "1000276" -> "1000274" 
  "1000278" -> "1000276" 
  "1000282" -> "1000306" 
  "1000283" -> "1000287" 
  "1000284" -> "1000283" 
  "1000286" -> "1000291" 
  "1000287" -> "1000286" 
  "1000289" -> "1000296" 
  "1000290" -> "1000289" 
  "1000291" -> "1000292" 
  "1000292" -> "1000290" 
  "1000295" -> "1000300" 
  "1000296" -> "1000295" 
  "1000300" -> "1000282" 
  "1000303" -> "1000422" 
  "1000304" -> "1000303" 
  "1000306" -> "1000304" 
  "1000310" -> "1000324" 
  "1000310" -> "1000337" 
  "1000311" -> "1000317" 
  "1000311" -> "1000310" 
  "1000312" -> "1000311" 
  "1000313" -> "1000312" 
  "1000316" -> "1000310" 
  "1000317" -> "1000316" 
  "1000320" -> "1000330" 
  "1000322" -> "1000320" 
  "1000323" -> "1000322" 
  "1000324" -> "1000327" 
  "1000325" -> "1000323" 
  "1000327" -> "1000325" 
  "1000330" -> "1000337" 
  "1000333" -> "1000341" 
  "1000335" -> "1000333" 
  "1000337" -> "1000335" 
  "1000341" -> "1000160" 
  "1000341" -> "1000363" 
  "1000341" -> "1000349" 
  "1000347" -> "1000359" 
  "1000348" -> "1000356" 
  "1000349" -> "1000348" 
  "1000356" -> "1000347" 
  "1000359" -> "1000422" 
  "1000362" -> "1000368" 
  "1000362" -> "1000383" 
  "1000362" -> "1000405" 
  "1000363" -> "1000362" 
  "1000368" -> "1000371" 
  "1000371" -> "1000376" 
  "1000374" -> "1000160" 
  "1000374" -> "1000363" 
  "1000374" -> "1000383" 
  "1000374" -> "1000405" 
  "1000374" -> "1000160" 
  "1000374" -> "1000363" 
  "1000374" -> "1000383" 
  "1000376" -> "1000374" 
  "1000382" -> "1000388" 
  "1000382" -> "1000405" 
  "1000383" -> "1000382" 
  "1000388" -> "1000391" 
  "1000391" -> "1000396" 
  "1000394" -> "1000160" 
  "1000394" -> "1000363" 
  "1000394" -> "1000383" 
  "1000394" -> "1000405" 
  "1000396" -> "1000394" 
  "1000403" -> "1000410" 
  "1000403" -> "1000420" 
  "1000404" -> "1000403" 
  "1000405" -> "1000404" 
  "1000408" -> "1000420" 
  "1000409" -> "1000417" 
  "1000410" -> "1000409" 
  "1000417" -> "1000408" 
  "1000420" -> "1000422" 
  "1000113" -> "1000131" 
}
