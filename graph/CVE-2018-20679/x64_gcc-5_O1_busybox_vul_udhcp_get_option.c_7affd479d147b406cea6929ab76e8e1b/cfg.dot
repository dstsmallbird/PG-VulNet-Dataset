digraph udhcp_get_option {  
"1000118" [label = "(<operator>.assignment,v5 = a1 + 240)" ]
"1000120" [label = "(<operator>.addition,a1 + 240)" ]
"1000125" [label = "(<operator>.assignment,i = 388)" ]
"1000128" [label = "(<operator>.assignment,i = 64)" ]
"1000138" [label = "(<operator>.assignment,v9 = *v5)" ]
"1000140" [label = "(<operator>.indirection,*v5)" ]
"1000143" [label = "(<operator>.logicalNot,!(_BYTE)v9)" ]
"1000144" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000145" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000148" [label = "(<operator>.preDecrement,--i)" ]
"1000150" [label = "(<operator>.preIncrement,++v5)" ]
"1000154" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000155" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000156" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000161" [label = "(<operator>.logicalOr,i <= 1 || (a4 = (unsigned int)v5[1] + 2, i -= a4, i < 0))" ]
"1000162" [label = "(<operator>.lessEqualsThan,i <= 1)" ]
"1000166" [label = "(<operator>.assignment,a4 = (unsigned int)v5[1] + 2)" ]
"1000168" [label = "(<operator>.addition,(unsigned int)v5[1] + 2)" ]
"1000169" [label = "(<operator>.cast,(unsigned int)v5[1])" ]
"1000170" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000171" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000176" [label = "(<operator>.assignmentMinus,i -= a4)" ]
"1000179" [label = "(<operator>.lessThan,i < 0)" ]
"1000184" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v9, a4, a5, v6))" ]
"1000185" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000186" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000194" [label = "(<operator>.assignment,a5 = (unsigned __int8)v9)" ]
"1000196" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000197" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000200" [label = "(<operator>.equals,a2 == (unsigned __int8)v9)" ]
"1000202" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000203" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000206" [label = "(log_option,log_option(\"option found\", v5, v9, a4, (unsigned __int8)v9, v6))" ]
"1000211" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000212" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000215" [label = "(RETURN,return v5 + 2;,return v5 + 2;)" ]
"1000216" [label = "(<operator>.addition,v5 + 2)" ]
"1000220" [label = "(<operator>.logicalAnd,(int)a4 > 2 && (_BYTE)v9 == 52)" ]
"1000221" [label = "(<operator>.greaterThan,(int)a4 > 2)" ]
"1000222" [label = "(<operator>.cast,(int)a4)" ]
"1000223" [label = "(UNKNOWN,int,int)" ]
"1000226" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000227" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000228" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000232" [label = "(<operator>.assignment,LODWORD(v9) = v5[2])" ]
"1000233" [label = "(LODWORD,LODWORD(v9))" ]
"1000235" [label = "(<operator>.indirectIndexAccess,v5[2])" ]
"1000238" [label = "(<operator>.assignment,v6 = (unsigned int)v9 | (unsigned int)v6)" ]
"1000240" [label = "(<operator>.or,(unsigned int)v9 | (unsigned int)v6)" ]
"1000241" [label = "(<operator>.cast,(unsigned int)v9)" ]
"1000242" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000244" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000245" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000247" [label = "(<operator>.assignmentPlus,v5 += (int)a4)" ]
"1000249" [label = "(<operator>.cast,(int)a4)" ]
"1000250" [label = "(UNKNOWN,int,int)" ]
"1000254" [label = "(<operator>.lessEqualsThan,i <= 0)" ]
"1000259" [label = "(<operator>.notEquals,(v6 & 0x101) != 1)" ]
"1000260" [label = "(<operator>.and,v6 & 0x101)" ]
"1000265" [label = "(<operator>.assignment,v6 = (unsigned int)v6 | 0x101)" ]
"1000267" [label = "(<operator>.or,(unsigned int)v6 | 0x101)" ]
"1000268" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000269" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000272" [label = "(<operator>.assignment,v5 = a1 + 108)" ]
"1000274" [label = "(<operator>.addition,a1 + 108)" ]
"1000277" [label = "(<operator>.assignment,i = 128)" ]
"1000281" [label = "(<operator>.notEquals,(v6 & 0x202) != 2)" ]
"1000282" [label = "(<operator>.and,v6 & 0x202)" ]
"1000287" [label = "(<operator>.assignment,v6 = (unsigned int)v6 | 0x202)" ]
"1000289" [label = "(<operator>.or,(unsigned int)v6 | 0x202)" ]
"1000290" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000291" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000294" [label = "(<operator>.assignment,v5 = a1 + 44)" ]
"1000296" [label = "(<operator>.addition,a1 + 44)" ]
"1000301" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000302" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000303" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000307" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v9, a4, a5, v6))" ]
"1000308" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000309" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000317" [label = "(RETURN,return result;,return result;)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000319" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000118" -> "1000125" 
  "1000120" -> "1000118" 
  "1000125" -> "1000140" 
  "1000125" -> "1000260" 
  "1000125" -> "1000282" 
  "1000128" -> "1000140" 
  "1000128" -> "1000260" 
  "1000128" -> "1000282" 
  "1000138" -> "1000145" 
  "1000140" -> "1000138" 
  "1000143" -> "1000156" 
  "1000143" -> "1000148" 
  "1000144" -> "1000143" 
  "1000145" -> "1000144" 
  "1000148" -> "1000150" 
  "1000150" -> "1000254" 
  "1000154" -> "1000260" 
  "1000154" -> "1000282" 
  "1000154" -> "1000303" 
  "1000154" -> "1000162" 
  "1000155" -> "1000154" 
  "1000156" -> "1000155" 
  "1000161" -> "1000186" 
  "1000161" -> "1000197" 
  "1000162" -> "1000161" 
  "1000162" -> "1000170" 
  "1000166" -> "1000176" 
  "1000168" -> "1000166" 
  "1000169" -> "1000168" 
  "1000170" -> "1000171" 
  "1000171" -> "1000169" 
  "1000176" -> "1000179" 
  "1000179" -> "1000161" 
  "1000184" -> "1000197" 
  "1000185" -> "1000184" 
  "1000186" -> "1000185" 
  "1000194" -> "1000203" 
  "1000196" -> "1000194" 
  "1000197" -> "1000196" 
  "1000200" -> "1000223" 
  "1000200" -> "1000212" 
  "1000202" -> "1000200" 
  "1000203" -> "1000202" 
  "1000206" -> "1000216" 
  "1000211" -> "1000206" 
  "1000212" -> "1000211" 
  "1000215" -> "1000319" 
  "1000216" -> "1000215" 
  "1000220" -> "1000233" 
  "1000220" -> "1000250" 
  "1000221" -> "1000228" 
  "1000221" -> "1000220" 
  "1000222" -> "1000221" 
  "1000223" -> "1000222" 
  "1000226" -> "1000220" 
  "1000227" -> "1000226" 
  "1000228" -> "1000227" 
  "1000232" -> "1000242" 
  "1000233" -> "1000235" 
  "1000235" -> "1000232" 
  "1000238" -> "1000250" 
  "1000240" -> "1000238" 
  "1000241" -> "1000245" 
  "1000242" -> "1000241" 
  "1000244" -> "1000240" 
  "1000245" -> "1000244" 
  "1000247" -> "1000254" 
  "1000249" -> "1000247" 
  "1000250" -> "1000249" 
  "1000254" -> "1000140" 
  "1000254" -> "1000260" 
  "1000254" -> "1000186" 
  "1000259" -> "1000282" 
  "1000259" -> "1000303" 
  "1000259" -> "1000269" 
  "1000260" -> "1000259" 
  "1000265" -> "1000274" 
  "1000267" -> "1000265" 
  "1000268" -> "1000267" 
  "1000269" -> "1000268" 
  "1000272" -> "1000277" 
  "1000274" -> "1000272" 
  "1000277" -> "1000140" 
  "1000277" -> "1000260" 
  "1000277" -> "1000282" 
  "1000281" -> "1000303" 
  "1000281" -> "1000291" 
  "1000282" -> "1000281" 
  "1000287" -> "1000296" 
  "1000289" -> "1000287" 
  "1000290" -> "1000289" 
  "1000291" -> "1000290" 
  "1000294" -> "1000128" 
  "1000296" -> "1000294" 
  "1000301" -> "1000309" 
  "1000301" -> "1000317" 
  "1000302" -> "1000301" 
  "1000303" -> "1000302" 
  "1000307" -> "1000317" 
  "1000308" -> "1000307" 
  "1000309" -> "1000308" 
  "1000317" -> "1000319" 
  "1000106" -> "1000120" 
}
