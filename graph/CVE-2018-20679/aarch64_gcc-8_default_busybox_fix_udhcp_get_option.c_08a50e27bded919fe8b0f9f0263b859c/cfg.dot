digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000124" [label = "(<operator>.assignment,v3 = 0)" ]
"1000127" [label = "(<operator>.assignment,v4 = 388)" ]
"1000136" [label = "(<operator>.assignment,v5 = *v2)" ]
"1000138" [label = "(<operator>.indirection,*v2)" ]
"1000141" [label = "(<operator>.indirection,*v2)" ]
"1000144" [label = "(<operator>.preDecrement,--v4)" ]
"1000146" [label = "(<operator>.preIncrement,++v2)" ]
"1000150" [label = "(<operator>.logicalNot,!v4)" ]
"1000154" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000159" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000160" [label = "(<operator>.and,v3 & 0x101)" ]
"1000165" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000168" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000170" [label = "(<operator>.addition,a1 + 108)" ]
"1000173" [label = "(<operator>.assignment,v4 = 128)" ]
"1000179" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000180" [label = "(<operator>.and,v3 & 0x202)" ]
"1000187" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000188" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000189" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000192" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000195" [label = "(RETURN,return v6;,return v6;)" ]
"1000197" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000200" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000202" [label = "(<operator>.addition,a1 + 44)" ]
"1000205" [label = "(<operator>.assignment,v4 = 64)" ]
"1000209" [label = "(<operator>.equals,v4 == 1)" ]
"1000213" [label = "(<operator>.assignment,v8 = v2[1])" ]
"1000215" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000218" [label = "(<operator>.assignmentMinus,v4 -= v8 + 2)" ]
"1000220" [label = "(<operator>.addition,v8 + 2)" ]
"1000224" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000229" [label = "(<operator>.notEquals,v5 != (_DWORD)a2)" ]
"1000231" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000232" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000236" [label = "(<operator>.logicalAnd,v5 == 52 && v2[1])" ]
"1000237" [label = "(<operator>.equals,v5 == 52)" ]
"1000240" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000243" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000245" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000248" [label = "(<operator>.assignmentPlus,v2 += v8 + 2)" ]
"1000250" [label = "(<operator>.addition,v8 + 2)" ]
"1000255" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000256" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000262" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2))" ]
"1000265" [label = "(RETURN,return v6;,return v6;)" ]
"1000267" [label = "(<operator>.assignment,v9 = v2)" ]
"1000270" [label = "(<operator>.assignment,v6 = v2 + 2)" ]
"1000272" [label = "(<operator>.addition,v2 + 2)" ]
"1000275" [label = "(log_option,log_option(\"option found\", v9))" ]
"1000278" [label = "(RETURN,return v6;,return v6;)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000280" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000124" 
  "1000121" -> "1000119" 
  "1000124" -> "1000127" 
  "1000127" -> "1000138" 
  "1000127" -> "1000154" 
  "1000127" -> "1000209" 
  "1000136" -> "1000141" 
  "1000138" -> "1000136" 
  "1000141" -> "1000154" 
  "1000141" -> "1000209" 
  "1000141" -> "1000144" 
  "1000144" -> "1000146" 
  "1000146" -> "1000150" 
  "1000150" -> "1000138" 
  "1000150" -> "1000154" 
  "1000150" -> "1000262" 
  "1000154" -> "1000209" 
  "1000154" -> "1000160" 
  "1000159" -> "1000165" 
  "1000159" -> "1000180" 
  "1000160" -> "1000159" 
  "1000165" -> "1000170" 
  "1000168" -> "1000173" 
  "1000170" -> "1000168" 
  "1000173" -> "1000138" 
  "1000173" -> "1000154" 
  "1000173" -> "1000209" 
  "1000179" -> "1000189" 
  "1000179" -> "1000197" 
  "1000180" -> "1000179" 
  "1000187" -> "1000192" 
  "1000187" -> "1000195" 
  "1000188" -> "1000187" 
  "1000189" -> "1000188" 
  "1000192" -> "1000195" 
  "1000195" -> "1000280" 
  "1000197" -> "1000202" 
  "1000200" -> "1000205" 
  "1000202" -> "1000200" 
  "1000205" -> "1000138" 
  "1000205" -> "1000154" 
  "1000205" -> "1000209" 
  "1000209" -> "1000262" 
  "1000209" -> "1000215" 
  "1000213" -> "1000220" 
  "1000215" -> "1000213" 
  "1000218" -> "1000224" 
  "1000220" -> "1000218" 
  "1000224" -> "1000262" 
  "1000224" -> "1000232" 
  "1000229" -> "1000237" 
  "1000229" -> "1000256" 
  "1000231" -> "1000229" 
  "1000232" -> "1000231" 
  "1000236" -> "1000245" 
  "1000236" -> "1000250" 
  "1000237" -> "1000236" 
  "1000237" -> "1000240" 
  "1000240" -> "1000236" 
  "1000243" -> "1000250" 
  "1000245" -> "1000243" 
  "1000248" -> "1000150" 
  "1000250" -> "1000248" 
  "1000255" -> "1000262" 
  "1000255" -> "1000267" 
  "1000256" -> "1000255" 
  "1000262" -> "1000265" 
  "1000265" -> "1000280" 
  "1000267" -> "1000272" 
  "1000270" -> "1000275" 
  "1000272" -> "1000270" 
  "1000275" -> "1000278" 
  "1000278" -> "1000280" 
  "1000108" -> "1000121" 
}
