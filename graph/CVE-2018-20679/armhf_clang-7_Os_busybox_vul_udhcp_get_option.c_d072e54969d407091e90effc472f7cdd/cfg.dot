digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000131" [label = "(<operator>.addition,a1 + 44)" ]
"1000134" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000136" [label = "(<operator>.addition,a1 + 108)" ]
"1000139" [label = "(<operator>.assignment,v5 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v6 = 388)" ]
"1000147" [label = "(<operator>.assignment,v7 = 0)" ]
"1000153" [label = "(<operator>.assignment,v8 = 2)" ]
"1000156" [label = "(<operator>.assignment,v9 = 0)" ]
"1000162" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000164" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000165" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000166" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000167" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000169" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000173" [label = "(<operator>.indirection,*(_BYTE *)(v5 + v8 - 2))" ]
"1000174" [label = "(<operator>.cast,(_BYTE *)(v5 + v8 - 2))" ]
"1000175" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000176" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000178" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000182" [label = "(<operator>.preDecrement,--v9)" ]
"1000184" [label = "(<operator>.preIncrement,++v8)" ]
"1000187" [label = "(<operator>.lessThan,v6 + v9 + 1 < 2)" ]
"1000188" [label = "(<operator>.addition,v6 + v9 + 1)" ]
"1000190" [label = "(<operator>.addition,v9 + 1)" ]
"1000196" [label = "(<operator>.equals,v10 == 255)" ]
"1000201" [label = "(<operator>.equals,(v7 & 0x101) == 1)" ]
"1000202" [label = "(<operator>.and,v7 & 0x101)" ]
"1000207" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000210" [label = "(<operator>.assignment,v6 = 128)" ]
"1000213" [label = "(<operator>.assignment,v5 = v4)" ]
"1000218" [label = "(<operator>.equals,(v7 & 0x202) == 2)" ]
"1000219" [label = "(<operator>.and,v7 & 0x202)" ]
"1000224" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000227" [label = "(<operator>.assignment,v6 = 64)" ]
"1000230" [label = "(<operator>.assignment,v5 = v3)" ]
"1000234" [label = "(<operator>.assignment,v13 = 0)" ]
"1000238" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000239" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000240" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000243" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000248" [label = "(<operator>.assignment,v11 = v6 + v9)" ]
"1000250" [label = "(<operator>.addition,v6 + v9)" ]
"1000253" [label = "(<operator>.assignment,v12 = v6 + v9 < 2)" ]
"1000255" [label = "(<operator>.lessThan,v6 + v9 < 2)" ]
"1000256" [label = "(<operator>.addition,v6 + v9)" ]
"1000261" [label = "(<operator>.greaterEqualsThan,v6 + v9 >= 2)" ]
"1000262" [label = "(<operator>.addition,v6 + v9)" ]
"1000267" [label = "(<operator>.assignment,v2 = v5 - v9)" ]
"1000269" [label = "(<operator>.subtraction,v5 - v9)" ]
"1000272" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000274" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000275" [label = "(<operator>.cast,(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000276" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000277" [label = "(<operator>.subtraction,v5 - v9 + 1)" ]
"1000279" [label = "(<operator>.addition,v9 + 1)" ]
"1000282" [label = "(<operator>.assignment,v6 = v6 - v11 + v9 - 2)" ]
"1000284" [label = "(<operator>.subtraction,v6 - v11 + v9 - 2)" ]
"1000286" [label = "(<operator>.addition,v11 + v9 - 2)" ]
"1000288" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000291" [label = "(<operator>.assignment,v12 = v6 < 0)" ]
"1000293" [label = "(<operator>.lessThan,v6 < 0)" ]
"1000300" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, v8))" ]
"1000304" [label = "(RETURN,return 0;,return 0;)" ]
"1000307" [label = "(<operator>.notEquals,v10 != a2)" ]
"1000312" [label = "(<operator>.logicalAnd,v10 == 52 && v11)" ]
"1000313" [label = "(<operator>.equals,v10 == 52)" ]
"1000317" [label = "(<operators>.assignmentOr,v7 |= *(unsigned __int8 *)(v5 + v8))" ]
"1000319" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8))" ]
"1000320" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8))" ]
"1000321" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000322" [label = "(<operator>.addition,v5 + v8)" ]
"1000325" [label = "(<operator>.assignment,v5 = v5 + v11 - v9 + 2)" ]
"1000327" [label = "(<operator>.addition,v5 + v11 - v9 + 2)" ]
"1000329" [label = "(<operator>.subtraction,v11 - v9 + 2)" ]
"1000331" [label = "(<operator>.addition,v9 + 2)" ]
"1000336" [label = "(<operator>.greaterEqualsThan,v6 >= 1)" ]
"1000341" [label = "(log_option,log_option(\"option found\", v2))" ]
"1000344" [label = "(<operator>.assignment,v13 = v2 + 2)" ]
"1000346" [label = "(<operator>.addition,v2 + 2)" ]
"1000349" [label = "(RETURN,return v13;,return v13;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000351" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000351" 
  "1000147" -> "1000153" 
  "1000153" -> "1000156" 
  "1000156" -> "1000166" 
  "1000156" -> "1000196" 
  "1000162" -> "1000175" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000166" -> "1000169" 
  "1000167" -> "1000165" 
  "1000169" -> "1000167" 
  "1000173" -> "1000351" 
  "1000173" -> "1000196" 
  "1000173" -> "1000182" 
  "1000174" -> "1000173" 
  "1000175" -> "1000178" 
  "1000176" -> "1000174" 
  "1000178" -> "1000176" 
  "1000182" -> "1000184" 
  "1000184" -> "1000190" 
  "1000187" -> "1000166" 
  "1000187" -> "1000196" 
  "1000187" -> "1000300" 
  "1000188" -> "1000187" 
  "1000190" -> "1000188" 
  "1000196" -> "1000202" 
  "1000196" -> "1000250" 
  "1000201" -> "1000207" 
  "1000201" -> "1000219" 
  "1000202" -> "1000201" 
  "1000207" -> "1000210" 
  "1000210" -> "1000213" 
  "1000213" -> "1000336" 
  "1000218" -> "1000224" 
  "1000218" -> "1000234" 
  "1000219" -> "1000218" 
  "1000224" -> "1000227" 
  "1000227" -> "1000230" 
  "1000230" -> "1000336" 
  "1000234" -> "1000240" 
  "1000238" -> "1000243" 
  "1000238" -> "1000349" 
  "1000239" -> "1000238" 
  "1000240" -> "1000239" 
  "1000243" -> "1000349" 
  "1000248" -> "1000256" 
  "1000250" -> "1000248" 
  "1000253" -> "1000262" 
  "1000255" -> "1000253" 
  "1000256" -> "1000255" 
  "1000261" -> "1000269" 
  "1000261" -> "1000300" 
  "1000261" -> "1000307" 
  "1000262" -> "1000261" 
  "1000267" -> "1000276" 
  "1000269" -> "1000267" 
  "1000272" -> "1000288" 
  "1000274" -> "1000272" 
  "1000275" -> "1000274" 
  "1000276" -> "1000279" 
  "1000277" -> "1000275" 
  "1000279" -> "1000277" 
  "1000282" -> "1000293" 
  "1000284" -> "1000282" 
  "1000286" -> "1000284" 
  "1000288" -> "1000286" 
  "1000291" -> "1000300" 
  "1000291" -> "1000307" 
  "1000293" -> "1000291" 
  "1000300" -> "1000304" 
  "1000304" -> "1000351" 
  "1000307" -> "1000313" 
  "1000307" -> "1000341" 
  "1000312" -> "1000321" 
  "1000312" -> "1000331" 
  "1000313" -> "1000312" 
  "1000313" -> "1000312" 
  "1000317" -> "1000331" 
  "1000319" -> "1000317" 
  "1000320" -> "1000319" 
  "1000321" -> "1000322" 
  "1000322" -> "1000320" 
  "1000325" -> "1000336" 
  "1000327" -> "1000325" 
  "1000329" -> "1000327" 
  "1000331" -> "1000329" 
  "1000336" -> "1000351" 
  "1000336" -> "1000153" 
  "1000336" -> "1000300" 
  "1000341" -> "1000346" 
  "1000344" -> "1000349" 
  "1000346" -> "1000344" 
  "1000349" -> "1000351" 
  "1000113" -> "1000131" 
}
