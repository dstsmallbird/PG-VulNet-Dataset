digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = 0)" ]
"1000120" [label = "(<operator>.assignment,v3 = 388)" ]
"1000123" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000125" [label = "(<operator>.addition,a1 + 240)" ]
"1000135" [label = "(<operator>.assignment,i = *v4)" ]
"1000137" [label = "(<operator>.indirection,*v4)" ]
"1000139" [label = "(<operator>.assignment,i = *v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000145" [label = "(<operator>.logicalNot,!i)" ]
"1000148" [label = "(<operator>.preDecrement,--v3)" ]
"1000150" [label = "(<operator>.preIncrement,++v4)" ]
"1000154" [label = "(<operator>.equals,i == 255)" ]
"1000159" [label = "(<operator>.equals,v3 == 1)" ]
"1000163" [label = "(<operator>.assignment,v7 = v4[1] + 2)" ]
"1000165" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000166" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000170" [label = "(<operator>.assignmentMinus,v3 -= v7)" ]
"1000174" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000179" [label = "(<operator>.equals,a2 == i)" ]
"1000184" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000185" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000190" [label = "(<operator>.assignment,v6 = 0)" ]
"1000193" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000195" [label = "(RETURN,return (unsigned __int8 *)v6;,return (unsigned __int8 *)v6;)" ]
"1000196" [label = "(<operator>.cast,(unsigned __int8 *)v6)" ]
"1000197" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000200" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000201" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000202" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000205" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4))" ]
"1000208" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000209" [label = "(<operator>.addition,v4 + 2)" ]
"1000213" [label = "(<operator>.equals,i == 52)" ]
"1000218" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000221" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000223" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000226" [label = "(<operator>.assignmentPlus,v4 += v7)" ]
"1000231" [label = "(<operator>.assignmentPlus,v4 += v7)" ]
"1000236" [label = "(<operator>.logicalNot,!v3)" ]
"1000240" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000241" [label = "(<operator>.and,v2 & 0x101)" ]
"1000246" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000249" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000251" [label = "(<operator>.addition,a1 + 108)" ]
"1000254" [label = "(<operator>.assignment,v3 = 128)" ]
"1000260" [label = "(<operator>.equals,(v2 & 0x202) == 2)" ]
"1000261" [label = "(<operator>.and,v2 & 0x202)" ]
"1000266" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000269" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000271" [label = "(<operator>.addition,a1 + 44)" ]
"1000274" [label = "(<operator>.assignment,v3 = 64)" ]
"1000279" [label = "(<operator>.assignment,v6 = 0)" ]
"1000283" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000284" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000285" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000288" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000291" [label = "(RETURN,return (unsigned __int8 *)v6;,return (unsigned __int8 *)v6;)" ]
"1000292" [label = "(<operator>.cast,(unsigned __int8 *)v6)" ]
"1000293" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000295" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000120" 
  "1000120" -> "1000125" 
  "1000123" -> "1000137" 
  "1000123" -> "1000261" 
  "1000123" -> "1000279" 
  "1000125" -> "1000123" 
  "1000135" -> "1000145" 
  "1000137" -> "1000135" 
  "1000139" -> "1000145" 
  "1000141" -> "1000139" 
  "1000145" -> "1000148" 
  "1000145" -> "1000154" 
  "1000148" -> "1000150" 
  "1000150" -> "1000236" 
  "1000154" -> "1000241" 
  "1000154" -> "1000261" 
  "1000154" -> "1000279" 
  "1000154" -> "1000159" 
  "1000159" -> "1000190" 
  "1000159" -> "1000166" 
  "1000163" -> "1000170" 
  "1000165" -> "1000163" 
  "1000166" -> "1000165" 
  "1000170" -> "1000174" 
  "1000174" -> "1000190" 
  "1000174" -> "1000179" 
  "1000179" -> "1000185" 
  "1000179" -> "1000213" 
  "1000184" -> "1000202" 
  "1000184" -> "1000190" 
  "1000185" -> "1000184" 
  "1000190" -> "1000193" 
  "1000193" -> "1000197" 
  "1000195" -> "1000295" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000200" -> "1000205" 
  "1000200" -> "1000209" 
  "1000201" -> "1000200" 
  "1000202" -> "1000201" 
  "1000205" -> "1000209" 
  "1000208" -> "1000295" 
  "1000209" -> "1000208" 
  "1000213" -> "1000218" 
  "1000213" -> "1000231" 
  "1000218" -> "1000223" 
  "1000218" -> "1000226" 
  "1000221" -> "1000226" 
  "1000223" -> "1000221" 
  "1000226" -> "1000236" 
  "1000231" -> "1000236" 
  "1000236" -> "1000190" 
  "1000236" -> "1000141" 
  "1000240" -> "1000246" 
  "1000240" -> "1000261" 
  "1000240" -> "1000279" 
  "1000241" -> "1000240" 
  "1000246" -> "1000251" 
  "1000249" -> "1000254" 
  "1000251" -> "1000249" 
  "1000254" -> "1000137" 
  "1000254" -> "1000261" 
  "1000254" -> "1000279" 
  "1000254" -> "1000137" 
  "1000254" -> "1000261" 
  "1000260" -> "1000266" 
  "1000260" -> "1000279" 
  "1000261" -> "1000260" 
  "1000266" -> "1000271" 
  "1000269" -> "1000274" 
  "1000271" -> "1000269" 
  "1000274" -> "1000137" 
  "1000274" -> "1000261" 
  "1000274" -> "1000279" 
  "1000279" -> "1000285" 
  "1000283" -> "1000293" 
  "1000283" -> "1000288" 
  "1000284" -> "1000283" 
  "1000285" -> "1000284" 
  "1000288" -> "1000293" 
  "1000291" -> "1000295" 
  "1000292" -> "1000291" 
  "1000293" -> "1000292" 
  "1000107" -> "1000117" 
}
