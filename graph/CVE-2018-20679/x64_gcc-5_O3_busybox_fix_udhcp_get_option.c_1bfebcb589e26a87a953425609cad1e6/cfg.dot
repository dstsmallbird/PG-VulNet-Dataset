digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v6 = 0)" ]
"1000122" [label = "(<operator>.assignment,v7 = a1 + 240)" ]
"1000124" [label = "(<operator>.addition,a1 + 240)" ]
"1000128" [label = "(<operator>.assignment,i = 388)" ]
"1000131" [label = "(<operator>.assignment,i = 64)" ]
"1000144" [label = "(<operator>.assignment,v9 = *v7)" ]
"1000146" [label = "(<operator>.indirection,*v7)" ]
"1000149" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000150" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000153" [label = "(<operator>.preDecrement,--i)" ]
"1000155" [label = "(<operator>.preIncrement,++v7)" ]
"1000158" [label = "(<operator>.logicalNot,!i)" ]
"1000162" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000163" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000164" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000169" [label = "(<operator>.equals,i == 1)" ]
"1000173" [label = "(<operator>.assignment,a5 = v7[1])" ]
"1000175" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000178" [label = "(<operator>.assignment,a4 = a5 + 2)" ]
"1000180" [label = "(<operator>.addition,a5 + 2)" ]
"1000183" [label = "(<operator>.assignmentMinus,i -= a5 + 2)" ]
"1000185" [label = "(<operator>.addition,a5 + 2)" ]
"1000189" [label = "(<operator>.lessThan,i < 0)" ]
"1000193" [label = "(<operator>.assignment,a6 = (unsigned __int8)v9)" ]
"1000195" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000196" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000199" [label = "(<operator>.equals,a2 == (unsigned __int8)v9)" ]
"1000201" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000202" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000206" [label = "(<operator>.cast,(_BYTE)a5)" ]
"1000207" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000211" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000212" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000213" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000216" [label = "(log_option_part_0,log_option_part_0(\"option found\", v7))" ]
"1000219" [label = "(<operator>.assignment,v10 = v7 + 2)" ]
"1000221" [label = "(<operator>.addition,v7 + 2)" ]
"1000228" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v9, a4, a5, a6))" ]
"1000229" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000230" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000237" [label = "(RETURN,return v10;,return v10;)" ]
"1000240" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000245" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000246" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000247" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000251" [label = "(<operator>.assignment,v9 = v7[2])" ]
"1000253" [label = "(<operator>.indirectIndexAccess,v7[2])" ]
"1000256" [label = "(<operators>.assignmentOr,v6 |= v9)" ]
"1000259" [label = "(<operator>.assignmentPlus,v7 += a4)" ]
"1000263" [label = "(<operator>.logicalNot,!i)" ]
"1000267" [label = "(<operator>.notEquals,(v6 & 0x101) != 1)" ]
"1000268" [label = "(<operator>.and,v6 & 0x101)" ]
"1000273" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000276" [label = "(<operator>.assignment,v7 = a1 + 108)" ]
"1000278" [label = "(<operator>.addition,a1 + 108)" ]
"1000281" [label = "(<operator>.assignment,i = 128)" ]
"1000285" [label = "(<operator>.notEquals,(v6 & 0x202) != 2)" ]
"1000286" [label = "(<operator>.and,v6 & 0x202)" ]
"1000291" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000294" [label = "(<operator>.assignment,v7 = a1 + 44)" ]
"1000296" [label = "(<operator>.addition,a1 + 44)" ]
"1000301" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 2)" ]
"1000302" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000303" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000306" [label = "(RETURN,return v10;,return v10;)" ]
"1000308" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v9, a4, a5, a6))" ]
"1000309" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000310" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000318" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000124" 
  "1000122" -> "1000128" 
  "1000124" -> "1000122" 
  "1000128" -> "1000164" 
  "1000128" -> "1000146" 
  "1000128" -> "1000268" 
  "1000128" -> "1000286" 
  "1000131" -> "1000164" 
  "1000131" -> "1000146" 
  "1000131" -> "1000268" 
  "1000131" -> "1000286" 
  "1000144" -> "1000150" 
  "1000146" -> "1000144" 
  "1000149" -> "1000164" 
  "1000149" -> "1000268" 
  "1000149" -> "1000286" 
  "1000149" -> "1000303" 
  "1000149" -> "1000153" 
  "1000150" -> "1000149" 
  "1000153" -> "1000155" 
  "1000155" -> "1000158" 
  "1000158" -> "1000164" 
  "1000158" -> "1000146" 
  "1000158" -> "1000230" 
  "1000162" -> "1000268" 
  "1000162" -> "1000286" 
  "1000162" -> "1000303" 
  "1000162" -> "1000169" 
  "1000163" -> "1000162" 
  "1000164" -> "1000163" 
  "1000169" -> "1000230" 
  "1000169" -> "1000175" 
  "1000173" -> "1000180" 
  "1000175" -> "1000173" 
  "1000178" -> "1000185" 
  "1000180" -> "1000178" 
  "1000183" -> "1000189" 
  "1000185" -> "1000183" 
  "1000189" -> "1000230" 
  "1000189" -> "1000196" 
  "1000193" -> "1000202" 
  "1000195" -> "1000193" 
  "1000196" -> "1000195" 
  "1000199" -> "1000207" 
  "1000199" -> "1000240" 
  "1000201" -> "1000199" 
  "1000202" -> "1000201" 
  "1000206" -> "1000213" 
  "1000206" -> "1000230" 
  "1000207" -> "1000206" 
  "1000211" -> "1000216" 
  "1000211" -> "1000221" 
  "1000212" -> "1000211" 
  "1000213" -> "1000212" 
  "1000216" -> "1000221" 
  "1000219" -> "1000237" 
  "1000221" -> "1000219" 
  "1000228" -> "1000237" 
  "1000229" -> "1000228" 
  "1000230" -> "1000229" 
  "1000237" -> "1000318" 
  "1000240" -> "1000247" 
  "1000240" -> "1000259" 
  "1000245" -> "1000253" 
  "1000245" -> "1000259" 
  "1000246" -> "1000245" 
  "1000247" -> "1000246" 
  "1000251" -> "1000256" 
  "1000253" -> "1000251" 
  "1000256" -> "1000259" 
  "1000259" -> "1000263" 
  "1000263" -> "1000164" 
  "1000263" -> "1000146" 
  "1000263" -> "1000268" 
  "1000263" -> "1000230" 
  "1000267" -> "1000286" 
  "1000267" -> "1000303" 
  "1000267" -> "1000273" 
  "1000268" -> "1000267" 
  "1000273" -> "1000278" 
  "1000276" -> "1000281" 
  "1000278" -> "1000276" 
  "1000281" -> "1000164" 
  "1000281" -> "1000146" 
  "1000281" -> "1000268" 
  "1000281" -> "1000286" 
  "1000285" -> "1000303" 
  "1000285" -> "1000291" 
  "1000286" -> "1000285" 
  "1000291" -> "1000296" 
  "1000294" -> "1000131" 
  "1000296" -> "1000294" 
  "1000301" -> "1000310" 
  "1000301" -> "1000306" 
  "1000302" -> "1000301" 
  "1000303" -> "1000302" 
  "1000306" -> "1000318" 
  "1000308" -> "1000318" 
  "1000309" -> "1000308" 
  "1000310" -> "1000309" 
  "1000106" -> "1000119" 
}
