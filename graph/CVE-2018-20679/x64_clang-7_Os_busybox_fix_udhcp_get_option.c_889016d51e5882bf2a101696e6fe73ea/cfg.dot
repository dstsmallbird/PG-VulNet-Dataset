digraph udhcp_get_option {  
"1000128" [label = "(<operator>.assignment,v14 = v3)" ]
"1000131" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000133" [label = "(<operator>.addition,a1 + 240)" ]
"1000136" [label = "(<operator>.assignment,v5 = a1 + 108)" ]
"1000138" [label = "(<operator>.addition,a1 + 108)" ]
"1000141" [label = "(<operator>.assignment,v6 = a1 + 44)" ]
"1000143" [label = "(<operator>.addition,a1 + 44)" ]
"1000146" [label = "(<operator>.assignment,v7 = 388)" ]
"1000149" [label = "(<operator>.assignment,v8 = 0)" ]
"1000160" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v4 + v10))" ]
"1000162" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10))" ]
"1000163" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10))" ]
"1000164" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000165" [label = "(<operator>.addition,v4 + v10)" ]
"1000169" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v10))" ]
"1000170" [label = "(<operator>.cast,(_BYTE *)(v4 + v10))" ]
"1000171" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000172" [label = "(<operator>.addition,v4 + v10)" ]
"1000176" [label = "(<operator>.preIncrement,++v10)" ]
"1000178" [label = "(<operator>.assignment,LODWORD(v11) = --v9 + v7)" ]
"1000179" [label = "(LODWORD,LODWORD(v11))" ]
"1000181" [label = "(<operator>.addition,--v9 + v7)" ]
"1000182" [label = "(<operator>.preDecrement,--v9)" ]
"1000186" [label = "(<operator>.lessThan,(int)v9 + v7 < 2)" ]
"1000187" [label = "(<operator>.addition,(int)v9 + v7)" ]
"1000188" [label = "(<operator>.cast,(int)v9)" ]
"1000189" [label = "(UNKNOWN,int,int)" ]
"1000195" [label = "(<operator>.equals,(_BYTE)v11 == 0xFF)" ]
"1000196" [label = "(<operator>.cast,(_BYTE)v11)" ]
"1000197" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000202" [label = "(<operator>.equals,(v8 & 0x101) == 1)" ]
"1000203" [label = "(<operator>.and,v8 & 0x101)" ]
"1000208" [label = "(<operators>.assignmentOr,v8 |= 0x101u)" ]
"1000211" [label = "(<operator>.assignment,v7 = 128)" ]
"1000214" [label = "(<operator>.assignment,v4 = v5)" ]
"1000219" [label = "(<operator>.equals,(v8 & 0x202) == 2)" ]
"1000220" [label = "(<operator>.and,v8 & 0x202)" ]
"1000225" [label = "(<operators>.assignmentOr,v8 |= 0x202u)" ]
"1000228" [label = "(<operator>.assignment,v7 = 64)" ]
"1000231" [label = "(<operator>.assignment,v4 = v6)" ]
"1000237" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000238" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000239" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000242" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, a3, v11, v6, v5, v14))" ]
"1000243" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000244" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000255" [label = "(<operator>.lessThan,v7 - (int)v10 < 2)" ]
"1000256" [label = "(<operator>.subtraction,v7 - (int)v10)" ]
"1000258" [label = "(<operator>.cast,(int)v10)" ]
"1000259" [label = "(UNKNOWN,int,int)" ]
"1000263" [label = "(<operator>.assignment,a3 = *(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000265" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000266" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000267" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000268" [label = "(<operator>.addition,v4 + v10 + 1)" ]
"1000270" [label = "(<operator>.addition,v10 + 1)" ]
"1000273" [label = "(<operator>.assignment,v7 = v7 - 2 - *(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000275" [label = "(<operator>.subtraction,v7 - 2 - *(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000277" [label = "(<operator>.subtraction,2 - *(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000279" [label = "(<operator>.subtraction,*(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000280" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000281" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000282" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000283" [label = "(<operator>.addition,v4 + v10 + 1)" ]
"1000285" [label = "(<operator>.addition,v10 + 1)" ]
"1000290" [label = "(<operator>.lessThan,v7 < 0)" ]
"1000295" [label = "(<operator>.notEquals,(_DWORD)v11 != a2)" ]
"1000296" [label = "(<operator>.cast,(_DWORD)v11)" ]
"1000297" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000302" [label = "(<operator>.logicalAnd,(_BYTE)v11 == 52 && (_BYTE)a3)" ]
"1000303" [label = "(<operator>.equals,(_BYTE)v11 == 52)" ]
"1000304" [label = "(<operator>.cast,(_BYTE)v11)" ]
"1000305" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000308" [label = "(<operator>.cast,(_BYTE)a3)" ]
"1000309" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000311" [label = "(<operators>.assignmentOr,v8 |= *(unsigned __int8 *)(v4 + v10 + 2))" ]
"1000313" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10 + 2))" ]
"1000314" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10 + 2))" ]
"1000315" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000316" [label = "(<operator>.addition,v4 + v10 + 2)" ]
"1000318" [label = "(<operator>.addition,v10 + 2)" ]
"1000321" [label = "(<operator>.assignmentPlus,v4 += v10 + a3 + 2)" ]
"1000323" [label = "(<operator>.addition,v10 + a3 + 2)" ]
"1000325" [label = "(<operator>.addition,a3 + 2)" ]
"1000330" [label = "(<operator>.greaterThan,v7 > 0)" ]
"1000336" [label = "(<operator>.logicalNot,!(_BYTE)a3)" ]
"1000337" [label = "(<operator>.cast,(_BYTE)a3)" ]
"1000338" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000343" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, a3, v11, v6, v5, v14))" ]
"1000344" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000345" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000353" [label = "(RETURN,return v12;,return v12;)" ]
"1000355" [label = "(log_option,log_option(\"option found\", v4 + v10, a3, v11, v6, v5, v14))" ]
"1000357" [label = "(<operator>.addition,v4 + v10)" ]
"1000365" [label = "(<operator>.assignment,v12 = v4 + v10 + 2)" ]
"1000367" [label = "(<operator>.addition,v4 + v10 + 2)" ]
"1000369" [label = "(<operator>.addition,v10 + 2)" ]
"1000372" [label = "(RETURN,return v12;,return v12;)" ]
"1000112" [label = "(METHOD,udhcp_get_option)" ]
"1000374" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000128" -> "1000133" 
  "1000131" -> "1000138" 
  "1000133" -> "1000131" 
  "1000136" -> "1000143" 
  "1000138" -> "1000136" 
  "1000141" -> "1000146" 
  "1000143" -> "1000141" 
  "1000146" -> "1000149" 
  "1000149" -> "1000374" 
  "1000149" -> "1000197" 
  "1000149" -> "1000164" 
  "1000160" -> "1000171" 
  "1000162" -> "1000160" 
  "1000163" -> "1000162" 
  "1000164" -> "1000165" 
  "1000165" -> "1000163" 
  "1000169" -> "1000197" 
  "1000169" -> "1000374" 
  "1000169" -> "1000176" 
  "1000170" -> "1000169" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000176" -> "1000179" 
  "1000178" -> "1000189" 
  "1000179" -> "1000182" 
  "1000181" -> "1000178" 
  "1000182" -> "1000181" 
  "1000186" -> "1000197" 
  "1000186" -> "1000164" 
  "1000186" -> "1000345" 
  "1000187" -> "1000186" 
  "1000188" -> "1000187" 
  "1000189" -> "1000188" 
  "1000195" -> "1000203" 
  "1000195" -> "1000259" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000202" -> "1000208" 
  "1000202" -> "1000220" 
  "1000203" -> "1000202" 
  "1000208" -> "1000211" 
  "1000211" -> "1000214" 
  "1000214" -> "1000330" 
  "1000219" -> "1000225" 
  "1000219" -> "1000239" 
  "1000220" -> "1000219" 
  "1000225" -> "1000228" 
  "1000228" -> "1000231" 
  "1000231" -> "1000330" 
  "1000237" -> "1000244" 
  "1000237" -> "1000372" 
  "1000238" -> "1000237" 
  "1000239" -> "1000238" 
  "1000242" -> "1000372" 
  "1000243" -> "1000242" 
  "1000244" -> "1000243" 
  "1000255" -> "1000345" 
  "1000255" -> "1000267" 
  "1000256" -> "1000255" 
  "1000258" -> "1000256" 
  "1000259" -> "1000258" 
  "1000263" -> "1000282" 
  "1000265" -> "1000263" 
  "1000266" -> "1000265" 
  "1000267" -> "1000270" 
  "1000268" -> "1000266" 
  "1000270" -> "1000268" 
  "1000273" -> "1000290" 
  "1000275" -> "1000273" 
  "1000277" -> "1000275" 
  "1000279" -> "1000277" 
  "1000280" -> "1000279" 
  "1000281" -> "1000280" 
  "1000282" -> "1000285" 
  "1000283" -> "1000281" 
  "1000285" -> "1000283" 
  "1000290" -> "1000297" 
  "1000290" -> "1000345" 
  "1000295" -> "1000305" 
  "1000295" -> "1000338" 
  "1000296" -> "1000295" 
  "1000297" -> "1000296" 
  "1000302" -> "1000315" 
  "1000302" -> "1000325" 
  "1000303" -> "1000309" 
  "1000303" -> "1000302" 
  "1000304" -> "1000303" 
  "1000305" -> "1000304" 
  "1000308" -> "1000302" 
  "1000309" -> "1000308" 
  "1000311" -> "1000325" 
  "1000313" -> "1000311" 
  "1000314" -> "1000313" 
  "1000315" -> "1000318" 
  "1000316" -> "1000314" 
  "1000318" -> "1000316" 
  "1000321" -> "1000330" 
  "1000323" -> "1000321" 
  "1000325" -> "1000323" 
  "1000330" -> "1000374" 
  "1000330" -> "1000197" 
  "1000330" -> "1000164" 
  "1000330" -> "1000345" 
  "1000336" -> "1000345" 
  "1000336" -> "1000357" 
  "1000337" -> "1000336" 
  "1000338" -> "1000337" 
  "1000343" -> "1000353" 
  "1000344" -> "1000343" 
  "1000345" -> "1000344" 
  "1000353" -> "1000374" 
  "1000355" -> "1000369" 
  "1000357" -> "1000355" 
  "1000365" -> "1000372" 
  "1000367" -> "1000365" 
  "1000369" -> "1000367" 
  "1000372" -> "1000374" 
  "1000112" -> "1000128" 
}
