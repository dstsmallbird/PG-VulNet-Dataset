digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000131" [label = "(<operator>.addition,a1 + 44)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000136" [label = "(<operator>.addition,a1 + 108)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000159" [label = "(<operator>.assignment,v7 = 1)" ]
"1000162" [label = "(<operator>.assignment,v8 = 0)" ]
"1000168" [label = "(<operator>.assignment,v9 = (unsigned __int8 *)(v4 + v7))" ]
"1000170" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000171" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000172" [label = "(<operator>.addition,v4 + v7)" ]
"1000175" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000177" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000178" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7 - 1))" ]
"1000179" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000180" [label = "(<operator>.addition,v4 + v7 - 1)" ]
"1000182" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000186" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7 - 1))" ]
"1000187" [label = "(<operator>.cast,(_BYTE *)(v4 + v7 - 1))" ]
"1000188" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000189" [label = "(<operator>.addition,v4 + v7 - 1)" ]
"1000191" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000195" [label = "(<operator>.preDecrement,--v8)" ]
"1000197" [label = "(<operator>.preIncrement,++v7)" ]
"1000200" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000201" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000203" [label = "(<operator>.addition,v8 + 1)" ]
"1000209" [label = "(<operator>.equals,v10 == 255)" ]
"1000214" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000215" [label = "(<operator>.addition,v5 + v8)" ]
"1000220" [label = "(<operator>.assignment,v11 = *v9)" ]
"1000222" [label = "(<operator>.indirection,*v9)" ]
"1000224" [label = "(<operator>.assignment,v5 = v5 - v11 + v8 - 2)" ]
"1000226" [label = "(<operator>.subtraction,v5 - v11 + v8 - 2)" ]
"1000228" [label = "(<operator>.addition,v11 + v8 - 2)" ]
"1000230" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000234" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000239" [label = "(<operator>.equals,v10 == a2)" ]
"1000243" [label = "(<operator>.assignment,v12 = v4 - v8 + 2)" ]
"1000245" [label = "(<operator>.subtraction,v4 - v8 + 2)" ]
"1000247" [label = "(<operator>.addition,v8 + 2)" ]
"1000251" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000252" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000253" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000257" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v4 - v8 + 2) = 0)" ]
"1000258" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v4 - v8 + 2))" ]
"1000259" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v4 - v8 + 2))" ]
"1000260" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000261" [label = "(bin2hex,bin2hex(v14, v4 - v8 + 2))" ]
"1000263" [label = "(<operator>.subtraction,v4 - v8 + 2)" ]
"1000265" [label = "(<operator>.addition,v8 + 2)" ]
"1000269" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(v9 - 1), v14))" ]
"1000272" [label = "(<operator>.indirection,*(v9 - 1))" ]
"1000273" [label = "(<operator>.subtraction,v9 - 1)" ]
"1000277" [label = "(RETURN,return v12;,return v12;)" ]
"1000280" [label = "(<operator>.logicalAnd,v10 == 52 && *v9)" ]
"1000281" [label = "(<operator>.equals,v10 == 52)" ]
"1000284" [label = "(<operator>.indirection,*v9)" ]
"1000286" [label = "(<operators>.assignmentOr,v6 |= v9[1])" ]
"1000288" [label = "(<operator>.indirectIndexAccess,v9[1])" ]
"1000291" [label = "(<operator>.assignment,v4 = v4 + v11 - v8 + 2)" ]
"1000293" [label = "(<operator>.addition,v4 + v11 - v8 + 2)" ]
"1000295" [label = "(<operator>.subtraction,v11 - v8 + 2)" ]
"1000297" [label = "(<operator>.addition,v8 + 2)" ]
"1000301" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000306" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000308" [label = "(RETURN,return 0;,return 0;)" ]
"1000311" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000312" [label = "(<operator>.and,v6 & 0x101)" ]
"1000317" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000320" [label = "(<operator>.assignment,v5 = 128)" ]
"1000323" [label = "(<operator>.assignment,v4 = v3)" ]
"1000329" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000330" [label = "(<operator>.and,v6 & 0x202)" ]
"1000335" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000338" [label = "(<operator>.assignment,v5 = 64)" ]
"1000341" [label = "(<operator>.assignment,v4 = v2)" ]
"1000346" [label = "(<operator>.assignment,v12 = 0)" ]
"1000350" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000351" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000352" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000355" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000358" [label = "(RETURN,return v12;,return v12;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000360" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000159" 
  "1000147" -> "1000312" 
  "1000147" -> "1000330" 
  "1000147" -> "1000346" 
  "1000159" -> "1000162" 
  "1000162" -> "1000171" 
  "1000162" -> "1000209" 
  "1000168" -> "1000179" 
  "1000170" -> "1000168" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000175" -> "1000188" 
  "1000177" -> "1000175" 
  "1000178" -> "1000177" 
  "1000179" -> "1000182" 
  "1000180" -> "1000178" 
  "1000182" -> "1000180" 
  "1000186" -> "1000209" 
  "1000186" -> "1000312" 
  "1000186" -> "1000330" 
  "1000186" -> "1000346" 
  "1000186" -> "1000195" 
  "1000187" -> "1000186" 
  "1000188" -> "1000191" 
  "1000189" -> "1000187" 
  "1000191" -> "1000189" 
  "1000195" -> "1000197" 
  "1000197" -> "1000203" 
  "1000200" -> "1000171" 
  "1000200" -> "1000209" 
  "1000200" -> "1000306" 
  "1000201" -> "1000200" 
  "1000203" -> "1000201" 
  "1000209" -> "1000312" 
  "1000209" -> "1000330" 
  "1000209" -> "1000346" 
  "1000209" -> "1000215" 
  "1000214" -> "1000306" 
  "1000214" -> "1000222" 
  "1000215" -> "1000214" 
  "1000220" -> "1000230" 
  "1000222" -> "1000220" 
  "1000224" -> "1000234" 
  "1000226" -> "1000224" 
  "1000228" -> "1000226" 
  "1000230" -> "1000228" 
  "1000234" -> "1000306" 
  "1000234" -> "1000239" 
  "1000239" -> "1000247" 
  "1000239" -> "1000281" 
  "1000243" -> "1000253" 
  "1000245" -> "1000243" 
  "1000247" -> "1000245" 
  "1000251" -> "1000260" 
  "1000251" -> "1000277" 
  "1000252" -> "1000251" 
  "1000253" -> "1000252" 
  "1000257" -> "1000273" 
  "1000258" -> "1000257" 
  "1000259" -> "1000258" 
  "1000260" -> "1000265" 
  "1000261" -> "1000259" 
  "1000263" -> "1000261" 
  "1000265" -> "1000263" 
  "1000269" -> "1000277" 
  "1000272" -> "1000269" 
  "1000273" -> "1000272" 
  "1000277" -> "1000360" 
  "1000280" -> "1000288" 
  "1000280" -> "1000297" 
  "1000281" -> "1000280" 
  "1000281" -> "1000284" 
  "1000284" -> "1000280" 
  "1000286" -> "1000297" 
  "1000288" -> "1000286" 
  "1000291" -> "1000301" 
  "1000293" -> "1000291" 
  "1000295" -> "1000293" 
  "1000297" -> "1000295" 
  "1000301" -> "1000159" 
  "1000301" -> "1000312" 
  "1000301" -> "1000306" 
  "1000306" -> "1000308" 
  "1000308" -> "1000360" 
  "1000311" -> "1000317" 
  "1000311" -> "1000330" 
  "1000311" -> "1000346" 
  "1000312" -> "1000311" 
  "1000317" -> "1000320" 
  "1000320" -> "1000323" 
  "1000323" -> "1000159" 
  "1000323" -> "1000312" 
  "1000323" -> "1000330" 
  "1000323" -> "1000346" 
  "1000323" -> "1000159" 
  "1000323" -> "1000312" 
  "1000323" -> "1000330" 
  "1000329" -> "1000335" 
  "1000329" -> "1000346" 
  "1000330" -> "1000329" 
  "1000335" -> "1000338" 
  "1000338" -> "1000341" 
  "1000341" -> "1000159" 
  "1000341" -> "1000312" 
  "1000341" -> "1000330" 
  "1000341" -> "1000346" 
  "1000346" -> "1000352" 
  "1000350" -> "1000355" 
  "1000350" -> "1000358" 
  "1000351" -> "1000350" 
  "1000352" -> "1000351" 
  "1000355" -> "1000358" 
  "1000358" -> "1000360" 
  "1000113" -> "1000131" 
}
