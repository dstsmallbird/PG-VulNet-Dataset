digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000124" [label = "(<operator>.assignment,v3 = 0)" ]
"1000128" [label = "(<operator>.assignment,i = 388)" ]
"1000131" [label = "(<operator>.assignment,i = 64)" ]
"1000141" [label = "(<operator>.assignment,v6 = *v2)" ]
"1000143" [label = "(<operator>.indirection,*v2)" ]
"1000146" [label = "(<operator>.logicalNot,!*v2)" ]
"1000147" [label = "(<operator>.indirection,*v2)" ]
"1000150" [label = "(<operator>.preDecrement,--i)" ]
"1000152" [label = "(<operator>.preIncrement,++v2)" ]
"1000156" [label = "(<operator>.equals,v6 == 255)" ]
"1000161" [label = "(<operator>.logicalOr,i <= 1 || (v7 = v2[1] + 2, i -= v7, i < 0))" ]
"1000162" [label = "(<operator>.lessEqualsThan,i <= 1)" ]
"1000166" [label = "(<operator>.assignment,v7 = v2[1] + 2)" ]
"1000168" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000169" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000174" [label = "(<operator>.assignmentMinus,i -= v7)" ]
"1000177" [label = "(<operator>.lessThan,i < 0)" ]
"1000182" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000186" [label = "(<operator>.equals,v6 == (_DWORD)a2)" ]
"1000188" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000189" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000192" [label = "(log_option,log_option(\"option found\", v2))" ]
"1000195" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000196" [label = "(<operator>.addition,v2 + 2)" ]
"1000200" [label = "(<operator>.equals,v6 == 52)" ]
"1000203" [label = "(<operator>.assignment,v8 = v7 <= 2)" ]
"1000205" [label = "(<operator>.lessEqualsThan,v7 <= 2)" ]
"1000209" [label = "(<operator>.assignment,v8 = 1)" ]
"1000213" [label = "(<operator>.logicalNot,!v8)" ]
"1000215" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000217" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000220" [label = "(<operator>.assignmentPlus,v2 += v7)" ]
"1000225" [label = "(<operator>.lessEqualsThan,i <= 0)" ]
"1000230" [label = "(<operator>.notEquals,(v3 & 0x101) != 1)" ]
"1000231" [label = "(<operator>.and,v3 & 0x101)" ]
"1000236" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000239" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000241" [label = "(<operator>.addition,a1 + 108)" ]
"1000244" [label = "(<operator>.assignment,i = 128)" ]
"1000248" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000249" [label = "(<operator>.and,v3 & 0x202)" ]
"1000254" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000257" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000259" [label = "(<operator>.addition,a1 + 44)" ]
"1000264" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000265" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000266" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000270" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000274" [label = "(RETURN,return result;,return result;)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000276" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000124" 
  "1000121" -> "1000119" 
  "1000124" -> "1000128" 
  "1000128" -> "1000143" 
  "1000128" -> "1000231" 
  "1000128" -> "1000249" 
  "1000131" -> "1000143" 
  "1000131" -> "1000231" 
  "1000131" -> "1000249" 
  "1000141" -> "1000147" 
  "1000143" -> "1000141" 
  "1000146" -> "1000150" 
  "1000146" -> "1000156" 
  "1000147" -> "1000146" 
  "1000150" -> "1000152" 
  "1000152" -> "1000225" 
  "1000156" -> "1000231" 
  "1000156" -> "1000249" 
  "1000156" -> "1000266" 
  "1000156" -> "1000162" 
  "1000161" -> "1000182" 
  "1000161" -> "1000189" 
  "1000162" -> "1000161" 
  "1000162" -> "1000169" 
  "1000166" -> "1000174" 
  "1000168" -> "1000166" 
  "1000169" -> "1000168" 
  "1000174" -> "1000177" 
  "1000177" -> "1000161" 
  "1000182" -> "1000189" 
  "1000186" -> "1000192" 
  "1000186" -> "1000200" 
  "1000188" -> "1000186" 
  "1000189" -> "1000188" 
  "1000192" -> "1000196" 
  "1000195" -> "1000276" 
  "1000196" -> "1000195" 
  "1000200" -> "1000205" 
  "1000200" -> "1000209" 
  "1000203" -> "1000213" 
  "1000205" -> "1000203" 
  "1000209" -> "1000213" 
  "1000213" -> "1000217" 
  "1000213" -> "1000220" 
  "1000215" -> "1000220" 
  "1000217" -> "1000215" 
  "1000220" -> "1000225" 
  "1000225" -> "1000143" 
  "1000225" -> "1000231" 
  "1000225" -> "1000182" 
  "1000230" -> "1000249" 
  "1000230" -> "1000266" 
  "1000230" -> "1000236" 
  "1000231" -> "1000230" 
  "1000236" -> "1000241" 
  "1000239" -> "1000244" 
  "1000241" -> "1000239" 
  "1000244" -> "1000143" 
  "1000244" -> "1000231" 
  "1000244" -> "1000249" 
  "1000248" -> "1000266" 
  "1000248" -> "1000254" 
  "1000249" -> "1000248" 
  "1000254" -> "1000259" 
  "1000257" -> "1000131" 
  "1000259" -> "1000257" 
  "1000264" -> "1000270" 
  "1000264" -> "1000274" 
  "1000265" -> "1000264" 
  "1000266" -> "1000265" 
  "1000270" -> "1000274" 
  "1000274" -> "1000276" 
  "1000108" -> "1000121" 
}
