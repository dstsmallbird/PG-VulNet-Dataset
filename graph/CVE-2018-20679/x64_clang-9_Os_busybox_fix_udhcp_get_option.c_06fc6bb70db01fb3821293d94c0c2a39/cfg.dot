digraph udhcp_get_option {  
"1000128" [label = "(<operator>.assignment,v14 = v3)" ]
"1000131" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000133" [label = "(<operator>.addition,a1 + 240)" ]
"1000136" [label = "(<operator>.assignment,v5 = a1 + 44)" ]
"1000138" [label = "(<operator>.addition,a1 + 44)" ]
"1000141" [label = "(<operator>.assignment,v6 = a1 + 108)" ]
"1000143" [label = "(<operator>.addition,a1 + 108)" ]
"1000146" [label = "(<operator>.assignment,v7 = 388)" ]
"1000149" [label = "(<operator>.assignment,v8 = 0)" ]
"1000155" [label = "(<operator>.assignment,LODWORD(v9) = 1)" ]
"1000156" [label = "(LODWORD,LODWORD(v9))" ]
"1000163" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v4 + v10))" ]
"1000165" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10))" ]
"1000166" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10))" ]
"1000167" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000168" [label = "(<operator>.addition,v4 + v10)" ]
"1000172" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v10))" ]
"1000173" [label = "(<operator>.cast,(_BYTE *)(v4 + v10))" ]
"1000174" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000175" [label = "(<operator>.addition,v4 + v10)" ]
"1000179" [label = "(<operator>.preIncrement,++v10)" ]
"1000181" [label = "(<operator>.assignment,LODWORD(v9) = v9 - 1)" ]
"1000182" [label = "(LODWORD,LODWORD(v9))" ]
"1000184" [label = "(<operator>.subtraction,v9 - 1)" ]
"1000188" [label = "(<operator>.lessThan,(int)v9 + v7 < 2)" ]
"1000189" [label = "(<operator>.addition,(int)v9 + v7)" ]
"1000190" [label = "(<operator>.cast,(int)v9)" ]
"1000191" [label = "(UNKNOWN,int,int)" ]
"1000197" [label = "(<operator>.equals,(_BYTE)v11 == 0xFF)" ]
"1000198" [label = "(<operator>.cast,(_BYTE)v11)" ]
"1000199" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000204" [label = "(<operator>.equals,(v8 & 0x101) == 1)" ]
"1000205" [label = "(<operator>.and,v8 & 0x101)" ]
"1000210" [label = "(<operators>.assignmentOr,v8 |= 0x101u)" ]
"1000213" [label = "(<operator>.assignment,v7 = 128)" ]
"1000216" [label = "(<operator>.assignment,v4 = v6)" ]
"1000221" [label = "(<operator>.equals,(v8 & 0x202) == 2)" ]
"1000222" [label = "(<operator>.and,v8 & 0x202)" ]
"1000227" [label = "(<operators>.assignmentOr,v8 |= 0x202u)" ]
"1000230" [label = "(<operator>.assignment,v7 = 64)" ]
"1000233" [label = "(<operator>.assignment,v4 = v5)" ]
"1000239" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000240" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000241" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000244" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, a3, v9, v5, v6, v14))" ]
"1000245" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000246" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000256" [label = "(<operator>.assignment,LODWORD(v9) = v7 - v10)" ]
"1000257" [label = "(LODWORD,LODWORD(v9))" ]
"1000259" [label = "(<operator>.subtraction,v7 - v10)" ]
"1000263" [label = "(<operator>.lessThan,v7 - (int)v10 < 2)" ]
"1000264" [label = "(<operator>.subtraction,v7 - (int)v10)" ]
"1000266" [label = "(<operator>.cast,(int)v10)" ]
"1000267" [label = "(UNKNOWN,int,int)" ]
"1000271" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000273" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000274" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000275" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000276" [label = "(<operator>.addition,v4 + v10 + 1)" ]
"1000278" [label = "(<operator>.addition,v10 + 1)" ]
"1000281" [label = "(<operator>.assignment,a3 = (unsigned int)-*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000283" [label = "(<operator>.cast,(unsigned int)-*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000284" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000285" [label = "(<operator>.minus,-*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000286" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000287" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000288" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000289" [label = "(<operator>.addition,v4 + v10 + 1)" ]
"1000291" [label = "(<operator>.addition,v10 + 1)" ]
"1000294" [label = "(<operator>.assignment,v7 = v7 - 2 - *(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000296" [label = "(<operator>.subtraction,v7 - 2 - *(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000298" [label = "(<operator>.subtraction,2 - *(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000300" [label = "(<operator>.subtraction,*(unsigned __int8 *)(v4 + v10 + 1) - v10)" ]
"1000301" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000302" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10 + 1))" ]
"1000303" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000304" [label = "(<operator>.addition,v4 + v10 + 1)" ]
"1000306" [label = "(<operator>.addition,v10 + 1)" ]
"1000311" [label = "(<operator>.lessThan,v7 < 0)" ]
"1000316" [label = "(<operator>.notEquals,v11 != a2)" ]
"1000321" [label = "(<operator>.logicalAnd,(_BYTE)v11 == 52 && (_BYTE)v9)" ]
"1000322" [label = "(<operator>.equals,(_BYTE)v11 == 52)" ]
"1000323" [label = "(<operator>.cast,(_BYTE)v11)" ]
"1000324" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000327" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000328" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000330" [label = "(<operators>.assignmentOr,v8 |= *(unsigned __int8 *)(v4 + v10 + 2))" ]
"1000332" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v10 + 2))" ]
"1000333" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v10 + 2))" ]
"1000334" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000335" [label = "(<operator>.addition,v4 + v10 + 2)" ]
"1000337" [label = "(<operator>.addition,v10 + 2)" ]
"1000340" [label = "(<operator>.assignment,LODWORD(a3) = v10 + v4 + v9 + 2)" ]
"1000341" [label = "(LODWORD,LODWORD(a3))" ]
"1000343" [label = "(<operator>.addition,v10 + v4 + v9 + 2)" ]
"1000345" [label = "(<operator>.addition,v4 + v9 + 2)" ]
"1000347" [label = "(<operator>.addition,v9 + 2)" ]
"1000350" [label = "(<operator>.assignmentPlus,v4 += v10 + v9 + 2)" ]
"1000352" [label = "(<operator>.addition,v10 + v9 + 2)" ]
"1000354" [label = "(<operator>.addition,v9 + 2)" ]
"1000359" [label = "(<operator>.greaterThan,v7 > 0)" ]
"1000365" [label = "(<operator>.logicalNot,!(_BYTE)v9)" ]
"1000366" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000367" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000372" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, a3, v9, v5, v6, v14))" ]
"1000373" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000374" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000382" [label = "(RETURN,return v12;,return v12;)" ]
"1000384" [label = "(log_option,log_option(\"option found\", v4 + v10, a3, v9, v5, v6, v14))" ]
"1000386" [label = "(<operator>.addition,v4 + v10)" ]
"1000394" [label = "(<operator>.assignment,v12 = v4 + v10 + 2)" ]
"1000396" [label = "(<operator>.addition,v4 + v10 + 2)" ]
"1000398" [label = "(<operator>.addition,v10 + 2)" ]
"1000401" [label = "(RETURN,return v12;,return v12;)" ]
"1000112" [label = "(METHOD,udhcp_get_option)" ]
"1000403" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000128" -> "1000133" 
  "1000131" -> "1000138" 
  "1000133" -> "1000131" 
  "1000136" -> "1000143" 
  "1000138" -> "1000136" 
  "1000141" -> "1000146" 
  "1000143" -> "1000141" 
  "1000146" -> "1000149" 
  "1000149" -> "1000403" 
  "1000149" -> "1000156" 
  "1000155" -> "1000199" 
  "1000155" -> "1000167" 
  "1000156" -> "1000155" 
  "1000163" -> "1000174" 
  "1000165" -> "1000163" 
  "1000166" -> "1000165" 
  "1000167" -> "1000168" 
  "1000168" -> "1000166" 
  "1000172" -> "1000199" 
  "1000172" -> "1000403" 
  "1000172" -> "1000179" 
  "1000173" -> "1000172" 
  "1000174" -> "1000175" 
  "1000175" -> "1000173" 
  "1000179" -> "1000182" 
  "1000181" -> "1000191" 
  "1000182" -> "1000184" 
  "1000184" -> "1000181" 
  "1000188" -> "1000199" 
  "1000188" -> "1000167" 
  "1000188" -> "1000374" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000191" -> "1000190" 
  "1000197" -> "1000205" 
  "1000197" -> "1000257" 
  "1000198" -> "1000197" 
  "1000199" -> "1000198" 
  "1000204" -> "1000210" 
  "1000204" -> "1000222" 
  "1000205" -> "1000204" 
  "1000210" -> "1000213" 
  "1000213" -> "1000216" 
  "1000216" -> "1000359" 
  "1000221" -> "1000227" 
  "1000221" -> "1000241" 
  "1000222" -> "1000221" 
  "1000227" -> "1000230" 
  "1000230" -> "1000233" 
  "1000233" -> "1000359" 
  "1000239" -> "1000246" 
  "1000239" -> "1000401" 
  "1000240" -> "1000239" 
  "1000241" -> "1000240" 
  "1000244" -> "1000401" 
  "1000245" -> "1000244" 
  "1000246" -> "1000245" 
  "1000256" -> "1000267" 
  "1000257" -> "1000259" 
  "1000259" -> "1000256" 
  "1000263" -> "1000374" 
  "1000263" -> "1000275" 
  "1000264" -> "1000263" 
  "1000266" -> "1000264" 
  "1000267" -> "1000266" 
  "1000271" -> "1000284" 
  "1000273" -> "1000271" 
  "1000274" -> "1000273" 
  "1000275" -> "1000278" 
  "1000276" -> "1000274" 
  "1000278" -> "1000276" 
  "1000281" -> "1000303" 
  "1000283" -> "1000281" 
  "1000284" -> "1000288" 
  "1000285" -> "1000283" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000288" -> "1000291" 
  "1000289" -> "1000287" 
  "1000291" -> "1000289" 
  "1000294" -> "1000311" 
  "1000296" -> "1000294" 
  "1000298" -> "1000296" 
  "1000300" -> "1000298" 
  "1000301" -> "1000300" 
  "1000302" -> "1000301" 
  "1000303" -> "1000306" 
  "1000304" -> "1000302" 
  "1000306" -> "1000304" 
  "1000311" -> "1000374" 
  "1000311" -> "1000316" 
  "1000316" -> "1000324" 
  "1000316" -> "1000367" 
  "1000321" -> "1000334" 
  "1000321" -> "1000341" 
  "1000322" -> "1000328" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000324" -> "1000323" 
  "1000327" -> "1000321" 
  "1000328" -> "1000327" 
  "1000330" -> "1000341" 
  "1000332" -> "1000330" 
  "1000333" -> "1000332" 
  "1000334" -> "1000337" 
  "1000335" -> "1000333" 
  "1000337" -> "1000335" 
  "1000340" -> "1000354" 
  "1000341" -> "1000347" 
  "1000343" -> "1000340" 
  "1000345" -> "1000343" 
  "1000347" -> "1000345" 
  "1000350" -> "1000359" 
  "1000352" -> "1000350" 
  "1000354" -> "1000352" 
  "1000359" -> "1000403" 
  "1000359" -> "1000156" 
  "1000359" -> "1000374" 
  "1000365" -> "1000374" 
  "1000365" -> "1000386" 
  "1000366" -> "1000365" 
  "1000367" -> "1000366" 
  "1000372" -> "1000382" 
  "1000373" -> "1000372" 
  "1000374" -> "1000373" 
  "1000382" -> "1000403" 
  "1000384" -> "1000398" 
  "1000386" -> "1000384" 
  "1000394" -> "1000401" 
  "1000396" -> "1000394" 
  "1000398" -> "1000396" 
  "1000401" -> "1000403" 
  "1000112" -> "1000128" 
}
