digraph udhcp_get_option {  
"1000113" [label = "(<operator>.assignment,v6 = 0)" ]
"1000116" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000118" [label = "(<operator>.addition,a1 + 240)" ]
"1000121" [label = "(<operator>.assignment,v5 = 388)" ]
"1000134" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000139" [label = "(<operator>.indirection,*v4)" ]
"1000142" [label = "(<operator>.preDecrement,--v5)" ]
"1000144" [label = "(<operator>.preIncrement,++v4)" ]
"1000147" [label = "(<operator>.notEquals,*v4 != 255)" ]
"1000148" [label = "(<operator>.indirection,*v4)" ]
"1000153" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000154" [label = "(<operator>.and,v6 & 0x101)" ]
"1000159" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000162" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000164" [label = "(<operator>.addition,a1 + 108)" ]
"1000167" [label = "(<operator>.assignment,v5 = 128)" ]
"1000173" [label = "(<operator>.notEquals,(v6 & 0x202) != 2)" ]
"1000174" [label = "(<operator>.and,v6 & 0x202)" ]
"1000180" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000181" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000182" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000185" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000188" [label = "(RETURN,return 0;,return 0;)" ]
"1000190" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000193" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000195" [label = "(<operator>.addition,a1 + 44)" ]
"1000198" [label = "(<operator>.assignment,v5 = 64)" ]
"1000202" [label = "(<operator>.lessEqualsThan,v5 <= 1)" ]
"1000206" [label = "(<operator>.assignment,v7 = v4[1] + 2)" ]
"1000208" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000209" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000213" [label = "(<operator>.assignmentMinus,v5 -= v7)" ]
"1000217" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000222" [label = "(<operator>.equals,a2 == *v4)" ]
"1000224" [label = "(<operator>.indirection,*v4)" ]
"1000228" [label = "(<operator>.logicalAnd,*v4 == 52 && v7 > 2)" ]
"1000229" [label = "(<operator>.equals,*v4 == 52)" ]
"1000230" [label = "(<operator>.indirection,*v4)" ]
"1000233" [label = "(<operator>.greaterThan,v7 > 2)" ]
"1000236" [label = "(<operators>.assignmentOr,v6 |= v4[2])" ]
"1000238" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000241" [label = "(<operator>.assignmentPlus,v4 += v7)" ]
"1000245" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000246" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000251" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000253" [label = "(RETURN,return 0;,return 0;)" ]
"1000255" [label = "(log_option,log_option(\"option found\", v4))" ]
"1000258" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000259" [label = "(<operator>.addition,v4 + 2)" ]
"1000105" [label = "(METHOD,udhcp_get_option)" ]
"1000262" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000113" -> "1000118" 
  "1000116" -> "1000121" 
  "1000118" -> "1000116" 
  "1000121" -> "1000134" 
  "1000121" -> "1000148" 
  "1000121" -> "1000202" 
  "1000121" -> "1000246" 
  "1000134" -> "1000251" 
  "1000134" -> "1000139" 
  "1000139" -> "1000148" 
  "1000139" -> "1000202" 
  "1000139" -> "1000246" 
  "1000139" -> "1000142" 
  "1000142" -> "1000144" 
  "1000144" -> "1000134" 
  "1000144" -> "1000148" 
  "1000147" -> "1000202" 
  "1000147" -> "1000246" 
  "1000147" -> "1000154" 
  "1000148" -> "1000147" 
  "1000153" -> "1000159" 
  "1000153" -> "1000174" 
  "1000154" -> "1000153" 
  "1000159" -> "1000164" 
  "1000162" -> "1000167" 
  "1000164" -> "1000162" 
  "1000167" -> "1000134" 
  "1000167" -> "1000148" 
  "1000167" -> "1000202" 
  "1000173" -> "1000182" 
  "1000173" -> "1000190" 
  "1000174" -> "1000173" 
  "1000180" -> "1000185" 
  "1000180" -> "1000188" 
  "1000181" -> "1000180" 
  "1000182" -> "1000181" 
  "1000185" -> "1000188" 
  "1000188" -> "1000262" 
  "1000190" -> "1000195" 
  "1000193" -> "1000198" 
  "1000195" -> "1000193" 
  "1000198" -> "1000134" 
  "1000198" -> "1000148" 
  "1000198" -> "1000202" 
  "1000202" -> "1000251" 
  "1000202" -> "1000209" 
  "1000206" -> "1000213" 
  "1000208" -> "1000206" 
  "1000209" -> "1000208" 
  "1000213" -> "1000217" 
  "1000217" -> "1000251" 
  "1000217" -> "1000224" 
  "1000222" -> "1000246" 
  "1000222" -> "1000230" 
  "1000224" -> "1000222" 
  "1000228" -> "1000238" 
  "1000228" -> "1000241" 
  "1000229" -> "1000228" 
  "1000229" -> "1000233" 
  "1000230" -> "1000229" 
  "1000233" -> "1000228" 
  "1000236" -> "1000241" 
  "1000238" -> "1000236" 
  "1000241" -> "1000134" 
  "1000241" -> "1000148" 
  "1000241" -> "1000202" 
  "1000241" -> "1000246" 
  "1000245" -> "1000251" 
  "1000245" -> "1000255" 
  "1000246" -> "1000245" 
  "1000251" -> "1000253" 
  "1000253" -> "1000262" 
  "1000255" -> "1000259" 
  "1000258" -> "1000262" 
  "1000259" -> "1000258" 
  "1000105" -> "1000113" 
}
