digraph udhcp_get_option {  
"1000132" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000134" [label = "(<operator>.addition,a1 + 44)" ]
"1000137" [label = "(<operator>.assignment,v5 = a1 + 108)" ]
"1000139" [label = "(<operator>.addition,a1 + 108)" ]
"1000142" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000144" [label = "(<operator>.addition,a1 + 240)" ]
"1000147" [label = "(<operator>.assignment,v7 = 388)" ]
"1000150" [label = "(<operator>.assignment,v8 = 0)" ]
"1000156" [label = "(<operator>.assignment,v9 = 2)" ]
"1000159" [label = "(<operator>.assignment,v10 = 0)" ]
"1000165" [label = "(<operator>.assignment,v11 = v6 + v9)" ]
"1000167" [label = "(<operator>.addition,v6 + v9)" ]
"1000170" [label = "(<operator>.assignment,v12 = *(unsigned __int8 *)(v6 + v9 - 2))" ]
"1000172" [label = "(<operator>.indirection,*(unsigned __int8 *)(v6 + v9 - 2))" ]
"1000173" [label = "(<operator>.cast,(unsigned __int8 *)(v6 + v9 - 2))" ]
"1000174" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000175" [label = "(<operator>.addition,v6 + v9 - 2)" ]
"1000177" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000181" [label = "(<operator>.indirection,*(_BYTE *)(v6 + v9 - 2))" ]
"1000182" [label = "(<operator>.cast,(_BYTE *)(v6 + v9 - 2))" ]
"1000183" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000184" [label = "(<operator>.addition,v6 + v9 - 2)" ]
"1000186" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000190" [label = "(<operator>.preDecrement,--v10)" ]
"1000192" [label = "(<operator>.preIncrement,++v9)" ]
"1000195" [label = "(<operator>.lessThan,v7 + v10 + 1 < 2)" ]
"1000196" [label = "(<operator>.addition,v7 + v10 + 1)" ]
"1000198" [label = "(<operator>.addition,v10 + 1)" ]
"1000204" [label = "(<operator>.equals,v12 == 255)" ]
"1000209" [label = "(<operator>.equals,(v8 & 0x101) == 1)" ]
"1000210" [label = "(<operator>.and,v8 & 0x101)" ]
"1000215" [label = "(<operators>.assignmentOr,v8 |= 0x101u)" ]
"1000218" [label = "(<operator>.assignment,v7 = 128)" ]
"1000221" [label = "(<operator>.assignment,v6 = v5)" ]
"1000225" [label = "(<operator>.assignment,a3 = 514)" ]
"1000229" [label = "(<operator>.equals,(v8 & 0x202) == 2)" ]
"1000230" [label = "(<operator>.and,v8 & 0x202)" ]
"1000235" [label = "(<operators>.assignmentOr,v8 |= 0x202u)" ]
"1000238" [label = "(<operator>.assignment,v7 = 64)" ]
"1000241" [label = "(<operator>.assignment,v6 = v4)" ]
"1000245" [label = "(<operator>.assignment,v14 = 0)" ]
"1000249" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000250" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000251" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000254" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000259" [label = "(<operator>.assignment,a3 = v7 + v10)" ]
"1000261" [label = "(<operator>.addition,v7 + v10)" ]
"1000264" [label = "(<operator>.assignment,v13 = v7 + v10 < 2)" ]
"1000266" [label = "(<operator>.lessThan,v7 + v10 < 2)" ]
"1000267" [label = "(<operator>.addition,v7 + v10)" ]
"1000272" [label = "(<operator>.greaterEqualsThan,v7 + v10 >= 2)" ]
"1000273" [label = "(<operator>.addition,v7 + v10)" ]
"1000278" [label = "(<operator>.assignment,v3 = v6 - v10)" ]
"1000280" [label = "(<operator>.subtraction,v6 - v10)" ]
"1000283" [label = "(<operator>.assignment,a3 = *(unsigned __int8 *)(v6 - v10 + 1))" ]
"1000285" [label = "(<operator>.indirection,*(unsigned __int8 *)(v6 - v10 + 1))" ]
"1000286" [label = "(<operator>.cast,(unsigned __int8 *)(v6 - v10 + 1))" ]
"1000287" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000288" [label = "(<operator>.subtraction,v6 - v10 + 1)" ]
"1000290" [label = "(<operator>.addition,v10 + 1)" ]
"1000293" [label = "(<operator>.assignment,v7 = v7 - a3 + v10 - 2)" ]
"1000295" [label = "(<operator>.subtraction,v7 - a3 + v10 - 2)" ]
"1000297" [label = "(<operator>.addition,a3 + v10 - 2)" ]
"1000299" [label = "(<operator>.subtraction,v10 - 2)" ]
"1000302" [label = "(<operator>.assignment,v13 = v7 < 0)" ]
"1000304" [label = "(<operator>.lessThan,v7 < 0)" ]
"1000311" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, a3, v9))" ]
"1000316" [label = "(RETURN,return 0;,return 0;)" ]
"1000319" [label = "(<operator>.notEquals,v12 != a2)" ]
"1000324" [label = "(<operator>.logicalAnd,v12 == 52 && a3)" ]
"1000325" [label = "(<operator>.equals,v12 == 52)" ]
"1000329" [label = "(<operators>.assignmentOr,v8 |= *(unsigned __int8 *)(v6 + v9))" ]
"1000331" [label = "(<operator>.indirection,*(unsigned __int8 *)(v6 + v9))" ]
"1000332" [label = "(<operator>.cast,(unsigned __int8 *)(v6 + v9))" ]
"1000333" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000334" [label = "(<operator>.addition,v6 + v9)" ]
"1000337" [label = "(<operator>.assignment,v6 = v6 + a3 - v10 + 2)" ]
"1000339" [label = "(<operator>.addition,v6 + a3 - v10 + 2)" ]
"1000341" [label = "(<operator>.subtraction,a3 - v10 + 2)" ]
"1000343" [label = "(<operator>.addition,v10 + 2)" ]
"1000348" [label = "(<operator>.greaterEqualsThan,v7 >= 1)" ]
"1000353" [label = "(<operator>.assignment,v14 = v3 + 2)" ]
"1000355" [label = "(<operator>.addition,v3 + 2)" ]
"1000359" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000360" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000361" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000365" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v16, v3 + 2) = 0)" ]
"1000366" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v16, v3 + 2))" ]
"1000367" [label = "(<operator>.cast,(_BYTE *)bin2hex(v16, v3 + 2))" ]
"1000368" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000369" [label = "(bin2hex,bin2hex(v16, v3 + 2))" ]
"1000371" [label = "(<operator>.addition,v3 + 2)" ]
"1000375" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v11 - 2), v16))" ]
"1000378" [label = "(<operator>.indirection,*(unsigned __int8 *)(v11 - 2))" ]
"1000379" [label = "(<operator>.cast,(unsigned __int8 *)(v11 - 2))" ]
"1000380" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000381" [label = "(<operator>.subtraction,v11 - 2)" ]
"1000385" [label = "(RETURN,return v14;,return v14;)" ]
"1000114" [label = "(METHOD,udhcp_get_option)" ]
"1000387" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000132" -> "1000139" 
  "1000134" -> "1000132" 
  "1000137" -> "1000144" 
  "1000139" -> "1000137" 
  "1000142" -> "1000147" 
  "1000144" -> "1000142" 
  "1000147" -> "1000150" 
  "1000150" -> "1000387" 
  "1000150" -> "1000156" 
  "1000156" -> "1000159" 
  "1000159" -> "1000167" 
  "1000159" -> "1000204" 
  "1000165" -> "1000174" 
  "1000167" -> "1000165" 
  "1000170" -> "1000183" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000174" -> "1000177" 
  "1000175" -> "1000173" 
  "1000177" -> "1000175" 
  "1000181" -> "1000387" 
  "1000181" -> "1000204" 
  "1000181" -> "1000190" 
  "1000182" -> "1000181" 
  "1000183" -> "1000186" 
  "1000184" -> "1000182" 
  "1000186" -> "1000184" 
  "1000190" -> "1000192" 
  "1000192" -> "1000198" 
  "1000195" -> "1000167" 
  "1000195" -> "1000204" 
  "1000195" -> "1000311" 
  "1000196" -> "1000195" 
  "1000198" -> "1000196" 
  "1000204" -> "1000210" 
  "1000204" -> "1000261" 
  "1000209" -> "1000215" 
  "1000209" -> "1000225" 
  "1000210" -> "1000209" 
  "1000215" -> "1000218" 
  "1000218" -> "1000221" 
  "1000221" -> "1000348" 
  "1000225" -> "1000230" 
  "1000229" -> "1000235" 
  "1000229" -> "1000245" 
  "1000230" -> "1000229" 
  "1000235" -> "1000238" 
  "1000238" -> "1000241" 
  "1000241" -> "1000348" 
  "1000245" -> "1000251" 
  "1000249" -> "1000254" 
  "1000249" -> "1000385" 
  "1000250" -> "1000249" 
  "1000251" -> "1000250" 
  "1000254" -> "1000385" 
  "1000259" -> "1000267" 
  "1000261" -> "1000259" 
  "1000264" -> "1000273" 
  "1000266" -> "1000264" 
  "1000267" -> "1000266" 
  "1000272" -> "1000280" 
  "1000272" -> "1000311" 
  "1000272" -> "1000319" 
  "1000273" -> "1000272" 
  "1000278" -> "1000287" 
  "1000280" -> "1000278" 
  "1000283" -> "1000299" 
  "1000285" -> "1000283" 
  "1000286" -> "1000285" 
  "1000287" -> "1000290" 
  "1000288" -> "1000286" 
  "1000290" -> "1000288" 
  "1000293" -> "1000304" 
  "1000295" -> "1000293" 
  "1000297" -> "1000295" 
  "1000299" -> "1000297" 
  "1000302" -> "1000311" 
  "1000302" -> "1000319" 
  "1000304" -> "1000302" 
  "1000311" -> "1000316" 
  "1000316" -> "1000387" 
  "1000319" -> "1000325" 
  "1000319" -> "1000355" 
  "1000324" -> "1000333" 
  "1000324" -> "1000343" 
  "1000325" -> "1000324" 
  "1000325" -> "1000324" 
  "1000329" -> "1000343" 
  "1000331" -> "1000329" 
  "1000332" -> "1000331" 
  "1000333" -> "1000334" 
  "1000334" -> "1000332" 
  "1000337" -> "1000348" 
  "1000339" -> "1000337" 
  "1000341" -> "1000339" 
  "1000343" -> "1000341" 
  "1000348" -> "1000387" 
  "1000348" -> "1000156" 
  "1000348" -> "1000311" 
  "1000353" -> "1000361" 
  "1000355" -> "1000353" 
  "1000359" -> "1000368" 
  "1000359" -> "1000385" 
  "1000360" -> "1000359" 
  "1000361" -> "1000360" 
  "1000365" -> "1000380" 
  "1000366" -> "1000365" 
  "1000367" -> "1000366" 
  "1000368" -> "1000371" 
  "1000369" -> "1000367" 
  "1000371" -> "1000369" 
  "1000375" -> "1000385" 
  "1000378" -> "1000375" 
  "1000379" -> "1000378" 
  "1000380" -> "1000381" 
  "1000381" -> "1000379" 
  "1000385" -> "1000387" 
  "1000114" -> "1000134" 
}
