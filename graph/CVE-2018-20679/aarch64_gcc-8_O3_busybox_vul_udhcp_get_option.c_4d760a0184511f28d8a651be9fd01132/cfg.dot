digraph udhcp_get_option {  
"1000123" [label = "(<operator>.assignment,v2 = 0)" ]
"1000126" [label = "(<operator>.assignment,v3 = 388)" ]
"1000129" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000131" [label = "(<operator>.addition,a1 + 240)" ]
"1000146" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000148" [label = "(<operator>.indirection,*v4)" ]
"1000151" [label = "(<operator>.indirection,*v4)" ]
"1000154" [label = "(<operator>.preDecrement,--v3)" ]
"1000156" [label = "(<operator>.preIncrement,++v4)" ]
"1000159" [label = "(<operator>.logicalNot,!v3)" ]
"1000163" [label = "(<operator>.equals,v5 == 255)" ]
"1000168" [label = "(<operator>.equals,v3 == 1)" ]
"1000172" [label = "(<operator>.assignment,v6 = v4[1] + 2)" ]
"1000174" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000175" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000179" [label = "(<operator>.assignmentMinus,v3 -= v6)" ]
"1000183" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000188" [label = "(<operator>.equals,v5 == (_DWORD)a2)" ]
"1000190" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000191" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000195" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 1)" ]
"1000196" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000197" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000200" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000201" [label = "(<operator>.addition,v4 + 2)" ]
"1000204" [label = "(<operator>.assignment,v11 = v4)" ]
"1000207" [label = "(<operator>.assignment,v8 = v4 + 2)" ]
"1000209" [label = "(<operator>.addition,v4 + 2)" ]
"1000212" [label = "(log_option_part_0,log_option_part_0(\"option found\", v11))" ]
"1000215" [label = "(RETURN,return v8;,return v8;)" ]
"1000218" [label = "(<operator>.equals,v5 == 52)" ]
"1000221" [label = "(<operator>.assignment,v7 = v6 == 2)" ]
"1000223" [label = "(<operator>.equals,v6 == 2)" ]
"1000227" [label = "(<operator>.assignment,v7 = 1)" ]
"1000233" [label = "(<operator>.assignmentPlus,v4 += v6)" ]
"1000238" [label = "(<operator>.assignment,v10 = v4[2])" ]
"1000240" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000243" [label = "(<operator>.assignmentPlus,v4 += v6)" ]
"1000246" [label = "(<operators>.assignmentOr,v2 |= v10)" ]
"1000250" [label = "(<operator>.logicalNot,!v3)" ]
"1000255" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000257" [label = "(RETURN,return v8;,return v8;)" ]
"1000260" [label = "(<operator>.notEquals,(v2 & 0x101) != 1)" ]
"1000261" [label = "(<operator>.and,v2 & 0x101)" ]
"1000266" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000269" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000271" [label = "(<operator>.addition,a1 + 108)" ]
"1000274" [label = "(<operator>.assignment,v3 = 128)" ]
"1000278" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000279" [label = "(<operator>.and,v2 & 0x202)" ]
"1000284" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000287" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000289" [label = "(<operator>.addition,a1 + 44)" ]
"1000292" [label = "(<operator>.assignment,v3 = 64)" ]
"1000297" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 2)" ]
"1000298" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000299" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000302" [label = "(RETURN,return v8;,return v8;)" ]
"1000304" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000110" [label = "(METHOD,udhcp_get_option)" ]
"1000308" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000123" -> "1000126" 
  "1000126" -> "1000131" 
  "1000129" -> "1000148" 
  "1000129" -> "1000163" 
  "1000129" -> "1000261" 
  "1000129" -> "1000279" 
  "1000129" -> "1000299" 
  "1000131" -> "1000129" 
  "1000146" -> "1000151" 
  "1000148" -> "1000146" 
  "1000151" -> "1000163" 
  "1000151" -> "1000261" 
  "1000151" -> "1000279" 
  "1000151" -> "1000299" 
  "1000151" -> "1000154" 
  "1000154" -> "1000156" 
  "1000156" -> "1000159" 
  "1000159" -> "1000148" 
  "1000159" -> "1000163" 
  "1000159" -> "1000255" 
  "1000163" -> "1000261" 
  "1000163" -> "1000279" 
  "1000163" -> "1000299" 
  "1000163" -> "1000168" 
  "1000168" -> "1000255" 
  "1000168" -> "1000175" 
  "1000172" -> "1000179" 
  "1000174" -> "1000172" 
  "1000175" -> "1000174" 
  "1000179" -> "1000183" 
  "1000183" -> "1000255" 
  "1000183" -> "1000191" 
  "1000188" -> "1000197" 
  "1000188" -> "1000218" 
  "1000190" -> "1000188" 
  "1000191" -> "1000190" 
  "1000195" -> "1000201" 
  "1000195" -> "1000204" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000200" -> "1000308" 
  "1000201" -> "1000200" 
  "1000204" -> "1000209" 
  "1000207" -> "1000212" 
  "1000209" -> "1000207" 
  "1000212" -> "1000215" 
  "1000215" -> "1000308" 
  "1000218" -> "1000223" 
  "1000218" -> "1000227" 
  "1000221" -> "1000233" 
  "1000221" -> "1000240" 
  "1000223" -> "1000221" 
  "1000227" -> "1000233" 
  "1000227" -> "1000240" 
  "1000233" -> "1000250" 
  "1000238" -> "1000243" 
  "1000240" -> "1000238" 
  "1000243" -> "1000246" 
  "1000246" -> "1000250" 
  "1000250" -> "1000148" 
  "1000250" -> "1000163" 
  "1000250" -> "1000261" 
  "1000250" -> "1000255" 
  "1000255" -> "1000257" 
  "1000257" -> "1000308" 
  "1000260" -> "1000279" 
  "1000260" -> "1000299" 
  "1000260" -> "1000266" 
  "1000261" -> "1000260" 
  "1000266" -> "1000271" 
  "1000269" -> "1000274" 
  "1000271" -> "1000269" 
  "1000274" -> "1000148" 
  "1000274" -> "1000163" 
  "1000274" -> "1000261" 
  "1000274" -> "1000279" 
  "1000278" -> "1000299" 
  "1000278" -> "1000284" 
  "1000279" -> "1000278" 
  "1000284" -> "1000289" 
  "1000287" -> "1000292" 
  "1000289" -> "1000287" 
  "1000292" -> "1000148" 
  "1000292" -> "1000163" 
  "1000292" -> "1000261" 
  "1000292" -> "1000279" 
  "1000292" -> "1000299" 
  "1000297" -> "1000302" 
  "1000297" -> "1000304" 
  "1000298" -> "1000297" 
  "1000299" -> "1000298" 
  "1000302" -> "1000308" 
  "1000304" -> "1000308" 
  "1000110" -> "1000123" 
}
