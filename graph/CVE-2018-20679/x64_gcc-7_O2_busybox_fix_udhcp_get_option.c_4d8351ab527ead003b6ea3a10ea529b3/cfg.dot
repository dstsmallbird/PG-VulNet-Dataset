digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000126" [label = "(<operator>.assignment,LODWORD(v8) = 388)" ]
"1000127" [label = "(LODWORD,LODWORD(v8))" ]
"1000130" [label = "(<operator>.assignment,LODWORD(v8) = 64)" ]
"1000131" [label = "(LODWORD,LODWORD(v8))" ]
"1000141" [label = "(<operator>.assignment,v9 = *v6)" ]
"1000143" [label = "(<operator>.indirection,*v6)" ]
"1000146" [label = "(<operator>.logicalNot,!(_BYTE)v9)" ]
"1000147" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000148" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000151" [label = "(<operator>.assignment,LODWORD(v8) = v8 - 1)" ]
"1000152" [label = "(LODWORD,LODWORD(v8))" ]
"1000154" [label = "(<operator>.subtraction,v8 - 1)" ]
"1000157" [label = "(<operator>.preIncrement,++v6)" ]
"1000161" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000162" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000163" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000168" [label = "(<operator>.equals,(_DWORD)v8 == 1)" ]
"1000169" [label = "(<operator>.cast,(_DWORD)v8)" ]
"1000170" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000174" [label = "(<operator>.assignment,a6 = v6[1])" ]
"1000176" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000179" [label = "(<operator>.assignment,v8 = (unsigned int)(v8 - (a6 + 2)))" ]
"1000181" [label = "(<operator>.cast,(unsigned int)(v8 - (a6 + 2)))" ]
"1000182" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000183" [label = "(<operator>.subtraction,v8 - (a6 + 2))" ]
"1000185" [label = "(<operator>.addition,a6 + 2)" ]
"1000189" [label = "(<operator>.lessThan,(int)v8 < 0)" ]
"1000190" [label = "(<operator>.cast,(int)v8)" ]
"1000191" [label = "(UNKNOWN,int,int)" ]
"1000196" [label = "(<operator>.equals,(unsigned __int8)v9 == a2)" ]
"1000197" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000198" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000203" [label = "(<operator>.cast,(_BYTE)a6)" ]
"1000204" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000208" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000209" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000210" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000213" [label = "(log_option_part_0,log_option_part_0(\"option found\", v6, v8, v9, v7))" ]
"1000219" [label = "(<operator>.assignment,v10 = v6 + 2)" ]
"1000221" [label = "(<operator>.addition,v6 + 2)" ]
"1000228" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v8, v9, v7, a6))" ]
"1000229" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000230" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000237" [label = "(RETURN,return v10;,return v10;)" ]
"1000240" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000245" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000246" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000247" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000251" [label = "(<operator>.assignment,LODWORD(v9) = v6[2])" ]
"1000252" [label = "(LODWORD,LODWORD(v9))" ]
"1000254" [label = "(<operator>.indirectIndexAccess,v6[2])" ]
"1000257" [label = "(<operator>.assignment,v7 = (unsigned int)v9 | (unsigned int)v7)" ]
"1000259" [label = "(<operator>.or,(unsigned int)v9 | (unsigned int)v7)" ]
"1000260" [label = "(<operator>.cast,(unsigned int)v9)" ]
"1000261" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000263" [label = "(<operator>.cast,(unsigned int)v7)" ]
"1000264" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000266" [label = "(<operator>.assignmentPlus,v6 += a6 + 2)" ]
"1000268" [label = "(<operator>.addition,a6 + 2)" ]
"1000273" [label = "(<operator>.logicalNot,!(_DWORD)v8)" ]
"1000274" [label = "(<operator>.cast,(_DWORD)v8)" ]
"1000275" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000279" [label = "(<operator>.notEquals,(v7 & 0x101) != 1)" ]
"1000280" [label = "(<operator>.and,v7 & 0x101)" ]
"1000285" [label = "(<operator>.assignment,v7 = (unsigned int)v7 | 0x101)" ]
"1000287" [label = "(<operator>.or,(unsigned int)v7 | 0x101)" ]
"1000288" [label = "(<operator>.cast,(unsigned int)v7)" ]
"1000289" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000292" [label = "(<operator>.assignment,v6 = a1 + 108)" ]
"1000294" [label = "(<operator>.addition,a1 + 108)" ]
"1000297" [label = "(<operator>.assignment,LODWORD(v8) = 128)" ]
"1000298" [label = "(LODWORD,LODWORD(v8))" ]
"1000302" [label = "(<operator>.notEquals,(v7 & 0x202) != 2)" ]
"1000303" [label = "(<operator>.and,v7 & 0x202)" ]
"1000308" [label = "(<operator>.assignment,v7 = (unsigned int)v7 | 0x202)" ]
"1000310" [label = "(<operator>.or,(unsigned int)v7 | 0x202)" ]
"1000311" [label = "(<operator>.cast,(unsigned int)v7)" ]
"1000312" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000315" [label = "(<operator>.assignment,v6 = a1 + 44)" ]
"1000317" [label = "(<operator>.addition,a1 + 44)" ]
"1000322" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 2)" ]
"1000323" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000324" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000327" [label = "(RETURN,return v10;,return v10;)" ]
"1000329" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v8, v9, v7, a6))" ]
"1000330" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000331" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000339" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000127" 
  "1000121" -> "1000119" 
  "1000126" -> "1000143" 
  "1000126" -> "1000280" 
  "1000126" -> "1000303" 
  "1000127" -> "1000126" 
  "1000130" -> "1000143" 
  "1000130" -> "1000280" 
  "1000130" -> "1000303" 
  "1000131" -> "1000130" 
  "1000141" -> "1000148" 
  "1000143" -> "1000141" 
  "1000146" -> "1000163" 
  "1000146" -> "1000152" 
  "1000147" -> "1000146" 
  "1000148" -> "1000147" 
  "1000151" -> "1000157" 
  "1000152" -> "1000154" 
  "1000154" -> "1000151" 
  "1000157" -> "1000275" 
  "1000161" -> "1000170" 
  "1000161" -> "1000280" 
  "1000161" -> "1000303" 
  "1000161" -> "1000324" 
  "1000162" -> "1000161" 
  "1000163" -> "1000162" 
  "1000168" -> "1000230" 
  "1000168" -> "1000176" 
  "1000169" -> "1000168" 
  "1000170" -> "1000169" 
  "1000174" -> "1000182" 
  "1000176" -> "1000174" 
  "1000179" -> "1000191" 
  "1000181" -> "1000179" 
  "1000182" -> "1000185" 
  "1000183" -> "1000181" 
  "1000185" -> "1000183" 
  "1000189" -> "1000198" 
  "1000189" -> "1000230" 
  "1000190" -> "1000189" 
  "1000191" -> "1000190" 
  "1000196" -> "1000204" 
  "1000196" -> "1000240" 
  "1000197" -> "1000196" 
  "1000198" -> "1000197" 
  "1000203" -> "1000210" 
  "1000203" -> "1000230" 
  "1000204" -> "1000203" 
  "1000208" -> "1000213" 
  "1000208" -> "1000221" 
  "1000209" -> "1000208" 
  "1000210" -> "1000209" 
  "1000213" -> "1000221" 
  "1000219" -> "1000237" 
  "1000221" -> "1000219" 
  "1000228" -> "1000237" 
  "1000229" -> "1000228" 
  "1000230" -> "1000229" 
  "1000237" -> "1000339" 
  "1000240" -> "1000247" 
  "1000240" -> "1000268" 
  "1000245" -> "1000252" 
  "1000245" -> "1000268" 
  "1000246" -> "1000245" 
  "1000247" -> "1000246" 
  "1000251" -> "1000261" 
  "1000252" -> "1000254" 
  "1000254" -> "1000251" 
  "1000257" -> "1000268" 
  "1000259" -> "1000257" 
  "1000260" -> "1000264" 
  "1000261" -> "1000260" 
  "1000263" -> "1000259" 
  "1000264" -> "1000263" 
  "1000266" -> "1000275" 
  "1000268" -> "1000266" 
  "1000273" -> "1000143" 
  "1000273" -> "1000280" 
  "1000273" -> "1000230" 
  "1000274" -> "1000273" 
  "1000275" -> "1000274" 
  "1000279" -> "1000303" 
  "1000279" -> "1000324" 
  "1000279" -> "1000289" 
  "1000280" -> "1000279" 
  "1000285" -> "1000294" 
  "1000287" -> "1000285" 
  "1000288" -> "1000287" 
  "1000289" -> "1000288" 
  "1000292" -> "1000298" 
  "1000294" -> "1000292" 
  "1000297" -> "1000143" 
  "1000297" -> "1000280" 
  "1000297" -> "1000303" 
  "1000298" -> "1000297" 
  "1000302" -> "1000324" 
  "1000302" -> "1000312" 
  "1000303" -> "1000302" 
  "1000308" -> "1000317" 
  "1000310" -> "1000308" 
  "1000311" -> "1000310" 
  "1000312" -> "1000311" 
  "1000315" -> "1000131" 
  "1000317" -> "1000315" 
  "1000322" -> "1000331" 
  "1000322" -> "1000327" 
  "1000323" -> "1000322" 
  "1000324" -> "1000323" 
  "1000327" -> "1000339" 
  "1000329" -> "1000339" 
  "1000330" -> "1000329" 
  "1000331" -> "1000330" 
  "1000106" -> "1000121" 
}
