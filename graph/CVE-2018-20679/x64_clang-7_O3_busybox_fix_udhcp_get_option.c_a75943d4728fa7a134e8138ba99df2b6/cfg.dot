digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000131" [label = "(<operator>.addition,a1 + 240)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000136" [label = "(<operator>.addition,a1 + 108)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000141" [label = "(<operator>.addition,a1 + 44)" ]
"1000144" [label = "(<operator>.assignment,LODWORD(v5) = 388)" ]
"1000145" [label = "(LODWORD,LODWORD(v5))" ]
"1000148" [label = "(<operator>.assignment,v6 = 0)" ]
"1000154" [label = "(<operator>.assignment,LODWORD(v7) = 1)" ]
"1000155" [label = "(LODWORD,LODWORD(v7))" ]
"1000162" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v2 + v8))" ]
"1000164" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000165" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000166" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000167" [label = "(<operator>.addition,v2 + v8)" ]
"1000171" [label = "(<operator>.indirection,*(_BYTE *)(v2 + v8))" ]
"1000172" [label = "(<operator>.cast,(_BYTE *)(v2 + v8))" ]
"1000173" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000174" [label = "(<operator>.addition,v2 + v8)" ]
"1000178" [label = "(<operator>.preIncrement,++v8)" ]
"1000180" [label = "(<operator>.assignment,LODWORD(v7) = v7 - 1)" ]
"1000181" [label = "(LODWORD,LODWORD(v7))" ]
"1000183" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000187" [label = "(<operator>.lessThan,(int)v7 + (int)v5 < 2)" ]
"1000188" [label = "(<operator>.addition,(int)v7 + (int)v5)" ]
"1000189" [label = "(<operator>.cast,(int)v7)" ]
"1000190" [label = "(UNKNOWN,int,int)" ]
"1000192" [label = "(<operator>.cast,(int)v5)" ]
"1000193" [label = "(UNKNOWN,int,int)" ]
"1000198" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000199" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000200" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000205" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000206" [label = "(<operator>.and,v6 & 0x101)" ]
"1000211" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000214" [label = "(<operator>.assignment,LODWORD(v5) = 128)" ]
"1000215" [label = "(LODWORD,LODWORD(v5))" ]
"1000218" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000220" [label = "(<operator>.addition,a1 + 108)" ]
"1000225" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000226" [label = "(<operator>.and,v6 & 0x202)" ]
"1000231" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000234" [label = "(<operator>.assignment,LODWORD(v5) = 64)" ]
"1000235" [label = "(LODWORD,LODWORD(v5))" ]
"1000238" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000240" [label = "(<operator>.addition,a1 + 44)" ]
"1000246" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000247" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000248" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000251" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v7, v5, v4, v3, v14[0]))" ]
"1000252" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000253" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000260" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000263" [label = "(RETURN,return v10;,return v10;)" ]
"1000265" [label = "(<operator>.assignment,LODWORD(v7) = v5 - v8)" ]
"1000266" [label = "(LODWORD,LODWORD(v7))" ]
"1000268" [label = "(<operator>.subtraction,v5 - v8)" ]
"1000272" [label = "(<operator>.lessThan,(int)v5 - (int)v8 < 2)" ]
"1000273" [label = "(<operator>.subtraction,(int)v5 - (int)v8)" ]
"1000274" [label = "(<operator>.cast,(int)v5)" ]
"1000275" [label = "(UNKNOWN,int,int)" ]
"1000277" [label = "(<operator>.cast,(int)v8)" ]
"1000278" [label = "(UNKNOWN,int,int)" ]
"1000282" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000284" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000285" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000286" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000287" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000289" [label = "(<operator>.addition,v8 + 1)" ]
"1000292" [label = "(<operator>.assignment,v5 = (unsigned int)-*(unsigned __int8 *)(v2 + v8 + 1) + (unsigned __int64)(unsigned int)(v5 - 2) - v8)" ]
"1000294" [label = "(<operator>.addition,(unsigned int)-*(unsigned __int8 *)(v2 + v8 + 1) + (unsigned __int64)(unsigned int)(v5 - 2) - v8)" ]
"1000295" [label = "(<operator>.cast,(unsigned int)-*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000296" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000297" [label = "(<operator>.minus,-*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000298" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000299" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000300" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000301" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000303" [label = "(<operator>.addition,v8 + 1)" ]
"1000306" [label = "(<operator>.subtraction,(unsigned __int64)(unsigned int)(v5 - 2) - v8)" ]
"1000307" [label = "(<operator>.cast,(unsigned __int64)(unsigned int)(v5 - 2))" ]
"1000308" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000309" [label = "(<operator>.cast,(unsigned int)(v5 - 2))" ]
"1000310" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000311" [label = "(<operator>.subtraction,v5 - 2)" ]
"1000316" [label = "(<operator>.lessThan,(int)v5 < 0)" ]
"1000317" [label = "(<operator>.cast,(int)v5)" ]
"1000318" [label = "(UNKNOWN,int,int)" ]
"1000323" [label = "(<operator>.equals,v9 == a2)" ]
"1000328" [label = "(<operator>.logicalAnd,(_BYTE)v9 == 52 && (_BYTE)v7)" ]
"1000329" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000330" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000331" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000334" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000335" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000337" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000339" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000340" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000341" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000342" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000344" [label = "(<operator>.addition,v8 + 2)" ]
"1000347" [label = "(<operator>.assignmentPlus,v2 += v8 + v7 + 2)" ]
"1000349" [label = "(<operator>.addition,v8 + v7 + 2)" ]
"1000351" [label = "(<operator>.addition,v7 + 2)" ]
"1000355" [label = "(<operator>.lessEqualsThan,(int)v5 <= 0)" ]
"1000356" [label = "(<operator>.cast,(int)v5)" ]
"1000357" [label = "(UNKNOWN,int,int)" ]
"1000362" [label = "(<operator>.logicalNot,!(_BYTE)v7)" ]
"1000363" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000364" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000369" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v7, v5, v4, v3, v14[0]))" ]
"1000370" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000371" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000378" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000381" [label = "(RETURN,return v10;,return v10;)" ]
"1000383" [label = "(<operator>.assignment,v10 = v2 + v8 + 2)" ]
"1000385" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000387" [label = "(<operator>.addition,v8 + 2)" ]
"1000391" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000392" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000393" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000397" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v2 + v8 + 2, v7, v5, v4, v3) = 0)" ]
"1000398" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v2 + v8 + 2, v7, v5, v4, v3))" ]
"1000399" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v2 + v8 + 2, v7, v5, v4, v3))" ]
"1000400" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000401" [label = "(bin2hex,bin2hex(v14, v2 + v8 + 2, v7, v5, v4, v3))" ]
"1000403" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000405" [label = "(<operator>.addition,v8 + 2)" ]
"1000413" [label = "(bb_error_msg,bb_error_msg(\n      (unsigned int)\"%s: 0x%02x %s\",\n      (unsigned int)\"option found\",\n      *(unsigned __int8 *)(v2 + v8),\n      (unsigned int)v14,\n      v11,\n      v12,\n      v14[0]))" ]
"1000414" [label = "(<operator>.cast,(unsigned int)\"%s: 0x%02x %s\")" ]
"1000415" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000417" [label = "(<operator>.cast,(unsigned int)\"option found\")" ]
"1000418" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000420" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000421" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000422" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000423" [label = "(<operator>.addition,v2 + v8)" ]
"1000426" [label = "(<operator>.cast,(unsigned int)v14)" ]
"1000427" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000431" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000434" [label = "(RETURN,return v10;,return v10;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000436" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000145" 
  "1000141" -> "1000139" 
  "1000144" -> "1000148" 
  "1000145" -> "1000144" 
  "1000148" -> "1000364" 
  "1000148" -> "1000155" 
  "1000154" -> "1000200" 
  "1000154" -> "1000166" 
  "1000155" -> "1000154" 
  "1000162" -> "1000173" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000166" -> "1000167" 
  "1000167" -> "1000165" 
  "1000171" -> "1000200" 
  "1000171" -> "1000364" 
  "1000171" -> "1000178" 
  "1000172" -> "1000171" 
  "1000173" -> "1000174" 
  "1000174" -> "1000172" 
  "1000178" -> "1000181" 
  "1000180" -> "1000190" 
  "1000181" -> "1000183" 
  "1000183" -> "1000180" 
  "1000187" -> "1000200" 
  "1000187" -> "1000166" 
  "1000187" -> "1000371" 
  "1000188" -> "1000187" 
  "1000189" -> "1000193" 
  "1000190" -> "1000189" 
  "1000192" -> "1000188" 
  "1000193" -> "1000192" 
  "1000198" -> "1000206" 
  "1000198" -> "1000266" 
  "1000199" -> "1000198" 
  "1000200" -> "1000199" 
  "1000205" -> "1000211" 
  "1000205" -> "1000226" 
  "1000206" -> "1000205" 
  "1000211" -> "1000215" 
  "1000214" -> "1000220" 
  "1000215" -> "1000214" 
  "1000218" -> "1000364" 
  "1000218" -> "1000155" 
  "1000220" -> "1000218" 
  "1000225" -> "1000231" 
  "1000225" -> "1000248" 
  "1000226" -> "1000225" 
  "1000231" -> "1000235" 
  "1000234" -> "1000240" 
  "1000235" -> "1000234" 
  "1000238" -> "1000364" 
  "1000238" -> "1000155" 
  "1000240" -> "1000238" 
  "1000246" -> "1000253" 
  "1000246" -> "1000263" 
  "1000247" -> "1000246" 
  "1000248" -> "1000247" 
  "1000251" -> "1000263" 
  "1000252" -> "1000260" 
  "1000253" -> "1000252" 
  "1000260" -> "1000251" 
  "1000263" -> "1000436" 
  "1000265" -> "1000275" 
  "1000266" -> "1000268" 
  "1000268" -> "1000265" 
  "1000272" -> "1000371" 
  "1000272" -> "1000286" 
  "1000273" -> "1000272" 
  "1000274" -> "1000278" 
  "1000275" -> "1000274" 
  "1000277" -> "1000273" 
  "1000278" -> "1000277" 
  "1000282" -> "1000296" 
  "1000284" -> "1000282" 
  "1000285" -> "1000284" 
  "1000286" -> "1000289" 
  "1000287" -> "1000285" 
  "1000289" -> "1000287" 
  "1000292" -> "1000318" 
  "1000294" -> "1000292" 
  "1000295" -> "1000308" 
  "1000296" -> "1000300" 
  "1000297" -> "1000295" 
  "1000298" -> "1000297" 
  "1000299" -> "1000298" 
  "1000300" -> "1000303" 
  "1000301" -> "1000299" 
  "1000303" -> "1000301" 
  "1000306" -> "1000294" 
  "1000307" -> "1000306" 
  "1000308" -> "1000310" 
  "1000309" -> "1000307" 
  "1000310" -> "1000311" 
  "1000311" -> "1000309" 
  "1000316" -> "1000371" 
  "1000316" -> "1000323" 
  "1000317" -> "1000316" 
  "1000318" -> "1000317" 
  "1000323" -> "1000331" 
  "1000323" -> "1000364" 
  "1000328" -> "1000341" 
  "1000328" -> "1000351" 
  "1000329" -> "1000335" 
  "1000329" -> "1000328" 
  "1000330" -> "1000329" 
  "1000331" -> "1000330" 
  "1000334" -> "1000328" 
  "1000335" -> "1000334" 
  "1000337" -> "1000351" 
  "1000339" -> "1000337" 
  "1000340" -> "1000339" 
  "1000341" -> "1000344" 
  "1000342" -> "1000340" 
  "1000344" -> "1000342" 
  "1000347" -> "1000357" 
  "1000349" -> "1000347" 
  "1000351" -> "1000349" 
  "1000355" -> "1000364" 
  "1000355" -> "1000155" 
  "1000355" -> "1000371" 
  "1000356" -> "1000355" 
  "1000357" -> "1000356" 
  "1000362" -> "1000371" 
  "1000362" -> "1000387" 
  "1000363" -> "1000362" 
  "1000364" -> "1000363" 
  "1000369" -> "1000381" 
  "1000370" -> "1000378" 
  "1000371" -> "1000370" 
  "1000378" -> "1000369" 
  "1000381" -> "1000436" 
  "1000383" -> "1000393" 
  "1000385" -> "1000383" 
  "1000387" -> "1000385" 
  "1000391" -> "1000400" 
  "1000391" -> "1000434" 
  "1000392" -> "1000391" 
  "1000393" -> "1000392" 
  "1000397" -> "1000415" 
  "1000398" -> "1000397" 
  "1000399" -> "1000398" 
  "1000400" -> "1000405" 
  "1000401" -> "1000399" 
  "1000403" -> "1000401" 
  "1000405" -> "1000403" 
  "1000413" -> "1000434" 
  "1000414" -> "1000418" 
  "1000415" -> "1000414" 
  "1000417" -> "1000422" 
  "1000418" -> "1000417" 
  "1000420" -> "1000427" 
  "1000421" -> "1000420" 
  "1000422" -> "1000423" 
  "1000423" -> "1000421" 
  "1000426" -> "1000431" 
  "1000427" -> "1000426" 
  "1000431" -> "1000413" 
  "1000434" -> "1000436" 
  "1000113" -> "1000131" 
}
