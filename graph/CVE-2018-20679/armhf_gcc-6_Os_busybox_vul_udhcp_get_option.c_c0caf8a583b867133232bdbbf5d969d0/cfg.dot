digraph udhcp_get_option {  
"1000115" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000117" [label = "(<operator>.addition,a1 + 240)" ]
"1000120" [label = "(<operator>.assignment,v3 = 0)" ]
"1000123" [label = "(<operator>.assignment,v4 = 388)" ]
"1000132" [label = "(<operator>.assignment,v5 = *v2)" ]
"1000134" [label = "(<operator>.indirection,*v2)" ]
"1000137" [label = "(<operator>.indirection,*v2)" ]
"1000140" [label = "(<operator>.preDecrement,--v4)" ]
"1000142" [label = "(<operator>.preIncrement,++v2)" ]
"1000146" [label = "(<operator>.logicalNot,!v4)" ]
"1000150" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000155" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000156" [label = "(<operator>.and,v3 & 0x101)" ]
"1000161" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000164" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000166" [label = "(<operator>.addition,a1 + 108)" ]
"1000169" [label = "(<operator>.assignment,v4 = 128)" ]
"1000175" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000176" [label = "(<operator>.and,v3 & 0x202)" ]
"1000182" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000183" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000184" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000187" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000190" [label = "(RETURN,return 0;,return 0;)" ]
"1000192" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000195" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000197" [label = "(<operator>.addition,a1 + 44)" ]
"1000200" [label = "(<operator>.assignment,v4 = 64)" ]
"1000204" [label = "(<operator>.logicalOr,v4 == 1 || (v7 = v2[1] + 2, v4 -= v7, v4 < 0))" ]
"1000205" [label = "(<operator>.equals,v4 == 1)" ]
"1000209" [label = "(<operator>.assignment,v7 = v2[1] + 2)" ]
"1000211" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000212" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000217" [label = "(<operator>.assignmentMinus,v4 -= v7)" ]
"1000220" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000225" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, v3))" ]
"1000229" [label = "(RETURN,return 0;,return 0;)" ]
"1000232" [label = "(<operator>.notEquals,a2 != v5)" ]
"1000237" [label = "(<operator>.logicalAnd,v5 == 52 && v2[1])" ]
"1000238" [label = "(<operator>.equals,v5 == 52)" ]
"1000241" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000244" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000246" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000249" [label = "(<operator>.assignmentPlus,v2 += v7)" ]
"1000254" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000255" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000256" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000259" [label = "(log_option_part_0,log_option_part_0(\"option found\", v2, v3))" ]
"1000263" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000264" [label = "(<operator>.addition,v2 + 2)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000267" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000115" -> "1000120" 
  "1000117" -> "1000115" 
  "1000120" -> "1000123" 
  "1000123" -> "1000134" 
  "1000123" -> "1000150" 
  "1000123" -> "1000205" 
  "1000132" -> "1000137" 
  "1000134" -> "1000132" 
  "1000137" -> "1000150" 
  "1000137" -> "1000205" 
  "1000137" -> "1000140" 
  "1000140" -> "1000142" 
  "1000142" -> "1000146" 
  "1000146" -> "1000134" 
  "1000146" -> "1000150" 
  "1000146" -> "1000225" 
  "1000150" -> "1000205" 
  "1000150" -> "1000156" 
  "1000155" -> "1000161" 
  "1000155" -> "1000176" 
  "1000156" -> "1000155" 
  "1000161" -> "1000166" 
  "1000164" -> "1000169" 
  "1000166" -> "1000164" 
  "1000169" -> "1000134" 
  "1000169" -> "1000150" 
  "1000169" -> "1000205" 
  "1000175" -> "1000184" 
  "1000175" -> "1000192" 
  "1000176" -> "1000175" 
  "1000182" -> "1000187" 
  "1000182" -> "1000190" 
  "1000183" -> "1000182" 
  "1000184" -> "1000183" 
  "1000187" -> "1000190" 
  "1000190" -> "1000267" 
  "1000192" -> "1000197" 
  "1000195" -> "1000200" 
  "1000197" -> "1000195" 
  "1000200" -> "1000134" 
  "1000200" -> "1000150" 
  "1000200" -> "1000205" 
  "1000204" -> "1000225" 
  "1000204" -> "1000232" 
  "1000205" -> "1000204" 
  "1000205" -> "1000212" 
  "1000209" -> "1000217" 
  "1000211" -> "1000209" 
  "1000212" -> "1000211" 
  "1000217" -> "1000220" 
  "1000220" -> "1000204" 
  "1000225" -> "1000229" 
  "1000229" -> "1000267" 
  "1000232" -> "1000256" 
  "1000232" -> "1000238" 
  "1000237" -> "1000246" 
  "1000237" -> "1000249" 
  "1000238" -> "1000237" 
  "1000238" -> "1000241" 
  "1000241" -> "1000237" 
  "1000244" -> "1000249" 
  "1000246" -> "1000244" 
  "1000249" -> "1000146" 
  "1000254" -> "1000259" 
  "1000254" -> "1000264" 
  "1000255" -> "1000254" 
  "1000256" -> "1000255" 
  "1000259" -> "1000264" 
  "1000263" -> "1000267" 
  "1000264" -> "1000263" 
  "1000106" -> "1000117" 
}
