digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000124" [label = "(<operator>.assignment,v3 = 0)" ]
"1000127" [label = "(<operator>.assignment,v4 = 388)" ]
"1000136" [label = "(<operator>.assignment,v6 = *v2)" ]
"1000138" [label = "(<operator>.indirection,*v2)" ]
"1000141" [label = "(<operator>.indirection,*v2)" ]
"1000144" [label = "(<operator>.preDecrement,--v4)" ]
"1000146" [label = "(<operator>.preIncrement,++v2)" ]
"1000150" [label = "(<operator>.lessEqualsThan,v4 <= 0)" ]
"1000155" [label = "(<operator>.notEquals,v6 != 255)" ]
"1000160" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000161" [label = "(<operator>.and,v3 & 0x101)" ]
"1000166" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000169" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000171" [label = "(<operator>.addition,a1 + 108)" ]
"1000174" [label = "(<operator>.assignment,v4 = 128)" ]
"1000180" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000181" [label = "(<operator>.and,v3 & 0x202)" ]
"1000188" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000189" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000190" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000194" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000198" [label = "(RETURN,return result;,return result;)" ]
"1000200" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000203" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000205" [label = "(<operator>.addition,a1 + 44)" ]
"1000208" [label = "(<operator>.assignment,v4 = 64)" ]
"1000212" [label = "(<operator>.lessEqualsThan,v4 <= 1)" ]
"1000216" [label = "(<operator>.assignment,v7 = v2[1] + 2)" ]
"1000218" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000219" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000223" [label = "(<operator>.assignmentMinus,v4 -= v7)" ]
"1000227" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000232" [label = "(<operator>.notEquals,(_DWORD)a2 != v6)" ]
"1000233" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000234" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000239" [label = "(<operator>.greaterThan,v7 > 2)" ]
"1000242" [label = "(<operator>.assignment,v8 = v6 == 52)" ]
"1000244" [label = "(<operator>.equals,v6 == 52)" ]
"1000248" [label = "(<operator>.assignment,v8 = 0)" ]
"1000253" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000255" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000258" [label = "(<operator>.assignmentPlus,v2 += v7)" ]
"1000263" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000264" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000269" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000272" [label = "(log_option,log_option(\"option found\", v2))" ]
"1000275" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000276" [label = "(<operator>.addition,v2 + 2)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000279" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000124" 
  "1000121" -> "1000119" 
  "1000124" -> "1000127" 
  "1000127" -> "1000138" 
  "1000127" -> "1000155" 
  "1000127" -> "1000212" 
  "1000136" -> "1000141" 
  "1000138" -> "1000136" 
  "1000141" -> "1000155" 
  "1000141" -> "1000212" 
  "1000141" -> "1000144" 
  "1000144" -> "1000146" 
  "1000146" -> "1000150" 
  "1000150" -> "1000138" 
  "1000150" -> "1000155" 
  "1000150" -> "1000269" 
  "1000155" -> "1000212" 
  "1000155" -> "1000161" 
  "1000160" -> "1000166" 
  "1000160" -> "1000181" 
  "1000161" -> "1000160" 
  "1000166" -> "1000171" 
  "1000169" -> "1000174" 
  "1000171" -> "1000169" 
  "1000174" -> "1000138" 
  "1000174" -> "1000155" 
  "1000174" -> "1000212" 
  "1000180" -> "1000190" 
  "1000180" -> "1000200" 
  "1000181" -> "1000180" 
  "1000188" -> "1000194" 
  "1000188" -> "1000198" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000194" -> "1000198" 
  "1000198" -> "1000279" 
  "1000200" -> "1000205" 
  "1000203" -> "1000208" 
  "1000205" -> "1000203" 
  "1000208" -> "1000138" 
  "1000208" -> "1000155" 
  "1000208" -> "1000212" 
  "1000212" -> "1000269" 
  "1000212" -> "1000219" 
  "1000216" -> "1000223" 
  "1000218" -> "1000216" 
  "1000219" -> "1000218" 
  "1000223" -> "1000227" 
  "1000227" -> "1000234" 
  "1000227" -> "1000269" 
  "1000232" -> "1000239" 
  "1000232" -> "1000264" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000239" -> "1000244" 
  "1000239" -> "1000248" 
  "1000242" -> "1000255" 
  "1000242" -> "1000258" 
  "1000244" -> "1000242" 
  "1000248" -> "1000255" 
  "1000248" -> "1000258" 
  "1000253" -> "1000258" 
  "1000255" -> "1000253" 
  "1000258" -> "1000150" 
  "1000263" -> "1000269" 
  "1000263" -> "1000272" 
  "1000264" -> "1000263" 
  "1000269" -> "1000272" 
  "1000272" -> "1000276" 
  "1000275" -> "1000279" 
  "1000276" -> "1000275" 
  "1000108" -> "1000121" 
}
