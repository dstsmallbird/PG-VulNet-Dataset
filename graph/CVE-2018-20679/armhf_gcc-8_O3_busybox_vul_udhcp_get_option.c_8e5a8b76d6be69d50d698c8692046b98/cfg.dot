digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000124" [label = "(<operator>.assignment,v3 = 0)" ]
"1000128" [label = "(<operator>.assignment,i = 388)" ]
"1000131" [label = "(<operator>.assignment,i = 64)" ]
"1000144" [label = "(<operator>.assignment,v5 = *v2)" ]
"1000146" [label = "(<operator>.indirection,*v2)" ]
"1000149" [label = "(<operator>.indirection,*v2)" ]
"1000152" [label = "(<operator>.preDecrement,--i)" ]
"1000154" [label = "(<operator>.preIncrement,++v2)" ]
"1000157" [label = "(<operator>.logicalNot,!i)" ]
"1000161" [label = "(<operator>.equals,v5 == 255)" ]
"1000166" [label = "(<operator>.equals,i == 1)" ]
"1000170" [label = "(<operator>.assignment,v6 = v2[1] + 2)" ]
"1000172" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000173" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000177" [label = "(<operator>.assignmentMinus,i -= v6)" ]
"1000181" [label = "(<operator>.lessThan,i < 0)" ]
"1000186" [label = "(<operator>.equals,v5 == a2)" ]
"1000191" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000192" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000193" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000196" [label = "(log_option_part_0,log_option_part_0(\"option found\", v2))" ]
"1000199" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000200" [label = "(<operator>.addition,v2 + 2)" ]
"1000203" [label = "(<operator>.assignment,v7 = v5 == 52)" ]
"1000205" [label = "(<operator>.equals,v5 == 52)" ]
"1000209" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000210" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000213" [label = "(<operator>.assignment,v7 = 0)" ]
"1000219" [label = "(<operator>.assignment,v9 = v2[2])" ]
"1000221" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000224" [label = "(<operator>.assignmentPlus,v2 += v6)" ]
"1000227" [label = "(<operators>.assignmentOr,v3 |= v9)" ]
"1000232" [label = "(<operator>.assignmentPlus,v2 += v6)" ]
"1000236" [label = "(<operator>.logicalNot,!i)" ]
"1000240" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000242" [label = "(RETURN,return 0;,return 0;)" ]
"1000245" [label = "(<operator>.notEquals,(v3 & 0x101) != 1)" ]
"1000246" [label = "(<operator>.and,v3 & 0x101)" ]
"1000251" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000254" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000256" [label = "(<operator>.addition,a1 + 108)" ]
"1000259" [label = "(<operator>.assignment,i = 128)" ]
"1000263" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000264" [label = "(<operator>.and,v3 & 0x202)" ]
"1000269" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000272" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000274" [label = "(<operator>.addition,a1 + 44)" ]
"1000278" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000279" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000280" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000283" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000286" [label = "(RETURN,return 0;,return 0;)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000288" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000124" 
  "1000121" -> "1000119" 
  "1000124" -> "1000128" 
  "1000128" -> "1000146" 
  "1000128" -> "1000161" 
  "1000128" -> "1000246" 
  "1000128" -> "1000264" 
  "1000131" -> "1000146" 
  "1000131" -> "1000161" 
  "1000131" -> "1000246" 
  "1000131" -> "1000264" 
  "1000144" -> "1000149" 
  "1000146" -> "1000144" 
  "1000149" -> "1000280" 
  "1000149" -> "1000161" 
  "1000149" -> "1000246" 
  "1000149" -> "1000264" 
  "1000149" -> "1000152" 
  "1000152" -> "1000154" 
  "1000154" -> "1000157" 
  "1000157" -> "1000146" 
  "1000157" -> "1000161" 
  "1000157" -> "1000240" 
  "1000161" -> "1000280" 
  "1000161" -> "1000246" 
  "1000161" -> "1000264" 
  "1000161" -> "1000166" 
  "1000166" -> "1000240" 
  "1000166" -> "1000173" 
  "1000170" -> "1000177" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000177" -> "1000181" 
  "1000181" -> "1000240" 
  "1000181" -> "1000186" 
  "1000186" -> "1000193" 
  "1000186" -> "1000205" 
  "1000191" -> "1000196" 
  "1000191" -> "1000200" 
  "1000192" -> "1000191" 
  "1000193" -> "1000192" 
  "1000196" -> "1000200" 
  "1000199" -> "1000288" 
  "1000200" -> "1000199" 
  "1000203" -> "1000210" 
  "1000205" -> "1000203" 
  "1000209" -> "1000213" 
  "1000209" -> "1000221" 
  "1000209" -> "1000232" 
  "1000210" -> "1000209" 
  "1000213" -> "1000221" 
  "1000213" -> "1000232" 
  "1000219" -> "1000224" 
  "1000221" -> "1000219" 
  "1000224" -> "1000227" 
  "1000227" -> "1000236" 
  "1000232" -> "1000236" 
  "1000236" -> "1000146" 
  "1000236" -> "1000161" 
  "1000236" -> "1000246" 
  "1000236" -> "1000240" 
  "1000240" -> "1000242" 
  "1000242" -> "1000288" 
  "1000245" -> "1000280" 
  "1000245" -> "1000264" 
  "1000245" -> "1000251" 
  "1000246" -> "1000245" 
  "1000251" -> "1000256" 
  "1000254" -> "1000259" 
  "1000256" -> "1000254" 
  "1000259" -> "1000146" 
  "1000259" -> "1000161" 
  "1000259" -> "1000246" 
  "1000259" -> "1000264" 
  "1000263" -> "1000280" 
  "1000263" -> "1000269" 
  "1000264" -> "1000263" 
  "1000269" -> "1000274" 
  "1000272" -> "1000131" 
  "1000274" -> "1000272" 
  "1000278" -> "1000283" 
  "1000278" -> "1000286" 
  "1000279" -> "1000278" 
  "1000280" -> "1000279" 
  "1000283" -> "1000286" 
  "1000286" -> "1000288" 
  "1000108" -> "1000121" 
}
