digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = 388)" ]
"1000122" [label = "(<operator>.assignment,v3 = 0)" ]
"1000125" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000127" [label = "(<operator>.addition,a1 + 240)" ]
"1000136" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000138" [label = "(<operator>.indirection,*v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000144" [label = "(<operator>.preDecrement,--v2)" ]
"1000146" [label = "(<operator>.preIncrement,++v4)" ]
"1000150" [label = "(<operator>.logicalNot,!v2)" ]
"1000154" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000159" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000160" [label = "(<operator>.and,v3 & 0x101)" ]
"1000165" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000168" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000170" [label = "(<operator>.addition,a1 + 108)" ]
"1000173" [label = "(<operator>.assignment,v2 = 128)" ]
"1000179" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000180" [label = "(<operator>.and,v3 & 0x202)" ]
"1000186" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000187" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000188" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000191" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000194" [label = "(RETURN,return 0;,return 0;)" ]
"1000196" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000199" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000201" [label = "(<operator>.addition,a1 + 44)" ]
"1000204" [label = "(<operator>.assignment,v2 = 64)" ]
"1000208" [label = "(<operator>.equals,v2 == 1)" ]
"1000212" [label = "(<operator>.assignment,v6 = v4[1])" ]
"1000214" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000217" [label = "(<operator>.assignmentMinus,v2 -= v6 + 2)" ]
"1000219" [label = "(<operator>.addition,v6 + 2)" ]
"1000223" [label = "(<operator>.lessThan,v2 < 0)" ]
"1000228" [label = "(<operator>.notEquals,v5 != a2)" ]
"1000232" [label = "(<operator>.assignment,v7 = v5 == 52)" ]
"1000234" [label = "(<operator>.equals,v5 == 52)" ]
"1000238" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000239" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000242" [label = "(<operator>.assignment,v7 = 0)" ]
"1000245" [label = "(<operator>.assignment,v8 = v7 == 0)" ]
"1000247" [label = "(<operator>.equals,v7 == 0)" ]
"1000252" [label = "(<operator>.assignment,v7 = v4[2])" ]
"1000254" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000257" [label = "(<operator>.assignmentPlus,v4 += v6 + 2)" ]
"1000259" [label = "(<operator>.addition,v6 + 2)" ]
"1000263" [label = "(<operator>.logicalNot,!v8)" ]
"1000265" [label = "(<operators>.assignmentOr,v3 |= v7)" ]
"1000270" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000271" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000276" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000278" [label = "(RETURN,return 0;,return 0;)" ]
"1000281" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000282" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000283" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000286" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4))" ]
"1000289" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000290" [label = "(<operator>.addition,v4 + 2)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000293" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000122" 
  "1000122" -> "1000127" 
  "1000125" -> "1000138" 
  "1000125" -> "1000154" 
  "1000125" -> "1000208" 
  "1000127" -> "1000125" 
  "1000136" -> "1000141" 
  "1000138" -> "1000136" 
  "1000141" -> "1000154" 
  "1000141" -> "1000208" 
  "1000141" -> "1000144" 
  "1000144" -> "1000146" 
  "1000146" -> "1000150" 
  "1000150" -> "1000138" 
  "1000150" -> "1000154" 
  "1000150" -> "1000276" 
  "1000154" -> "1000208" 
  "1000154" -> "1000160" 
  "1000159" -> "1000165" 
  "1000159" -> "1000180" 
  "1000160" -> "1000159" 
  "1000165" -> "1000170" 
  "1000168" -> "1000173" 
  "1000170" -> "1000168" 
  "1000173" -> "1000138" 
  "1000173" -> "1000154" 
  "1000173" -> "1000208" 
  "1000179" -> "1000188" 
  "1000179" -> "1000196" 
  "1000180" -> "1000179" 
  "1000186" -> "1000191" 
  "1000186" -> "1000194" 
  "1000187" -> "1000186" 
  "1000188" -> "1000187" 
  "1000191" -> "1000194" 
  "1000194" -> "1000293" 
  "1000196" -> "1000201" 
  "1000199" -> "1000204" 
  "1000201" -> "1000199" 
  "1000204" -> "1000138" 
  "1000204" -> "1000154" 
  "1000204" -> "1000208" 
  "1000208" -> "1000276" 
  "1000208" -> "1000214" 
  "1000212" -> "1000219" 
  "1000214" -> "1000212" 
  "1000217" -> "1000223" 
  "1000219" -> "1000217" 
  "1000223" -> "1000276" 
  "1000223" -> "1000228" 
  "1000228" -> "1000234" 
  "1000228" -> "1000271" 
  "1000232" -> "1000239" 
  "1000234" -> "1000232" 
  "1000238" -> "1000242" 
  "1000238" -> "1000247" 
  "1000239" -> "1000238" 
  "1000242" -> "1000247" 
  "1000245" -> "1000254" 
  "1000245" -> "1000259" 
  "1000247" -> "1000245" 
  "1000252" -> "1000259" 
  "1000254" -> "1000252" 
  "1000257" -> "1000263" 
  "1000259" -> "1000257" 
  "1000263" -> "1000265" 
  "1000263" -> "1000150" 
  "1000265" -> "1000150" 
  "1000270" -> "1000283" 
  "1000270" -> "1000276" 
  "1000271" -> "1000270" 
  "1000276" -> "1000278" 
  "1000278" -> "1000293" 
  "1000281" -> "1000286" 
  "1000281" -> "1000290" 
  "1000282" -> "1000281" 
  "1000283" -> "1000282" 
  "1000286" -> "1000290" 
  "1000289" -> "1000293" 
  "1000290" -> "1000289" 
  "1000108" -> "1000119" 
}
