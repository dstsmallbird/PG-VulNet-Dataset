digraph udhcp_get_option {  
"1000123" [label = "(<operator>.assignment,v2 = 0)" ]
"1000126" [label = "(<operator>.assignment,v3 = a1 + 240)" ]
"1000128" [label = "(<operator>.addition,a1 + 240)" ]
"1000131" [label = "(<operator>.assignment,v4 = 388)" ]
"1000142" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v3 + v5))" ]
"1000144" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5))" ]
"1000145" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5))" ]
"1000146" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000147" [label = "(<operator>.addition,v3 + v5)" ]
"1000151" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5))" ]
"1000152" [label = "(<operator>.cast,(_BYTE *)(v3 + v5))" ]
"1000153" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000154" [label = "(<operator>.addition,v3 + v5)" ]
"1000158" [label = "(<operator>.preDecrement,--v6)" ]
"1000160" [label = "(<operator>.preIncrement,++v5)" ]
"1000163" [label = "(<operator>.lessThan,v4 + (int)v6 < 2)" ]
"1000164" [label = "(<operator>.addition,v4 + (int)v6)" ]
"1000166" [label = "(<operator>.cast,(int)v6)" ]
"1000167" [label = "(UNKNOWN,int,int)" ]
"1000172" [label = "(<operator>.equals,v7 == 255)" ]
"1000177" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000178" [label = "(<operator>.and,v2 & 0x101)" ]
"1000183" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000186" [label = "(<operator>.assignment,v4 = 128)" ]
"1000189" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000191" [label = "(<operator>.addition,a1 + 108)" ]
"1000196" [label = "(<operator>.equals,(v2 & 0x202) == 2)" ]
"1000197" [label = "(<operator>.and,v2 & 0x202)" ]
"1000202" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000205" [label = "(<operator>.assignment,v4 = 64)" ]
"1000208" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000210" [label = "(<operator>.addition,a1 + 44)" ]
"1000215" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000216" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000217" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000220" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000225" [label = "(<operator>.lessThan,v4 - (int)v5 < 2)" ]
"1000226" [label = "(<operator>.subtraction,v4 - (int)v5)" ]
"1000228" [label = "(<operator>.cast,(int)v5)" ]
"1000229" [label = "(UNKNOWN,int,int)" ]
"1000233" [label = "(<operator>.assignment,v8 = *(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000235" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000236" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000237" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000238" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000240" [label = "(<operator>.addition,v5 + 1)" ]
"1000243" [label = "(<operator>.assignment,v4 = v4 - 2 - v8 - v5)" ]
"1000245" [label = "(<operator>.subtraction,v4 - 2 - v8 - v5)" ]
"1000247" [label = "(<operator>.subtraction,2 - v8 - v5)" ]
"1000249" [label = "(<operator>.subtraction,v8 - v5)" ]
"1000253" [label = "(<operator>.notEquals,(v4 & 0x80000000) != 0)" ]
"1000254" [label = "(<operator>.and,v4 & 0x80000000)" ]
"1000260" [label = "(<operator>.equals,v7 == (_DWORD)a2)" ]
"1000262" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000263" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000267" [label = "(<operator>.logicalAnd,v7 == 52 && *(_BYTE *)(v3 + v5 + 1))" ]
"1000268" [label = "(<operator>.equals,v7 == 52)" ]
"1000271" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5 + 1))" ]
"1000272" [label = "(<operator>.cast,(_BYTE *)(v3 + v5 + 1))" ]
"1000273" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000274" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000276" [label = "(<operator>.addition,v5 + 1)" ]
"1000279" [label = "(<operators>.assignmentOr,v2 |= *(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000281" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000282" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000283" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000284" [label = "(<operator>.addition,v3 + v5 + 2)" ]
"1000286" [label = "(<operator>.addition,v5 + 2)" ]
"1000289" [label = "(<operator>.assignmentPlus,v3 += v8 + 2 + v5)" ]
"1000291" [label = "(<operator>.addition,v8 + 2 + v5)" ]
"1000293" [label = "(<operator>.addition,2 + v5)" ]
"1000297" [label = "(<operator>.lessThan,v4 < 1)" ]
"1000302" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000305" [label = "(<operator>.assignment,v10 = (unsigned __int8 *)(v3 + v5))" ]
"1000307" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5))" ]
"1000308" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000309" [label = "(<operator>.addition,v3 + v5)" ]
"1000313" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000314" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000315" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000319" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v11, v10 + 2) = 0)" ]
"1000320" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v11, v10 + 2))" ]
"1000321" [label = "(<operator>.cast,(_BYTE *)bin2hex(v11, v10 + 2))" ]
"1000322" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000323" [label = "(bin2hex,bin2hex(v11, v10 + 2))" ]
"1000325" [label = "(<operator>.addition,v10 + 2)" ]
"1000329" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *v10, v11))" ]
"1000332" [label = "(<operator>.indirection,*v10)" ]
"1000335" [label = "(RETURN,return v10 + 2;,return v10 + 2;)" ]
"1000336" [label = "(<operator>.addition,v10 + 2)" ]
"1000110" [label = "(METHOD,udhcp_get_option)" ]
"1000339" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000123" -> "1000128" 
  "1000126" -> "1000131" 
  "1000128" -> "1000126" 
  "1000131" -> "1000146" 
  "1000131" -> "1000172" 
  "1000131" -> "1000308" 
  "1000142" -> "1000153" 
  "1000144" -> "1000142" 
  "1000145" -> "1000144" 
  "1000146" -> "1000147" 
  "1000147" -> "1000145" 
  "1000151" -> "1000172" 
  "1000151" -> "1000308" 
  "1000151" -> "1000158" 
  "1000152" -> "1000151" 
  "1000153" -> "1000154" 
  "1000154" -> "1000152" 
  "1000158" -> "1000160" 
  "1000160" -> "1000167" 
  "1000163" -> "1000146" 
  "1000163" -> "1000172" 
  "1000163" -> "1000302" 
  "1000164" -> "1000163" 
  "1000166" -> "1000164" 
  "1000167" -> "1000166" 
  "1000172" -> "1000178" 
  "1000172" -> "1000229" 
  "1000177" -> "1000183" 
  "1000177" -> "1000197" 
  "1000178" -> "1000177" 
  "1000183" -> "1000186" 
  "1000186" -> "1000191" 
  "1000189" -> "1000146" 
  "1000189" -> "1000172" 
  "1000189" -> "1000308" 
  "1000191" -> "1000189" 
  "1000196" -> "1000217" 
  "1000196" -> "1000202" 
  "1000197" -> "1000196" 
  "1000202" -> "1000205" 
  "1000205" -> "1000210" 
  "1000208" -> "1000146" 
  "1000208" -> "1000172" 
  "1000208" -> "1000308" 
  "1000210" -> "1000208" 
  "1000215" -> "1000220" 
  "1000215" -> "1000229" 
  "1000216" -> "1000215" 
  "1000217" -> "1000216" 
  "1000220" -> "1000229" 
  "1000225" -> "1000302" 
  "1000225" -> "1000237" 
  "1000226" -> "1000225" 
  "1000228" -> "1000226" 
  "1000229" -> "1000228" 
  "1000233" -> "1000249" 
  "1000235" -> "1000233" 
  "1000236" -> "1000235" 
  "1000237" -> "1000240" 
  "1000238" -> "1000236" 
  "1000240" -> "1000238" 
  "1000243" -> "1000254" 
  "1000245" -> "1000243" 
  "1000247" -> "1000245" 
  "1000249" -> "1000247" 
  "1000253" -> "1000302" 
  "1000253" -> "1000263" 
  "1000254" -> "1000253" 
  "1000260" -> "1000308" 
  "1000260" -> "1000268" 
  "1000262" -> "1000260" 
  "1000263" -> "1000262" 
  "1000267" -> "1000283" 
  "1000267" -> "1000293" 
  "1000268" -> "1000273" 
  "1000268" -> "1000267" 
  "1000271" -> "1000267" 
  "1000272" -> "1000271" 
  "1000273" -> "1000276" 
  "1000274" -> "1000272" 
  "1000276" -> "1000274" 
  "1000279" -> "1000293" 
  "1000281" -> "1000279" 
  "1000282" -> "1000281" 
  "1000283" -> "1000286" 
  "1000284" -> "1000282" 
  "1000286" -> "1000284" 
  "1000289" -> "1000297" 
  "1000291" -> "1000289" 
  "1000293" -> "1000291" 
  "1000297" -> "1000146" 
  "1000297" -> "1000172" 
  "1000297" -> "1000308" 
  "1000297" -> "1000302" 
  "1000302" -> "1000146" 
  "1000302" -> "1000172" 
  "1000302" -> "1000308" 
  "1000305" -> "1000315" 
  "1000307" -> "1000305" 
  "1000308" -> "1000309" 
  "1000309" -> "1000307" 
  "1000313" -> "1000322" 
  "1000313" -> "1000336" 
  "1000314" -> "1000313" 
  "1000315" -> "1000314" 
  "1000319" -> "1000332" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000322" -> "1000325" 
  "1000323" -> "1000321" 
  "1000325" -> "1000323" 
  "1000329" -> "1000336" 
  "1000332" -> "1000329" 
  "1000335" -> "1000339" 
  "1000336" -> "1000335" 
  "1000110" -> "1000123" 
}
