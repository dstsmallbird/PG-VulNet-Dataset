digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v2 = 0)" ]
"1000124" [label = "(<operator>.assignment,v3 = a1 + 240)" ]
"1000126" [label = "(<operator>.addition,a1 + 240)" ]
"1000129" [label = "(<operator>.assignment,v4 = 388)" ]
"1000140" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v3 + v5))" ]
"1000142" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5))" ]
"1000143" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5))" ]
"1000144" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000145" [label = "(<operator>.addition,v3 + v5)" ]
"1000149" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5))" ]
"1000150" [label = "(<operator>.cast,(_BYTE *)(v3 + v5))" ]
"1000151" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000152" [label = "(<operator>.addition,v3 + v5)" ]
"1000156" [label = "(<operator>.preDecrement,--v6)" ]
"1000158" [label = "(<operator>.preIncrement,++v5)" ]
"1000161" [label = "(<operator>.lessThan,v4 + (int)v6 < 2)" ]
"1000162" [label = "(<operator>.addition,v4 + (int)v6)" ]
"1000164" [label = "(<operator>.cast,(int)v6)" ]
"1000165" [label = "(UNKNOWN,int,int)" ]
"1000170" [label = "(<operator>.equals,v7 == 255)" ]
"1000175" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000176" [label = "(<operator>.and,v2 & 0x101)" ]
"1000181" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000184" [label = "(<operator>.assignment,v4 = 128)" ]
"1000187" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000189" [label = "(<operator>.addition,a1 + 108)" ]
"1000194" [label = "(<operator>.equals,(v2 & 0x202) == 2)" ]
"1000195" [label = "(<operator>.and,v2 & 0x202)" ]
"1000200" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000203" [label = "(<operator>.assignment,v4 = 64)" ]
"1000206" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000208" [label = "(<operator>.addition,a1 + 44)" ]
"1000213" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000214" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000215" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000218" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000223" [label = "(<operator>.lessThan,v4 - (int)v5 < 2)" ]
"1000224" [label = "(<operator>.subtraction,v4 - (int)v5)" ]
"1000226" [label = "(<operator>.cast,(int)v5)" ]
"1000227" [label = "(UNKNOWN,int,int)" ]
"1000231" [label = "(<operator>.assignment,v8 = *(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000233" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000234" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5 + 1))" ]
"1000235" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000236" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000238" [label = "(<operator>.addition,v5 + 1)" ]
"1000241" [label = "(<operator>.assignment,v4 = v4 - 2 - v8 - v5)" ]
"1000243" [label = "(<operator>.subtraction,v4 - 2 - v8 - v5)" ]
"1000245" [label = "(<operator>.subtraction,2 - v8 - v5)" ]
"1000247" [label = "(<operator>.subtraction,v8 - v5)" ]
"1000251" [label = "(<operator>.notEquals,(v4 & 0x80000000) != 0)" ]
"1000252" [label = "(<operator>.and,v4 & 0x80000000)" ]
"1000258" [label = "(<operator>.equals,v7 == (_DWORD)a2)" ]
"1000260" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000261" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000265" [label = "(<operator>.logicalAnd,v7 == 52 && *(_BYTE *)(v3 + v5 + 1))" ]
"1000266" [label = "(<operator>.equals,v7 == 52)" ]
"1000269" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5 + 1))" ]
"1000270" [label = "(<operator>.cast,(_BYTE *)(v3 + v5 + 1))" ]
"1000271" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000272" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000274" [label = "(<operator>.addition,v5 + 1)" ]
"1000277" [label = "(<operators>.assignmentOr,v2 |= *(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000279" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000280" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5 + 2))" ]
"1000281" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000282" [label = "(<operator>.addition,v3 + v5 + 2)" ]
"1000284" [label = "(<operator>.addition,v5 + 2)" ]
"1000287" [label = "(<operator>.assignmentPlus,v3 += v8 + 2 + v5)" ]
"1000289" [label = "(<operator>.addition,v8 + 2 + v5)" ]
"1000291" [label = "(<operator>.addition,2 + v5)" ]
"1000295" [label = "(<operator>.lessThan,v4 < 1)" ]
"1000300" [label = "(<operator>.logicalNot,!*(_BYTE *)(v3 + v5 + 1))" ]
"1000301" [label = "(<operator>.indirection,*(_BYTE *)(v3 + v5 + 1))" ]
"1000302" [label = "(<operator>.cast,(_BYTE *)(v3 + v5 + 1))" ]
"1000303" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000304" [label = "(<operator>.addition,v3 + v5 + 1)" ]
"1000306" [label = "(<operator>.addition,v5 + 1)" ]
"1000311" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000315" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000316" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000317" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000321" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v10, v3 + v5 + 2) = 0)" ]
"1000322" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v10, v3 + v5 + 2))" ]
"1000323" [label = "(<operator>.cast,(_BYTE *)bin2hex(v10, v3 + v5 + 2))" ]
"1000324" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000325" [label = "(bin2hex,bin2hex(v10, v3 + v5 + 2))" ]
"1000327" [label = "(<operator>.addition,v3 + v5 + 2)" ]
"1000329" [label = "(<operator>.addition,v5 + 2)" ]
"1000333" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v3 + v5), v10))" ]
"1000336" [label = "(<operator>.indirection,*(unsigned __int8 *)(v3 + v5))" ]
"1000337" [label = "(<operator>.cast,(unsigned __int8 *)(v3 + v5))" ]
"1000338" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000339" [label = "(<operator>.addition,v3 + v5)" ]
"1000343" [label = "(RETURN,return v3 + v5 + 2;,return v3 + v5 + 2;)" ]
"1000344" [label = "(<operator>.addition,v3 + v5 + 2)" ]
"1000346" [label = "(<operator>.addition,v5 + 2)" ]
"1000109" [label = "(METHOD,udhcp_get_option)" ]
"1000349" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000121" -> "1000126" 
  "1000124" -> "1000129" 
  "1000126" -> "1000124" 
  "1000129" -> "1000303" 
  "1000129" -> "1000144" 
  "1000129" -> "1000170" 
  "1000140" -> "1000151" 
  "1000142" -> "1000140" 
  "1000143" -> "1000142" 
  "1000144" -> "1000145" 
  "1000145" -> "1000143" 
  "1000149" -> "1000303" 
  "1000149" -> "1000170" 
  "1000149" -> "1000156" 
  "1000150" -> "1000149" 
  "1000151" -> "1000152" 
  "1000152" -> "1000150" 
  "1000156" -> "1000158" 
  "1000158" -> "1000165" 
  "1000161" -> "1000144" 
  "1000161" -> "1000170" 
  "1000161" -> "1000311" 
  "1000162" -> "1000161" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000170" -> "1000176" 
  "1000170" -> "1000227" 
  "1000175" -> "1000181" 
  "1000175" -> "1000195" 
  "1000176" -> "1000175" 
  "1000181" -> "1000184" 
  "1000184" -> "1000189" 
  "1000187" -> "1000303" 
  "1000187" -> "1000144" 
  "1000187" -> "1000170" 
  "1000189" -> "1000187" 
  "1000194" -> "1000215" 
  "1000194" -> "1000200" 
  "1000195" -> "1000194" 
  "1000200" -> "1000203" 
  "1000203" -> "1000208" 
  "1000206" -> "1000303" 
  "1000206" -> "1000144" 
  "1000206" -> "1000170" 
  "1000208" -> "1000206" 
  "1000213" -> "1000218" 
  "1000213" -> "1000227" 
  "1000214" -> "1000213" 
  "1000215" -> "1000214" 
  "1000218" -> "1000227" 
  "1000223" -> "1000311" 
  "1000223" -> "1000235" 
  "1000224" -> "1000223" 
  "1000226" -> "1000224" 
  "1000227" -> "1000226" 
  "1000231" -> "1000247" 
  "1000233" -> "1000231" 
  "1000234" -> "1000233" 
  "1000235" -> "1000238" 
  "1000236" -> "1000234" 
  "1000238" -> "1000236" 
  "1000241" -> "1000252" 
  "1000243" -> "1000241" 
  "1000245" -> "1000243" 
  "1000247" -> "1000245" 
  "1000251" -> "1000311" 
  "1000251" -> "1000261" 
  "1000252" -> "1000251" 
  "1000258" -> "1000303" 
  "1000258" -> "1000266" 
  "1000260" -> "1000258" 
  "1000261" -> "1000260" 
  "1000265" -> "1000281" 
  "1000265" -> "1000291" 
  "1000266" -> "1000271" 
  "1000266" -> "1000265" 
  "1000269" -> "1000265" 
  "1000270" -> "1000269" 
  "1000271" -> "1000274" 
  "1000272" -> "1000270" 
  "1000274" -> "1000272" 
  "1000277" -> "1000291" 
  "1000279" -> "1000277" 
  "1000280" -> "1000279" 
  "1000281" -> "1000284" 
  "1000282" -> "1000280" 
  "1000284" -> "1000282" 
  "1000287" -> "1000295" 
  "1000289" -> "1000287" 
  "1000291" -> "1000289" 
  "1000295" -> "1000303" 
  "1000295" -> "1000144" 
  "1000295" -> "1000170" 
  "1000295" -> "1000311" 
  "1000300" -> "1000317" 
  "1000300" -> "1000311" 
  "1000301" -> "1000300" 
  "1000302" -> "1000301" 
  "1000303" -> "1000306" 
  "1000304" -> "1000302" 
  "1000306" -> "1000304" 
  "1000311" -> "1000317" 
  "1000315" -> "1000324" 
  "1000315" -> "1000346" 
  "1000316" -> "1000315" 
  "1000317" -> "1000316" 
  "1000321" -> "1000338" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000324" -> "1000329" 
  "1000325" -> "1000323" 
  "1000327" -> "1000325" 
  "1000329" -> "1000327" 
  "1000333" -> "1000346" 
  "1000336" -> "1000333" 
  "1000337" -> "1000336" 
  "1000338" -> "1000339" 
  "1000339" -> "1000337" 
  "1000343" -> "1000349" 
  "1000344" -> "1000343" 
  "1000346" -> "1000344" 
  "1000109" -> "1000121" 
}
