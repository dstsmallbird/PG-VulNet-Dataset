digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000131" [label = "(<operator>.addition,a1 + 44)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000136" [label = "(<operator>.addition,a1 + 108)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000153" [label = "(<operator>.assignment,v7 = 0)" ]
"1000156" [label = "(<operator>.assignment,v8 = 0)" ]
"1000162" [label = "(<operator>.assignment,v9 = v4 + v7)" ]
"1000164" [label = "(<operator>.addition,v4 + v7)" ]
"1000167" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7))" ]
"1000169" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7))" ]
"1000170" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000171" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000172" [label = "(<operator>.addition,v4 + v7)" ]
"1000176" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7))" ]
"1000177" [label = "(<operator>.cast,(_BYTE *)(v4 + v7))" ]
"1000178" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000179" [label = "(<operator>.addition,v4 + v7)" ]
"1000183" [label = "(<operator>.preDecrement,--v8)" ]
"1000185" [label = "(<operator>.preIncrement,++v7)" ]
"1000188" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000189" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000191" [label = "(<operator>.addition,v8 + 1)" ]
"1000197" [label = "(<operator>.equals,v10 == 255)" ]
"1000202" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000203" [label = "(<operator>.and,v6 & 0x101)" ]
"1000208" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000211" [label = "(<operator>.assignment,v5 = 128)" ]
"1000214" [label = "(<operator>.assignment,v4 = v3)" ]
"1000219" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000220" [label = "(<operator>.and,v6 & 0x202)" ]
"1000225" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000228" [label = "(<operator>.assignment,v5 = 64)" ]
"1000231" [label = "(<operator>.assignment,v4 = v2)" ]
"1000235" [label = "(<operator>.assignment,v12 = 0)" ]
"1000239" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000240" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000241" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000244" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000250" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000251" [label = "(<operator>.addition,v5 + v8)" ]
"1000256" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v9 + 1))" ]
"1000258" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 1))" ]
"1000259" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 1))" ]
"1000260" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000261" [label = "(<operator>.addition,v9 + 1)" ]
"1000264" [label = "(<operator>.assignment,v5 = v5 - v11 + v8 - 2)" ]
"1000266" [label = "(<operator>.subtraction,v5 - v11 + v8 - 2)" ]
"1000268" [label = "(<operator>.addition,v11 + v8 - 2)" ]
"1000270" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000274" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000279" [label = "(<operator>.notEquals,v10 != a2)" ]
"1000284" [label = "(<operator>.logicalAnd,v10 == 52 && *(_BYTE *)(v9 + 1))" ]
"1000285" [label = "(<operator>.equals,v10 == 52)" ]
"1000288" [label = "(<operator>.indirection,*(_BYTE *)(v9 + 1))" ]
"1000289" [label = "(<operator>.cast,(_BYTE *)(v9 + 1))" ]
"1000290" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000291" [label = "(<operator>.addition,v9 + 1)" ]
"1000294" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v9 + 2))" ]
"1000296" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 2))" ]
"1000297" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 2))" ]
"1000298" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000299" [label = "(<operator>.addition,v9 + 2)" ]
"1000302" [label = "(<operator>.assignment,v4 = v4 + v11 - v8 + 2)" ]
"1000304" [label = "(<operator>.addition,v4 + v11 - v8 + 2)" ]
"1000306" [label = "(<operator>.subtraction,v11 - v8 + 2)" ]
"1000308" [label = "(<operator>.addition,v8 + 2)" ]
"1000313" [label = "(<operator>.greaterThan,v5 > 0)" ]
"1000319" [label = "(<operator>.logicalNot,!*(_BYTE *)(v9 + 1))" ]
"1000320" [label = "(<operator>.indirection,*(_BYTE *)(v9 + 1))" ]
"1000321" [label = "(<operator>.cast,(_BYTE *)(v9 + 1))" ]
"1000322" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000323" [label = "(<operator>.addition,v9 + 1)" ]
"1000328" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, 255, 1))" ]
"1000333" [label = "(RETURN,return 0;,return 0;)" ]
"1000335" [label = "(<operator>.assignment,v14 = v4 - v8)" ]
"1000337" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000340" [label = "(log_option,log_option(\"option found\", v4 - v8, 255, 1))" ]
"1000342" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000347" [label = "(<operator>.assignment,v12 = v14 + 2)" ]
"1000349" [label = "(<operator>.addition,v14 + 2)" ]
"1000352" [label = "(RETURN,return v12;,return v12;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000354" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000354" 
  "1000147" -> "1000153" 
  "1000153" -> "1000156" 
  "1000156" -> "1000164" 
  "1000156" -> "1000197" 
  "1000162" -> "1000171" 
  "1000164" -> "1000162" 
  "1000167" -> "1000178" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000176" -> "1000354" 
  "1000176" -> "1000197" 
  "1000176" -> "1000183" 
  "1000177" -> "1000176" 
  "1000178" -> "1000179" 
  "1000179" -> "1000177" 
  "1000183" -> "1000185" 
  "1000185" -> "1000191" 
  "1000188" -> "1000164" 
  "1000188" -> "1000197" 
  "1000188" -> "1000328" 
  "1000189" -> "1000188" 
  "1000191" -> "1000189" 
  "1000197" -> "1000203" 
  "1000197" -> "1000251" 
  "1000202" -> "1000208" 
  "1000202" -> "1000220" 
  "1000203" -> "1000202" 
  "1000208" -> "1000211" 
  "1000211" -> "1000214" 
  "1000214" -> "1000313" 
  "1000219" -> "1000225" 
  "1000219" -> "1000235" 
  "1000220" -> "1000219" 
  "1000225" -> "1000228" 
  "1000228" -> "1000231" 
  "1000231" -> "1000313" 
  "1000235" -> "1000241" 
  "1000239" -> "1000244" 
  "1000239" -> "1000352" 
  "1000240" -> "1000239" 
  "1000241" -> "1000240" 
  "1000244" -> "1000352" 
  "1000250" -> "1000328" 
  "1000250" -> "1000260" 
  "1000251" -> "1000250" 
  "1000256" -> "1000270" 
  "1000258" -> "1000256" 
  "1000259" -> "1000258" 
  "1000260" -> "1000261" 
  "1000261" -> "1000259" 
  "1000264" -> "1000274" 
  "1000266" -> "1000264" 
  "1000268" -> "1000266" 
  "1000270" -> "1000268" 
  "1000274" -> "1000328" 
  "1000274" -> "1000279" 
  "1000279" -> "1000322" 
  "1000279" -> "1000285" 
  "1000284" -> "1000298" 
  "1000284" -> "1000308" 
  "1000285" -> "1000290" 
  "1000285" -> "1000284" 
  "1000288" -> "1000284" 
  "1000289" -> "1000288" 
  "1000290" -> "1000291" 
  "1000291" -> "1000289" 
  "1000294" -> "1000308" 
  "1000296" -> "1000294" 
  "1000297" -> "1000296" 
  "1000298" -> "1000299" 
  "1000299" -> "1000297" 
  "1000302" -> "1000313" 
  "1000304" -> "1000302" 
  "1000306" -> "1000304" 
  "1000308" -> "1000306" 
  "1000313" -> "1000354" 
  "1000313" -> "1000153" 
  "1000313" -> "1000328" 
  "1000319" -> "1000328" 
  "1000319" -> "1000337" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000322" -> "1000323" 
  "1000323" -> "1000321" 
  "1000328" -> "1000333" 
  "1000333" -> "1000354" 
  "1000335" -> "1000342" 
  "1000337" -> "1000335" 
  "1000340" -> "1000349" 
  "1000342" -> "1000340" 
  "1000347" -> "1000352" 
  "1000349" -> "1000347" 
  "1000352" -> "1000354" 
  "1000113" -> "1000131" 
}
