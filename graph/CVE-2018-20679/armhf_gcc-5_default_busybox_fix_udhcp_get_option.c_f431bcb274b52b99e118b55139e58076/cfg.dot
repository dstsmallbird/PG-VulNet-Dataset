digraph udhcp_get_option {  
"1000115" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000117" [label = "(<operator>.addition,a1 + 240)" ]
"1000120" [label = "(<operator>.assignment,v3 = 0)" ]
"1000124" [label = "(<operator>.assignment,i = 388)" ]
"1000127" [label = "(<operator>.assignment,i = 64)" ]
"1000137" [label = "(<operator>.assignment,v5 = *v2)" ]
"1000139" [label = "(<operator>.indirection,*v2)" ]
"1000142" [label = "(<operator>.logicalNot,!*v2)" ]
"1000143" [label = "(<operator>.indirection,*v2)" ]
"1000146" [label = "(<operator>.preDecrement,--i)" ]
"1000148" [label = "(<operator>.preIncrement,++v2)" ]
"1000152" [label = "(<operator>.equals,v5 == 255)" ]
"1000157" [label = "(<operator>.equals,i == 1)" ]
"1000161" [label = "(<operator>.assignment,v6 = v2[1])" ]
"1000163" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000166" [label = "(<operator>.assignmentMinus,i -= v6 + 2)" ]
"1000168" [label = "(<operator>.addition,v6 + 2)" ]
"1000172" [label = "(<operator>.lessThan,i < 0)" ]
"1000177" [label = "(<operator>.equals,a2 == v5)" ]
"1000182" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000186" [label = "(log_option,log_option(\"option found\", v2, v3))" ]
"1000190" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000191" [label = "(<operator>.addition,v2 + 2)" ]
"1000195" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, v3))" ]
"1000199" [label = "(RETURN,return 0;,return 0;)" ]
"1000202" [label = "(<operator>.logicalAnd,v5 == 52 && v2[1])" ]
"1000203" [label = "(<operator>.equals,v5 == 52)" ]
"1000206" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000209" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000211" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000214" [label = "(<operator>.assignmentPlus,v2 += v6 + 2)" ]
"1000216" [label = "(<operator>.addition,v6 + 2)" ]
"1000221" [label = "(<operator>.logicalNot,!i)" ]
"1000225" [label = "(<operator>.notEquals,(v3 & 0x101) != 1)" ]
"1000226" [label = "(<operator>.and,v3 & 0x101)" ]
"1000231" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000234" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000236" [label = "(<operator>.addition,a1 + 108)" ]
"1000239" [label = "(<operator>.assignment,i = 128)" ]
"1000243" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000244" [label = "(<operator>.and,v3 & 0x202)" ]
"1000249" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000252" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000254" [label = "(<operator>.addition,a1 + 44)" ]
"1000258" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000259" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000260" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000263" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000266" [label = "(RETURN,return 0;,return 0;)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000268" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000115" -> "1000120" 
  "1000117" -> "1000115" 
  "1000120" -> "1000124" 
  "1000124" -> "1000139" 
  "1000124" -> "1000226" 
  "1000124" -> "1000244" 
  "1000127" -> "1000139" 
  "1000127" -> "1000226" 
  "1000127" -> "1000244" 
  "1000137" -> "1000143" 
  "1000139" -> "1000137" 
  "1000142" -> "1000146" 
  "1000142" -> "1000152" 
  "1000143" -> "1000142" 
  "1000146" -> "1000148" 
  "1000148" -> "1000221" 
  "1000152" -> "1000260" 
  "1000152" -> "1000226" 
  "1000152" -> "1000244" 
  "1000152" -> "1000157" 
  "1000157" -> "1000195" 
  "1000157" -> "1000163" 
  "1000161" -> "1000168" 
  "1000163" -> "1000161" 
  "1000166" -> "1000172" 
  "1000168" -> "1000166" 
  "1000172" -> "1000195" 
  "1000172" -> "1000177" 
  "1000177" -> "1000182" 
  "1000177" -> "1000203" 
  "1000182" -> "1000186" 
  "1000182" -> "1000195" 
  "1000186" -> "1000191" 
  "1000190" -> "1000268" 
  "1000191" -> "1000190" 
  "1000195" -> "1000199" 
  "1000199" -> "1000268" 
  "1000202" -> "1000211" 
  "1000202" -> "1000216" 
  "1000203" -> "1000202" 
  "1000203" -> "1000206" 
  "1000206" -> "1000202" 
  "1000209" -> "1000216" 
  "1000211" -> "1000209" 
  "1000214" -> "1000221" 
  "1000216" -> "1000214" 
  "1000221" -> "1000139" 
  "1000221" -> "1000226" 
  "1000221" -> "1000195" 
  "1000225" -> "1000260" 
  "1000225" -> "1000244" 
  "1000225" -> "1000231" 
  "1000226" -> "1000225" 
  "1000231" -> "1000236" 
  "1000234" -> "1000239" 
  "1000236" -> "1000234" 
  "1000239" -> "1000139" 
  "1000239" -> "1000226" 
  "1000239" -> "1000244" 
  "1000243" -> "1000260" 
  "1000243" -> "1000249" 
  "1000244" -> "1000243" 
  "1000249" -> "1000254" 
  "1000252" -> "1000127" 
  "1000254" -> "1000252" 
  "1000258" -> "1000263" 
  "1000258" -> "1000266" 
  "1000259" -> "1000258" 
  "1000260" -> "1000259" 
  "1000263" -> "1000266" 
  "1000266" -> "1000268" 
  "1000106" -> "1000117" 
}
