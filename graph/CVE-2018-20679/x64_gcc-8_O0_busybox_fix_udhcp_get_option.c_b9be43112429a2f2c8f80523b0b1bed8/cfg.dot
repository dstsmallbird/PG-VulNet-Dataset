digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v8 = 0)" ]
"1000120" [label = "(<operator>.assignment,v10 = a1 + 240)" ]
"1000122" [label = "(<operator>.addition,a1 + 240)" ]
"1000125" [label = "(<operator>.assignment,v7 = 388)" ]
"1000138" [label = "(<operator>.lessEqualsThan,v7 <= 0)" ]
"1000143" [label = "(<operator>.indirection,*v10)" ]
"1000146" [label = "(<operator>.preDecrement,--v7)" ]
"1000148" [label = "(<operator>.preIncrement,++v10)" ]
"1000151" [label = "(<operator>.notEquals,*v10 != 0xFF)" ]
"1000152" [label = "(<operator>.indirection,*v10)" ]
"1000157" [label = "(<operator>.equals,(v8 & 0x101) == 1)" ]
"1000158" [label = "(<operator>.and,v8 & 0x101)" ]
"1000163" [label = "(<operators>.assignmentOr,v8 |= 0x101u)" ]
"1000166" [label = "(<operator>.assignment,v10 = a1 + 108)" ]
"1000168" [label = "(<operator>.addition,a1 + 108)" ]
"1000171" [label = "(<operator>.assignment,v7 = 128)" ]
"1000177" [label = "(<operator>.notEquals,(v8 & 0x202) != 2)" ]
"1000178" [label = "(<operator>.and,v8 & 0x202)" ]
"1000184" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000185" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000186" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000189" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, a3, a4, a5, a6))" ]
"1000190" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000191" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000199" [label = "(<operators>.assignmentOr,v8 |= 0x202u)" ]
"1000202" [label = "(<operator>.assignment,v10 = a1 + 44)" ]
"1000204" [label = "(<operator>.addition,a1 + 44)" ]
"1000207" [label = "(<operator>.assignment,v7 = 64)" ]
"1000211" [label = "(<operator>.lessEqualsThan,v7 <= 1)" ]
"1000215" [label = "(<operator>.assignment,v9 = v10[1] + 2)" ]
"1000217" [label = "(<operator>.addition,v10[1] + 2)" ]
"1000218" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000222" [label = "(<operator>.assignmentMinus,v7 -= v9)" ]
"1000226" [label = "(<operator>.lessThan,v7 < 0)" ]
"1000231" [label = "(<operator>.equals,a2 == *v10)" ]
"1000233" [label = "(<operator>.indirection,*v10)" ]
"1000237" [label = "(<operator>.logicalAnd,*v10 == 52 && v9 > 2)" ]
"1000238" [label = "(<operator>.equals,*v10 == 52)" ]
"1000239" [label = "(<operator>.indirection,*v10)" ]
"1000242" [label = "(<operator>.greaterThan,v9 > 2)" ]
"1000245" [label = "(<operators>.assignmentOr,v8 |= v10[2])" ]
"1000247" [label = "(<operator>.indirectIndexAccess,v10[2])" ]
"1000250" [label = "(<operator>.assignmentPlus,v10 += v9)" ]
"1000254" [label = "(<operator>.logicalNot,!v10[1])" ]
"1000255" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000260" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, a3, a4, a5, a6))" ]
"1000261" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000262" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000270" [label = "(log_option,log_option(\"option found\", v10))" ]
"1000273" [label = "(RETURN,return v10 + 2;,return v10 + 2;)" ]
"1000274" [label = "(<operator>.addition,v10 + 2)" ]
"1000105" [label = "(METHOD,udhcp_get_option)" ]
"1000277" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000122" 
  "1000120" -> "1000125" 
  "1000122" -> "1000120" 
  "1000125" -> "1000138" 
  "1000125" -> "1000152" 
  "1000125" -> "1000211" 
  "1000125" -> "1000255" 
  "1000138" -> "1000262" 
  "1000138" -> "1000143" 
  "1000143" -> "1000152" 
  "1000143" -> "1000211" 
  "1000143" -> "1000255" 
  "1000143" -> "1000146" 
  "1000146" -> "1000148" 
  "1000148" -> "1000138" 
  "1000148" -> "1000152" 
  "1000151" -> "1000211" 
  "1000151" -> "1000255" 
  "1000151" -> "1000158" 
  "1000152" -> "1000151" 
  "1000157" -> "1000163" 
  "1000157" -> "1000178" 
  "1000158" -> "1000157" 
  "1000163" -> "1000168" 
  "1000166" -> "1000171" 
  "1000168" -> "1000166" 
  "1000171" -> "1000138" 
  "1000171" -> "1000152" 
  "1000171" -> "1000211" 
  "1000177" -> "1000186" 
  "1000177" -> "1000199" 
  "1000178" -> "1000177" 
  "1000184" -> "1000191" 
  "1000184" -> "1000199" 
  "1000185" -> "1000184" 
  "1000186" -> "1000185" 
  "1000189" -> "1000199" 
  "1000190" -> "1000189" 
  "1000191" -> "1000190" 
  "1000199" -> "1000204" 
  "1000202" -> "1000207" 
  "1000204" -> "1000202" 
  "1000207" -> "1000138" 
  "1000207" -> "1000152" 
  "1000207" -> "1000211" 
  "1000211" -> "1000262" 
  "1000211" -> "1000218" 
  "1000215" -> "1000222" 
  "1000217" -> "1000215" 
  "1000218" -> "1000217" 
  "1000222" -> "1000226" 
  "1000226" -> "1000262" 
  "1000226" -> "1000233" 
  "1000231" -> "1000255" 
  "1000231" -> "1000239" 
  "1000233" -> "1000231" 
  "1000237" -> "1000247" 
  "1000237" -> "1000250" 
  "1000238" -> "1000237" 
  "1000238" -> "1000242" 
  "1000239" -> "1000238" 
  "1000242" -> "1000237" 
  "1000245" -> "1000250" 
  "1000247" -> "1000245" 
  "1000250" -> "1000138" 
  "1000250" -> "1000152" 
  "1000250" -> "1000211" 
  "1000250" -> "1000255" 
  "1000254" -> "1000262" 
  "1000254" -> "1000270" 
  "1000255" -> "1000254" 
  "1000260" -> "1000270" 
  "1000261" -> "1000260" 
  "1000262" -> "1000261" 
  "1000270" -> "1000274" 
  "1000273" -> "1000277" 
  "1000274" -> "1000273" 
  "1000105" -> "1000117" 
}
