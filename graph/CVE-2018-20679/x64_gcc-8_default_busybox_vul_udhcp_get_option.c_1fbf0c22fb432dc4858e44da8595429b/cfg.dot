digraph udhcp_get_option {  
"1000122" [label = "(<operator>.assignment,v7 = a1 + 240)" ]
"1000124" [label = "(<operator>.addition,a1 + 240)" ]
"1000128" [label = "(<operator>.assignment,i = 388)" ]
"1000131" [label = "(<operator>.assignment,i = 64)" ]
"1000141" [label = "(<operator>.assignment,LOBYTE(v9) = *v7)" ]
"1000142" [label = "(LOBYTE,LOBYTE(v9))" ]
"1000144" [label = "(<operator>.indirection,*v7)" ]
"1000147" [label = "(<operator>.logicalNot,!*v7)" ]
"1000148" [label = "(<operator>.indirection,*v7)" ]
"1000151" [label = "(<operator>.preDecrement,--i)" ]
"1000153" [label = "(<operator>.preIncrement,++v7)" ]
"1000157" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000158" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000159" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000164" [label = "(<operator>.logicalOr,i == 1 || (a3 = (unsigned int)(unsigned __int8)v7[1] + 2, i -= a3, i < 0))" ]
"1000165" [label = "(<operator>.equals,i == 1)" ]
"1000169" [label = "(<operator>.assignment,a3 = (unsigned int)(unsigned __int8)v7[1] + 2)" ]
"1000171" [label = "(<operator>.addition,(unsigned int)(unsigned __int8)v7[1] + 2)" ]
"1000172" [label = "(<operator>.cast,(unsigned int)(unsigned __int8)v7[1])" ]
"1000173" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000174" [label = "(<operator>.cast,(unsigned __int8)v7[1])" ]
"1000175" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000176" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000181" [label = "(<operator>.assignmentMinus,i -= a3)" ]
"1000184" [label = "(<operator>.lessThan,i < 0)" ]
"1000190" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, a3, v6, v9, a6))" ]
"1000191" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000192" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000199" [label = "(RETURN,return v10;,return v10;)" ]
"1000201" [label = "(<operator>.assignment,a6 = (unsigned __int8)v9)" ]
"1000203" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000204" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000207" [label = "(<operator>.equals,(unsigned __int8)v9 == a2)" ]
"1000208" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000209" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000213" [label = "(<operator>.assignment,v11 = v7)" ]
"1000216" [label = "(<operator>.assignment,v10 = v7 + 2)" ]
"1000218" [label = "(<operator>.addition,v7 + 2)" ]
"1000221" [label = "(log_option,log_option(\"option found\", v11, a3, v6))" ]
"1000226" [label = "(RETURN,return v10;,return v10;)" ]
"1000229" [label = "(<operator>.logicalAnd,v7[1] && (_BYTE)v9 == 52)" ]
"1000230" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000233" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000234" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000235" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000239" [label = "(<operator>.assignment,v9 = (unsigned __int8)v7[2])" ]
"1000241" [label = "(<operator>.cast,(unsigned __int8)v7[2])" ]
"1000242" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000243" [label = "(<operator>.indirectIndexAccess,v7[2])" ]
"1000246" [label = "(<operator>.assignment,v6 = v9 | (unsigned int)v6)" ]
"1000248" [label = "(<operator>.or,v9 | (unsigned int)v6)" ]
"1000250" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000251" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000253" [label = "(<operator>.assignmentPlus,v7 += (int)a3)" ]
"1000255" [label = "(<operator>.cast,(int)a3)" ]
"1000256" [label = "(UNKNOWN,int,int)" ]
"1000260" [label = "(<operator>.logicalNot,!i)" ]
"1000264" [label = "(<operator>.notEquals,(v6 & 0x101) != 1)" ]
"1000265" [label = "(<operator>.and,v6 & 0x101)" ]
"1000270" [label = "(<operator>.assignment,v6 = (unsigned int)v6 | 0x101)" ]
"1000272" [label = "(<operator>.or,(unsigned int)v6 | 0x101)" ]
"1000273" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000274" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000277" [label = "(<operator>.assignment,v7 = a1 + 108)" ]
"1000279" [label = "(<operator>.addition,a1 + 108)" ]
"1000282" [label = "(<operator>.assignment,i = 128)" ]
"1000286" [label = "(<operator>.notEquals,(v6 & 0x202) != 2)" ]
"1000287" [label = "(<operator>.and,v6 & 0x202)" ]
"1000292" [label = "(<operator>.assignment,v6 = (unsigned int)v6 | 0x202)" ]
"1000294" [label = "(<operator>.or,(unsigned int)v6 | 0x202)" ]
"1000295" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000296" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000299" [label = "(<operator>.assignment,v7 = a1 + 44)" ]
"1000301" [label = "(<operator>.addition,a1 + 44)" ]
"1000306" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000307" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000308" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000311" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, a3, v6, -1, a6))" ]
"1000312" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000313" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000318" [label = "(<operator>.minus,-1)" ]
"1000321" [label = "(RETURN,return v10;,return v10;)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000323" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000122" -> "1000128" 
  "1000124" -> "1000122" 
  "1000128" -> "1000142" 
  "1000128" -> "1000265" 
  "1000128" -> "1000287" 
  "1000131" -> "1000142" 
  "1000131" -> "1000265" 
  "1000131" -> "1000287" 
  "1000141" -> "1000148" 
  "1000142" -> "1000144" 
  "1000144" -> "1000141" 
  "1000147" -> "1000159" 
  "1000147" -> "1000151" 
  "1000148" -> "1000147" 
  "1000151" -> "1000153" 
  "1000153" -> "1000260" 
  "1000157" -> "1000265" 
  "1000157" -> "1000287" 
  "1000157" -> "1000308" 
  "1000157" -> "1000165" 
  "1000158" -> "1000157" 
  "1000159" -> "1000158" 
  "1000164" -> "1000192" 
  "1000164" -> "1000204" 
  "1000165" -> "1000164" 
  "1000165" -> "1000173" 
  "1000169" -> "1000181" 
  "1000171" -> "1000169" 
  "1000172" -> "1000171" 
  "1000173" -> "1000175" 
  "1000174" -> "1000172" 
  "1000175" -> "1000176" 
  "1000176" -> "1000174" 
  "1000181" -> "1000184" 
  "1000184" -> "1000164" 
  "1000190" -> "1000199" 
  "1000191" -> "1000190" 
  "1000192" -> "1000191" 
  "1000199" -> "1000323" 
  "1000201" -> "1000209" 
  "1000203" -> "1000201" 
  "1000204" -> "1000203" 
  "1000207" -> "1000213" 
  "1000207" -> "1000230" 
  "1000208" -> "1000207" 
  "1000209" -> "1000208" 
  "1000213" -> "1000218" 
  "1000216" -> "1000221" 
  "1000218" -> "1000216" 
  "1000221" -> "1000226" 
  "1000226" -> "1000323" 
  "1000229" -> "1000242" 
  "1000229" -> "1000256" 
  "1000230" -> "1000235" 
  "1000230" -> "1000229" 
  "1000233" -> "1000229" 
  "1000234" -> "1000233" 
  "1000235" -> "1000234" 
  "1000239" -> "1000251" 
  "1000241" -> "1000239" 
  "1000242" -> "1000243" 
  "1000243" -> "1000241" 
  "1000246" -> "1000256" 
  "1000248" -> "1000246" 
  "1000250" -> "1000248" 
  "1000251" -> "1000250" 
  "1000253" -> "1000260" 
  "1000255" -> "1000253" 
  "1000256" -> "1000255" 
  "1000260" -> "1000142" 
  "1000260" -> "1000265" 
  "1000260" -> "1000192" 
  "1000264" -> "1000287" 
  "1000264" -> "1000308" 
  "1000264" -> "1000274" 
  "1000265" -> "1000264" 
  "1000270" -> "1000279" 
  "1000272" -> "1000270" 
  "1000273" -> "1000272" 
  "1000274" -> "1000273" 
  "1000277" -> "1000282" 
  "1000279" -> "1000277" 
  "1000282" -> "1000142" 
  "1000282" -> "1000265" 
  "1000282" -> "1000287" 
  "1000286" -> "1000308" 
  "1000286" -> "1000296" 
  "1000287" -> "1000286" 
  "1000292" -> "1000301" 
  "1000294" -> "1000292" 
  "1000295" -> "1000294" 
  "1000296" -> "1000295" 
  "1000299" -> "1000131" 
  "1000301" -> "1000299" 
  "1000306" -> "1000313" 
  "1000306" -> "1000321" 
  "1000307" -> "1000306" 
  "1000308" -> "1000307" 
  "1000311" -> "1000321" 
  "1000312" -> "1000318" 
  "1000313" -> "1000312" 
  "1000318" -> "1000311" 
  "1000321" -> "1000323" 
  "1000107" -> "1000124" 
}
