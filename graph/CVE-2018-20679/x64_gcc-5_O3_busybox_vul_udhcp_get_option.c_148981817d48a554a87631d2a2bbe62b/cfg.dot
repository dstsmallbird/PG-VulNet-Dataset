digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000125" [label = "(<operator>.assignment,i = 388)" ]
"1000128" [label = "(<operator>.assignment,i = 64)" ]
"1000141" [label = "(<operator>.assignment,v8 = *v6)" ]
"1000143" [label = "(<operator>.indirection,*v6)" ]
"1000146" [label = "(<operator>.cast,(_BYTE)v8)" ]
"1000147" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000150" [label = "(<operator>.preDecrement,--i)" ]
"1000152" [label = "(<operator>.preIncrement,++v6)" ]
"1000155" [label = "(<operator>.logicalNot,!i)" ]
"1000159" [label = "(<operator>.equals,(_BYTE)v8 == 0xFF)" ]
"1000160" [label = "(<operator>.cast,(_BYTE)v8)" ]
"1000161" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000166" [label = "(<operator>.equals,i == 1)" ]
"1000170" [label = "(<operator>.assignment,a4 = (unsigned int)v6[1] + 2)" ]
"1000172" [label = "(<operator>.addition,(unsigned int)v6[1] + 2)" ]
"1000173" [label = "(<operator>.cast,(unsigned int)v6[1])" ]
"1000174" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000175" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000179" [label = "(<operator>.assignmentMinus,i -= a4)" ]
"1000183" [label = "(<operator>.lessThan,i < 0)" ]
"1000187" [label = "(<operator>.assignment,a5 = (unsigned __int8)v8)" ]
"1000189" [label = "(<operator>.cast,(unsigned __int8)v8)" ]
"1000190" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000193" [label = "(<operator>.equals,a2 == (unsigned __int8)v8)" ]
"1000195" [label = "(<operator>.cast,(unsigned __int8)v8)" ]
"1000196" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000200" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000201" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000202" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000205" [label = "(log_option_part_0,log_option_part_0(\"option found\", v6, v8, a4, (unsigned __int8)v8, v5))" ]
"1000210" [label = "(<operator>.cast,(unsigned __int8)v8)" ]
"1000211" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000214" [label = "(RETURN,return v6 + 2;,return v6 + 2;)" ]
"1000215" [label = "(<operator>.addition,v6 + 2)" ]
"1000219" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000224" [label = "(<operator>.equals,(_BYTE)v8 == 52)" ]
"1000225" [label = "(<operator>.cast,(_BYTE)v8)" ]
"1000226" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000230" [label = "(<operator>.assignment,LODWORD(v8) = v6[2])" ]
"1000231" [label = "(LODWORD,LODWORD(v8))" ]
"1000233" [label = "(<operator>.indirectIndexAccess,v6[2])" ]
"1000236" [label = "(<operator>.assignment,v5 = (unsigned int)v8 | (unsigned int)v5)" ]
"1000238" [label = "(<operator>.or,(unsigned int)v8 | (unsigned int)v5)" ]
"1000239" [label = "(<operator>.cast,(unsigned int)v8)" ]
"1000240" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000242" [label = "(<operator>.cast,(unsigned int)v5)" ]
"1000243" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000245" [label = "(<operator>.assignmentPlus,v6 += (int)a4)" ]
"1000247" [label = "(<operator>.cast,(int)a4)" ]
"1000248" [label = "(UNKNOWN,int,int)" ]
"1000251" [label = "(<operator>.logicalNot,!i)" ]
"1000256" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v8, a4, a5, v5))" ]
"1000257" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000258" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000265" [label = "(RETURN,return (unsigned __int8 *)v9;,return (unsigned __int8 *)v9;)" ]
"1000266" [label = "(<operator>.cast,(unsigned __int8 *)v9)" ]
"1000267" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000270" [label = "(<operator>.notEquals,(v5 & 0x101) != 1)" ]
"1000271" [label = "(<operator>.and,v5 & 0x101)" ]
"1000276" [label = "(<operator>.assignment,v5 = (unsigned int)v5 | 0x101)" ]
"1000278" [label = "(<operator>.or,(unsigned int)v5 | 0x101)" ]
"1000279" [label = "(<operator>.cast,(unsigned int)v5)" ]
"1000280" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000283" [label = "(<operator>.assignment,v6 = a1 + 108)" ]
"1000285" [label = "(<operator>.addition,a1 + 108)" ]
"1000288" [label = "(<operator>.assignment,i = 128)" ]
"1000292" [label = "(<operator>.notEquals,(v5 & 0x202) != 2)" ]
"1000293" [label = "(<operator>.and,v5 & 0x202)" ]
"1000298" [label = "(<operator>.assignment,v5 = (unsigned int)v5 | 0x202)" ]
"1000300" [label = "(<operator>.or,(unsigned int)v5 | 0x202)" ]
"1000301" [label = "(<operator>.cast,(unsigned int)v5)" ]
"1000302" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000305" [label = "(<operator>.assignment,v6 = a1 + 44)" ]
"1000307" [label = "(<operator>.addition,a1 + 44)" ]
"1000312" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 2)" ]
"1000313" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000314" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000317" [label = "(RETURN,return (unsigned __int8 *)v9;,return (unsigned __int8 *)v9;)" ]
"1000318" [label = "(<operator>.cast,(unsigned __int8 *)v9)" ]
"1000319" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000321" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v8, a4, a5, v5))" ]
"1000322" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000323" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000331" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000125" 
  "1000121" -> "1000119" 
  "1000125" -> "1000161" 
  "1000125" -> "1000143" 
  "1000125" -> "1000271" 
  "1000125" -> "1000293" 
  "1000128" -> "1000161" 
  "1000128" -> "1000143" 
  "1000128" -> "1000271" 
  "1000128" -> "1000293" 
  "1000141" -> "1000147" 
  "1000143" -> "1000141" 
  "1000146" -> "1000161" 
  "1000146" -> "1000271" 
  "1000146" -> "1000293" 
  "1000146" -> "1000314" 
  "1000146" -> "1000150" 
  "1000147" -> "1000146" 
  "1000150" -> "1000152" 
  "1000152" -> "1000155" 
  "1000155" -> "1000161" 
  "1000155" -> "1000143" 
  "1000155" -> "1000258" 
  "1000159" -> "1000271" 
  "1000159" -> "1000293" 
  "1000159" -> "1000314" 
  "1000159" -> "1000166" 
  "1000160" -> "1000159" 
  "1000161" -> "1000160" 
  "1000166" -> "1000258" 
  "1000166" -> "1000174" 
  "1000170" -> "1000179" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000174" -> "1000175" 
  "1000175" -> "1000173" 
  "1000179" -> "1000183" 
  "1000183" -> "1000258" 
  "1000183" -> "1000190" 
  "1000187" -> "1000196" 
  "1000189" -> "1000187" 
  "1000190" -> "1000189" 
  "1000193" -> "1000202" 
  "1000193" -> "1000219" 
  "1000195" -> "1000193" 
  "1000196" -> "1000195" 
  "1000200" -> "1000211" 
  "1000200" -> "1000215" 
  "1000201" -> "1000200" 
  "1000202" -> "1000201" 
  "1000205" -> "1000215" 
  "1000210" -> "1000205" 
  "1000211" -> "1000210" 
  "1000214" -> "1000331" 
  "1000215" -> "1000214" 
  "1000219" -> "1000226" 
  "1000219" -> "1000248" 
  "1000224" -> "1000231" 
  "1000224" -> "1000248" 
  "1000225" -> "1000224" 
  "1000226" -> "1000225" 
  "1000230" -> "1000240" 
  "1000231" -> "1000233" 
  "1000233" -> "1000230" 
  "1000236" -> "1000248" 
  "1000238" -> "1000236" 
  "1000239" -> "1000243" 
  "1000240" -> "1000239" 
  "1000242" -> "1000238" 
  "1000243" -> "1000242" 
  "1000245" -> "1000251" 
  "1000247" -> "1000245" 
  "1000248" -> "1000247" 
  "1000251" -> "1000161" 
  "1000251" -> "1000143" 
  "1000251" -> "1000271" 
  "1000251" -> "1000258" 
  "1000256" -> "1000267" 
  "1000257" -> "1000256" 
  "1000258" -> "1000257" 
  "1000265" -> "1000331" 
  "1000266" -> "1000265" 
  "1000267" -> "1000266" 
  "1000270" -> "1000293" 
  "1000270" -> "1000314" 
  "1000270" -> "1000280" 
  "1000271" -> "1000270" 
  "1000276" -> "1000285" 
  "1000278" -> "1000276" 
  "1000279" -> "1000278" 
  "1000280" -> "1000279" 
  "1000283" -> "1000288" 
  "1000285" -> "1000283" 
  "1000288" -> "1000161" 
  "1000288" -> "1000143" 
  "1000288" -> "1000271" 
  "1000288" -> "1000293" 
  "1000292" -> "1000314" 
  "1000292" -> "1000302" 
  "1000293" -> "1000292" 
  "1000298" -> "1000307" 
  "1000300" -> "1000298" 
  "1000301" -> "1000300" 
  "1000302" -> "1000301" 
  "1000305" -> "1000128" 
  "1000307" -> "1000305" 
  "1000312" -> "1000319" 
  "1000312" -> "1000323" 
  "1000313" -> "1000312" 
  "1000314" -> "1000313" 
  "1000317" -> "1000331" 
  "1000318" -> "1000317" 
  "1000319" -> "1000318" 
  "1000321" -> "1000331" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000106" -> "1000121" 
}
