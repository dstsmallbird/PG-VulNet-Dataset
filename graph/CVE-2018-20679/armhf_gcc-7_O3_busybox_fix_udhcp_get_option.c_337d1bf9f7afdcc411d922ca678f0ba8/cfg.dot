digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000124" [label = "(<operator>.assignment,v3 = 0)" ]
"1000127" [label = "(<operator>.assignment,v4 = 388)" ]
"1000139" [label = "(<operator>.assignment,v5 = *v2)" ]
"1000141" [label = "(<operator>.indirection,*v2)" ]
"1000144" [label = "(<operator>.indirection,*v2)" ]
"1000147" [label = "(<operator>.preDecrement,--v4)" ]
"1000149" [label = "(<operator>.preIncrement,++v2)" ]
"1000152" [label = "(<operator>.logicalNot,!v4)" ]
"1000156" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000161" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000162" [label = "(<operator>.and,v3 & 0x101)" ]
"1000167" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000170" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000172" [label = "(<operator>.addition,a1 + 108)" ]
"1000175" [label = "(<operator>.assignment,v4 = 128)" ]
"1000181" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000182" [label = "(<operator>.and,v3 & 0x202)" ]
"1000188" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000189" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000190" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000193" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000196" [label = "(RETURN,return 0;,return 0;)" ]
"1000198" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000201" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000203" [label = "(<operator>.addition,a1 + 44)" ]
"1000206" [label = "(<operator>.assignment,v4 = 64)" ]
"1000210" [label = "(<operator>.equals,v4 == 1)" ]
"1000214" [label = "(<operator>.assignment,v6 = v2[1] + 2)" ]
"1000216" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000217" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000221" [label = "(<operator>.assignmentMinus,v4 -= v6)" ]
"1000225" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000230" [label = "(<operator>.equals,v5 == a2)" ]
"1000234" [label = "(<operator>.assignment,v7 = v6 != 2)" ]
"1000236" [label = "(<operator>.notEquals,v6 != 2)" ]
"1000240" [label = "(<operator>.notEquals,v5 != 52)" ]
"1000243" [label = "(<operator>.assignment,v7 = 0)" ]
"1000249" [label = "(<operator>.assignment,v9 = v2[2])" ]
"1000251" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000254" [label = "(<operator>.assignmentPlus,v2 += v6)" ]
"1000257" [label = "(<operators>.assignmentOr,v3 |= v9)" ]
"1000262" [label = "(<operator>.assignmentPlus,v2 += v6)" ]
"1000266" [label = "(<operator>.logicalNot,!v4)" ]
"1000270" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000271" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000276" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000278" [label = "(RETURN,return 0;,return 0;)" ]
"1000281" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000282" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000283" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000286" [label = "(log_option_part_0,log_option_part_0(\"option found\", v2))" ]
"1000289" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000290" [label = "(<operator>.addition,v2 + 2)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000293" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000124" 
  "1000121" -> "1000119" 
  "1000124" -> "1000127" 
  "1000127" -> "1000141" 
  "1000127" -> "1000156" 
  "1000127" -> "1000210" 
  "1000127" -> "1000271" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000156" 
  "1000144" -> "1000210" 
  "1000144" -> "1000271" 
  "1000144" -> "1000147" 
  "1000147" -> "1000149" 
  "1000149" -> "1000152" 
  "1000152" -> "1000141" 
  "1000152" -> "1000156" 
  "1000152" -> "1000276" 
  "1000156" -> "1000210" 
  "1000156" -> "1000271" 
  "1000156" -> "1000162" 
  "1000161" -> "1000167" 
  "1000161" -> "1000182" 
  "1000162" -> "1000161" 
  "1000167" -> "1000172" 
  "1000170" -> "1000175" 
  "1000172" -> "1000170" 
  "1000175" -> "1000141" 
  "1000175" -> "1000156" 
  "1000175" -> "1000210" 
  "1000181" -> "1000190" 
  "1000181" -> "1000198" 
  "1000182" -> "1000181" 
  "1000188" -> "1000193" 
  "1000188" -> "1000196" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000193" -> "1000196" 
  "1000196" -> "1000293" 
  "1000198" -> "1000203" 
  "1000201" -> "1000206" 
  "1000203" -> "1000201" 
  "1000206" -> "1000141" 
  "1000206" -> "1000156" 
  "1000206" -> "1000210" 
  "1000210" -> "1000276" 
  "1000210" -> "1000217" 
  "1000214" -> "1000221" 
  "1000216" -> "1000214" 
  "1000217" -> "1000216" 
  "1000221" -> "1000225" 
  "1000225" -> "1000276" 
  "1000225" -> "1000230" 
  "1000230" -> "1000271" 
  "1000230" -> "1000236" 
  "1000234" -> "1000240" 
  "1000236" -> "1000234" 
  "1000240" -> "1000243" 
  "1000240" -> "1000251" 
  "1000240" -> "1000262" 
  "1000243" -> "1000251" 
  "1000243" -> "1000262" 
  "1000249" -> "1000254" 
  "1000251" -> "1000249" 
  "1000254" -> "1000257" 
  "1000257" -> "1000266" 
  "1000262" -> "1000266" 
  "1000266" -> "1000141" 
  "1000266" -> "1000156" 
  "1000266" -> "1000210" 
  "1000266" -> "1000271" 
  "1000266" -> "1000276" 
  "1000270" -> "1000283" 
  "1000270" -> "1000276" 
  "1000271" -> "1000270" 
  "1000276" -> "1000278" 
  "1000278" -> "1000293" 
  "1000281" -> "1000286" 
  "1000281" -> "1000290" 
  "1000282" -> "1000281" 
  "1000283" -> "1000282" 
  "1000286" -> "1000290" 
  "1000289" -> "1000293" 
  "1000290" -> "1000289" 
  "1000108" -> "1000121" 
}
