digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000131" [label = "(<operator>.addition,a1 + 240)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000136" [label = "(<operator>.addition,a1 + 44)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000141" [label = "(<operator>.addition,a1 + 108)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000153" [label = "(<operator>.assignment,LODWORD(v7) = 1)" ]
"1000154" [label = "(LODWORD,LODWORD(v7))" ]
"1000161" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v2 + v8))" ]
"1000163" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000164" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000165" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000166" [label = "(<operator>.addition,v2 + v8)" ]
"1000170" [label = "(<operator>.indirection,*(_BYTE *)(v2 + v8))" ]
"1000171" [label = "(<operator>.cast,(_BYTE *)(v2 + v8))" ]
"1000172" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000173" [label = "(<operator>.addition,v2 + v8)" ]
"1000177" [label = "(<operator>.preIncrement,++v8)" ]
"1000179" [label = "(<operator>.assignment,LODWORD(v7) = v7 - 1)" ]
"1000180" [label = "(LODWORD,LODWORD(v7))" ]
"1000182" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000185" [label = "(<operator>.assignment,LODWORD(v9) = v7 + v5)" ]
"1000186" [label = "(LODWORD,LODWORD(v9))" ]
"1000188" [label = "(<operator>.addition,v7 + v5)" ]
"1000192" [label = "(<operator>.lessThan,(int)v7 + v5 < 2)" ]
"1000193" [label = "(<operator>.addition,(int)v7 + v5)" ]
"1000194" [label = "(<operator>.cast,(int)v7)" ]
"1000195" [label = "(UNKNOWN,int,int)" ]
"1000201" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000202" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000203" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000208" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000209" [label = "(<operator>.and,v6 & 0x101)" ]
"1000214" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000217" [label = "(<operator>.assignment,v5 = 128)" ]
"1000220" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000222" [label = "(<operator>.addition,a1 + 108)" ]
"1000227" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000228" [label = "(<operator>.and,v6 & 0x202)" ]
"1000233" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000236" [label = "(<operator>.assignment,v5 = 64)" ]
"1000239" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000241" [label = "(<operator>.addition,a1 + 44)" ]
"1000247" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000248" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000249" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000252" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v7, v9, v3, v4, v14[0]))" ]
"1000253" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000254" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000261" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000264" [label = "(RETURN,return v12;,return v12;)" ]
"1000266" [label = "(<operator>.assignment,LODWORD(v7) = v5 - v8)" ]
"1000267" [label = "(LODWORD,LODWORD(v7))" ]
"1000269" [label = "(<operator>.subtraction,v5 - v8)" ]
"1000273" [label = "(<operator>.lessThan,v5 - (int)v8 < 2)" ]
"1000274" [label = "(<operator>.subtraction,v5 - (int)v8)" ]
"1000276" [label = "(<operator>.cast,(int)v8)" ]
"1000277" [label = "(UNKNOWN,int,int)" ]
"1000281" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000283" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000284" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000285" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000286" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000288" [label = "(<operator>.addition,v8 + 1)" ]
"1000291" [label = "(<operator>.assignment,v5 = v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000293" [label = "(<operator>.subtraction,v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000295" [label = "(<operator>.subtraction,2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000297" [label = "(<operator>.subtraction,*(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000298" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000299" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000300" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000301" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000303" [label = "(<operator>.addition,v8 + 1)" ]
"1000308" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000313" [label = "(<operator>.equals,(_DWORD)v9 == a2)" ]
"1000314" [label = "(<operator>.cast,(_DWORD)v9)" ]
"1000315" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000320" [label = "(<operator>.logicalAnd,(_BYTE)v9 == 52 && (_BYTE)v7)" ]
"1000321" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000322" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000323" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000326" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000327" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000330" [label = "(<operator>.assignment,LODWORD(v9) = *(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000331" [label = "(LODWORD,LODWORD(v9))" ]
"1000333" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000334" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000335" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000336" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000338" [label = "(<operator>.addition,v8 + 2)" ]
"1000341" [label = "(<operators>.assignmentOr,v6 |= v9)" ]
"1000344" [label = "(<operator>.assignmentPlus,v2 += v8 + v7 + 2)" ]
"1000346" [label = "(<operator>.addition,v8 + v7 + 2)" ]
"1000348" [label = "(<operator>.addition,v7 + 2)" ]
"1000352" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000357" [label = "(<operator>.logicalNot,!(_BYTE)v7)" ]
"1000358" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000359" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000364" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v7, v9, v3, v4, v14[0]))" ]
"1000365" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000366" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000373" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000376" [label = "(RETURN,return v12;,return v12;)" ]
"1000379" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000380" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000381" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000385" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v2 + v8 + 2, v7, v9, v3, v4) = 0)" ]
"1000386" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v2 + v8 + 2, v7, v9, v3, v4))" ]
"1000387" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v2 + v8 + 2, v7, v9, v3, v4))" ]
"1000388" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000389" [label = "(bin2hex,bin2hex(v14, v2 + v8 + 2, v7, v9, v3, v4))" ]
"1000391" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000393" [label = "(<operator>.addition,v8 + 2)" ]
"1000401" [label = "(bb_error_msg,bb_error_msg(\n      (unsigned int)\"%s: 0x%02x %s\",\n      (unsigned int)\"option found\",\n      *(unsigned __int8 *)(v2 + v8),\n      (unsigned int)v14,\n      v10,\n      v11,\n      v14[0]))" ]
"1000402" [label = "(<operator>.cast,(unsigned int)\"%s: 0x%02x %s\")" ]
"1000403" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000405" [label = "(<operator>.cast,(unsigned int)\"option found\")" ]
"1000406" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000408" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000409" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000410" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000411" [label = "(<operator>.addition,v2 + v8)" ]
"1000414" [label = "(<operator>.cast,(unsigned int)v14)" ]
"1000415" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000419" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000422" [label = "(RETURN,return v2 + v8 + 2;,return v2 + v8 + 2;)" ]
"1000423" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000425" [label = "(<operator>.addition,v8 + 2)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000428" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000359" 
  "1000147" -> "1000154" 
  "1000153" -> "1000203" 
  "1000153" -> "1000165" 
  "1000154" -> "1000153" 
  "1000161" -> "1000172" 
  "1000163" -> "1000161" 
  "1000164" -> "1000163" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000170" -> "1000203" 
  "1000170" -> "1000359" 
  "1000170" -> "1000177" 
  "1000171" -> "1000170" 
  "1000172" -> "1000173" 
  "1000173" -> "1000171" 
  "1000177" -> "1000180" 
  "1000179" -> "1000186" 
  "1000180" -> "1000182" 
  "1000182" -> "1000179" 
  "1000185" -> "1000195" 
  "1000186" -> "1000188" 
  "1000188" -> "1000185" 
  "1000192" -> "1000203" 
  "1000192" -> "1000165" 
  "1000192" -> "1000366" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000201" -> "1000209" 
  "1000201" -> "1000267" 
  "1000202" -> "1000201" 
  "1000203" -> "1000202" 
  "1000208" -> "1000214" 
  "1000208" -> "1000228" 
  "1000209" -> "1000208" 
  "1000214" -> "1000217" 
  "1000217" -> "1000222" 
  "1000220" -> "1000359" 
  "1000220" -> "1000154" 
  "1000222" -> "1000220" 
  "1000227" -> "1000233" 
  "1000227" -> "1000249" 
  "1000228" -> "1000227" 
  "1000233" -> "1000236" 
  "1000236" -> "1000241" 
  "1000239" -> "1000359" 
  "1000239" -> "1000154" 
  "1000241" -> "1000239" 
  "1000247" -> "1000254" 
  "1000247" -> "1000264" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000252" -> "1000264" 
  "1000253" -> "1000261" 
  "1000254" -> "1000253" 
  "1000261" -> "1000252" 
  "1000264" -> "1000428" 
  "1000266" -> "1000277" 
  "1000267" -> "1000269" 
  "1000269" -> "1000266" 
  "1000273" -> "1000366" 
  "1000273" -> "1000285" 
  "1000274" -> "1000273" 
  "1000276" -> "1000274" 
  "1000277" -> "1000276" 
  "1000281" -> "1000300" 
  "1000283" -> "1000281" 
  "1000284" -> "1000283" 
  "1000285" -> "1000288" 
  "1000286" -> "1000284" 
  "1000288" -> "1000286" 
  "1000291" -> "1000308" 
  "1000293" -> "1000291" 
  "1000295" -> "1000293" 
  "1000297" -> "1000295" 
  "1000298" -> "1000297" 
  "1000299" -> "1000298" 
  "1000300" -> "1000303" 
  "1000301" -> "1000299" 
  "1000303" -> "1000301" 
  "1000308" -> "1000315" 
  "1000308" -> "1000366" 
  "1000313" -> "1000323" 
  "1000313" -> "1000359" 
  "1000314" -> "1000313" 
  "1000315" -> "1000314" 
  "1000320" -> "1000331" 
  "1000320" -> "1000348" 
  "1000321" -> "1000327" 
  "1000321" -> "1000320" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000326" -> "1000320" 
  "1000327" -> "1000326" 
  "1000330" -> "1000341" 
  "1000331" -> "1000335" 
  "1000333" -> "1000330" 
  "1000334" -> "1000333" 
  "1000335" -> "1000338" 
  "1000336" -> "1000334" 
  "1000338" -> "1000336" 
  "1000341" -> "1000348" 
  "1000344" -> "1000352" 
  "1000346" -> "1000344" 
  "1000348" -> "1000346" 
  "1000352" -> "1000359" 
  "1000352" -> "1000154" 
  "1000352" -> "1000366" 
  "1000357" -> "1000381" 
  "1000357" -> "1000366" 
  "1000358" -> "1000357" 
  "1000359" -> "1000358" 
  "1000364" -> "1000376" 
  "1000365" -> "1000373" 
  "1000366" -> "1000365" 
  "1000373" -> "1000364" 
  "1000376" -> "1000428" 
  "1000379" -> "1000388" 
  "1000379" -> "1000425" 
  "1000380" -> "1000379" 
  "1000381" -> "1000380" 
  "1000385" -> "1000403" 
  "1000386" -> "1000385" 
  "1000387" -> "1000386" 
  "1000388" -> "1000393" 
  "1000389" -> "1000387" 
  "1000391" -> "1000389" 
  "1000393" -> "1000391" 
  "1000401" -> "1000425" 
  "1000402" -> "1000406" 
  "1000403" -> "1000402" 
  "1000405" -> "1000410" 
  "1000406" -> "1000405" 
  "1000408" -> "1000415" 
  "1000409" -> "1000408" 
  "1000410" -> "1000411" 
  "1000411" -> "1000409" 
  "1000414" -> "1000419" 
  "1000415" -> "1000414" 
  "1000419" -> "1000401" 
  "1000422" -> "1000428" 
  "1000423" -> "1000422" 
  "1000425" -> "1000423" 
  "1000113" -> "1000131" 
}
