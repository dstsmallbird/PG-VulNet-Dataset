digraph udhcp_get_option {  
"1000131" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000133" [label = "(<operator>.addition,a1 + 108)" ]
"1000136" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000138" [label = "(<operator>.addition,a1 + 44)" ]
"1000141" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000143" [label = "(<operator>.addition,a1 + 240)" ]
"1000146" [label = "(<operator>.assignment,v5 = 388)" ]
"1000149" [label = "(<operator>.assignment,v6 = 0)" ]
"1000155" [label = "(<operator>.assignment,v7 = 2)" ]
"1000158" [label = "(<operator>.assignment,v8 = 0)" ]
"1000164" [label = "(<operator>.assignment,v9 = v4 + v7)" ]
"1000166" [label = "(<operator>.addition,v4 + v7)" ]
"1000169" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000171" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000172" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000173" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000174" [label = "(<operator>.addition,v4 + v7 - 2)" ]
"1000176" [label = "(<operator>.subtraction,v7 - 2)" ]
"1000180" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7 - 2))" ]
"1000181" [label = "(<operator>.cast,(_BYTE *)(v4 + v7 - 2))" ]
"1000182" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000183" [label = "(<operator>.addition,v4 + v7 - 2)" ]
"1000185" [label = "(<operator>.subtraction,v7 - 2)" ]
"1000189" [label = "(<operator>.preDecrement,--v8)" ]
"1000191" [label = "(<operator>.preIncrement,++v7)" ]
"1000194" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000195" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000197" [label = "(<operator>.addition,v8 + 1)" ]
"1000203" [label = "(<operator>.equals,v10 == 255)" ]
"1000208" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000209" [label = "(<operator>.and,v6 & 0x101)" ]
"1000214" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000217" [label = "(<operator>.assignment,v5 = 128)" ]
"1000220" [label = "(<operator>.assignment,v4 = v2)" ]
"1000225" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000226" [label = "(<operator>.and,v6 & 0x202)" ]
"1000231" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000234" [label = "(<operator>.assignment,v5 = 64)" ]
"1000237" [label = "(<operator>.assignment,v4 = v3)" ]
"1000241" [label = "(<operator>.assignment,v13 = 0)" ]
"1000245" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000246" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000247" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000250" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000256" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000257" [label = "(<operator>.addition,v5 + v8)" ]
"1000262" [label = "(<operator>.assignment,v11 = v4 - v8)" ]
"1000264" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000267" [label = "(<operator>.assignment,v12 = *(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000269" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000270" [label = "(<operator>.cast,(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000271" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000272" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000274" [label = "(<operator>.addition,v8 + 1)" ]
"1000277" [label = "(<operator>.assignment,v5 = v5 - v12 + v8 - 2)" ]
"1000279" [label = "(<operator>.subtraction,v5 - v12 + v8 - 2)" ]
"1000281" [label = "(<operator>.addition,v12 + v8 - 2)" ]
"1000283" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000287" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000292" [label = "(<operator>.notEquals,v10 != a2)" ]
"1000297" [label = "(<operator>.logicalAnd,v10 == 52 && *(_BYTE *)(v4 - v8 + 1))" ]
"1000298" [label = "(<operator>.equals,v10 == 52)" ]
"1000301" [label = "(<operator>.indirection,*(_BYTE *)(v4 - v8 + 1))" ]
"1000302" [label = "(<operator>.cast,(_BYTE *)(v4 - v8 + 1))" ]
"1000303" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000304" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000306" [label = "(<operator>.addition,v8 + 1)" ]
"1000309" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v4 + v7))" ]
"1000311" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7))" ]
"1000312" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000313" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000314" [label = "(<operator>.addition,v4 + v7)" ]
"1000317" [label = "(<operator>.assignment,v4 = v4 + v12 - v8 + 2)" ]
"1000319" [label = "(<operator>.addition,v4 + v12 - v8 + 2)" ]
"1000321" [label = "(<operator>.subtraction,v12 - v8 + 2)" ]
"1000323" [label = "(<operator>.addition,v8 + 2)" ]
"1000328" [label = "(<operator>.greaterEqualsThan,v5 >= 1)" ]
"1000334" [label = "(<operator>.logicalNot,!*(_BYTE *)(v4 - v8 + 1))" ]
"1000335" [label = "(<operator>.indirection,*(_BYTE *)(v4 - v8 + 1))" ]
"1000336" [label = "(<operator>.cast,(_BYTE *)(v4 - v8 + 1))" ]
"1000337" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000338" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000340" [label = "(<operator>.addition,v8 + 1)" ]
"1000345" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000347" [label = "(RETURN,return 0;,return 0;)" ]
"1000350" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000351" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000352" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000356" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v15, v11 + 2) = 0)" ]
"1000357" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v15, v11 + 2))" ]
"1000358" [label = "(<operator>.cast,(_BYTE *)bin2hex(v15, v11 + 2))" ]
"1000359" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000360" [label = "(bin2hex,bin2hex(v15, v11 + 2))" ]
"1000362" [label = "(<operator>.addition,v11 + 2)" ]
"1000366" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v9 - 2), v15))" ]
"1000369" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 - 2))" ]
"1000370" [label = "(<operator>.cast,(unsigned __int8 *)(v9 - 2))" ]
"1000371" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000372" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000376" [label = "(<operator>.assignment,v13 = v11 + 2)" ]
"1000378" [label = "(<operator>.addition,v11 + 2)" ]
"1000381" [label = "(RETURN,return v13;,return v13;)" ]
"1000114" [label = "(METHOD,udhcp_get_option)" ]
"1000383" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000131" -> "1000138" 
  "1000133" -> "1000131" 
  "1000136" -> "1000143" 
  "1000138" -> "1000136" 
  "1000141" -> "1000146" 
  "1000143" -> "1000141" 
  "1000146" -> "1000149" 
  "1000149" -> "1000383" 
  "1000149" -> "1000155" 
  "1000155" -> "1000158" 
  "1000158" -> "1000166" 
  "1000158" -> "1000203" 
  "1000164" -> "1000173" 
  "1000166" -> "1000164" 
  "1000169" -> "1000182" 
  "1000171" -> "1000169" 
  "1000172" -> "1000171" 
  "1000173" -> "1000176" 
  "1000174" -> "1000172" 
  "1000176" -> "1000174" 
  "1000180" -> "1000383" 
  "1000180" -> "1000203" 
  "1000180" -> "1000189" 
  "1000181" -> "1000180" 
  "1000182" -> "1000185" 
  "1000183" -> "1000181" 
  "1000185" -> "1000183" 
  "1000189" -> "1000191" 
  "1000191" -> "1000197" 
  "1000194" -> "1000166" 
  "1000194" -> "1000203" 
  "1000194" -> "1000345" 
  "1000195" -> "1000194" 
  "1000197" -> "1000195" 
  "1000203" -> "1000209" 
  "1000203" -> "1000257" 
  "1000208" -> "1000214" 
  "1000208" -> "1000226" 
  "1000209" -> "1000208" 
  "1000214" -> "1000217" 
  "1000217" -> "1000220" 
  "1000220" -> "1000328" 
  "1000225" -> "1000231" 
  "1000225" -> "1000241" 
  "1000226" -> "1000225" 
  "1000231" -> "1000234" 
  "1000234" -> "1000237" 
  "1000237" -> "1000328" 
  "1000241" -> "1000247" 
  "1000245" -> "1000250" 
  "1000245" -> "1000381" 
  "1000246" -> "1000245" 
  "1000247" -> "1000246" 
  "1000250" -> "1000381" 
  "1000256" -> "1000345" 
  "1000256" -> "1000264" 
  "1000257" -> "1000256" 
  "1000262" -> "1000271" 
  "1000264" -> "1000262" 
  "1000267" -> "1000283" 
  "1000269" -> "1000267" 
  "1000270" -> "1000269" 
  "1000271" -> "1000274" 
  "1000272" -> "1000270" 
  "1000274" -> "1000272" 
  "1000277" -> "1000287" 
  "1000279" -> "1000277" 
  "1000281" -> "1000279" 
  "1000283" -> "1000281" 
  "1000287" -> "1000345" 
  "1000287" -> "1000292" 
  "1000292" -> "1000337" 
  "1000292" -> "1000298" 
  "1000297" -> "1000313" 
  "1000297" -> "1000323" 
  "1000298" -> "1000303" 
  "1000298" -> "1000297" 
  "1000301" -> "1000297" 
  "1000302" -> "1000301" 
  "1000303" -> "1000306" 
  "1000304" -> "1000302" 
  "1000306" -> "1000304" 
  "1000309" -> "1000323" 
  "1000311" -> "1000309" 
  "1000312" -> "1000311" 
  "1000313" -> "1000314" 
  "1000314" -> "1000312" 
  "1000317" -> "1000328" 
  "1000319" -> "1000317" 
  "1000321" -> "1000319" 
  "1000323" -> "1000321" 
  "1000328" -> "1000383" 
  "1000328" -> "1000155" 
  "1000328" -> "1000345" 
  "1000334" -> "1000352" 
  "1000334" -> "1000345" 
  "1000335" -> "1000334" 
  "1000336" -> "1000335" 
  "1000337" -> "1000340" 
  "1000338" -> "1000336" 
  "1000340" -> "1000338" 
  "1000345" -> "1000347" 
  "1000347" -> "1000383" 
  "1000350" -> "1000359" 
  "1000350" -> "1000378" 
  "1000351" -> "1000350" 
  "1000352" -> "1000351" 
  "1000356" -> "1000371" 
  "1000357" -> "1000356" 
  "1000358" -> "1000357" 
  "1000359" -> "1000362" 
  "1000360" -> "1000358" 
  "1000362" -> "1000360" 
  "1000366" -> "1000378" 
  "1000369" -> "1000366" 
  "1000370" -> "1000369" 
  "1000371" -> "1000372" 
  "1000372" -> "1000370" 
  "1000376" -> "1000381" 
  "1000378" -> "1000376" 
  "1000381" -> "1000383" 
  "1000114" -> "1000133" 
}
