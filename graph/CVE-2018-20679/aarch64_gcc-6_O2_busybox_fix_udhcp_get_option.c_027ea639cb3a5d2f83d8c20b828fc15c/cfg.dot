digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = 0)" ]
"1000122" [label = "(<operator>.assignment,v3 = 388)" ]
"1000125" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000127" [label = "(<operator>.addition,a1 + 240)" ]
"1000142" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000144" [label = "(<operator>.indirection,*v4)" ]
"1000147" [label = "(<operator>.indirection,*v4)" ]
"1000150" [label = "(<operator>.preDecrement,--v3)" ]
"1000152" [label = "(<operator>.preIncrement,++v4)" ]
"1000155" [label = "(<operator>.logicalNot,!v3)" ]
"1000159" [label = "(<operator>.equals,v5 == 255)" ]
"1000164" [label = "(<operator>.equals,v3 == 1)" ]
"1000168" [label = "(<operator>.assignment,v8 = v4[1] + 2)" ]
"1000170" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000171" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000175" [label = "(<operator>.assignmentMinus,v3 -= v8)" ]
"1000179" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000184" [label = "(<operator>.equals,(_DWORD)a2 == v5)" ]
"1000185" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000186" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000191" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000196" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000197" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000198" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000201" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4))" ]
"1000204" [label = "(<operator>.assignment,v6 = v4 + 2)" ]
"1000206" [label = "(<operator>.addition,v4 + 2)" ]
"1000213" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2))" ]
"1000216" [label = "(RETURN,return v6;,return v6;)" ]
"1000219" [label = "(<operator>.equals,v5 == 52)" ]
"1000222" [label = "(<operator>.assignment,v9 = v8 == 2)" ]
"1000224" [label = "(<operator>.equals,v8 == 2)" ]
"1000228" [label = "(<operator>.assignment,v9 = 1)" ]
"1000232" [label = "(<operator>.logicalNot,!v9)" ]
"1000234" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000236" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000239" [label = "(<operator>.assignmentPlus,v4 += v8)" ]
"1000243" [label = "(<operator>.logicalNot,!v3)" ]
"1000247" [label = "(<operator>.notEquals,(v2 & 0x101) != 1)" ]
"1000248" [label = "(<operator>.and,v2 & 0x101)" ]
"1000253" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000256" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000258" [label = "(<operator>.addition,a1 + 108)" ]
"1000261" [label = "(<operator>.assignment,v3 = 128)" ]
"1000265" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000266" [label = "(<operator>.and,v2 & 0x202)" ]
"1000271" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000274" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000276" [label = "(<operator>.addition,a1 + 44)" ]
"1000279" [label = "(<operator>.assignment,v3 = 64)" ]
"1000284" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 2)" ]
"1000285" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000286" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000289" [label = "(RETURN,return v6;,return v6;)" ]
"1000291" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000295" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000122" 
  "1000122" -> "1000127" 
  "1000125" -> "1000144" 
  "1000125" -> "1000159" 
  "1000125" -> "1000248" 
  "1000125" -> "1000266" 
  "1000125" -> "1000286" 
  "1000127" -> "1000125" 
  "1000142" -> "1000147" 
  "1000144" -> "1000142" 
  "1000147" -> "1000159" 
  "1000147" -> "1000248" 
  "1000147" -> "1000266" 
  "1000147" -> "1000286" 
  "1000147" -> "1000150" 
  "1000150" -> "1000152" 
  "1000152" -> "1000155" 
  "1000155" -> "1000144" 
  "1000155" -> "1000159" 
  "1000155" -> "1000213" 
  "1000159" -> "1000248" 
  "1000159" -> "1000266" 
  "1000159" -> "1000286" 
  "1000159" -> "1000164" 
  "1000164" -> "1000213" 
  "1000164" -> "1000171" 
  "1000168" -> "1000175" 
  "1000170" -> "1000168" 
  "1000171" -> "1000170" 
  "1000175" -> "1000179" 
  "1000179" -> "1000186" 
  "1000179" -> "1000213" 
  "1000184" -> "1000191" 
  "1000184" -> "1000219" 
  "1000185" -> "1000184" 
  "1000186" -> "1000185" 
  "1000191" -> "1000198" 
  "1000191" -> "1000213" 
  "1000196" -> "1000201" 
  "1000196" -> "1000206" 
  "1000197" -> "1000196" 
  "1000198" -> "1000197" 
  "1000201" -> "1000206" 
  "1000204" -> "1000216" 
  "1000206" -> "1000204" 
  "1000213" -> "1000216" 
  "1000216" -> "1000295" 
  "1000219" -> "1000224" 
  "1000219" -> "1000228" 
  "1000222" -> "1000232" 
  "1000224" -> "1000222" 
  "1000228" -> "1000232" 
  "1000232" -> "1000236" 
  "1000232" -> "1000239" 
  "1000234" -> "1000239" 
  "1000236" -> "1000234" 
  "1000239" -> "1000243" 
  "1000243" -> "1000144" 
  "1000243" -> "1000159" 
  "1000243" -> "1000248" 
  "1000243" -> "1000213" 
  "1000247" -> "1000266" 
  "1000247" -> "1000286" 
  "1000247" -> "1000253" 
  "1000248" -> "1000247" 
  "1000253" -> "1000258" 
  "1000256" -> "1000261" 
  "1000258" -> "1000256" 
  "1000261" -> "1000144" 
  "1000261" -> "1000159" 
  "1000261" -> "1000248" 
  "1000261" -> "1000266" 
  "1000265" -> "1000286" 
  "1000265" -> "1000271" 
  "1000266" -> "1000265" 
  "1000271" -> "1000276" 
  "1000274" -> "1000279" 
  "1000276" -> "1000274" 
  "1000279" -> "1000144" 
  "1000279" -> "1000159" 
  "1000279" -> "1000248" 
  "1000279" -> "1000266" 
  "1000279" -> "1000286" 
  "1000284" -> "1000289" 
  "1000284" -> "1000291" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000289" -> "1000295" 
  "1000291" -> "1000295" 
  "1000108" -> "1000119" 
}
