digraph udhcp_get_option {  
"1000116" [label = "(<operator>.assignment,v3 = 0)" ]
"1000119" [label = "(<operator>.assignment,v4 = 388)" ]
"1000122" [label = "(<operator>.assignment,v5 = a1 + 240)" ]
"1000124" [label = "(<operator>.addition,a1 + 240)" ]
"1000133" [label = "(<operator>.assignment,v6 = *v5)" ]
"1000135" [label = "(<operator>.indirection,*v5)" ]
"1000138" [label = "(<operator>.indirection,*v5)" ]
"1000141" [label = "(<operator>.preDecrement,--v4)" ]
"1000143" [label = "(<operator>.preIncrement,++v5)" ]
"1000147" [label = "(<operator>.logicalNot,!v4)" ]
"1000151" [label = "(<operator>.notEquals,v6 != 255)" ]
"1000156" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000157" [label = "(<operator>.and,v3 & 0x101)" ]
"1000162" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000165" [label = "(<operator>.assignment,v5 = a1 + 108)" ]
"1000167" [label = "(<operator>.addition,a1 + 108)" ]
"1000170" [label = "(<operator>.assignment,v4 = 128)" ]
"1000176" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000177" [label = "(<operator>.and,v3 & 0x202)" ]
"1000182" [label = "(<operator>.assignment,result = 0)" ]
"1000186" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000187" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000188" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000192" [label = "(warn,warn(\"option 0x%02x not found\", a2))" ]
"1000195" [label = "(<operator>.assignment,result = 0)" ]
"1000198" [label = "(RETURN,return result;,return result;)" ]
"1000200" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000203" [label = "(<operator>.assignment,v5 = a1 + 44)" ]
"1000205" [label = "(<operator>.addition,a1 + 44)" ]
"1000208" [label = "(<operator>.assignment,v4 = 64)" ]
"1000212" [label = "(<operator>.equals,v4 == 1)" ]
"1000216" [label = "(<operator>.assignment,a3 = v5[1] + 2)" ]
"1000218" [label = "(<operator>.addition,v5[1] + 2)" ]
"1000219" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000223" [label = "(<operator>.assignmentMinus,v4 -= a3)" ]
"1000227" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000232" [label = "(<operator>.notEquals,v6 != a2)" ]
"1000237" [label = "(<operator>.equals,v6 == 52)" ]
"1000242" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000245" [label = "(<operators>.assignmentOr,v3 |= v5[2])" ]
"1000247" [label = "(<operator>.indirectIndexAccess,v5[2])" ]
"1000250" [label = "(<operator>.assignmentPlus,v5 += a3)" ]
"1000255" [label = "(<operator>.logicalNot,!v5[1])" ]
"1000256" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000261" [label = "(warn,warn(\"bad packet, malformed option field\", a2, a3, v3))" ]
"1000266" [label = "(RETURN,return 0;,return 0;)" ]
"1000269" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000270" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000271" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000274" [label = "(log_option_part_0,log_option_part_0(\"option found\", v5))" ]
"1000277" [label = "(RETURN,return v5 + 2;,return v5 + 2;)" ]
"1000278" [label = "(<operator>.addition,v5 + 2)" ]
"1000106" [label = "(METHOD,udhcp_get_option)" ]
"1000281" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000116" -> "1000119" 
  "1000119" -> "1000124" 
  "1000122" -> "1000135" 
  "1000122" -> "1000151" 
  "1000122" -> "1000212" 
  "1000124" -> "1000122" 
  "1000133" -> "1000138" 
  "1000135" -> "1000133" 
  "1000138" -> "1000151" 
  "1000138" -> "1000212" 
  "1000138" -> "1000141" 
  "1000141" -> "1000143" 
  "1000143" -> "1000147" 
  "1000147" -> "1000135" 
  "1000147" -> "1000151" 
  "1000147" -> "1000261" 
  "1000151" -> "1000212" 
  "1000151" -> "1000157" 
  "1000156" -> "1000162" 
  "1000156" -> "1000177" 
  "1000157" -> "1000156" 
  "1000162" -> "1000167" 
  "1000165" -> "1000170" 
  "1000167" -> "1000165" 
  "1000170" -> "1000135" 
  "1000170" -> "1000151" 
  "1000170" -> "1000212" 
  "1000176" -> "1000182" 
  "1000176" -> "1000200" 
  "1000177" -> "1000176" 
  "1000182" -> "1000188" 
  "1000186" -> "1000192" 
  "1000186" -> "1000198" 
  "1000187" -> "1000186" 
  "1000188" -> "1000187" 
  "1000192" -> "1000195" 
  "1000195" -> "1000198" 
  "1000198" -> "1000281" 
  "1000200" -> "1000205" 
  "1000203" -> "1000208" 
  "1000205" -> "1000203" 
  "1000208" -> "1000135" 
  "1000208" -> "1000151" 
  "1000208" -> "1000212" 
  "1000212" -> "1000261" 
  "1000212" -> "1000219" 
  "1000216" -> "1000223" 
  "1000218" -> "1000216" 
  "1000219" -> "1000218" 
  "1000223" -> "1000227" 
  "1000227" -> "1000261" 
  "1000227" -> "1000232" 
  "1000232" -> "1000237" 
  "1000232" -> "1000256" 
  "1000237" -> "1000242" 
  "1000237" -> "1000250" 
  "1000242" -> "1000247" 
  "1000242" -> "1000250" 
  "1000245" -> "1000250" 
  "1000247" -> "1000245" 
  "1000250" -> "1000147" 
  "1000255" -> "1000271" 
  "1000255" -> "1000261" 
  "1000256" -> "1000255" 
  "1000261" -> "1000266" 
  "1000266" -> "1000281" 
  "1000269" -> "1000274" 
  "1000269" -> "1000278" 
  "1000270" -> "1000269" 
  "1000271" -> "1000270" 
  "1000274" -> "1000278" 
  "1000277" -> "1000281" 
  "1000278" -> "1000277" 
  "1000106" -> "1000116" 
}
