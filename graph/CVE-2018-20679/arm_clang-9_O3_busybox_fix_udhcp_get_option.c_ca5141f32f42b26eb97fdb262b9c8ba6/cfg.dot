digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000131" [label = "(<operator>.addition,a1 + 108)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000136" [label = "(<operator>.addition,a1 + 44)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000153" [label = "(<operator>.assignment,v7 = 2)" ]
"1000156" [label = "(<operator>.assignment,v8 = 0)" ]
"1000162" [label = "(<operator>.assignment,v9 = v4 + v7)" ]
"1000164" [label = "(<operator>.addition,v4 + v7)" ]
"1000167" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000169" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000170" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000171" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000172" [label = "(<operator>.addition,v4 + v7 - 2)" ]
"1000174" [label = "(<operator>.subtraction,v7 - 2)" ]
"1000178" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7 - 2))" ]
"1000179" [label = "(<operator>.cast,(_BYTE *)(v4 + v7 - 2))" ]
"1000180" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000181" [label = "(<operator>.addition,v4 + v7 - 2)" ]
"1000183" [label = "(<operator>.subtraction,v7 - 2)" ]
"1000187" [label = "(<operator>.preDecrement,--v8)" ]
"1000189" [label = "(<operator>.preIncrement,++v7)" ]
"1000192" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000193" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000195" [label = "(<operator>.addition,v8 + 1)" ]
"1000201" [label = "(<operator>.equals,v10 == 255)" ]
"1000206" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000207" [label = "(<operator>.and,v6 & 0x101)" ]
"1000212" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000215" [label = "(<operator>.assignment,v5 = 128)" ]
"1000218" [label = "(<operator>.assignment,v4 = v2)" ]
"1000223" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000224" [label = "(<operator>.and,v6 & 0x202)" ]
"1000229" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000232" [label = "(<operator>.assignment,v5 = 64)" ]
"1000235" [label = "(<operator>.assignment,v4 = v3)" ]
"1000240" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000241" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000242" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000246" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000249" [label = "(RETURN,return 0;,return 0;)" ]
"1000251" [label = "(RETURN,return 0;,return 0;)" ]
"1000254" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000255" [label = "(<operator>.addition,v5 + v8)" ]
"1000260" [label = "(<operator>.assignment,v11 = v4 - v8)" ]
"1000262" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000265" [label = "(<operator>.assignment,v12 = *(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000267" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000268" [label = "(<operator>.cast,(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000269" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000270" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000272" [label = "(<operator>.addition,v8 + 1)" ]
"1000275" [label = "(<operator>.assignment,v5 = v5 - v12 + v8 - 2)" ]
"1000277" [label = "(<operator>.subtraction,v5 - v12 + v8 - 2)" ]
"1000279" [label = "(<operator>.addition,v12 + v8 - 2)" ]
"1000281" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000285" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000290" [label = "(<operator>.equals,v10 == a2)" ]
"1000295" [label = "(<operator>.equals,v10 == 52)" ]
"1000300" [label = "(<operator>.indirection,*(_BYTE *)(v4 - v8 + 1))" ]
"1000301" [label = "(<operator>.cast,(_BYTE *)(v4 - v8 + 1))" ]
"1000302" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000303" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000305" [label = "(<operator>.addition,v8 + 1)" ]
"1000308" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v4 + v7))" ]
"1000310" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7))" ]
"1000311" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000312" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000313" [label = "(<operator>.addition,v4 + v7)" ]
"1000316" [label = "(<operator>.assignment,v4 = v4 + v12 - v8 + 2)" ]
"1000318" [label = "(<operator>.addition,v4 + v12 - v8 + 2)" ]
"1000320" [label = "(<operator>.subtraction,v12 - v8 + 2)" ]
"1000322" [label = "(<operator>.addition,v8 + 2)" ]
"1000326" [label = "(<operator>.lessThan,v5 < 1)" ]
"1000331" [label = "(<operator>.logicalNot,!*(_BYTE *)(v4 - v8 + 1))" ]
"1000332" [label = "(<operator>.indirection,*(_BYTE *)(v4 - v8 + 1))" ]
"1000333" [label = "(<operator>.cast,(_BYTE *)(v4 - v8 + 1))" ]
"1000334" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000335" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000337" [label = "(<operator>.addition,v8 + 1)" ]
"1000342" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000344" [label = "(RETURN,return 0;,return 0;)" ]
"1000347" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000348" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000349" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000353" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v11 + 2) = 0)" ]
"1000354" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v11 + 2))" ]
"1000355" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v11 + 2))" ]
"1000356" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000357" [label = "(bin2hex,bin2hex(v14, v11 + 2))" ]
"1000359" [label = "(<operator>.addition,v11 + 2)" ]
"1000363" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v9 - 2), v14))" ]
"1000366" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 - 2))" ]
"1000367" [label = "(<operator>.cast,(unsigned __int8 *)(v9 - 2))" ]
"1000368" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000369" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000373" [label = "(RETURN,return v11 + 2;,return v11 + 2;)" ]
"1000374" [label = "(<operator>.addition,v11 + 2)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000377" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000334" 
  "1000147" -> "1000153" 
  "1000153" -> "1000156" 
  "1000156" -> "1000164" 
  "1000156" -> "1000201" 
  "1000162" -> "1000171" 
  "1000164" -> "1000162" 
  "1000167" -> "1000180" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000171" -> "1000174" 
  "1000172" -> "1000170" 
  "1000174" -> "1000172" 
  "1000178" -> "1000334" 
  "1000178" -> "1000201" 
  "1000178" -> "1000187" 
  "1000179" -> "1000178" 
  "1000180" -> "1000183" 
  "1000181" -> "1000179" 
  "1000183" -> "1000181" 
  "1000187" -> "1000189" 
  "1000189" -> "1000195" 
  "1000192" -> "1000164" 
  "1000192" -> "1000201" 
  "1000192" -> "1000342" 
  "1000193" -> "1000192" 
  "1000195" -> "1000193" 
  "1000201" -> "1000207" 
  "1000201" -> "1000255" 
  "1000206" -> "1000212" 
  "1000206" -> "1000224" 
  "1000207" -> "1000206" 
  "1000212" -> "1000215" 
  "1000215" -> "1000218" 
  "1000218" -> "1000334" 
  "1000218" -> "1000153" 
  "1000223" -> "1000242" 
  "1000223" -> "1000229" 
  "1000224" -> "1000223" 
  "1000229" -> "1000232" 
  "1000232" -> "1000235" 
  "1000235" -> "1000334" 
  "1000235" -> "1000153" 
  "1000240" -> "1000246" 
  "1000240" -> "1000251" 
  "1000241" -> "1000240" 
  "1000242" -> "1000241" 
  "1000246" -> "1000249" 
  "1000249" -> "1000377" 
  "1000251" -> "1000377" 
  "1000254" -> "1000342" 
  "1000254" -> "1000262" 
  "1000255" -> "1000254" 
  "1000260" -> "1000269" 
  "1000262" -> "1000260" 
  "1000265" -> "1000281" 
  "1000267" -> "1000265" 
  "1000268" -> "1000267" 
  "1000269" -> "1000272" 
  "1000270" -> "1000268" 
  "1000272" -> "1000270" 
  "1000275" -> "1000285" 
  "1000277" -> "1000275" 
  "1000279" -> "1000277" 
  "1000281" -> "1000279" 
  "1000285" -> "1000342" 
  "1000285" -> "1000290" 
  "1000290" -> "1000334" 
  "1000290" -> "1000295" 
  "1000295" -> "1000302" 
  "1000295" -> "1000322" 
  "1000300" -> "1000312" 
  "1000300" -> "1000322" 
  "1000301" -> "1000300" 
  "1000302" -> "1000305" 
  "1000303" -> "1000301" 
  "1000305" -> "1000303" 
  "1000308" -> "1000322" 
  "1000310" -> "1000308" 
  "1000311" -> "1000310" 
  "1000312" -> "1000313" 
  "1000313" -> "1000311" 
  "1000316" -> "1000326" 
  "1000318" -> "1000316" 
  "1000320" -> "1000318" 
  "1000322" -> "1000320" 
  "1000326" -> "1000334" 
  "1000326" -> "1000153" 
  "1000326" -> "1000342" 
  "1000331" -> "1000349" 
  "1000331" -> "1000342" 
  "1000332" -> "1000331" 
  "1000333" -> "1000332" 
  "1000334" -> "1000337" 
  "1000335" -> "1000333" 
  "1000337" -> "1000335" 
  "1000342" -> "1000344" 
  "1000344" -> "1000377" 
  "1000347" -> "1000356" 
  "1000347" -> "1000374" 
  "1000348" -> "1000347" 
  "1000349" -> "1000348" 
  "1000353" -> "1000368" 
  "1000354" -> "1000353" 
  "1000355" -> "1000354" 
  "1000356" -> "1000359" 
  "1000357" -> "1000355" 
  "1000359" -> "1000357" 
  "1000363" -> "1000374" 
  "1000366" -> "1000363" 
  "1000367" -> "1000366" 
  "1000368" -> "1000369" 
  "1000369" -> "1000367" 
  "1000373" -> "1000377" 
  "1000374" -> "1000373" 
  "1000113" -> "1000131" 
}
