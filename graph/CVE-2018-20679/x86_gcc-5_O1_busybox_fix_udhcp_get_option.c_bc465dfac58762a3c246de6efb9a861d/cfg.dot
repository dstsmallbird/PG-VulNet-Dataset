digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000121" [label = "(<operator>.addition,a1 + 240)" ]
"1000124" [label = "(<operator>.assignment,v3 = 0)" ]
"1000127" [label = "(<operator>.assignment,v4 = 388)" ]
"1000136" [label = "(<operator>.assignment,v6 = *v2)" ]
"1000138" [label = "(<operator>.indirection,*v2)" ]
"1000141" [label = "(<operator>.indirection,*v2)" ]
"1000144" [label = "(<operator>.preDecrement,--v4)" ]
"1000146" [label = "(<operator>.preIncrement,++v2)" ]
"1000150" [label = "(<operator>.lessEqualsThan,v4 <= 0)" ]
"1000155" [label = "(<operator>.notEquals,v6 != 0xFF)" ]
"1000160" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000161" [label = "(<operator>.and,v3 & 0x101)" ]
"1000166" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000169" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000171" [label = "(<operator>.addition,a1 + 108)" ]
"1000174" [label = "(<operator>.assignment,v4 = 128)" ]
"1000180" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000181" [label = "(<operator>.and,v3 & 0x202)" ]
"1000186" [label = "(<operator>.assignment,result = 0)" ]
"1000190" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000191" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000192" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000196" [label = "(bb_error_msg,bb_error_msg(&GLOBAL_OFFSET_TABLE_ - 44176))" ]
"1000197" [label = "(<operator>.subtraction,&GLOBAL_OFFSET_TABLE_ - 44176)" ]
"1000198" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000201" [label = "(<operator>.assignment,result = 0)" ]
"1000204" [label = "(RETURN,return result;,return result;)" ]
"1000206" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000209" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000211" [label = "(<operator>.addition,a1 + 44)" ]
"1000214" [label = "(<operator>.assignment,v4 = 64)" ]
"1000218" [label = "(<operator>.lessEqualsThan,v4 <= 1)" ]
"1000222" [label = "(<operator>.assignment,v7 = v2[1])" ]
"1000224" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000227" [label = "(<operator>.assignment,v8 = v7 + 2)" ]
"1000229" [label = "(<operator>.addition,v7 + 2)" ]
"1000232" [label = "(<operator>.assignmentMinus,v4 -= v8)" ]
"1000236" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000241" [label = "(<operator>.notEquals,a2 != v6)" ]
"1000246" [label = "(<operator>.logicalAnd,v8 > 2 && v6 == 52)" ]
"1000247" [label = "(<operator>.greaterThan,v8 > 2)" ]
"1000250" [label = "(<operator>.equals,v6 == 52)" ]
"1000253" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000255" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000258" [label = "(<operator>.assignmentPlus,v2 += v8)" ]
"1000263" [label = "(<operator>.logicalNot,!v7)" ]
"1000267" [label = "(bb_error_msg,bb_error_msg((char *)&GLOBAL_OFFSET_TABLE_ - 444804))" ]
"1000268" [label = "(<operator>.subtraction,(char *)&GLOBAL_OFFSET_TABLE_ - 444804)" ]
"1000269" [label = "(<operator>.cast,(char *)&GLOBAL_OFFSET_TABLE_)" ]
"1000270" [label = "(UNKNOWN,char *,char *)" ]
"1000271" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000274" [label = "(RETURN,return 0;,return 0;)" ]
"1000276" [label = "(log_option,log_option())" ]
"1000277" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000278" [label = "(<operator>.addition,v2 + 2)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000281" [label = "(METHOD_RETURN,__usercall)" ]
  "1000119" -> "1000124" 
  "1000121" -> "1000119" 
  "1000124" -> "1000127" 
  "1000127" -> "1000138" 
  "1000127" -> "1000155" 
  "1000127" -> "1000218" 
  "1000136" -> "1000141" 
  "1000138" -> "1000136" 
  "1000141" -> "1000155" 
  "1000141" -> "1000218" 
  "1000141" -> "1000144" 
  "1000144" -> "1000146" 
  "1000146" -> "1000150" 
  "1000150" -> "1000138" 
  "1000150" -> "1000155" 
  "1000150" -> "1000270" 
  "1000155" -> "1000218" 
  "1000155" -> "1000161" 
  "1000160" -> "1000166" 
  "1000160" -> "1000181" 
  "1000161" -> "1000160" 
  "1000166" -> "1000171" 
  "1000169" -> "1000174" 
  "1000171" -> "1000169" 
  "1000174" -> "1000138" 
  "1000174" -> "1000155" 
  "1000174" -> "1000218" 
  "1000180" -> "1000186" 
  "1000180" -> "1000206" 
  "1000181" -> "1000180" 
  "1000186" -> "1000192" 
  "1000190" -> "1000198" 
  "1000190" -> "1000204" 
  "1000191" -> "1000190" 
  "1000192" -> "1000191" 
  "1000196" -> "1000201" 
  "1000197" -> "1000196" 
  "1000198" -> "1000197" 
  "1000201" -> "1000204" 
  "1000204" -> "1000281" 
  "1000206" -> "1000211" 
  "1000209" -> "1000214" 
  "1000211" -> "1000209" 
  "1000214" -> "1000138" 
  "1000214" -> "1000155" 
  "1000214" -> "1000218" 
  "1000218" -> "1000270" 
  "1000218" -> "1000224" 
  "1000222" -> "1000229" 
  "1000224" -> "1000222" 
  "1000227" -> "1000232" 
  "1000229" -> "1000227" 
  "1000232" -> "1000236" 
  "1000236" -> "1000270" 
  "1000236" -> "1000241" 
  "1000241" -> "1000247" 
  "1000241" -> "1000263" 
  "1000246" -> "1000255" 
  "1000246" -> "1000258" 
  "1000247" -> "1000246" 
  "1000247" -> "1000250" 
  "1000250" -> "1000246" 
  "1000253" -> "1000258" 
  "1000255" -> "1000253" 
  "1000258" -> "1000150" 
  "1000263" -> "1000276" 
  "1000263" -> "1000270" 
  "1000267" -> "1000274" 
  "1000268" -> "1000267" 
  "1000269" -> "1000268" 
  "1000270" -> "1000271" 
  "1000271" -> "1000269" 
  "1000274" -> "1000281" 
  "1000276" -> "1000278" 
  "1000277" -> "1000281" 
  "1000278" -> "1000277" 
  "1000108" -> "1000121" 
}
