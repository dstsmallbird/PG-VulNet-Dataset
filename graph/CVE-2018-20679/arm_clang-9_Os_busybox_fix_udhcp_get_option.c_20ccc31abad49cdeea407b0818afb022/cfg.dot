digraph udhcp_get_option {  
"1000125" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000127" [label = "(<operator>.addition,a1 + 108)" ]
"1000130" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000132" [label = "(<operator>.addition,a1 + 44)" ]
"1000135" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000137" [label = "(<operator>.addition,a1 + 240)" ]
"1000140" [label = "(<operator>.assignment,v5 = 388)" ]
"1000143" [label = "(<operator>.assignment,v6 = 0)" ]
"1000149" [label = "(<operator>.assignment,v7 = 2)" ]
"1000152" [label = "(<operator>.assignment,v8 = 0)" ]
"1000158" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000160" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000161" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7 - 2))" ]
"1000162" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000163" [label = "(<operator>.addition,v4 + v7 - 2)" ]
"1000165" [label = "(<operator>.subtraction,v7 - 2)" ]
"1000169" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7 - 2))" ]
"1000170" [label = "(<operator>.cast,(_BYTE *)(v4 + v7 - 2))" ]
"1000171" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000172" [label = "(<operator>.addition,v4 + v7 - 2)" ]
"1000174" [label = "(<operator>.subtraction,v7 - 2)" ]
"1000178" [label = "(<operator>.preDecrement,--v8)" ]
"1000180" [label = "(<operator>.preIncrement,++v7)" ]
"1000183" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000184" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000186" [label = "(<operator>.addition,v8 + 1)" ]
"1000192" [label = "(<operator>.equals,v9 == 255)" ]
"1000197" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000198" [label = "(<operator>.and,v6 & 0x101)" ]
"1000203" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000206" [label = "(<operator>.assignment,v5 = 128)" ]
"1000209" [label = "(<operator>.assignment,v4 = v2)" ]
"1000214" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000215" [label = "(<operator>.and,v6 & 0x202)" ]
"1000220" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000223" [label = "(<operator>.assignment,v5 = 64)" ]
"1000226" [label = "(<operator>.assignment,v4 = v3)" ]
"1000230" [label = "(<operator>.assignment,v11 = 0)" ]
"1000234" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000235" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000236" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000239" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000245" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000246" [label = "(<operator>.addition,v5 + v8)" ]
"1000251" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000253" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000254" [label = "(<operator>.cast,(unsigned __int8 *)(v4 - v8 + 1))" ]
"1000255" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000256" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000258" [label = "(<operator>.addition,v8 + 1)" ]
"1000261" [label = "(<operator>.assignment,v5 = v5 - v10 + v8 - 2)" ]
"1000263" [label = "(<operator>.subtraction,v5 - v10 + v8 - 2)" ]
"1000265" [label = "(<operator>.addition,v10 + v8 - 2)" ]
"1000267" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000271" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000276" [label = "(<operator>.notEquals,v9 != a2)" ]
"1000281" [label = "(<operator>.logicalAnd,v9 == 52 && *(_BYTE *)(v4 - v8 + 1))" ]
"1000282" [label = "(<operator>.equals,v9 == 52)" ]
"1000285" [label = "(<operator>.indirection,*(_BYTE *)(v4 - v8 + 1))" ]
"1000286" [label = "(<operator>.cast,(_BYTE *)(v4 - v8 + 1))" ]
"1000287" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000288" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000290" [label = "(<operator>.addition,v8 + 1)" ]
"1000293" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v4 + v7))" ]
"1000295" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7))" ]
"1000296" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000297" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000298" [label = "(<operator>.addition,v4 + v7)" ]
"1000301" [label = "(<operator>.assignment,v4 = v4 + v10 - v8 + 2)" ]
"1000303" [label = "(<operator>.addition,v4 + v10 - v8 + 2)" ]
"1000305" [label = "(<operator>.subtraction,v10 - v8 + 2)" ]
"1000307" [label = "(<operator>.addition,v8 + 2)" ]
"1000312" [label = "(<operator>.greaterEqualsThan,v5 >= 1)" ]
"1000318" [label = "(<operator>.logicalNot,!*(_BYTE *)(v4 - v8 + 1))" ]
"1000319" [label = "(<operator>.indirection,*(_BYTE *)(v4 - v8 + 1))" ]
"1000320" [label = "(<operator>.cast,(_BYTE *)(v4 - v8 + 1))" ]
"1000321" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000322" [label = "(<operator>.subtraction,v4 - v8 + 1)" ]
"1000324" [label = "(<operator>.addition,v8 + 1)" ]
"1000329" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, v7))" ]
"1000333" [label = "(RETURN,return 0;,return 0;)" ]
"1000335" [label = "(log_option,log_option(\"option found\", v4 - v8))" ]
"1000337" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000340" [label = "(<operator>.assignment,v11 = v4 - v8 + 2)" ]
"1000342" [label = "(<operator>.subtraction,v4 - v8 + 2)" ]
"1000344" [label = "(<operator>.addition,v8 + 2)" ]
"1000347" [label = "(RETURN,return v11;,return v11;)" ]
"1000111" [label = "(METHOD,udhcp_get_option)" ]
"1000349" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000125" -> "1000132" 
  "1000127" -> "1000125" 
  "1000130" -> "1000137" 
  "1000132" -> "1000130" 
  "1000135" -> "1000140" 
  "1000137" -> "1000135" 
  "1000140" -> "1000143" 
  "1000143" -> "1000349" 
  "1000143" -> "1000149" 
  "1000149" -> "1000152" 
  "1000152" -> "1000162" 
  "1000152" -> "1000192" 
  "1000158" -> "1000171" 
  "1000160" -> "1000158" 
  "1000161" -> "1000160" 
  "1000162" -> "1000165" 
  "1000163" -> "1000161" 
  "1000165" -> "1000163" 
  "1000169" -> "1000349" 
  "1000169" -> "1000192" 
  "1000169" -> "1000178" 
  "1000170" -> "1000169" 
  "1000171" -> "1000174" 
  "1000172" -> "1000170" 
  "1000174" -> "1000172" 
  "1000178" -> "1000180" 
  "1000180" -> "1000186" 
  "1000183" -> "1000162" 
  "1000183" -> "1000192" 
  "1000183" -> "1000329" 
  "1000184" -> "1000183" 
  "1000186" -> "1000184" 
  "1000192" -> "1000198" 
  "1000192" -> "1000246" 
  "1000197" -> "1000203" 
  "1000197" -> "1000215" 
  "1000198" -> "1000197" 
  "1000203" -> "1000206" 
  "1000206" -> "1000209" 
  "1000209" -> "1000312" 
  "1000214" -> "1000220" 
  "1000214" -> "1000230" 
  "1000215" -> "1000214" 
  "1000220" -> "1000223" 
  "1000223" -> "1000226" 
  "1000226" -> "1000312" 
  "1000230" -> "1000236" 
  "1000234" -> "1000239" 
  "1000234" -> "1000347" 
  "1000235" -> "1000234" 
  "1000236" -> "1000235" 
  "1000239" -> "1000347" 
  "1000245" -> "1000329" 
  "1000245" -> "1000255" 
  "1000246" -> "1000245" 
  "1000251" -> "1000267" 
  "1000253" -> "1000251" 
  "1000254" -> "1000253" 
  "1000255" -> "1000258" 
  "1000256" -> "1000254" 
  "1000258" -> "1000256" 
  "1000261" -> "1000271" 
  "1000263" -> "1000261" 
  "1000265" -> "1000263" 
  "1000267" -> "1000265" 
  "1000271" -> "1000329" 
  "1000271" -> "1000276" 
  "1000276" -> "1000321" 
  "1000276" -> "1000282" 
  "1000281" -> "1000297" 
  "1000281" -> "1000307" 
  "1000282" -> "1000287" 
  "1000282" -> "1000281" 
  "1000285" -> "1000281" 
  "1000286" -> "1000285" 
  "1000287" -> "1000290" 
  "1000288" -> "1000286" 
  "1000290" -> "1000288" 
  "1000293" -> "1000307" 
  "1000295" -> "1000293" 
  "1000296" -> "1000295" 
  "1000297" -> "1000298" 
  "1000298" -> "1000296" 
  "1000301" -> "1000312" 
  "1000303" -> "1000301" 
  "1000305" -> "1000303" 
  "1000307" -> "1000305" 
  "1000312" -> "1000349" 
  "1000312" -> "1000149" 
  "1000312" -> "1000329" 
  "1000318" -> "1000329" 
  "1000318" -> "1000337" 
  "1000319" -> "1000318" 
  "1000320" -> "1000319" 
  "1000321" -> "1000324" 
  "1000322" -> "1000320" 
  "1000324" -> "1000322" 
  "1000329" -> "1000333" 
  "1000333" -> "1000349" 
  "1000335" -> "1000344" 
  "1000337" -> "1000335" 
  "1000340" -> "1000347" 
  "1000342" -> "1000340" 
  "1000344" -> "1000342" 
  "1000347" -> "1000349" 
  "1000111" -> "1000127" 
}
