digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000119" [label = "(<operator>.addition,a1 + 240)" ]
"1000122" [label = "(<operator>.assignment,v3 = 0)" ]
"1000125" [label = "(<operator>.assignment,v4 = 388)" ]
"1000137" [label = "(<operator>.assignment,v5 = *v2)" ]
"1000139" [label = "(<operator>.indirection,*v2)" ]
"1000142" [label = "(<operator>.indirection,*v2)" ]
"1000145" [label = "(<operator>.preDecrement,--v4)" ]
"1000147" [label = "(<operator>.preIncrement,++v2)" ]
"1000150" [label = "(<operator>.logicalNot,!v4)" ]
"1000154" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000159" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000160" [label = "(<operator>.and,v3 & 0x101)" ]
"1000165" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000168" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000170" [label = "(<operator>.addition,a1 + 108)" ]
"1000173" [label = "(<operator>.assignment,v4 = 128)" ]
"1000179" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000180" [label = "(<operator>.and,v3 & 0x202)" ]
"1000186" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000187" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000188" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000191" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000194" [label = "(RETURN,return 0;,return 0;)" ]
"1000196" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000199" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000201" [label = "(<operator>.addition,a1 + 44)" ]
"1000204" [label = "(<operator>.assignment,v4 = 64)" ]
"1000208" [label = "(<operator>.equals,v4 == 1)" ]
"1000212" [label = "(<operator>.assignment,v7 = v2[1] + 2)" ]
"1000214" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000215" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000219" [label = "(<operator>.assignmentMinus,v4 -= v7)" ]
"1000223" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000228" [label = "(<operator>.equals,a2 == v5)" ]
"1000232" [label = "(<operator>.assignment,v8 = v7 != 2)" ]
"1000234" [label = "(<operator>.notEquals,v7 != 2)" ]
"1000238" [label = "(<operator>.notEquals,v5 != 52)" ]
"1000241" [label = "(<operator>.assignment,v8 = 0)" ]
"1000246" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000248" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000251" [label = "(<operator>.assignmentPlus,v2 += v7)" ]
"1000255" [label = "(<operator>.logicalNot,!v4)" ]
"1000259" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000260" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000265" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000267" [label = "(RETURN,return 0;,return 0;)" ]
"1000270" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000271" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000272" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000275" [label = "(log_option_part_0,log_option_part_0(\"option found\", v2))" ]
"1000278" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000279" [label = "(<operator>.addition,v2 + 2)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000282" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000122" 
  "1000119" -> "1000117" 
  "1000122" -> "1000125" 
  "1000125" -> "1000139" 
  "1000125" -> "1000154" 
  "1000125" -> "1000208" 
  "1000125" -> "1000260" 
  "1000137" -> "1000142" 
  "1000139" -> "1000137" 
  "1000142" -> "1000154" 
  "1000142" -> "1000208" 
  "1000142" -> "1000260" 
  "1000142" -> "1000145" 
  "1000145" -> "1000147" 
  "1000147" -> "1000150" 
  "1000150" -> "1000139" 
  "1000150" -> "1000154" 
  "1000150" -> "1000265" 
  "1000154" -> "1000208" 
  "1000154" -> "1000260" 
  "1000154" -> "1000160" 
  "1000159" -> "1000165" 
  "1000159" -> "1000180" 
  "1000160" -> "1000159" 
  "1000165" -> "1000170" 
  "1000168" -> "1000173" 
  "1000170" -> "1000168" 
  "1000173" -> "1000139" 
  "1000173" -> "1000154" 
  "1000173" -> "1000208" 
  "1000179" -> "1000188" 
  "1000179" -> "1000196" 
  "1000180" -> "1000179" 
  "1000186" -> "1000191" 
  "1000186" -> "1000194" 
  "1000187" -> "1000186" 
  "1000188" -> "1000187" 
  "1000191" -> "1000194" 
  "1000194" -> "1000282" 
  "1000196" -> "1000201" 
  "1000199" -> "1000204" 
  "1000201" -> "1000199" 
  "1000204" -> "1000139" 
  "1000204" -> "1000154" 
  "1000204" -> "1000208" 
  "1000208" -> "1000265" 
  "1000208" -> "1000215" 
  "1000212" -> "1000219" 
  "1000214" -> "1000212" 
  "1000215" -> "1000214" 
  "1000219" -> "1000223" 
  "1000223" -> "1000265" 
  "1000223" -> "1000228" 
  "1000228" -> "1000260" 
  "1000228" -> "1000234" 
  "1000232" -> "1000238" 
  "1000234" -> "1000232" 
  "1000238" -> "1000241" 
  "1000238" -> "1000248" 
  "1000238" -> "1000251" 
  "1000241" -> "1000248" 
  "1000241" -> "1000251" 
  "1000246" -> "1000251" 
  "1000248" -> "1000246" 
  "1000251" -> "1000255" 
  "1000255" -> "1000139" 
  "1000255" -> "1000154" 
  "1000255" -> "1000208" 
  "1000255" -> "1000260" 
  "1000255" -> "1000265" 
  "1000259" -> "1000272" 
  "1000259" -> "1000265" 
  "1000260" -> "1000259" 
  "1000265" -> "1000267" 
  "1000267" -> "1000282" 
  "1000270" -> "1000275" 
  "1000270" -> "1000279" 
  "1000271" -> "1000270" 
  "1000272" -> "1000271" 
  "1000275" -> "1000279" 
  "1000278" -> "1000282" 
  "1000279" -> "1000278" 
  "1000107" -> "1000119" 
}
