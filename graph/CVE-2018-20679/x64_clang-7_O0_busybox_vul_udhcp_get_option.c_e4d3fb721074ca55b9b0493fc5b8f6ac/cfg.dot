digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v7 = 0)" ]
"1000120" [label = "(<operator>.assignment,v10 = a1 + 240)" ]
"1000122" [label = "(<operator>.addition,a1 + 240)" ]
"1000126" [label = "(<operator>.assignment,i = 388)" ]
"1000129" [label = "(<operator>.assignment,i = 64)" ]
"1000143" [label = "(<operator>.lessEqualsThan,i <= 0)" ]
"1000148" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, a3, a4, a5, a6))" ]
"1000149" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000150" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000159" [label = "(<operator>.indirection,*v10)" ]
"1000162" [label = "(<operator>.preDecrement,--i)" ]
"1000164" [label = "(<operator>.assignment,a4 = (_DWORD)v10++ + 1)" ]
"1000166" [label = "(<operator>.addition,(_DWORD)v10++ + 1)" ]
"1000167" [label = "(<operator>.cast,(_DWORD)v10++)" ]
"1000168" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000169" [label = "(<operator>.postIncrement,v10++)" ]
"1000172" [label = "(<operator>.assignment,a4 = *v10)" ]
"1000174" [label = "(<operator>.indirection,*v10)" ]
"1000177" [label = "(<operator>.equals,a4 == 255)" ]
"1000182" [label = "(<operator>.lessEqualsThan,i <= 1)" ]
"1000186" [label = "(<operator>.assignment,v9 = v10[1] + 2)" ]
"1000188" [label = "(<operator>.addition,v10[1] + 2)" ]
"1000189" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000193" [label = "(<operator>.assignment,a4 = v9)" ]
"1000196" [label = "(<operator>.assignment,a3 = i - v9)" ]
"1000198" [label = "(<operator>.subtraction,i - v9)" ]
"1000201" [label = "(<operator>.assignmentMinus,i -= v9)" ]
"1000205" [label = "(<operator>.lessThan,i < 0)" ]
"1000210" [label = "(<operator>.equals,*v10 == a2)" ]
"1000211" [label = "(<operator>.indirection,*v10)" ]
"1000215" [label = "(log_option,log_option(\"option found\", v10))" ]
"1000218" [label = "(RETURN,return v10 + 2;,return v10 + 2;)" ]
"1000219" [label = "(<operator>.addition,v10 + 2)" ]
"1000223" [label = "(<operator>.logicalAnd,*v10 == 52 && v9 >= 3)" ]
"1000224" [label = "(<operator>.equals,*v10 == 52)" ]
"1000225" [label = "(<operator>.indirection,*v10)" ]
"1000228" [label = "(<operator>.greaterEqualsThan,v9 >= 3)" ]
"1000231" [label = "(<operators>.assignmentOr,v7 |= v10[2])" ]
"1000233" [label = "(<operator>.indirectIndexAccess,v10[2])" ]
"1000236" [label = "(<operator>.assignment,a3 = v10[1] + 2)" ]
"1000238" [label = "(<operator>.addition,v10[1] + 2)" ]
"1000239" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000243" [label = "(<operator>.assignment,a4 = v9 + (_DWORD)v10)" ]
"1000245" [label = "(<operator>.addition,v9 + (_DWORD)v10)" ]
"1000247" [label = "(<operator>.cast,(_DWORD)v10)" ]
"1000248" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000250" [label = "(<operator>.assignmentPlus,v10 += v9)" ]
"1000254" [label = "(<operator>.notEquals,(v7 & 0x101) != 1)" ]
"1000255" [label = "(<operator>.and,v7 & 0x101)" ]
"1000260" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000263" [label = "(<operator>.assignment,a4 = (_DWORD)a1 + 108)" ]
"1000265" [label = "(<operator>.addition,(_DWORD)a1 + 108)" ]
"1000266" [label = "(<operator>.cast,(_DWORD)a1)" ]
"1000267" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000270" [label = "(<operator>.assignment,v10 = a1 + 108)" ]
"1000272" [label = "(<operator>.addition,a1 + 108)" ]
"1000275" [label = "(<operator>.assignment,i = 128)" ]
"1000279" [label = "(<operator>.notEquals,(v7 & 0x202) != 2)" ]
"1000280" [label = "(<operator>.and,v7 & 0x202)" ]
"1000285" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000288" [label = "(<operator>.assignment,a4 = (_DWORD)a1 + 44)" ]
"1000290" [label = "(<operator>.addition,(_DWORD)a1 + 44)" ]
"1000291" [label = "(<operator>.cast,(_DWORD)a1)" ]
"1000292" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000295" [label = "(<operator>.assignment,v10 = a1 + 44)" ]
"1000297" [label = "(<operator>.addition,a1 + 44)" ]
"1000301" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000302" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000303" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000306" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, a3, 255, a5, a6))" ]
"1000307" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000308" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000105" [label = "(METHOD,udhcp_get_option)" ]
"1000316" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000122" 
  "1000120" -> "1000126" 
  "1000122" -> "1000120" 
  "1000126" -> "1000143" 
  "1000126" -> "1000174" 
  "1000126" -> "1000255" 
  "1000126" -> "1000280" 
  "1000129" -> "1000143" 
  "1000129" -> "1000174" 
  "1000129" -> "1000255" 
  "1000129" -> "1000280" 
  "1000143" -> "1000150" 
  "1000143" -> "1000159" 
  "1000148" -> "1000159" 
  "1000149" -> "1000148" 
  "1000150" -> "1000149" 
  "1000159" -> "1000303" 
  "1000159" -> "1000174" 
  "1000159" -> "1000255" 
  "1000159" -> "1000280" 
  "1000159" -> "1000162" 
  "1000162" -> "1000168" 
  "1000164" -> "1000143" 
  "1000164" -> "1000174" 
  "1000166" -> "1000164" 
  "1000167" -> "1000166" 
  "1000168" -> "1000169" 
  "1000169" -> "1000167" 
  "1000172" -> "1000177" 
  "1000174" -> "1000172" 
  "1000177" -> "1000303" 
  "1000177" -> "1000255" 
  "1000177" -> "1000280" 
  "1000177" -> "1000182" 
  "1000182" -> "1000150" 
  "1000182" -> "1000189" 
  "1000186" -> "1000193" 
  "1000188" -> "1000186" 
  "1000189" -> "1000188" 
  "1000193" -> "1000198" 
  "1000196" -> "1000201" 
  "1000198" -> "1000196" 
  "1000201" -> "1000205" 
  "1000205" -> "1000150" 
  "1000205" -> "1000211" 
  "1000210" -> "1000215" 
  "1000210" -> "1000225" 
  "1000211" -> "1000210" 
  "1000215" -> "1000219" 
  "1000218" -> "1000316" 
  "1000219" -> "1000218" 
  "1000223" -> "1000233" 
  "1000223" -> "1000239" 
  "1000224" -> "1000223" 
  "1000224" -> "1000228" 
  "1000225" -> "1000224" 
  "1000228" -> "1000223" 
  "1000231" -> "1000239" 
  "1000233" -> "1000231" 
  "1000236" -> "1000248" 
  "1000238" -> "1000236" 
  "1000239" -> "1000238" 
  "1000243" -> "1000250" 
  "1000245" -> "1000243" 
  "1000247" -> "1000245" 
  "1000248" -> "1000247" 
  "1000250" -> "1000143" 
  "1000250" -> "1000174" 
  "1000250" -> "1000255" 
  "1000254" -> "1000303" 
  "1000254" -> "1000280" 
  "1000254" -> "1000260" 
  "1000255" -> "1000254" 
  "1000260" -> "1000267" 
  "1000263" -> "1000272" 
  "1000265" -> "1000263" 
  "1000266" -> "1000265" 
  "1000267" -> "1000266" 
  "1000270" -> "1000275" 
  "1000272" -> "1000270" 
  "1000275" -> "1000143" 
  "1000275" -> "1000174" 
  "1000275" -> "1000255" 
  "1000275" -> "1000280" 
  "1000279" -> "1000303" 
  "1000279" -> "1000285" 
  "1000280" -> "1000279" 
  "1000285" -> "1000292" 
  "1000288" -> "1000297" 
  "1000290" -> "1000288" 
  "1000291" -> "1000290" 
  "1000292" -> "1000291" 
  "1000295" -> "1000129" 
  "1000297" -> "1000295" 
  "1000301" -> "1000308" 
  "1000301" -> "1000316" 
  "1000302" -> "1000301" 
  "1000303" -> "1000302" 
  "1000306" -> "1000316" 
  "1000307" -> "1000306" 
  "1000308" -> "1000307" 
  "1000105" -> "1000117" 
}
