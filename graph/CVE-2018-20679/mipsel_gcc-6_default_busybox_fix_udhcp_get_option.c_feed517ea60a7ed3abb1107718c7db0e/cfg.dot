digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v2 = 0)" ]
"1000124" [label = "(<operator>.assignment,v3 = 388)" ]
"1000127" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000129" [label = "(<operator>.addition,a1 + 240)" ]
"1000139" [label = "(<operator>.assignment,i = *v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000143" [label = "(<operator>.assignment,i = *v4)" ]
"1000145" [label = "(<operator>.indirection,*v4)" ]
"1000149" [label = "(<operator>.logicalNot,!i)" ]
"1000152" [label = "(<operator>.preDecrement,--v3)" ]
"1000154" [label = "(<operator>.preIncrement,++v4)" ]
"1000158" [label = "(<operator>.equals,i == 255)" ]
"1000163" [label = "(<operator>.equals,v3 == 1)" ]
"1000167" [label = "(<operator>.assignment,v9 = v4[1] + 2)" ]
"1000169" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000170" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000174" [label = "(<operator>.assignmentMinus,v3 -= v9)" ]
"1000178" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000183" [label = "(<operator>.equals,a2 == i)" ]
"1000188" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000189" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000194" [label = "(<operator>.assignment,v6 = 0)" ]
"1000197" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000199" [label = "(RETURN,return v6;,return v6;)" ]
"1000201" [label = "(<operator>.assignment,v10 = v4)" ]
"1000204" [label = "(<operator>.assignment,v6 = v4 + 2)" ]
"1000206" [label = "(<operator>.addition,v4 + 2)" ]
"1000209" [label = "(log_option,log_option(\"option found\", v10))" ]
"1000212" [label = "(RETURN,return v6;,return v6;)" ]
"1000215" [label = "(<operator>.equals,i == 52)" ]
"1000220" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000224" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000226" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000229" [label = "(<operator>.assignmentPlus,v4 += v9)" ]
"1000234" [label = "(<operator>.assignmentPlus,v4 += 2)" ]
"1000239" [label = "(<operator>.assignmentPlus,v4 += v9)" ]
"1000244" [label = "(<operator>.logicalNot,!v3)" ]
"1000247" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000249" [label = "(<operator>.addition,a1 + 108)" ]
"1000253" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000254" [label = "(<operator>.and,v2 & 0x101)" ]
"1000259" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000262" [label = "(<operator>.assignment,v3 = 128)" ]
"1000267" [label = "(<operator>.assignment,v8 = (v2 & 0x202) != 2)" ]
"1000269" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000270" [label = "(<operator>.and,v2 & 0x202)" ]
"1000274" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000278" [label = "(<operator>.logicalNot,!v8)" ]
"1000281" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000283" [label = "(<operator>.addition,a1 + 44)" ]
"1000286" [label = "(<operator>.assignment,v3 = 64)" ]
"1000291" [label = "(<operator>.assignment,v6 = 0)" ]
"1000295" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000296" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000297" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000300" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000303" [label = "(RETURN,return v6;,return v6;)" ]
"1000109" [label = "(METHOD,udhcp_get_option)" ]
"1000305" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000124" 
  "1000124" -> "1000129" 
  "1000127" -> "1000141" 
  "1000127" -> "1000270" 
  "1000127" -> "1000291" 
  "1000129" -> "1000127" 
  "1000139" -> "1000149" 
  "1000141" -> "1000139" 
  "1000143" -> "1000149" 
  "1000145" -> "1000143" 
  "1000149" -> "1000152" 
  "1000149" -> "1000158" 
  "1000152" -> "1000154" 
  "1000154" -> "1000244" 
  "1000158" -> "1000249" 
  "1000158" -> "1000270" 
  "1000158" -> "1000291" 
  "1000158" -> "1000163" 
  "1000163" -> "1000194" 
  "1000163" -> "1000170" 
  "1000167" -> "1000174" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000174" -> "1000178" 
  "1000178" -> "1000194" 
  "1000178" -> "1000183" 
  "1000183" -> "1000189" 
  "1000183" -> "1000215" 
  "1000188" -> "1000194" 
  "1000188" -> "1000201" 
  "1000189" -> "1000188" 
  "1000194" -> "1000197" 
  "1000197" -> "1000199" 
  "1000199" -> "1000305" 
  "1000201" -> "1000206" 
  "1000204" -> "1000209" 
  "1000206" -> "1000204" 
  "1000209" -> "1000212" 
  "1000212" -> "1000305" 
  "1000215" -> "1000220" 
  "1000215" -> "1000239" 
  "1000220" -> "1000226" 
  "1000220" -> "1000234" 
  "1000224" -> "1000229" 
  "1000226" -> "1000224" 
  "1000229" -> "1000244" 
  "1000234" -> "1000244" 
  "1000239" -> "1000244" 
  "1000244" -> "1000194" 
  "1000244" -> "1000145" 
  "1000247" -> "1000254" 
  "1000249" -> "1000247" 
  "1000253" -> "1000259" 
  "1000253" -> "1000270" 
  "1000253" -> "1000291" 
  "1000254" -> "1000253" 
  "1000259" -> "1000262" 
  "1000262" -> "1000141" 
  "1000262" -> "1000270" 
  "1000262" -> "1000291" 
  "1000262" -> "1000141" 
  "1000262" -> "1000270" 
  "1000267" -> "1000274" 
  "1000269" -> "1000267" 
  "1000270" -> "1000269" 
  "1000274" -> "1000278" 
  "1000278" -> "1000283" 
  "1000278" -> "1000291" 
  "1000281" -> "1000286" 
  "1000283" -> "1000281" 
  "1000286" -> "1000141" 
  "1000286" -> "1000270" 
  "1000286" -> "1000291" 
  "1000291" -> "1000297" 
  "1000295" -> "1000300" 
  "1000295" -> "1000303" 
  "1000296" -> "1000295" 
  "1000297" -> "1000296" 
  "1000300" -> "1000303" 
  "1000303" -> "1000305" 
  "1000109" -> "1000121" 
}
