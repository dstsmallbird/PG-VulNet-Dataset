digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000119" [label = "(<operator>.addition,a1 + 240)" ]
"1000122" [label = "(<operator>.assignment,v3 = 0)" ]
"1000125" [label = "(<operator>.assignment,v4 = 388)" ]
"1000134" [label = "(<operator>.assignment,v6 = *v2)" ]
"1000136" [label = "(<operator>.indirection,*v2)" ]
"1000139" [label = "(<operator>.indirection,*v2)" ]
"1000142" [label = "(<operator>.preDecrement,--v4)" ]
"1000144" [label = "(<operator>.preIncrement,++v2)" ]
"1000148" [label = "(<operator>.lessEqualsThan,v4 <= 0)" ]
"1000153" [label = "(<operator>.notEquals,v6 != 0xFF)" ]
"1000158" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000159" [label = "(<operator>.and,v3 & 0x101)" ]
"1000164" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000167" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000169" [label = "(<operator>.addition,a1 + 108)" ]
"1000172" [label = "(<operator>.assignment,v4 = 128)" ]
"1000178" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000179" [label = "(<operator>.and,v3 & 0x202)" ]
"1000184" [label = "(<operator>.assignment,result = 0)" ]
"1000188" [label = "(<operator>.greaterThan,*((_DWORD *)&GLOBAL_OFFSET_TABLE_ + 849) > 2u)" ]
"1000189" [label = "(<operator>.indirection,*((_DWORD *)&GLOBAL_OFFSET_TABLE_ + 849))" ]
"1000190" [label = "(<operator>.addition,(_DWORD *)&GLOBAL_OFFSET_TABLE_ + 849)" ]
"1000191" [label = "(<operator>.cast,(_DWORD *)&GLOBAL_OFFSET_TABLE_)" ]
"1000192" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000193" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000198" [label = "(bb_error_msg,bb_error_msg((char *)&GLOBAL_OFFSET_TABLE_ - 355758))" ]
"1000199" [label = "(<operator>.subtraction,(char *)&GLOBAL_OFFSET_TABLE_ - 355758)" ]
"1000200" [label = "(<operator>.cast,(char *)&GLOBAL_OFFSET_TABLE_)" ]
"1000201" [label = "(UNKNOWN,char *,char *)" ]
"1000202" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000205" [label = "(<operator>.assignment,result = 0)" ]
"1000208" [label = "(RETURN,return result;,return result;)" ]
"1000210" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000213" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000215" [label = "(<operator>.addition,a1 + 44)" ]
"1000218" [label = "(<operator>.assignment,v4 = 64)" ]
"1000222" [label = "(<operator>.lessEqualsThan,v4 <= 1)" ]
"1000226" [label = "(<operator>.assignment,v7 = v2[1] + 2)" ]
"1000228" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000229" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000233" [label = "(<operator>.assignmentMinus,v4 -= v7)" ]
"1000237" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000242" [label = "(<operator>.notEquals,v6 != a2)" ]
"1000247" [label = "(<operator>.logicalAnd,v7 > 2 && v6 == 52)" ]
"1000248" [label = "(<operator>.greaterThan,v7 > 2)" ]
"1000251" [label = "(<operator>.equals,v6 == 52)" ]
"1000254" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000256" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000259" [label = "(<operator>.assignmentPlus,v2 += v7)" ]
"1000264" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000265" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000270" [label = "(bb_error_msg,bb_error_msg((char *)&GLOBAL_OFFSET_TABLE_ - 447172))" ]
"1000271" [label = "(<operator>.subtraction,(char *)&GLOBAL_OFFSET_TABLE_ - 447172)" ]
"1000272" [label = "(<operator>.cast,(char *)&GLOBAL_OFFSET_TABLE_)" ]
"1000273" [label = "(UNKNOWN,char *,char *)" ]
"1000274" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000277" [label = "(RETURN,return 0;,return 0;)" ]
"1000279" [label = "(log_option,log_option())" ]
"1000280" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000281" [label = "(<operator>.addition,v2 + 2)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000284" [label = "(METHOD_RETURN,__usercall)" ]
  "1000117" -> "1000122" 
  "1000119" -> "1000117" 
  "1000122" -> "1000125" 
  "1000125" -> "1000136" 
  "1000125" -> "1000153" 
  "1000125" -> "1000222" 
  "1000134" -> "1000139" 
  "1000136" -> "1000134" 
  "1000139" -> "1000153" 
  "1000139" -> "1000222" 
  "1000139" -> "1000142" 
  "1000142" -> "1000144" 
  "1000144" -> "1000148" 
  "1000148" -> "1000136" 
  "1000148" -> "1000153" 
  "1000148" -> "1000273" 
  "1000153" -> "1000222" 
  "1000153" -> "1000159" 
  "1000158" -> "1000164" 
  "1000158" -> "1000179" 
  "1000159" -> "1000158" 
  "1000164" -> "1000169" 
  "1000167" -> "1000172" 
  "1000169" -> "1000167" 
  "1000172" -> "1000136" 
  "1000172" -> "1000153" 
  "1000172" -> "1000222" 
  "1000178" -> "1000184" 
  "1000178" -> "1000210" 
  "1000179" -> "1000178" 
  "1000184" -> "1000192" 
  "1000188" -> "1000201" 
  "1000188" -> "1000208" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000191" -> "1000190" 
  "1000192" -> "1000193" 
  "1000193" -> "1000191" 
  "1000198" -> "1000205" 
  "1000199" -> "1000198" 
  "1000200" -> "1000199" 
  "1000201" -> "1000202" 
  "1000202" -> "1000200" 
  "1000205" -> "1000208" 
  "1000208" -> "1000284" 
  "1000210" -> "1000215" 
  "1000213" -> "1000218" 
  "1000215" -> "1000213" 
  "1000218" -> "1000136" 
  "1000218" -> "1000153" 
  "1000218" -> "1000222" 
  "1000222" -> "1000273" 
  "1000222" -> "1000229" 
  "1000226" -> "1000233" 
  "1000228" -> "1000226" 
  "1000229" -> "1000228" 
  "1000233" -> "1000237" 
  "1000237" -> "1000273" 
  "1000237" -> "1000242" 
  "1000242" -> "1000248" 
  "1000242" -> "1000265" 
  "1000247" -> "1000256" 
  "1000247" -> "1000259" 
  "1000248" -> "1000247" 
  "1000248" -> "1000251" 
  "1000251" -> "1000247" 
  "1000254" -> "1000259" 
  "1000256" -> "1000254" 
  "1000259" -> "1000148" 
  "1000264" -> "1000279" 
  "1000264" -> "1000273" 
  "1000265" -> "1000264" 
  "1000270" -> "1000277" 
  "1000271" -> "1000270" 
  "1000272" -> "1000271" 
  "1000273" -> "1000274" 
  "1000274" -> "1000272" 
  "1000277" -> "1000284" 
  "1000279" -> "1000281" 
  "1000280" -> "1000284" 
  "1000281" -> "1000280" 
  "1000107" -> "1000119" 
}
