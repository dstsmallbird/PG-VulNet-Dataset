digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000123" [label = "(<operator>.addition,a1 + 240)" ]
"1000126" [label = "(<operator>.assignment,v7 = 0)" ]
"1000129" [label = "(<operator>.assignment,v8 = 388)" ]
"1000138" [label = "(<operator>.assignment,v10 = *v6)" ]
"1000140" [label = "(<operator>.indirection,*v6)" ]
"1000143" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000144" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000147" [label = "(<operator>.preDecrement,--v8)" ]
"1000149" [label = "(<operator>.preIncrement,++v6)" ]
"1000153" [label = "(<operator>.lessEqualsThan,v8 <= 0)" ]
"1000158" [label = "(<operator>.notEquals,(_BYTE)v10 != 0xFF)" ]
"1000159" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000160" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000165" [label = "(<operator>.equals,(v7 & 0x101) == 1)" ]
"1000166" [label = "(<operator>.and,v7 & 0x101)" ]
"1000171" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000174" [label = "(<operator>.assignment,v6 = a1 + 108)" ]
"1000176" [label = "(<operator>.addition,a1 + 108)" ]
"1000179" [label = "(<operator>.assignment,v8 = 128)" ]
"1000185" [label = "(<operator>.notEquals,(v7 & 0x202) != 2)" ]
"1000186" [label = "(<operator>.and,v7 & 0x202)" ]
"1000193" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000194" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000195" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000199" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v8, v10, v7, a6))" ]
"1000200" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000201" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000209" [label = "(RETURN,return result;,return result;)" ]
"1000211" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000214" [label = "(<operator>.assignment,v6 = a1 + 44)" ]
"1000216" [label = "(<operator>.addition,a1 + 44)" ]
"1000219" [label = "(<operator>.assignment,v8 = 64)" ]
"1000223" [label = "(<operator>.lessEqualsThan,v8 <= 1)" ]
"1000227" [label = "(<operator>.assignment,a6 = v6[1])" ]
"1000229" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000232" [label = "(<operator>.assignment,v11 = (unsigned __int8)a6 + 2)" ]
"1000234" [label = "(<operator>.addition,(unsigned __int8)a6 + 2)" ]
"1000235" [label = "(<operator>.cast,(unsigned __int8)a6)" ]
"1000236" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000239" [label = "(<operator>.assignmentMinus,v8 -= v11)" ]
"1000243" [label = "(<operator>.lessThan,v8 < 0)" ]
"1000248" [label = "(<operator>.notEquals,(unsigned __int8)v10 != a2)" ]
"1000249" [label = "(<operator>.cast,(unsigned __int8)v10)" ]
"1000250" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000255" [label = "(<operator>.logicalAnd,v11 > 2 && (_BYTE)v10 == 52)" ]
"1000256" [label = "(<operator>.greaterThan,v11 > 2)" ]
"1000259" [label = "(<operator>.equals,(_BYTE)v10 == 52)" ]
"1000260" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000261" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000265" [label = "(<operator>.assignment,v10 = v6[2])" ]
"1000267" [label = "(<operator>.indirectIndexAccess,v6[2])" ]
"1000270" [label = "(<operators>.assignmentOr,v7 |= v10)" ]
"1000273" [label = "(<operator>.assignmentPlus,v6 += v11)" ]
"1000278" [label = "(<operator>.logicalNot,!(_BYTE)a6)" ]
"1000279" [label = "(<operator>.cast,(_BYTE)a6)" ]
"1000280" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000284" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v8, v10, v7, a6))" ]
"1000285" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000286" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000294" [label = "(log_option,log_option(\"option found\", v6))" ]
"1000297" [label = "(RETURN,return v6 + 2;,return v6 + 2;)" ]
"1000298" [label = "(<operator>.addition,v6 + 2)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000301" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000126" 
  "1000123" -> "1000121" 
  "1000126" -> "1000129" 
  "1000129" -> "1000160" 
  "1000129" -> "1000140" 
  "1000129" -> "1000223" 
  "1000138" -> "1000144" 
  "1000140" -> "1000138" 
  "1000143" -> "1000160" 
  "1000143" -> "1000223" 
  "1000143" -> "1000147" 
  "1000144" -> "1000143" 
  "1000147" -> "1000149" 
  "1000149" -> "1000153" 
  "1000153" -> "1000160" 
  "1000153" -> "1000140" 
  "1000153" -> "1000286" 
  "1000158" -> "1000223" 
  "1000158" -> "1000166" 
  "1000159" -> "1000158" 
  "1000160" -> "1000159" 
  "1000165" -> "1000171" 
  "1000165" -> "1000186" 
  "1000166" -> "1000165" 
  "1000171" -> "1000176" 
  "1000174" -> "1000179" 
  "1000176" -> "1000174" 
  "1000179" -> "1000160" 
  "1000179" -> "1000140" 
  "1000179" -> "1000223" 
  "1000185" -> "1000195" 
  "1000185" -> "1000211" 
  "1000186" -> "1000185" 
  "1000193" -> "1000201" 
  "1000193" -> "1000209" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000199" -> "1000209" 
  "1000200" -> "1000199" 
  "1000201" -> "1000200" 
  "1000209" -> "1000301" 
  "1000211" -> "1000216" 
  "1000214" -> "1000219" 
  "1000216" -> "1000214" 
  "1000219" -> "1000160" 
  "1000219" -> "1000140" 
  "1000219" -> "1000223" 
  "1000223" -> "1000286" 
  "1000223" -> "1000229" 
  "1000227" -> "1000236" 
  "1000229" -> "1000227" 
  "1000232" -> "1000239" 
  "1000234" -> "1000232" 
  "1000235" -> "1000234" 
  "1000236" -> "1000235" 
  "1000239" -> "1000243" 
  "1000243" -> "1000250" 
  "1000243" -> "1000286" 
  "1000248" -> "1000280" 
  "1000248" -> "1000256" 
  "1000249" -> "1000248" 
  "1000250" -> "1000249" 
  "1000255" -> "1000267" 
  "1000255" -> "1000273" 
  "1000256" -> "1000261" 
  "1000256" -> "1000255" 
  "1000259" -> "1000255" 
  "1000260" -> "1000259" 
  "1000261" -> "1000260" 
  "1000265" -> "1000270" 
  "1000267" -> "1000265" 
  "1000270" -> "1000273" 
  "1000273" -> "1000153" 
  "1000278" -> "1000286" 
  "1000278" -> "1000294" 
  "1000279" -> "1000278" 
  "1000280" -> "1000279" 
  "1000284" -> "1000294" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000294" -> "1000298" 
  "1000297" -> "1000301" 
  "1000298" -> "1000297" 
  "1000107" -> "1000123" 
}
