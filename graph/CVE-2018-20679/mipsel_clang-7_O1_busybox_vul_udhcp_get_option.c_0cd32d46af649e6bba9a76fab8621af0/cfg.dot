digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000131" [label = "(<operator>.addition,a1 + 44)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000136" [label = "(<operator>.addition,a1 + 108)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000159" [label = "(<operator>.assignment,v7 = 0)" ]
"1000162" [label = "(<operator>.assignment,v8 = 0)" ]
"1000168" [label = "(<operator>.assignment,v9 = v4 + v7)" ]
"1000170" [label = "(<operator>.addition,v4 + v7)" ]
"1000173" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7))" ]
"1000175" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7))" ]
"1000176" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000177" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000178" [label = "(<operator>.addition,v4 + v7)" ]
"1000182" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7))" ]
"1000183" [label = "(<operator>.cast,(_BYTE *)(v4 + v7))" ]
"1000184" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000185" [label = "(<operator>.addition,v4 + v7)" ]
"1000189" [label = "(<operator>.preDecrement,--v8)" ]
"1000191" [label = "(<operator>.preIncrement,++v7)" ]
"1000194" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000195" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000197" [label = "(<operator>.addition,v8 + 1)" ]
"1000203" [label = "(<operator>.equals,v10 == 255)" ]
"1000208" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000209" [label = "(<operator>.addition,v5 + v8)" ]
"1000214" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v9 + 1))" ]
"1000216" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 1))" ]
"1000217" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 1))" ]
"1000218" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000219" [label = "(<operator>.addition,v9 + 1)" ]
"1000222" [label = "(<operator>.assignment,v5 = v5 - v11 + v8 - 2)" ]
"1000224" [label = "(<operator>.subtraction,v5 - v11 + v8 - 2)" ]
"1000226" [label = "(<operator>.addition,v11 + v8 - 2)" ]
"1000228" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000232" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000237" [label = "(<operator>.equals,v10 == a2)" ]
"1000241" [label = "(<operator>.assignment,v14 = v4 - v8)" ]
"1000243" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000246" [label = "(log_option,log_option(\"option found\", v4 - v8, 255, 1))" ]
"1000248" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000253" [label = "(RETURN,return v14 + 2;,return v14 + 2;)" ]
"1000254" [label = "(<operator>.addition,v14 + 2)" ]
"1000258" [label = "(<operator>.logicalAnd,v10 == 52 && *(_BYTE *)(v9 + 1))" ]
"1000259" [label = "(<operator>.equals,v10 == 52)" ]
"1000262" [label = "(<operator>.indirection,*(_BYTE *)(v9 + 1))" ]
"1000263" [label = "(<operator>.cast,(_BYTE *)(v9 + 1))" ]
"1000264" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000265" [label = "(<operator>.addition,v9 + 1)" ]
"1000268" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v9 + 2))" ]
"1000270" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 2))" ]
"1000271" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 2))" ]
"1000272" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000273" [label = "(<operator>.addition,v9 + 2)" ]
"1000276" [label = "(<operator>.assignment,v4 = v4 + v11 - v8 + 2)" ]
"1000278" [label = "(<operator>.addition,v4 + v11 - v8 + 2)" ]
"1000280" [label = "(<operator>.subtraction,v11 - v8 + 2)" ]
"1000282" [label = "(<operator>.addition,v8 + 2)" ]
"1000286" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000291" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, 255, 1))" ]
"1000296" [label = "(RETURN,return 0;,return 0;)" ]
"1000299" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000300" [label = "(<operator>.and,v6 & 0x101)" ]
"1000305" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000308" [label = "(<operator>.assignment,v5 = 128)" ]
"1000311" [label = "(<operator>.assignment,v4 = v3)" ]
"1000317" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000318" [label = "(<operator>.and,v6 & 0x202)" ]
"1000323" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000326" [label = "(<operator>.assignment,v5 = 64)" ]
"1000329" [label = "(<operator>.assignment,v4 = v2)" ]
"1000334" [label = "(<operator>.assignment,v12 = 0)" ]
"1000338" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000339" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000340" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000343" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000346" [label = "(RETURN,return v12;,return v12;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000348" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000159" 
  "1000147" -> "1000300" 
  "1000147" -> "1000318" 
  "1000147" -> "1000334" 
  "1000159" -> "1000162" 
  "1000162" -> "1000170" 
  "1000162" -> "1000203" 
  "1000168" -> "1000177" 
  "1000170" -> "1000168" 
  "1000173" -> "1000184" 
  "1000175" -> "1000173" 
  "1000176" -> "1000175" 
  "1000177" -> "1000178" 
  "1000178" -> "1000176" 
  "1000182" -> "1000203" 
  "1000182" -> "1000300" 
  "1000182" -> "1000318" 
  "1000182" -> "1000334" 
  "1000182" -> "1000189" 
  "1000183" -> "1000182" 
  "1000184" -> "1000185" 
  "1000185" -> "1000183" 
  "1000189" -> "1000191" 
  "1000191" -> "1000197" 
  "1000194" -> "1000170" 
  "1000194" -> "1000203" 
  "1000194" -> "1000291" 
  "1000195" -> "1000194" 
  "1000197" -> "1000195" 
  "1000203" -> "1000300" 
  "1000203" -> "1000318" 
  "1000203" -> "1000334" 
  "1000203" -> "1000209" 
  "1000208" -> "1000291" 
  "1000208" -> "1000218" 
  "1000209" -> "1000208" 
  "1000214" -> "1000228" 
  "1000216" -> "1000214" 
  "1000217" -> "1000216" 
  "1000218" -> "1000219" 
  "1000219" -> "1000217" 
  "1000222" -> "1000232" 
  "1000224" -> "1000222" 
  "1000226" -> "1000224" 
  "1000228" -> "1000226" 
  "1000232" -> "1000291" 
  "1000232" -> "1000237" 
  "1000237" -> "1000243" 
  "1000237" -> "1000259" 
  "1000241" -> "1000248" 
  "1000243" -> "1000241" 
  "1000246" -> "1000254" 
  "1000248" -> "1000246" 
  "1000253" -> "1000348" 
  "1000254" -> "1000253" 
  "1000258" -> "1000272" 
  "1000258" -> "1000282" 
  "1000259" -> "1000264" 
  "1000259" -> "1000258" 
  "1000262" -> "1000258" 
  "1000263" -> "1000262" 
  "1000264" -> "1000265" 
  "1000265" -> "1000263" 
  "1000268" -> "1000282" 
  "1000270" -> "1000268" 
  "1000271" -> "1000270" 
  "1000272" -> "1000273" 
  "1000273" -> "1000271" 
  "1000276" -> "1000286" 
  "1000278" -> "1000276" 
  "1000280" -> "1000278" 
  "1000282" -> "1000280" 
  "1000286" -> "1000159" 
  "1000286" -> "1000300" 
  "1000286" -> "1000291" 
  "1000291" -> "1000296" 
  "1000296" -> "1000348" 
  "1000299" -> "1000305" 
  "1000299" -> "1000318" 
  "1000299" -> "1000334" 
  "1000300" -> "1000299" 
  "1000305" -> "1000308" 
  "1000308" -> "1000311" 
  "1000311" -> "1000159" 
  "1000311" -> "1000300" 
  "1000311" -> "1000318" 
  "1000311" -> "1000334" 
  "1000311" -> "1000159" 
  "1000311" -> "1000300" 
  "1000311" -> "1000318" 
  "1000317" -> "1000323" 
  "1000317" -> "1000334" 
  "1000318" -> "1000317" 
  "1000323" -> "1000326" 
  "1000326" -> "1000329" 
  "1000329" -> "1000159" 
  "1000329" -> "1000300" 
  "1000329" -> "1000318" 
  "1000329" -> "1000334" 
  "1000334" -> "1000340" 
  "1000338" -> "1000343" 
  "1000338" -> "1000346" 
  "1000339" -> "1000338" 
  "1000340" -> "1000339" 
  "1000343" -> "1000346" 
  "1000346" -> "1000348" 
  "1000113" -> "1000131" 
}
