digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000123" [label = "(<operator>.addition,a1 + 240)" ]
"1000126" [label = "(<operator>.assignment,v7 = 0)" ]
"1000130" [label = "(<operator>.assignment,i = 388)" ]
"1000133" [label = "(<operator>.assignment,i = 64)" ]
"1000143" [label = "(<operator>.assignment,v10 = *v6)" ]
"1000145" [label = "(<operator>.indirection,*v6)" ]
"1000148" [label = "(<operator>.logicalNot,!(_BYTE)v10)" ]
"1000149" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000150" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000153" [label = "(<operator>.preDecrement,--i)" ]
"1000155" [label = "(<operator>.preIncrement,++v6)" ]
"1000159" [label = "(<operator>.equals,(_BYTE)v10 == 0xFF)" ]
"1000160" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000161" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000166" [label = "(<operator>.logicalOr,i <= 1 || (v11 = v6[1] + 2, i -= v11, i < 0))" ]
"1000167" [label = "(<operator>.lessEqualsThan,i <= 1)" ]
"1000171" [label = "(<operator>.assignment,v11 = v6[1] + 2)" ]
"1000173" [label = "(<operator>.addition,v6[1] + 2)" ]
"1000174" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000179" [label = "(<operator>.assignmentMinus,i -= v11)" ]
"1000182" [label = "(<operator>.lessThan,i < 0)" ]
"1000187" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, i, v10, v7, a6))" ]
"1000188" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000189" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000197" [label = "(<operator>.assignment,a6 = (unsigned __int8)v10)" ]
"1000199" [label = "(<operator>.cast,(unsigned __int8)v10)" ]
"1000200" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000203" [label = "(<operator>.equals,(unsigned __int8)v10 == a2)" ]
"1000204" [label = "(<operator>.cast,(unsigned __int8)v10)" ]
"1000205" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000209" [label = "(log_option,log_option(\"option found\", v6))" ]
"1000212" [label = "(RETURN,return v6 + 2;,return v6 + 2;)" ]
"1000213" [label = "(<operator>.addition,v6 + 2)" ]
"1000217" [label = "(<operator>.logicalAnd,v11 > 2 && (_BYTE)v10 == 52)" ]
"1000218" [label = "(<operator>.greaterThan,v11 > 2)" ]
"1000221" [label = "(<operator>.equals,(_BYTE)v10 == 52)" ]
"1000222" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000223" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000227" [label = "(<operator>.assignment,v10 = v6[2])" ]
"1000229" [label = "(<operator>.indirectIndexAccess,v6[2])" ]
"1000232" [label = "(<operators>.assignmentOr,v7 |= v10)" ]
"1000235" [label = "(<operator>.assignmentPlus,v6 += v11)" ]
"1000240" [label = "(<operator>.lessEqualsThan,i <= 0)" ]
"1000245" [label = "(<operator>.notEquals,(v7 & 0x101) != 1)" ]
"1000246" [label = "(<operator>.and,v7 & 0x101)" ]
"1000251" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000254" [label = "(<operator>.assignment,v6 = a1 + 108)" ]
"1000256" [label = "(<operator>.addition,a1 + 108)" ]
"1000259" [label = "(<operator>.assignment,i = 128)" ]
"1000263" [label = "(<operator>.notEquals,(v7 & 0x202) != 2)" ]
"1000264" [label = "(<operator>.and,v7 & 0x202)" ]
"1000269" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000272" [label = "(<operator>.assignment,v6 = a1 + 44)" ]
"1000274" [label = "(<operator>.addition,a1 + 44)" ]
"1000279" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000280" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000281" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000285" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, i, v10, v7, a6))" ]
"1000286" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000287" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000295" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000297" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000126" 
  "1000123" -> "1000121" 
  "1000126" -> "1000130" 
  "1000130" -> "1000145" 
  "1000130" -> "1000246" 
  "1000130" -> "1000264" 
  "1000133" -> "1000145" 
  "1000133" -> "1000246" 
  "1000133" -> "1000264" 
  "1000143" -> "1000150" 
  "1000145" -> "1000143" 
  "1000148" -> "1000161" 
  "1000148" -> "1000153" 
  "1000149" -> "1000148" 
  "1000150" -> "1000149" 
  "1000153" -> "1000155" 
  "1000155" -> "1000240" 
  "1000159" -> "1000246" 
  "1000159" -> "1000264" 
  "1000159" -> "1000281" 
  "1000159" -> "1000167" 
  "1000160" -> "1000159" 
  "1000161" -> "1000160" 
  "1000166" -> "1000189" 
  "1000166" -> "1000200" 
  "1000167" -> "1000166" 
  "1000167" -> "1000174" 
  "1000171" -> "1000179" 
  "1000173" -> "1000171" 
  "1000174" -> "1000173" 
  "1000179" -> "1000182" 
  "1000182" -> "1000166" 
  "1000187" -> "1000200" 
  "1000188" -> "1000187" 
  "1000189" -> "1000188" 
  "1000197" -> "1000205" 
  "1000199" -> "1000197" 
  "1000200" -> "1000199" 
  "1000203" -> "1000209" 
  "1000203" -> "1000218" 
  "1000204" -> "1000203" 
  "1000205" -> "1000204" 
  "1000209" -> "1000213" 
  "1000212" -> "1000297" 
  "1000213" -> "1000212" 
  "1000217" -> "1000229" 
  "1000217" -> "1000235" 
  "1000218" -> "1000223" 
  "1000218" -> "1000217" 
  "1000221" -> "1000217" 
  "1000222" -> "1000221" 
  "1000223" -> "1000222" 
  "1000227" -> "1000232" 
  "1000229" -> "1000227" 
  "1000232" -> "1000235" 
  "1000235" -> "1000240" 
  "1000240" -> "1000145" 
  "1000240" -> "1000246" 
  "1000240" -> "1000189" 
  "1000245" -> "1000264" 
  "1000245" -> "1000281" 
  "1000245" -> "1000251" 
  "1000246" -> "1000245" 
  "1000251" -> "1000256" 
  "1000254" -> "1000259" 
  "1000256" -> "1000254" 
  "1000259" -> "1000145" 
  "1000259" -> "1000246" 
  "1000259" -> "1000264" 
  "1000263" -> "1000281" 
  "1000263" -> "1000269" 
  "1000264" -> "1000263" 
  "1000269" -> "1000274" 
  "1000272" -> "1000133" 
  "1000274" -> "1000272" 
  "1000279" -> "1000287" 
  "1000279" -> "1000295" 
  "1000280" -> "1000279" 
  "1000281" -> "1000280" 
  "1000285" -> "1000295" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000295" -> "1000297" 
  "1000107" -> "1000123" 
}
