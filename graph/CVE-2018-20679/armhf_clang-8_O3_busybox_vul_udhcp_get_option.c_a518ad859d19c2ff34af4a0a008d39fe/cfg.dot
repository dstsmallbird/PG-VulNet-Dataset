digraph udhcp_get_option {  
"1000131" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000133" [label = "(<operator>.addition,a1 + 108)" ]
"1000136" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000138" [label = "(<operator>.addition,a1 + 44)" ]
"1000141" [label = "(<operator>.assignment,v5 = a1 + 240)" ]
"1000143" [label = "(<operator>.addition,a1 + 240)" ]
"1000146" [label = "(<operator>.assignment,v6 = 388)" ]
"1000149" [label = "(<operator>.assignment,v7 = 0)" ]
"1000161" [label = "(<operator>.assignment,v8 = 2)" ]
"1000164" [label = "(<operator>.assignment,v9 = 0)" ]
"1000170" [label = "(<operator>.assignment,v10 = v5 + v8)" ]
"1000172" [label = "(<operator>.addition,v5 + v8)" ]
"1000175" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000177" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000178" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000179" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000180" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000182" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000186" [label = "(<operator>.indirection,*(_BYTE *)(v5 + v8 - 2))" ]
"1000187" [label = "(<operator>.cast,(_BYTE *)(v5 + v8 - 2))" ]
"1000188" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000189" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000191" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000195" [label = "(<operator>.preDecrement,--v9)" ]
"1000197" [label = "(<operator>.preIncrement,++v8)" ]
"1000200" [label = "(<operator>.lessThan,v6 + v9 + 1 < 2)" ]
"1000201" [label = "(<operator>.addition,v6 + v9 + 1)" ]
"1000203" [label = "(<operator>.addition,v9 + 1)" ]
"1000209" [label = "(<operator>.equals,v11 == 255)" ]
"1000213" [label = "(<operator>.assignment,v12 = v6 + v9)" ]
"1000215" [label = "(<operator>.addition,v6 + v9)" ]
"1000218" [label = "(<operator>.assignment,v13 = v6 + v9 < 2)" ]
"1000220" [label = "(<operator>.lessThan,v6 + v9 < 2)" ]
"1000221" [label = "(<operator>.addition,v6 + v9)" ]
"1000226" [label = "(<operator>.greaterEqualsThan,v6 + v9 >= 2)" ]
"1000227" [label = "(<operator>.addition,v6 + v9)" ]
"1000232" [label = "(<operator>.assignment,v2 = v5 - v9)" ]
"1000234" [label = "(<operator>.subtraction,v5 - v9)" ]
"1000237" [label = "(<operator>.assignment,v12 = *(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000239" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000240" [label = "(<operator>.cast,(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000241" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000242" [label = "(<operator>.subtraction,v5 - v9 + 1)" ]
"1000244" [label = "(<operator>.addition,v9 + 1)" ]
"1000247" [label = "(<operator>.assignment,v6 = v6 - v12 + v9 - 2)" ]
"1000249" [label = "(<operator>.subtraction,v6 - v12 + v9 - 2)" ]
"1000251" [label = "(<operator>.addition,v12 + v9 - 2)" ]
"1000253" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000256" [label = "(<operator>.assignment,v13 = v6 < 0)" ]
"1000258" [label = "(<operator>.lessThan,v6 < 0)" ]
"1000265" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000267" [label = "(RETURN,return 0;,return 0;)" ]
"1000270" [label = "(<operator>.equals,v11 == a2)" ]
"1000275" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000276" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000277" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000281" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v15, v2 + 2) = 0)" ]
"1000282" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v15, v2 + 2))" ]
"1000283" [label = "(<operator>.cast,(_BYTE *)bin2hex(v15, v2 + 2))" ]
"1000284" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000285" [label = "(bin2hex,bin2hex(v15, v2 + 2))" ]
"1000287" [label = "(<operator>.addition,v2 + 2)" ]
"1000291" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v10 - 2), v15))" ]
"1000294" [label = "(<operator>.indirection,*(unsigned __int8 *)(v10 - 2))" ]
"1000295" [label = "(<operator>.cast,(unsigned __int8 *)(v10 - 2))" ]
"1000296" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000297" [label = "(<operator>.subtraction,v10 - 2)" ]
"1000301" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000302" [label = "(<operator>.addition,v2 + 2)" ]
"1000306" [label = "(<operator>.equals,v11 == 52)" ]
"1000312" [label = "(<operators>.assignmentOr,v7 |= *(unsigned __int8 *)(v5 + v8))" ]
"1000314" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8))" ]
"1000315" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8))" ]
"1000316" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000317" [label = "(<operator>.addition,v5 + v8)" ]
"1000320" [label = "(<operator>.assignment,v5 = v5 + v12 - v9 + 2)" ]
"1000322" [label = "(<operator>.addition,v5 + v12 - v9 + 2)" ]
"1000324" [label = "(<operator>.subtraction,v12 - v9 + 2)" ]
"1000326" [label = "(<operator>.addition,v9 + 2)" ]
"1000330" [label = "(<operator>.lessThan,v6 < 1)" ]
"1000335" [label = "(<operator>.equals,(v7 & 0x101) == 1)" ]
"1000336" [label = "(<operator>.and,v7 & 0x101)" ]
"1000341" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000344" [label = "(<operator>.assignment,v6 = 128)" ]
"1000347" [label = "(<operator>.assignment,v5 = v3)" ]
"1000353" [label = "(<operator>.equals,(v7 & 0x202) == 2)" ]
"1000354" [label = "(<operator>.and,v7 & 0x202)" ]
"1000359" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000362" [label = "(<operator>.assignment,v6 = 64)" ]
"1000365" [label = "(<operator>.assignment,v5 = v4)" ]
"1000371" [label = "(<operator>.lessThan,(unsigned int)dhcp_verbose < 3)" ]
"1000372" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000373" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000376" [label = "(RETURN,return 0;,return 0;)" ]
"1000378" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000381" [label = "(RETURN,return 0;,return 0;)" ]
"1000114" [label = "(METHOD,udhcp_get_option)" ]
"1000383" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000131" -> "1000138" 
  "1000133" -> "1000131" 
  "1000136" -> "1000143" 
  "1000138" -> "1000136" 
  "1000141" -> "1000146" 
  "1000143" -> "1000141" 
  "1000146" -> "1000149" 
  "1000149" -> "1000373" 
  "1000149" -> "1000161" 
  "1000149" -> "1000336" 
  "1000149" -> "1000354" 
  "1000161" -> "1000164" 
  "1000164" -> "1000172" 
  "1000164" -> "1000209" 
  "1000170" -> "1000179" 
  "1000172" -> "1000170" 
  "1000175" -> "1000188" 
  "1000177" -> "1000175" 
  "1000178" -> "1000177" 
  "1000179" -> "1000182" 
  "1000180" -> "1000178" 
  "1000182" -> "1000180" 
  "1000186" -> "1000373" 
  "1000186" -> "1000209" 
  "1000186" -> "1000336" 
  "1000186" -> "1000354" 
  "1000186" -> "1000195" 
  "1000187" -> "1000186" 
  "1000188" -> "1000191" 
  "1000189" -> "1000187" 
  "1000191" -> "1000189" 
  "1000195" -> "1000197" 
  "1000197" -> "1000203" 
  "1000200" -> "1000172" 
  "1000200" -> "1000209" 
  "1000200" -> "1000265" 
  "1000201" -> "1000200" 
  "1000203" -> "1000201" 
  "1000209" -> "1000373" 
  "1000209" -> "1000336" 
  "1000209" -> "1000354" 
  "1000209" -> "1000215" 
  "1000213" -> "1000221" 
  "1000215" -> "1000213" 
  "1000218" -> "1000227" 
  "1000220" -> "1000218" 
  "1000221" -> "1000220" 
  "1000226" -> "1000234" 
  "1000226" -> "1000265" 
  "1000226" -> "1000270" 
  "1000227" -> "1000226" 
  "1000232" -> "1000241" 
  "1000234" -> "1000232" 
  "1000237" -> "1000253" 
  "1000239" -> "1000237" 
  "1000240" -> "1000239" 
  "1000241" -> "1000244" 
  "1000242" -> "1000240" 
  "1000244" -> "1000242" 
  "1000247" -> "1000258" 
  "1000249" -> "1000247" 
  "1000251" -> "1000249" 
  "1000253" -> "1000251" 
  "1000256" -> "1000265" 
  "1000256" -> "1000270" 
  "1000258" -> "1000256" 
  "1000265" -> "1000267" 
  "1000267" -> "1000383" 
  "1000270" -> "1000277" 
  "1000270" -> "1000306" 
  "1000275" -> "1000284" 
  "1000275" -> "1000302" 
  "1000276" -> "1000275" 
  "1000277" -> "1000276" 
  "1000281" -> "1000296" 
  "1000282" -> "1000281" 
  "1000283" -> "1000282" 
  "1000284" -> "1000287" 
  "1000285" -> "1000283" 
  "1000287" -> "1000285" 
  "1000291" -> "1000302" 
  "1000294" -> "1000291" 
  "1000295" -> "1000294" 
  "1000296" -> "1000297" 
  "1000297" -> "1000295" 
  "1000301" -> "1000383" 
  "1000302" -> "1000301" 
  "1000306" -> "1000316" 
  "1000306" -> "1000326" 
  "1000306" -> "1000326" 
  "1000312" -> "1000326" 
  "1000314" -> "1000312" 
  "1000315" -> "1000314" 
  "1000316" -> "1000317" 
  "1000317" -> "1000315" 
  "1000320" -> "1000330" 
  "1000322" -> "1000320" 
  "1000324" -> "1000322" 
  "1000326" -> "1000324" 
  "1000330" -> "1000161" 
  "1000330" -> "1000336" 
  "1000330" -> "1000265" 
  "1000335" -> "1000341" 
  "1000335" -> "1000373" 
  "1000335" -> "1000354" 
  "1000336" -> "1000335" 
  "1000341" -> "1000344" 
  "1000344" -> "1000347" 
  "1000347" -> "1000373" 
  "1000347" -> "1000161" 
  "1000347" -> "1000336" 
  "1000347" -> "1000354" 
  "1000347" -> "1000161" 
  "1000347" -> "1000336" 
  "1000347" -> "1000354" 
  "1000353" -> "1000359" 
  "1000353" -> "1000373" 
  "1000354" -> "1000353" 
  "1000359" -> "1000362" 
  "1000362" -> "1000365" 
  "1000365" -> "1000373" 
  "1000365" -> "1000161" 
  "1000365" -> "1000336" 
  "1000365" -> "1000354" 
  "1000371" -> "1000376" 
  "1000371" -> "1000378" 
  "1000372" -> "1000371" 
  "1000373" -> "1000372" 
  "1000376" -> "1000383" 
  "1000378" -> "1000381" 
  "1000381" -> "1000383" 
  "1000114" -> "1000133" 
}
