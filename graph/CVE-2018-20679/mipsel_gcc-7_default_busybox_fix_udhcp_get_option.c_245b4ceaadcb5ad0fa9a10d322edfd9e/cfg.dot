digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v2 = 0)" ]
"1000124" [label = "(<operator>.assignment,v3 = 388)" ]
"1000127" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000129" [label = "(<operator>.addition,a1 + 240)" ]
"1000138" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000140" [label = "(<operator>.indirection,*v4)" ]
"1000143" [label = "(<operator>.indirection,*v4)" ]
"1000146" [label = "(<operator>.preDecrement,--v3)" ]
"1000148" [label = "(<operator>.preIncrement,++v4)" ]
"1000152" [label = "(<operator>.logicalNot,!v3)" ]
"1000156" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000160" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000162" [label = "(<operator>.addition,a1 + 108)" ]
"1000166" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000167" [label = "(<operator>.and,v2 & 0x101)" ]
"1000172" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000175" [label = "(<operator>.assignment,v3 = 128)" ]
"1000180" [label = "(<operator>.assignment,v8 = (v2 & 0x202) != 2)" ]
"1000182" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000183" [label = "(<operator>.and,v2 & 0x202)" ]
"1000187" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000193" [label = "(<operator>.assignment,v6 = 0)" ]
"1000197" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000198" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000199" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000202" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000205" [label = "(RETURN,return v6;,return v6;)" ]
"1000207" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000209" [label = "(<operator>.addition,a1 + 44)" ]
"1000212" [label = "(<operator>.assignment,v3 = 64)" ]
"1000216" [label = "(<operator>.equals,v3 == 1)" ]
"1000220" [label = "(<operator>.assignment,v9 = v4[1] + 2)" ]
"1000222" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000223" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000227" [label = "(<operator>.assignmentMinus,v3 -= v9)" ]
"1000231" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000236" [label = "(<operator>.notEquals,v5 != a2)" ]
"1000241" [label = "(<operator>.logicalAnd,v5 == 52 && v4[1])" ]
"1000242" [label = "(<operator>.equals,v5 == 52)" ]
"1000245" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000248" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000250" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000253" [label = "(<operator>.assignmentPlus,v4 += v9)" ]
"1000258" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000259" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000264" [label = "(<operator>.assignment,v6 = 0)" ]
"1000267" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000269" [label = "(RETURN,return v6;,return v6;)" ]
"1000271" [label = "(<operator>.assignment,v10 = v4)" ]
"1000274" [label = "(<operator>.assignment,v6 = v4 + 2)" ]
"1000276" [label = "(<operator>.addition,v4 + 2)" ]
"1000279" [label = "(log_option,log_option(\"option found\", v10))" ]
"1000282" [label = "(RETURN,return v6;,return v6;)" ]
"1000109" [label = "(METHOD,udhcp_get_option)" ]
"1000284" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000124" 
  "1000124" -> "1000129" 
  "1000127" -> "1000140" 
  "1000127" -> "1000156" 
  "1000127" -> "1000216" 
  "1000129" -> "1000127" 
  "1000138" -> "1000143" 
  "1000140" -> "1000138" 
  "1000143" -> "1000156" 
  "1000143" -> "1000216" 
  "1000143" -> "1000146" 
  "1000146" -> "1000148" 
  "1000148" -> "1000152" 
  "1000152" -> "1000140" 
  "1000152" -> "1000156" 
  "1000152" -> "1000264" 
  "1000156" -> "1000216" 
  "1000156" -> "1000162" 
  "1000160" -> "1000167" 
  "1000162" -> "1000160" 
  "1000166" -> "1000172" 
  "1000166" -> "1000183" 
  "1000167" -> "1000166" 
  "1000172" -> "1000175" 
  "1000175" -> "1000140" 
  "1000175" -> "1000156" 
  "1000175" -> "1000216" 
  "1000180" -> "1000187" 
  "1000182" -> "1000180" 
  "1000183" -> "1000182" 
  "1000187" -> "1000193" 
  "1000187" -> "1000209" 
  "1000193" -> "1000199" 
  "1000197" -> "1000202" 
  "1000197" -> "1000205" 
  "1000198" -> "1000197" 
  "1000199" -> "1000198" 
  "1000202" -> "1000205" 
  "1000205" -> "1000284" 
  "1000207" -> "1000212" 
  "1000209" -> "1000207" 
  "1000212" -> "1000140" 
  "1000212" -> "1000156" 
  "1000212" -> "1000216" 
  "1000216" -> "1000264" 
  "1000216" -> "1000223" 
  "1000220" -> "1000227" 
  "1000222" -> "1000220" 
  "1000223" -> "1000222" 
  "1000227" -> "1000231" 
  "1000231" -> "1000264" 
  "1000231" -> "1000236" 
  "1000236" -> "1000242" 
  "1000236" -> "1000259" 
  "1000241" -> "1000250" 
  "1000241" -> "1000253" 
  "1000242" -> "1000241" 
  "1000242" -> "1000245" 
  "1000245" -> "1000241" 
  "1000248" -> "1000253" 
  "1000250" -> "1000248" 
  "1000253" -> "1000152" 
  "1000258" -> "1000264" 
  "1000258" -> "1000271" 
  "1000259" -> "1000258" 
  "1000264" -> "1000267" 
  "1000267" -> "1000269" 
  "1000269" -> "1000284" 
  "1000271" -> "1000276" 
  "1000274" -> "1000279" 
  "1000276" -> "1000274" 
  "1000279" -> "1000282" 
  "1000282" -> "1000284" 
  "1000109" -> "1000121" 
}
