digraph udhcp_get_option {  
"1000131" [label = "(<operator>.assignment,v3 = a1 + 108)" ]
"1000133" [label = "(<operator>.addition,a1 + 108)" ]
"1000136" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000138" [label = "(<operator>.addition,a1 + 44)" ]
"1000141" [label = "(<operator>.assignment,v5 = a1 + 240)" ]
"1000143" [label = "(<operator>.addition,a1 + 240)" ]
"1000146" [label = "(<operator>.assignment,v6 = 388)" ]
"1000149" [label = "(<operator>.assignment,v7 = 0)" ]
"1000155" [label = "(<operator>.assignment,v8 = 2)" ]
"1000158" [label = "(<operator>.assignment,v9 = 0)" ]
"1000164" [label = "(<operator>.assignment,v10 = v5 + v8)" ]
"1000166" [label = "(<operator>.addition,v5 + v8)" ]
"1000169" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000171" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000172" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8 - 2))" ]
"1000173" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000174" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000176" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000180" [label = "(<operator>.indirection,*(_BYTE *)(v5 + v8 - 2))" ]
"1000181" [label = "(<operator>.cast,(_BYTE *)(v5 + v8 - 2))" ]
"1000182" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000183" [label = "(<operator>.addition,v5 + v8 - 2)" ]
"1000185" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000189" [label = "(<operator>.preDecrement,--v9)" ]
"1000191" [label = "(<operator>.preIncrement,++v8)" ]
"1000194" [label = "(<operator>.lessThan,v6 + v9 + 1 < 2)" ]
"1000195" [label = "(<operator>.addition,v6 + v9 + 1)" ]
"1000197" [label = "(<operator>.addition,v9 + 1)" ]
"1000203" [label = "(<operator>.equals,v11 == 255)" ]
"1000208" [label = "(<operator>.equals,(v7 & 0x101) == 1)" ]
"1000209" [label = "(<operator>.and,v7 & 0x101)" ]
"1000214" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000217" [label = "(<operator>.assignment,v6 = 128)" ]
"1000220" [label = "(<operator>.assignment,v5 = v3)" ]
"1000225" [label = "(<operator>.equals,(v7 & 0x202) == 2)" ]
"1000226" [label = "(<operator>.and,v7 & 0x202)" ]
"1000231" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000234" [label = "(<operator>.assignment,v6 = 64)" ]
"1000237" [label = "(<operator>.assignment,v5 = v4)" ]
"1000242" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000243" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000244" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000248" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000251" [label = "(RETURN,return 0;,return 0;)" ]
"1000253" [label = "(RETURN,return 0;,return 0;)" ]
"1000255" [label = "(<operator>.assignment,v12 = v6 + v9)" ]
"1000257" [label = "(<operator>.addition,v6 + v9)" ]
"1000260" [label = "(<operator>.assignment,v13 = v6 + v9 < 2)" ]
"1000262" [label = "(<operator>.lessThan,v6 + v9 < 2)" ]
"1000263" [label = "(<operator>.addition,v6 + v9)" ]
"1000268" [label = "(<operator>.greaterEqualsThan,v6 + v9 >= 2)" ]
"1000269" [label = "(<operator>.addition,v6 + v9)" ]
"1000274" [label = "(<operator>.assignment,v2 = v5 - v9)" ]
"1000276" [label = "(<operator>.subtraction,v5 - v9)" ]
"1000279" [label = "(<operator>.assignment,v12 = *(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000281" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000282" [label = "(<operator>.cast,(unsigned __int8 *)(v5 - v9 + 1))" ]
"1000283" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000284" [label = "(<operator>.subtraction,v5 - v9 + 1)" ]
"1000286" [label = "(<operator>.addition,v9 + 1)" ]
"1000289" [label = "(<operator>.assignment,v6 = v6 - v12 + v9 - 2)" ]
"1000291" [label = "(<operator>.subtraction,v6 - v12 + v9 - 2)" ]
"1000293" [label = "(<operator>.addition,v12 + v9 - 2)" ]
"1000295" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000298" [label = "(<operator>.assignment,v13 = v6 < 0)" ]
"1000300" [label = "(<operator>.lessThan,v6 < 0)" ]
"1000307" [label = "(<operator>.equals,v11 == a2)" ]
"1000312" [label = "(<operator>.equals,v11 == 52)" ]
"1000318" [label = "(<operators>.assignmentOr,v7 |= *(unsigned __int8 *)(v5 + v8))" ]
"1000320" [label = "(<operator>.indirection,*(unsigned __int8 *)(v5 + v8))" ]
"1000321" [label = "(<operator>.cast,(unsigned __int8 *)(v5 + v8))" ]
"1000322" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000323" [label = "(<operator>.addition,v5 + v8)" ]
"1000326" [label = "(<operator>.assignment,v5 = v5 + v12 - v9 + 2)" ]
"1000328" [label = "(<operator>.addition,v5 + v12 - v9 + 2)" ]
"1000330" [label = "(<operator>.subtraction,v12 - v9 + 2)" ]
"1000332" [label = "(<operator>.addition,v9 + 2)" ]
"1000336" [label = "(<operator>.lessThan,v6 < 1)" ]
"1000341" [label = "(<operator>.logicalNot,!v12)" ]
"1000345" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000347" [label = "(RETURN,return 0;,return 0;)" ]
"1000350" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000351" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000352" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000356" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v15, v2 + 2) = 0)" ]
"1000357" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v15, v2 + 2))" ]
"1000358" [label = "(<operator>.cast,(_BYTE *)bin2hex(v15, v2 + 2))" ]
"1000359" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000360" [label = "(bin2hex,bin2hex(v15, v2 + 2))" ]
"1000362" [label = "(<operator>.addition,v2 + 2)" ]
"1000366" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v10 - 2), v15))" ]
"1000369" [label = "(<operator>.indirection,*(unsigned __int8 *)(v10 - 2))" ]
"1000370" [label = "(<operator>.cast,(unsigned __int8 *)(v10 - 2))" ]
"1000371" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000372" [label = "(<operator>.subtraction,v10 - 2)" ]
"1000376" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000377" [label = "(<operator>.addition,v2 + 2)" ]
"1000114" [label = "(METHOD,udhcp_get_option)" ]
"1000380" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000131" -> "1000138" 
  "1000133" -> "1000131" 
  "1000136" -> "1000143" 
  "1000138" -> "1000136" 
  "1000141" -> "1000146" 
  "1000143" -> "1000141" 
  "1000146" -> "1000149" 
  "1000149" -> "1000155" 
  "1000149" -> "1000341" 
  "1000155" -> "1000158" 
  "1000158" -> "1000166" 
  "1000158" -> "1000203" 
  "1000164" -> "1000173" 
  "1000166" -> "1000164" 
  "1000169" -> "1000182" 
  "1000171" -> "1000169" 
  "1000172" -> "1000171" 
  "1000173" -> "1000176" 
  "1000174" -> "1000172" 
  "1000176" -> "1000174" 
  "1000180" -> "1000203" 
  "1000180" -> "1000341" 
  "1000180" -> "1000189" 
  "1000181" -> "1000180" 
  "1000182" -> "1000185" 
  "1000183" -> "1000181" 
  "1000185" -> "1000183" 
  "1000189" -> "1000191" 
  "1000191" -> "1000197" 
  "1000194" -> "1000166" 
  "1000194" -> "1000203" 
  "1000194" -> "1000345" 
  "1000195" -> "1000194" 
  "1000197" -> "1000195" 
  "1000203" -> "1000209" 
  "1000203" -> "1000257" 
  "1000208" -> "1000214" 
  "1000208" -> "1000226" 
  "1000209" -> "1000208" 
  "1000214" -> "1000217" 
  "1000217" -> "1000220" 
  "1000220" -> "1000155" 
  "1000220" -> "1000341" 
  "1000225" -> "1000244" 
  "1000225" -> "1000231" 
  "1000226" -> "1000225" 
  "1000231" -> "1000234" 
  "1000234" -> "1000237" 
  "1000237" -> "1000155" 
  "1000237" -> "1000341" 
  "1000242" -> "1000248" 
  "1000242" -> "1000253" 
  "1000243" -> "1000242" 
  "1000244" -> "1000243" 
  "1000248" -> "1000251" 
  "1000251" -> "1000380" 
  "1000253" -> "1000380" 
  "1000255" -> "1000263" 
  "1000257" -> "1000255" 
  "1000260" -> "1000269" 
  "1000262" -> "1000260" 
  "1000263" -> "1000262" 
  "1000268" -> "1000276" 
  "1000268" -> "1000345" 
  "1000268" -> "1000307" 
  "1000269" -> "1000268" 
  "1000274" -> "1000283" 
  "1000276" -> "1000274" 
  "1000279" -> "1000295" 
  "1000281" -> "1000279" 
  "1000282" -> "1000281" 
  "1000283" -> "1000286" 
  "1000284" -> "1000282" 
  "1000286" -> "1000284" 
  "1000289" -> "1000300" 
  "1000291" -> "1000289" 
  "1000293" -> "1000291" 
  "1000295" -> "1000293" 
  "1000298" -> "1000345" 
  "1000298" -> "1000307" 
  "1000300" -> "1000298" 
  "1000307" -> "1000341" 
  "1000307" -> "1000312" 
  "1000312" -> "1000322" 
  "1000312" -> "1000332" 
  "1000312" -> "1000332" 
  "1000318" -> "1000332" 
  "1000320" -> "1000318" 
  "1000321" -> "1000320" 
  "1000322" -> "1000323" 
  "1000323" -> "1000321" 
  "1000326" -> "1000336" 
  "1000328" -> "1000326" 
  "1000330" -> "1000328" 
  "1000332" -> "1000330" 
  "1000336" -> "1000155" 
  "1000336" -> "1000341" 
  "1000336" -> "1000345" 
  "1000341" -> "1000352" 
  "1000341" -> "1000345" 
  "1000345" -> "1000347" 
  "1000347" -> "1000380" 
  "1000350" -> "1000359" 
  "1000350" -> "1000377" 
  "1000351" -> "1000350" 
  "1000352" -> "1000351" 
  "1000356" -> "1000371" 
  "1000357" -> "1000356" 
  "1000358" -> "1000357" 
  "1000359" -> "1000362" 
  "1000360" -> "1000358" 
  "1000362" -> "1000360" 
  "1000366" -> "1000377" 
  "1000369" -> "1000366" 
  "1000370" -> "1000369" 
  "1000371" -> "1000372" 
  "1000372" -> "1000370" 
  "1000376" -> "1000380" 
  "1000377" -> "1000376" 
  "1000114" -> "1000133" 
}
