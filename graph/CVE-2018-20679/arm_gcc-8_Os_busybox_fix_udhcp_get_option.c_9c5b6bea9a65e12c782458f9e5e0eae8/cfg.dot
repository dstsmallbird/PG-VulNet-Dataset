digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = 0)" ]
"1000120" [label = "(<operator>.assignment,v3 = 388)" ]
"1000123" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000125" [label = "(<operator>.addition,a1 + 240)" ]
"1000134" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000136" [label = "(<operator>.indirection,*v4)" ]
"1000139" [label = "(<operator>.indirection,*v4)" ]
"1000142" [label = "(<operator>.preDecrement,--v3)" ]
"1000144" [label = "(<operator>.preIncrement,++v4)" ]
"1000148" [label = "(<operator>.logicalNot,!v3)" ]
"1000152" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000157" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000158" [label = "(<operator>.and,v2 & 0x101)" ]
"1000163" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000166" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000168" [label = "(<operator>.addition,a1 + 108)" ]
"1000171" [label = "(<operator>.assignment,v3 = 128)" ]
"1000177" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000178" [label = "(<operator>.and,v2 & 0x202)" ]
"1000184" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000185" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000186" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000189" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000192" [label = "(RETURN,return 0;,return 0;)" ]
"1000194" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000197" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000199" [label = "(<operator>.addition,a1 + 44)" ]
"1000202" [label = "(<operator>.assignment,v3 = 64)" ]
"1000206" [label = "(<operator>.equals,v3 == 1)" ]
"1000210" [label = "(<operator>.assignment,v6 = v4[1] + 2)" ]
"1000212" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000213" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000217" [label = "(<operator>.assignmentMinus,v3 -= v6)" ]
"1000221" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000226" [label = "(<operator>.notEquals,v5 != a2)" ]
"1000230" [label = "(<operator>.assignment,v8 = v6 != 2)" ]
"1000232" [label = "(<operator>.notEquals,v6 != 2)" ]
"1000236" [label = "(<operator>.notEquals,v5 != 52)" ]
"1000239" [label = "(<operator>.assignment,v8 = 0)" ]
"1000244" [label = "(<operator>.assignment,v5 = v4[2])" ]
"1000246" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000249" [label = "(<operator>.assignmentPlus,v4 += v6)" ]
"1000254" [label = "(<operators>.assignmentOr,v2 |= v5)" ]
"1000259" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000260" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000265" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, v2))" ]
"1000269" [label = "(RETURN,return 0;,return 0;)" ]
"1000272" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000273" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000274" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000277" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4, v2))" ]
"1000281" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000282" [label = "(<operator>.addition,v4 + 2)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000285" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000120" 
  "1000120" -> "1000125" 
  "1000123" -> "1000136" 
  "1000123" -> "1000152" 
  "1000123" -> "1000206" 
  "1000125" -> "1000123" 
  "1000134" -> "1000139" 
  "1000136" -> "1000134" 
  "1000139" -> "1000152" 
  "1000139" -> "1000206" 
  "1000139" -> "1000142" 
  "1000142" -> "1000144" 
  "1000144" -> "1000148" 
  "1000148" -> "1000136" 
  "1000148" -> "1000152" 
  "1000148" -> "1000265" 
  "1000152" -> "1000206" 
  "1000152" -> "1000158" 
  "1000157" -> "1000163" 
  "1000157" -> "1000178" 
  "1000158" -> "1000157" 
  "1000163" -> "1000168" 
  "1000166" -> "1000171" 
  "1000168" -> "1000166" 
  "1000171" -> "1000136" 
  "1000171" -> "1000152" 
  "1000171" -> "1000206" 
  "1000177" -> "1000186" 
  "1000177" -> "1000194" 
  "1000178" -> "1000177" 
  "1000184" -> "1000189" 
  "1000184" -> "1000192" 
  "1000185" -> "1000184" 
  "1000186" -> "1000185" 
  "1000189" -> "1000192" 
  "1000192" -> "1000285" 
  "1000194" -> "1000199" 
  "1000197" -> "1000202" 
  "1000199" -> "1000197" 
  "1000202" -> "1000136" 
  "1000202" -> "1000152" 
  "1000202" -> "1000206" 
  "1000206" -> "1000265" 
  "1000206" -> "1000213" 
  "1000210" -> "1000217" 
  "1000212" -> "1000210" 
  "1000213" -> "1000212" 
  "1000217" -> "1000221" 
  "1000221" -> "1000265" 
  "1000221" -> "1000226" 
  "1000226" -> "1000232" 
  "1000226" -> "1000260" 
  "1000230" -> "1000236" 
  "1000232" -> "1000230" 
  "1000236" -> "1000239" 
  "1000236" -> "1000246" 
  "1000236" -> "1000249" 
  "1000239" -> "1000246" 
  "1000239" -> "1000249" 
  "1000244" -> "1000249" 
  "1000246" -> "1000244" 
  "1000249" -> "1000254" 
  "1000249" -> "1000148" 
  "1000254" -> "1000148" 
  "1000259" -> "1000274" 
  "1000259" -> "1000265" 
  "1000260" -> "1000259" 
  "1000265" -> "1000269" 
  "1000269" -> "1000285" 
  "1000272" -> "1000277" 
  "1000272" -> "1000282" 
  "1000273" -> "1000272" 
  "1000274" -> "1000273" 
  "1000277" -> "1000282" 
  "1000281" -> "1000285" 
  "1000282" -> "1000281" 
  "1000107" -> "1000117" 
}
