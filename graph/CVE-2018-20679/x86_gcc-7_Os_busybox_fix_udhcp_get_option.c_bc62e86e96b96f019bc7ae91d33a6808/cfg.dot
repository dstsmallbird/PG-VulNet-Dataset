digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000119" [label = "(<operator>.addition,a1 + 240)" ]
"1000122" [label = "(<operator>.assignment,v3 = 0)" ]
"1000125" [label = "(<operator>.assignment,v4 = 388)" ]
"1000134" [label = "(<operator>.assignment,v9 = *v2)" ]
"1000136" [label = "(<operator>.indirection,*v2)" ]
"1000139" [label = "(<operator>.indirection,*v2)" ]
"1000142" [label = "(<operator>.preDecrement,--v4)" ]
"1000144" [label = "(<operator>.preIncrement,++v2)" ]
"1000148" [label = "(<operator>.logicalNot,!v4)" ]
"1000152" [label = "(<operator>.notEquals,v9 != 0xFF)" ]
"1000157" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000158" [label = "(<operator>.and,v3 & 0x101)" ]
"1000163" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000166" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000168" [label = "(<operator>.addition,a1 + 108)" ]
"1000171" [label = "(<operator>.assignment,v4 = 128)" ]
"1000177" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000178" [label = "(<operator>.and,v3 & 0x202)" ]
"1000183" [label = "(<operator>.assignment,v5 = 0)" ]
"1000187" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000188" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000189" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000192" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\"))" ]
"1000194" [label = "(RETURN,return (unsigned __int8 *)v5;,return (unsigned __int8 *)v5;)" ]
"1000195" [label = "(<operator>.cast,(unsigned __int8 *)v5)" ]
"1000196" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000198" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000201" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000203" [label = "(<operator>.addition,a1 + 44)" ]
"1000206" [label = "(<operator>.assignment,v4 = 64)" ]
"1000210" [label = "(<operator>.equals,v4 == 1)" ]
"1000214" [label = "(<operator>.assignment,v8 = v2[1])" ]
"1000216" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000219" [label = "(<operator>.assignmentMinus,v4 -= v8 + 2)" ]
"1000221" [label = "(<operator>.addition,v8 + 2)" ]
"1000225" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000230" [label = "(<operator>.notEquals,v9 != a2)" ]
"1000235" [label = "(<operator>.logicalAnd,v8 && v9 == 52)" ]
"1000237" [label = "(<operator>.equals,v9 == 52)" ]
"1000240" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000242" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000245" [label = "(<operator>.assignmentPlus,v2 += v8 + 2)" ]
"1000247" [label = "(<operator>.addition,v8 + 2)" ]
"1000252" [label = "(<operator>.logicalNot,!v8)" ]
"1000256" [label = "(<operator>.assignment,v5 = 0)" ]
"1000259" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000261" [label = "(RETURN,return (unsigned __int8 *)v5;,return (unsigned __int8 *)v5;)" ]
"1000262" [label = "(<operator>.cast,(unsigned __int8 *)v5)" ]
"1000263" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000266" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000267" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000268" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000271" [label = "(log_option_part_0,log_option_part_0())" ]
"1000272" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000273" [label = "(<operator>.addition,v2 + 2)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000276" [label = "(METHOD_RETURN,__usercall)" ]
  "1000117" -> "1000122" 
  "1000119" -> "1000117" 
  "1000122" -> "1000125" 
  "1000125" -> "1000136" 
  "1000125" -> "1000152" 
  "1000125" -> "1000210" 
  "1000134" -> "1000139" 
  "1000136" -> "1000134" 
  "1000139" -> "1000152" 
  "1000139" -> "1000210" 
  "1000139" -> "1000142" 
  "1000142" -> "1000144" 
  "1000144" -> "1000148" 
  "1000148" -> "1000136" 
  "1000148" -> "1000152" 
  "1000148" -> "1000256" 
  "1000152" -> "1000210" 
  "1000152" -> "1000158" 
  "1000157" -> "1000163" 
  "1000157" -> "1000178" 
  "1000158" -> "1000157" 
  "1000163" -> "1000168" 
  "1000166" -> "1000171" 
  "1000168" -> "1000166" 
  "1000171" -> "1000136" 
  "1000171" -> "1000152" 
  "1000171" -> "1000210" 
  "1000177" -> "1000183" 
  "1000177" -> "1000198" 
  "1000178" -> "1000177" 
  "1000183" -> "1000189" 
  "1000187" -> "1000196" 
  "1000187" -> "1000192" 
  "1000188" -> "1000187" 
  "1000189" -> "1000188" 
  "1000192" -> "1000196" 
  "1000194" -> "1000276" 
  "1000195" -> "1000194" 
  "1000196" -> "1000195" 
  "1000198" -> "1000203" 
  "1000201" -> "1000206" 
  "1000203" -> "1000201" 
  "1000206" -> "1000136" 
  "1000206" -> "1000152" 
  "1000206" -> "1000210" 
  "1000210" -> "1000256" 
  "1000210" -> "1000216" 
  "1000214" -> "1000221" 
  "1000216" -> "1000214" 
  "1000219" -> "1000225" 
  "1000221" -> "1000219" 
  "1000225" -> "1000256" 
  "1000225" -> "1000230" 
  "1000230" -> "1000235" 
  "1000230" -> "1000237" 
  "1000230" -> "1000252" 
  "1000235" -> "1000242" 
  "1000235" -> "1000247" 
  "1000237" -> "1000235" 
  "1000240" -> "1000247" 
  "1000242" -> "1000240" 
  "1000245" -> "1000148" 
  "1000247" -> "1000245" 
  "1000252" -> "1000268" 
  "1000252" -> "1000256" 
  "1000256" -> "1000259" 
  "1000259" -> "1000263" 
  "1000261" -> "1000276" 
  "1000262" -> "1000261" 
  "1000263" -> "1000262" 
  "1000266" -> "1000271" 
  "1000266" -> "1000273" 
  "1000267" -> "1000266" 
  "1000268" -> "1000267" 
  "1000271" -> "1000273" 
  "1000272" -> "1000276" 
  "1000273" -> "1000272" 
  "1000107" -> "1000119" 
}
