digraph udhcp_get_option {  
"1000122" [label = "(<operator>.assignment,v7 = a1 + 240)" ]
"1000124" [label = "(<operator>.addition,a1 + 240)" ]
"1000127" [label = "(<operator>.assignment,v8 = 388)" ]
"1000136" [label = "(<operator>.assignment,LOBYTE(v9) = *v7)" ]
"1000137" [label = "(LOBYTE,LOBYTE(v9))" ]
"1000139" [label = "(<operator>.indirection,*v7)" ]
"1000142" [label = "(<operator>.indirection,*v7)" ]
"1000145" [label = "(<operator>.preDecrement,--v8)" ]
"1000147" [label = "(<operator>.preIncrement,++v7)" ]
"1000151" [label = "(<operator>.logicalNot,!v8)" ]
"1000155" [label = "(<operator>.notEquals,(_BYTE)v9 != 0xFF)" ]
"1000156" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000157" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000162" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000163" [label = "(<operator>.and,v6 & 0x101)" ]
"1000168" [label = "(<operator>.assignment,v6 = (unsigned int)v6 | 0x101)" ]
"1000170" [label = "(<operator>.or,(unsigned int)v6 | 0x101)" ]
"1000171" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000172" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000175" [label = "(<operator>.assignment,v7 = a1 + 108)" ]
"1000177" [label = "(<operator>.addition,a1 + 108)" ]
"1000180" [label = "(<operator>.assignment,v8 = 128)" ]
"1000186" [label = "(<operator>.notEquals,(v6 & 0x202) != 2)" ]
"1000187" [label = "(<operator>.and,v6 & 0x202)" ]
"1000194" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000195" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000196" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000199" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, a3, v6, -1, a6))" ]
"1000200" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000201" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000206" [label = "(<operator>.minus,-1)" ]
"1000209" [label = "(RETURN,return v10;,return v10;)" ]
"1000211" [label = "(<operator>.assignment,v6 = (unsigned int)v6 | 0x202)" ]
"1000213" [label = "(<operator>.or,(unsigned int)v6 | 0x202)" ]
"1000214" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000215" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000218" [label = "(<operator>.assignment,v7 = a1 + 44)" ]
"1000220" [label = "(<operator>.addition,a1 + 44)" ]
"1000223" [label = "(<operator>.assignment,v8 = 64)" ]
"1000227" [label = "(<operator>.equals,v8 == 1)" ]
"1000231" [label = "(<operator>.assignment,a6 = (unsigned __int8)v7[1])" ]
"1000233" [label = "(<operator>.cast,(unsigned __int8)v7[1])" ]
"1000234" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000235" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000238" [label = "(<operator>.assignment,a3 = (unsigned int)(a6 + 2))" ]
"1000240" [label = "(<operator>.cast,(unsigned int)(a6 + 2))" ]
"1000241" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000242" [label = "(<operator>.addition,a6 + 2)" ]
"1000245" [label = "(<operator>.assignmentMinus,v8 -= a3)" ]
"1000249" [label = "(<operator>.lessThan,v8 < 0)" ]
"1000254" [label = "(<operator>.notEquals,(unsigned __int8)v9 != a2)" ]
"1000255" [label = "(<operator>.cast,(unsigned __int8)v9)" ]
"1000256" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000261" [label = "(<operator>.logicalAnd,v7[1] && (_BYTE)v9 == 52)" ]
"1000262" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000265" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000266" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000267" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000271" [label = "(<operator>.assignment,v9 = (unsigned __int8)v7[2])" ]
"1000273" [label = "(<operator>.cast,(unsigned __int8)v7[2])" ]
"1000274" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000275" [label = "(<operator>.indirectIndexAccess,v7[2])" ]
"1000278" [label = "(<operator>.assignment,v6 = v9 | (unsigned int)v6)" ]
"1000280" [label = "(<operator>.or,v9 | (unsigned int)v6)" ]
"1000282" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000283" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000285" [label = "(<operator>.assignmentPlus,v7 += (int)a3)" ]
"1000287" [label = "(<operator>.cast,(int)a3)" ]
"1000288" [label = "(UNKNOWN,int,int)" ]
"1000292" [label = "(<operator>.logicalNot,!(_BYTE)a6)" ]
"1000293" [label = "(<operator>.cast,(_BYTE)a6)" ]
"1000294" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000299" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, a3, v6, v9, a6))" ]
"1000300" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000301" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000308" [label = "(RETURN,return v10;,return v10;)" ]
"1000310" [label = "(<operator>.assignment,v11 = v7)" ]
"1000313" [label = "(<operator>.assignment,v10 = v7 + 2)" ]
"1000315" [label = "(<operator>.addition,v7 + 2)" ]
"1000318" [label = "(log_option,log_option(\"option found\", v11, a3, v6))" ]
"1000323" [label = "(RETURN,return v10;,return v10;)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000325" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000122" -> "1000127" 
  "1000124" -> "1000122" 
  "1000127" -> "1000157" 
  "1000127" -> "1000137" 
  "1000127" -> "1000227" 
  "1000136" -> "1000142" 
  "1000137" -> "1000139" 
  "1000139" -> "1000136" 
  "1000142" -> "1000157" 
  "1000142" -> "1000227" 
  "1000142" -> "1000145" 
  "1000145" -> "1000147" 
  "1000147" -> "1000151" 
  "1000151" -> "1000157" 
  "1000151" -> "1000137" 
  "1000151" -> "1000301" 
  "1000155" -> "1000227" 
  "1000155" -> "1000163" 
  "1000156" -> "1000155" 
  "1000157" -> "1000156" 
  "1000162" -> "1000172" 
  "1000162" -> "1000187" 
  "1000163" -> "1000162" 
  "1000168" -> "1000177" 
  "1000170" -> "1000168" 
  "1000171" -> "1000170" 
  "1000172" -> "1000171" 
  "1000175" -> "1000180" 
  "1000177" -> "1000175" 
  "1000180" -> "1000157" 
  "1000180" -> "1000137" 
  "1000180" -> "1000227" 
  "1000186" -> "1000196" 
  "1000186" -> "1000215" 
  "1000187" -> "1000186" 
  "1000194" -> "1000201" 
  "1000194" -> "1000209" 
  "1000195" -> "1000194" 
  "1000196" -> "1000195" 
  "1000199" -> "1000209" 
  "1000200" -> "1000206" 
  "1000201" -> "1000200" 
  "1000206" -> "1000199" 
  "1000209" -> "1000325" 
  "1000211" -> "1000220" 
  "1000213" -> "1000211" 
  "1000214" -> "1000213" 
  "1000215" -> "1000214" 
  "1000218" -> "1000223" 
  "1000220" -> "1000218" 
  "1000223" -> "1000157" 
  "1000223" -> "1000137" 
  "1000223" -> "1000227" 
  "1000227" -> "1000301" 
  "1000227" -> "1000234" 
  "1000231" -> "1000241" 
  "1000233" -> "1000231" 
  "1000234" -> "1000235" 
  "1000235" -> "1000233" 
  "1000238" -> "1000245" 
  "1000240" -> "1000238" 
  "1000241" -> "1000242" 
  "1000242" -> "1000240" 
  "1000245" -> "1000249" 
  "1000249" -> "1000256" 
  "1000249" -> "1000301" 
  "1000254" -> "1000294" 
  "1000254" -> "1000262" 
  "1000255" -> "1000254" 
  "1000256" -> "1000255" 
  "1000261" -> "1000274" 
  "1000261" -> "1000288" 
  "1000262" -> "1000267" 
  "1000262" -> "1000261" 
  "1000265" -> "1000261" 
  "1000266" -> "1000265" 
  "1000267" -> "1000266" 
  "1000271" -> "1000283" 
  "1000273" -> "1000271" 
  "1000274" -> "1000275" 
  "1000275" -> "1000273" 
  "1000278" -> "1000288" 
  "1000280" -> "1000278" 
  "1000282" -> "1000280" 
  "1000283" -> "1000282" 
  "1000285" -> "1000151" 
  "1000287" -> "1000285" 
  "1000288" -> "1000287" 
  "1000292" -> "1000301" 
  "1000292" -> "1000310" 
  "1000293" -> "1000292" 
  "1000294" -> "1000293" 
  "1000299" -> "1000308" 
  "1000300" -> "1000299" 
  "1000301" -> "1000300" 
  "1000308" -> "1000325" 
  "1000310" -> "1000315" 
  "1000313" -> "1000318" 
  "1000315" -> "1000313" 
  "1000318" -> "1000323" 
  "1000323" -> "1000325" 
  "1000107" -> "1000124" 
}
