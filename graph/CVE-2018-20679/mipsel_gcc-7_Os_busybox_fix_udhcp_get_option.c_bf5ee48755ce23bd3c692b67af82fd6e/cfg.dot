digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = 0)" ]
"1000122" [label = "(<operator>.assignment,v3 = 388)" ]
"1000125" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000127" [label = "(<operator>.addition,a1 + 240)" ]
"1000136" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000138" [label = "(<operator>.indirection,*v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000144" [label = "(<operator>.preDecrement,--v3)" ]
"1000146" [label = "(<operator>.preIncrement,++v4)" ]
"1000150" [label = "(<operator>.logicalNot,!v3)" ]
"1000154" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000158" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000160" [label = "(<operator>.addition,a1 + 108)" ]
"1000164" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000165" [label = "(<operator>.and,v2 & 0x101)" ]
"1000170" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000173" [label = "(<operator>.assignment,v3 = 128)" ]
"1000178" [label = "(<operator>.assignment,v8 = (v2 & 0x202) != 2)" ]
"1000180" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000181" [label = "(<operator>.and,v2 & 0x202)" ]
"1000185" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000191" [label = "(<operator>.assignment,v6 = 0)" ]
"1000195" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000196" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000197" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000200" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000203" [label = "(RETURN,return (unsigned __int8 *)v6;,return (unsigned __int8 *)v6;)" ]
"1000204" [label = "(<operator>.cast,(unsigned __int8 *)v6)" ]
"1000205" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000207" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000209" [label = "(<operator>.addition,a1 + 44)" ]
"1000212" [label = "(<operator>.assignment,v3 = 64)" ]
"1000216" [label = "(<operator>.equals,v3 == 1)" ]
"1000220" [label = "(<operator>.assignment,v9 = v4[1] + 2)" ]
"1000222" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000223" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000227" [label = "(<operator>.assignmentMinus,v3 -= v9)" ]
"1000231" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000236" [label = "(<operator>.notEquals,v5 != a2)" ]
"1000241" [label = "(<operator>.logicalAnd,v5 == 52 && v4[1])" ]
"1000242" [label = "(<operator>.equals,v5 == 52)" ]
"1000245" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000248" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000250" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000253" [label = "(<operator>.assignmentPlus,v4 += v9)" ]
"1000258" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000259" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000264" [label = "(<operator>.assignment,v6 = 0)" ]
"1000267" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000269" [label = "(RETURN,return (unsigned __int8 *)v6;,return (unsigned __int8 *)v6;)" ]
"1000270" [label = "(<operator>.cast,(unsigned __int8 *)v6)" ]
"1000271" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000274" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000275" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000276" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000279" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4))" ]
"1000282" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000283" [label = "(<operator>.addition,v4 + 2)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000286" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000122" 
  "1000122" -> "1000127" 
  "1000125" -> "1000138" 
  "1000125" -> "1000154" 
  "1000125" -> "1000216" 
  "1000127" -> "1000125" 
  "1000136" -> "1000141" 
  "1000138" -> "1000136" 
  "1000141" -> "1000154" 
  "1000141" -> "1000216" 
  "1000141" -> "1000144" 
  "1000144" -> "1000146" 
  "1000146" -> "1000150" 
  "1000150" -> "1000138" 
  "1000150" -> "1000154" 
  "1000150" -> "1000264" 
  "1000154" -> "1000216" 
  "1000154" -> "1000160" 
  "1000158" -> "1000165" 
  "1000160" -> "1000158" 
  "1000164" -> "1000170" 
  "1000164" -> "1000181" 
  "1000165" -> "1000164" 
  "1000170" -> "1000173" 
  "1000173" -> "1000138" 
  "1000173" -> "1000154" 
  "1000173" -> "1000216" 
  "1000178" -> "1000185" 
  "1000180" -> "1000178" 
  "1000181" -> "1000180" 
  "1000185" -> "1000191" 
  "1000185" -> "1000209" 
  "1000191" -> "1000197" 
  "1000195" -> "1000205" 
  "1000195" -> "1000200" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000200" -> "1000205" 
  "1000203" -> "1000286" 
  "1000204" -> "1000203" 
  "1000205" -> "1000204" 
  "1000207" -> "1000212" 
  "1000209" -> "1000207" 
  "1000212" -> "1000138" 
  "1000212" -> "1000154" 
  "1000212" -> "1000216" 
  "1000216" -> "1000264" 
  "1000216" -> "1000223" 
  "1000220" -> "1000227" 
  "1000222" -> "1000220" 
  "1000223" -> "1000222" 
  "1000227" -> "1000231" 
  "1000231" -> "1000264" 
  "1000231" -> "1000236" 
  "1000236" -> "1000242" 
  "1000236" -> "1000259" 
  "1000241" -> "1000250" 
  "1000241" -> "1000253" 
  "1000242" -> "1000241" 
  "1000242" -> "1000245" 
  "1000245" -> "1000241" 
  "1000248" -> "1000253" 
  "1000250" -> "1000248" 
  "1000253" -> "1000150" 
  "1000258" -> "1000276" 
  "1000258" -> "1000264" 
  "1000259" -> "1000258" 
  "1000264" -> "1000267" 
  "1000267" -> "1000271" 
  "1000269" -> "1000286" 
  "1000270" -> "1000269" 
  "1000271" -> "1000270" 
  "1000274" -> "1000279" 
  "1000274" -> "1000283" 
  "1000275" -> "1000274" 
  "1000276" -> "1000275" 
  "1000279" -> "1000283" 
  "1000282" -> "1000286" 
  "1000283" -> "1000282" 
  "1000108" -> "1000119" 
}
