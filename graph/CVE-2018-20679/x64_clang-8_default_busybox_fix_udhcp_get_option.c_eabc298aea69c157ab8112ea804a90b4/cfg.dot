digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v7 = 0)" ]
"1000120" [label = "(<operator>.assignment,v10 = a1 + 240)" ]
"1000122" [label = "(<operator>.addition,a1 + 240)" ]
"1000125" [label = "(<operator>.assignment,v8 = 388)" ]
"1000138" [label = "(<operator>.lessEqualsThan,v8 <= 0)" ]
"1000143" [label = "(<operator>.indirection,*v10)" ]
"1000146" [label = "(<operator>.preDecrement,--v8)" ]
"1000148" [label = "(<operator>.assignment,a4 = (_DWORD)v10++ + 1)" ]
"1000150" [label = "(<operator>.addition,(_DWORD)v10++ + 1)" ]
"1000151" [label = "(<operator>.cast,(_DWORD)v10++)" ]
"1000152" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000153" [label = "(<operator>.postIncrement,v10++)" ]
"1000156" [label = "(<operator>.assignment,a4 = *v10)" ]
"1000158" [label = "(<operator>.indirection,*v10)" ]
"1000161" [label = "(<operator>.notEquals,a4 != 255)" ]
"1000166" [label = "(<operator>.equals,(v7 & 0x101) == 1)" ]
"1000167" [label = "(<operator>.and,v7 & 0x101)" ]
"1000172" [label = "(<operators>.assignmentOr,v7 |= 0x101u)" ]
"1000175" [label = "(<operator>.assignment,a4 = (_DWORD)a1 + 108)" ]
"1000177" [label = "(<operator>.addition,(_DWORD)a1 + 108)" ]
"1000178" [label = "(<operator>.cast,(_DWORD)a1)" ]
"1000179" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000182" [label = "(<operator>.assignment,v10 = a1 + 108)" ]
"1000184" [label = "(<operator>.addition,a1 + 108)" ]
"1000187" [label = "(<operator>.assignment,v8 = 128)" ]
"1000193" [label = "(<operator>.notEquals,(v7 & 0x202) != 2)" ]
"1000194" [label = "(<operator>.and,v7 & 0x202)" ]
"1000200" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000201" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000202" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000205" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, a3, 255, a5, a6))" ]
"1000206" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000207" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000215" [label = "(<operators>.assignmentOr,v7 |= 0x202u)" ]
"1000218" [label = "(<operator>.assignment,a4 = (_DWORD)a1 + 44)" ]
"1000220" [label = "(<operator>.addition,(_DWORD)a1 + 44)" ]
"1000221" [label = "(<operator>.cast,(_DWORD)a1)" ]
"1000222" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000225" [label = "(<operator>.assignment,v10 = a1 + 44)" ]
"1000227" [label = "(<operator>.addition,a1 + 44)" ]
"1000230" [label = "(<operator>.assignment,v8 = 64)" ]
"1000234" [label = "(<operator>.lessEqualsThan,v8 <= 1)" ]
"1000238" [label = "(<operator>.assignment,v9 = v10[1] + 2)" ]
"1000240" [label = "(<operator>.addition,v10[1] + 2)" ]
"1000241" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000245" [label = "(<operator>.assignment,a4 = v9)" ]
"1000248" [label = "(<operator>.assignment,a3 = v8 - v9)" ]
"1000250" [label = "(<operator>.subtraction,v8 - v9)" ]
"1000253" [label = "(<operator>.assignmentMinus,v8 -= v9)" ]
"1000257" [label = "(<operator>.lessThan,v8 < 0)" ]
"1000262" [label = "(<operator>.equals,*v10 == a2)" ]
"1000263" [label = "(<operator>.indirection,*v10)" ]
"1000268" [label = "(<operator>.logicalAnd,*v10 == 52 && v9 >= 3)" ]
"1000269" [label = "(<operator>.equals,*v10 == 52)" ]
"1000270" [label = "(<operator>.indirection,*v10)" ]
"1000273" [label = "(<operator>.greaterEqualsThan,v9 >= 3)" ]
"1000276" [label = "(<operators>.assignmentOr,v7 |= v10[2])" ]
"1000278" [label = "(<operator>.indirectIndexAccess,v10[2])" ]
"1000281" [label = "(<operator>.assignment,a3 = v10[1] + 2)" ]
"1000283" [label = "(<operator>.addition,v10[1] + 2)" ]
"1000284" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000288" [label = "(<operator>.assignment,a4 = v9 + (_DWORD)v10)" ]
"1000290" [label = "(<operator>.addition,v9 + (_DWORD)v10)" ]
"1000292" [label = "(<operator>.cast,(_DWORD)v10)" ]
"1000293" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000295" [label = "(<operator>.assignmentPlus,v10 += v9)" ]
"1000298" [label = "(<operator>.assignment,a4 = v10[1])" ]
"1000300" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000304" [label = "(<operator>.logicalNot,!v10[1])" ]
"1000305" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000310" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, a3, a4, a5, a6))" ]
"1000311" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000312" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000320" [label = "(log_option,log_option(\"option found\", v10))" ]
"1000323" [label = "(RETURN,return v10 + 2;,return v10 + 2;)" ]
"1000324" [label = "(<operator>.addition,v10 + 2)" ]
"1000105" [label = "(METHOD,udhcp_get_option)" ]
"1000327" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000122" 
  "1000120" -> "1000125" 
  "1000122" -> "1000120" 
  "1000125" -> "1000138" 
  "1000125" -> "1000158" 
  "1000125" -> "1000234" 
  "1000125" -> "1000300" 
  "1000138" -> "1000312" 
  "1000138" -> "1000143" 
  "1000143" -> "1000158" 
  "1000143" -> "1000234" 
  "1000143" -> "1000300" 
  "1000143" -> "1000146" 
  "1000146" -> "1000152" 
  "1000148" -> "1000138" 
  "1000148" -> "1000158" 
  "1000150" -> "1000148" 
  "1000151" -> "1000150" 
  "1000152" -> "1000153" 
  "1000153" -> "1000151" 
  "1000156" -> "1000161" 
  "1000158" -> "1000156" 
  "1000161" -> "1000234" 
  "1000161" -> "1000300" 
  "1000161" -> "1000167" 
  "1000166" -> "1000172" 
  "1000166" -> "1000194" 
  "1000167" -> "1000166" 
  "1000172" -> "1000179" 
  "1000175" -> "1000184" 
  "1000177" -> "1000175" 
  "1000178" -> "1000177" 
  "1000179" -> "1000178" 
  "1000182" -> "1000187" 
  "1000184" -> "1000182" 
  "1000187" -> "1000138" 
  "1000187" -> "1000158" 
  "1000187" -> "1000234" 
  "1000193" -> "1000202" 
  "1000193" -> "1000215" 
  "1000194" -> "1000193" 
  "1000200" -> "1000207" 
  "1000200" -> "1000215" 
  "1000201" -> "1000200" 
  "1000202" -> "1000201" 
  "1000205" -> "1000215" 
  "1000206" -> "1000205" 
  "1000207" -> "1000206" 
  "1000215" -> "1000222" 
  "1000218" -> "1000227" 
  "1000220" -> "1000218" 
  "1000221" -> "1000220" 
  "1000222" -> "1000221" 
  "1000225" -> "1000230" 
  "1000227" -> "1000225" 
  "1000230" -> "1000138" 
  "1000230" -> "1000158" 
  "1000230" -> "1000234" 
  "1000234" -> "1000312" 
  "1000234" -> "1000241" 
  "1000238" -> "1000245" 
  "1000240" -> "1000238" 
  "1000241" -> "1000240" 
  "1000245" -> "1000250" 
  "1000248" -> "1000253" 
  "1000250" -> "1000248" 
  "1000253" -> "1000257" 
  "1000257" -> "1000312" 
  "1000257" -> "1000263" 
  "1000262" -> "1000300" 
  "1000262" -> "1000270" 
  "1000263" -> "1000262" 
  "1000268" -> "1000278" 
  "1000268" -> "1000284" 
  "1000269" -> "1000268" 
  "1000269" -> "1000273" 
  "1000270" -> "1000269" 
  "1000273" -> "1000268" 
  "1000276" -> "1000284" 
  "1000278" -> "1000276" 
  "1000281" -> "1000293" 
  "1000283" -> "1000281" 
  "1000284" -> "1000283" 
  "1000288" -> "1000295" 
  "1000290" -> "1000288" 
  "1000292" -> "1000290" 
  "1000293" -> "1000292" 
  "1000295" -> "1000138" 
  "1000295" -> "1000158" 
  "1000295" -> "1000234" 
  "1000295" -> "1000300" 
  "1000298" -> "1000305" 
  "1000300" -> "1000298" 
  "1000304" -> "1000312" 
  "1000304" -> "1000320" 
  "1000305" -> "1000304" 
  "1000310" -> "1000320" 
  "1000311" -> "1000310" 
  "1000312" -> "1000311" 
  "1000320" -> "1000324" 
  "1000323" -> "1000327" 
  "1000324" -> "1000323" 
  "1000105" -> "1000117" 
}
