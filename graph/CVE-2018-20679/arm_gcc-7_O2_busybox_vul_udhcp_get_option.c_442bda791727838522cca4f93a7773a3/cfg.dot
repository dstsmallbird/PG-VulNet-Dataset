digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = 388)" ]
"1000120" [label = "(<operator>.assignment,v3 = 0)" ]
"1000123" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000125" [label = "(<operator>.addition,a1 + 240)" ]
"1000137" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000139" [label = "(<operator>.indirection,*v4)" ]
"1000142" [label = "(<operator>.logicalNot,!*v4)" ]
"1000143" [label = "(<operator>.indirection,*v4)" ]
"1000146" [label = "(<operator>.preDecrement,--v2)" ]
"1000148" [label = "(<operator>.preIncrement,++v4)" ]
"1000152" [label = "(<operator>.equals,v5 == 255)" ]
"1000157" [label = "(<operator>.logicalOr,v2 == 1 || (v6 = v4[1] + 2, v2 -= v6, v2 < 0))" ]
"1000158" [label = "(<operator>.equals,v2 == 1)" ]
"1000162" [label = "(<operator>.assignment,v6 = v4[1] + 2)" ]
"1000164" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000165" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000170" [label = "(<operator>.assignmentMinus,v2 -= v6)" ]
"1000173" [label = "(<operator>.lessThan,v2 < 0)" ]
"1000178" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000180" [label = "(RETURN,return 0;,return 0;)" ]
"1000183" [label = "(<operator>.equals,v5 == a2)" ]
"1000188" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000189" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000190" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000193" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4))" ]
"1000196" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000197" [label = "(<operator>.addition,v4 + 2)" ]
"1000200" [label = "(<operator>.assignment,v7 = v6 != 2)" ]
"1000202" [label = "(<operator>.notEquals,v6 != 2)" ]
"1000206" [label = "(<operator>.notEquals,v5 != 52)" ]
"1000209" [label = "(<operator>.assignment,v7 = 0)" ]
"1000214" [label = "(<operator>.assignment,v5 = v4[2])" ]
"1000216" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000219" [label = "(<operator>.assignmentPlus,v4 += v6)" ]
"1000224" [label = "(<operators>.assignmentOr,v3 |= v5)" ]
"1000229" [label = "(<operator>.logicalNot,!v2)" ]
"1000233" [label = "(<operator>.notEquals,(v3 & 0x101) != 1)" ]
"1000234" [label = "(<operator>.and,v3 & 0x101)" ]
"1000239" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000242" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000244" [label = "(<operator>.addition,a1 + 108)" ]
"1000247" [label = "(<operator>.assignment,v2 = 128)" ]
"1000251" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000252" [label = "(<operator>.and,v3 & 0x202)" ]
"1000257" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000260" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000262" [label = "(<operator>.addition,a1 + 44)" ]
"1000265" [label = "(<operator>.assignment,v2 = 64)" ]
"1000269" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000270" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000271" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000274" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000277" [label = "(RETURN,return 0;,return 0;)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000279" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000120" 
  "1000120" -> "1000125" 
  "1000123" -> "1000271" 
  "1000123" -> "1000139" 
  "1000123" -> "1000234" 
  "1000123" -> "1000252" 
  "1000125" -> "1000123" 
  "1000137" -> "1000143" 
  "1000139" -> "1000137" 
  "1000142" -> "1000146" 
  "1000142" -> "1000152" 
  "1000143" -> "1000142" 
  "1000146" -> "1000148" 
  "1000148" -> "1000229" 
  "1000152" -> "1000271" 
  "1000152" -> "1000234" 
  "1000152" -> "1000252" 
  "1000152" -> "1000158" 
  "1000157" -> "1000178" 
  "1000157" -> "1000183" 
  "1000158" -> "1000157" 
  "1000158" -> "1000165" 
  "1000162" -> "1000170" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000170" -> "1000173" 
  "1000173" -> "1000157" 
  "1000178" -> "1000180" 
  "1000180" -> "1000279" 
  "1000183" -> "1000190" 
  "1000183" -> "1000202" 
  "1000188" -> "1000193" 
  "1000188" -> "1000197" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000193" -> "1000197" 
  "1000196" -> "1000279" 
  "1000197" -> "1000196" 
  "1000200" -> "1000206" 
  "1000202" -> "1000200" 
  "1000206" -> "1000209" 
  "1000206" -> "1000216" 
  "1000206" -> "1000219" 
  "1000209" -> "1000216" 
  "1000209" -> "1000219" 
  "1000214" -> "1000219" 
  "1000216" -> "1000214" 
  "1000219" -> "1000224" 
  "1000219" -> "1000229" 
  "1000224" -> "1000229" 
  "1000229" -> "1000139" 
  "1000229" -> "1000234" 
  "1000229" -> "1000178" 
  "1000233" -> "1000271" 
  "1000233" -> "1000252" 
  "1000233" -> "1000239" 
  "1000234" -> "1000233" 
  "1000239" -> "1000244" 
  "1000242" -> "1000247" 
  "1000244" -> "1000242" 
  "1000247" -> "1000139" 
  "1000247" -> "1000234" 
  "1000247" -> "1000252" 
  "1000251" -> "1000271" 
  "1000251" -> "1000257" 
  "1000252" -> "1000251" 
  "1000257" -> "1000262" 
  "1000260" -> "1000265" 
  "1000262" -> "1000260" 
  "1000265" -> "1000271" 
  "1000265" -> "1000139" 
  "1000265" -> "1000234" 
  "1000265" -> "1000252" 
  "1000269" -> "1000274" 
  "1000269" -> "1000277" 
  "1000270" -> "1000269" 
  "1000271" -> "1000270" 
  "1000274" -> "1000277" 
  "1000277" -> "1000279" 
  "1000107" -> "1000117" 
}
