digraph udhcp_get_option {  
"1000117" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000119" [label = "(<operator>.addition,a1 + 240)" ]
"1000122" [label = "(<operator>.assignment,v3 = 0)" ]
"1000125" [label = "(<operator>.assignment,v4 = 388)" ]
"1000134" [label = "(<operator>.assignment,v7 = *v2)" ]
"1000136" [label = "(<operator>.indirection,*v2)" ]
"1000139" [label = "(<operator>.indirection,*v2)" ]
"1000142" [label = "(<operator>.preDecrement,--v4)" ]
"1000144" [label = "(<operator>.preIncrement,++v2)" ]
"1000148" [label = "(<operator>.lessEqualsThan,v4 <= 0)" ]
"1000153" [label = "(<operator>.notEquals,v7 != 255)" ]
"1000158" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000159" [label = "(<operator>.and,v3 & 0x101)" ]
"1000164" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000167" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000169" [label = "(<operator>.addition,a1 + 108)" ]
"1000172" [label = "(<operator>.assignment,v4 = 128)" ]
"1000178" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000179" [label = "(<operator>.and,v3 & 0x202)" ]
"1000185" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000186" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000187" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000190" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000193" [label = "(RETURN,return 0;,return 0;)" ]
"1000195" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000198" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000200" [label = "(<operator>.addition,a1 + 44)" ]
"1000203" [label = "(<operator>.assignment,v4 = 64)" ]
"1000207" [label = "(<operator>.lessEqualsThan,v4 <= 1)" ]
"1000211" [label = "(<operator>.assignment,v8 = v2[1] + 2)" ]
"1000213" [label = "(<operator>.addition,v2[1] + 2)" ]
"1000214" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000218" [label = "(<operator>.assignmentMinus,v4 -= v8)" ]
"1000222" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000227" [label = "(<operator>.notEquals,v7 != a2)" ]
"1000231" [label = "(<operator>.assignment,v6 = v8 > 2)" ]
"1000233" [label = "(<operator>.greaterThan,v8 > 2)" ]
"1000237" [label = "(<operator>.notEquals,v7 != 52)" ]
"1000240" [label = "(<operator>.assignment,v6 = 0)" ]
"1000245" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000247" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000250" [label = "(<operator>.assignmentPlus,v2 += v8)" ]
"1000255" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000256" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000261" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000263" [label = "(RETURN,return 0;,return 0;)" ]
"1000265" [label = "(log_option,log_option(\"option found\", v2))" ]
"1000268" [label = "(RETURN,return v2 + 2;,return v2 + 2;)" ]
"1000269" [label = "(<operator>.addition,v2 + 2)" ]
"1000107" [label = "(METHOD,udhcp_get_option)" ]
"1000272" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000122" 
  "1000119" -> "1000117" 
  "1000122" -> "1000125" 
  "1000125" -> "1000136" 
  "1000125" -> "1000153" 
  "1000125" -> "1000207" 
  "1000134" -> "1000139" 
  "1000136" -> "1000134" 
  "1000139" -> "1000153" 
  "1000139" -> "1000207" 
  "1000139" -> "1000142" 
  "1000142" -> "1000144" 
  "1000144" -> "1000148" 
  "1000148" -> "1000136" 
  "1000148" -> "1000153" 
  "1000148" -> "1000261" 
  "1000153" -> "1000207" 
  "1000153" -> "1000159" 
  "1000158" -> "1000164" 
  "1000158" -> "1000179" 
  "1000159" -> "1000158" 
  "1000164" -> "1000169" 
  "1000167" -> "1000172" 
  "1000169" -> "1000167" 
  "1000172" -> "1000136" 
  "1000172" -> "1000153" 
  "1000172" -> "1000207" 
  "1000178" -> "1000187" 
  "1000178" -> "1000195" 
  "1000179" -> "1000178" 
  "1000185" -> "1000190" 
  "1000185" -> "1000193" 
  "1000186" -> "1000185" 
  "1000187" -> "1000186" 
  "1000190" -> "1000193" 
  "1000193" -> "1000272" 
  "1000195" -> "1000200" 
  "1000198" -> "1000203" 
  "1000200" -> "1000198" 
  "1000203" -> "1000136" 
  "1000203" -> "1000153" 
  "1000203" -> "1000207" 
  "1000207" -> "1000261" 
  "1000207" -> "1000214" 
  "1000211" -> "1000218" 
  "1000213" -> "1000211" 
  "1000214" -> "1000213" 
  "1000218" -> "1000222" 
  "1000222" -> "1000261" 
  "1000222" -> "1000227" 
  "1000227" -> "1000233" 
  "1000227" -> "1000256" 
  "1000231" -> "1000237" 
  "1000233" -> "1000231" 
  "1000237" -> "1000240" 
  "1000237" -> "1000247" 
  "1000237" -> "1000250" 
  "1000240" -> "1000247" 
  "1000240" -> "1000250" 
  "1000245" -> "1000250" 
  "1000247" -> "1000245" 
  "1000250" -> "1000148" 
  "1000255" -> "1000261" 
  "1000255" -> "1000265" 
  "1000256" -> "1000255" 
  "1000261" -> "1000263" 
  "1000263" -> "1000272" 
  "1000265" -> "1000269" 
  "1000268" -> "1000272" 
  "1000269" -> "1000268" 
  "1000107" -> "1000119" 
}
