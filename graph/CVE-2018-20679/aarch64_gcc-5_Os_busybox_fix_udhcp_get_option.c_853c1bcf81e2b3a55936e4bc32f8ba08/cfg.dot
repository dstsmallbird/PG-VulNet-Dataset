digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = 0)" ]
"1000122" [label = "(<operator>.assignment,v3 = 388)" ]
"1000125" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000127" [label = "(<operator>.addition,a1 + 240)" ]
"1000136" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000138" [label = "(<operator>.indirection,*v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000144" [label = "(<operator>.preDecrement,--v3)" ]
"1000146" [label = "(<operator>.preIncrement,++v4)" ]
"1000150" [label = "(<operator>.logicalNot,!v3)" ]
"1000154" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000159" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000160" [label = "(<operator>.and,v2 & 0x101)" ]
"1000165" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000168" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000170" [label = "(<operator>.addition,a1 + 108)" ]
"1000173" [label = "(<operator>.assignment,v3 = 128)" ]
"1000179" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000180" [label = "(<operator>.and,v2 & 0x202)" ]
"1000187" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000188" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000189" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000192" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000195" [label = "(RETURN,return (unsigned __int8 *)v6;,return (unsigned __int8 *)v6;)" ]
"1000196" [label = "(<operator>.cast,(unsigned __int8 *)v6)" ]
"1000197" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000199" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000202" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000204" [label = "(<operator>.addition,a1 + 44)" ]
"1000207" [label = "(<operator>.assignment,v3 = 64)" ]
"1000211" [label = "(<operator>.equals,v3 == 1)" ]
"1000215" [label = "(<operator>.assignment,v7 = v4[1])" ]
"1000217" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000220" [label = "(<operator>.assignmentMinus,v3 -= v7 + 2)" ]
"1000222" [label = "(<operator>.addition,v7 + 2)" ]
"1000226" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000231" [label = "(<operator>.notEquals,(_DWORD)a2 != v5)" ]
"1000232" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000233" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000238" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000241" [label = "(<operator>.assignment,v8 = v5 == 52)" ]
"1000243" [label = "(<operator>.equals,v5 == 52)" ]
"1000247" [label = "(<operator>.assignment,v8 = 0)" ]
"1000252" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000254" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000257" [label = "(<operator>.assignmentPlus,v4 += v7 + 2)" ]
"1000259" [label = "(<operator>.addition,v7 + 2)" ]
"1000264" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000265" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000271" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2))" ]
"1000274" [label = "(RETURN,return (unsigned __int8 *)v6;,return (unsigned __int8 *)v6;)" ]
"1000275" [label = "(<operator>.cast,(unsigned __int8 *)v6)" ]
"1000276" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000279" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 1)" ]
"1000280" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000281" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000284" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4))" ]
"1000287" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000288" [label = "(<operator>.addition,v4 + 2)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000291" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000122" 
  "1000122" -> "1000127" 
  "1000125" -> "1000138" 
  "1000125" -> "1000154" 
  "1000125" -> "1000211" 
  "1000127" -> "1000125" 
  "1000136" -> "1000141" 
  "1000138" -> "1000136" 
  "1000141" -> "1000154" 
  "1000141" -> "1000211" 
  "1000141" -> "1000144" 
  "1000144" -> "1000146" 
  "1000146" -> "1000150" 
  "1000150" -> "1000138" 
  "1000150" -> "1000154" 
  "1000150" -> "1000271" 
  "1000154" -> "1000211" 
  "1000154" -> "1000160" 
  "1000159" -> "1000165" 
  "1000159" -> "1000180" 
  "1000160" -> "1000159" 
  "1000165" -> "1000170" 
  "1000168" -> "1000173" 
  "1000170" -> "1000168" 
  "1000173" -> "1000138" 
  "1000173" -> "1000154" 
  "1000173" -> "1000211" 
  "1000179" -> "1000189" 
  "1000179" -> "1000199" 
  "1000180" -> "1000179" 
  "1000187" -> "1000197" 
  "1000187" -> "1000192" 
  "1000188" -> "1000187" 
  "1000189" -> "1000188" 
  "1000192" -> "1000197" 
  "1000195" -> "1000291" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000199" -> "1000204" 
  "1000202" -> "1000207" 
  "1000204" -> "1000202" 
  "1000207" -> "1000138" 
  "1000207" -> "1000154" 
  "1000207" -> "1000211" 
  "1000211" -> "1000271" 
  "1000211" -> "1000217" 
  "1000215" -> "1000222" 
  "1000217" -> "1000215" 
  "1000220" -> "1000226" 
  "1000222" -> "1000220" 
  "1000226" -> "1000233" 
  "1000226" -> "1000271" 
  "1000231" -> "1000238" 
  "1000231" -> "1000265" 
  "1000232" -> "1000231" 
  "1000233" -> "1000232" 
  "1000238" -> "1000243" 
  "1000238" -> "1000247" 
  "1000241" -> "1000254" 
  "1000241" -> "1000259" 
  "1000243" -> "1000241" 
  "1000247" -> "1000254" 
  "1000247" -> "1000259" 
  "1000252" -> "1000259" 
  "1000254" -> "1000252" 
  "1000257" -> "1000150" 
  "1000259" -> "1000257" 
  "1000264" -> "1000281" 
  "1000264" -> "1000271" 
  "1000265" -> "1000264" 
  "1000271" -> "1000276" 
  "1000274" -> "1000291" 
  "1000275" -> "1000274" 
  "1000276" -> "1000275" 
  "1000279" -> "1000284" 
  "1000279" -> "1000288" 
  "1000280" -> "1000279" 
  "1000281" -> "1000280" 
  "1000284" -> "1000288" 
  "1000287" -> "1000291" 
  "1000288" -> "1000287" 
  "1000108" -> "1000119" 
}
