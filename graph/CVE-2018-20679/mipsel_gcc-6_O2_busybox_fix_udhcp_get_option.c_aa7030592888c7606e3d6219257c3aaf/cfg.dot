digraph udhcp_get_option {  
"1000119" [label = "(<operator>.assignment,v2 = 0)" ]
"1000122" [label = "(<operator>.assignment,v3 = 388)" ]
"1000125" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000127" [label = "(<operator>.addition,a1 + 240)" ]
"1000139" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000144" [label = "(<operator>.indirection,*v4)" ]
"1000147" [label = "(<operator>.preDecrement,--v3)" ]
"1000149" [label = "(<operator>.preIncrement,++v4)" ]
"1000152" [label = "(<operator>.logicalNot,!v3)" ]
"1000156" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000160" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000162" [label = "(<operator>.addition,a1 + 108)" ]
"1000166" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000167" [label = "(<operator>.and,v2 & 0x101)" ]
"1000172" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000175" [label = "(<operator>.assignment,v3 = 128)" ]
"1000180" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000182" [label = "(<operator>.addition,a1 + 44)" ]
"1000186" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000187" [label = "(<operator>.and,v2 & 0x202)" ]
"1000192" [label = "(<operator>.assignment,result = 0)" ]
"1000196" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000197" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000198" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000202" [label = "(warn,warn(\"option 0x%02x not found\", a2))" ]
"1000205" [label = "(<operator>.assignment,result = 0)" ]
"1000208" [label = "(RETURN,return result;,return result;)" ]
"1000210" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000213" [label = "(<operator>.assignment,v3 = 64)" ]
"1000217" [label = "(<operator>.equals,v3 == 1)" ]
"1000221" [label = "(<operator>.assignment,v6 = v4[1] + 2)" ]
"1000223" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000224" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000228" [label = "(<operator>.assignmentMinus,v3 -= v6)" ]
"1000232" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000237" [label = "(<operator>.equals,a2 == v5)" ]
"1000242" [label = "(<operator>.logicalAnd,v5 == 52 && v4[1])" ]
"1000243" [label = "(<operator>.equals,v5 == 52)" ]
"1000246" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000250" [label = "(<operator>.assignment,v8 = v4[2])" ]
"1000252" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000255" [label = "(<operator>.assignmentPlus,v4 += v6)" ]
"1000258" [label = "(<operators>.assignmentOr,v2 |= v8)" ]
"1000263" [label = "(<operator>.assignmentPlus,v4 += v6)" ]
"1000267" [label = "(<operator>.logicalNot,!v3)" ]
"1000271" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000272" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000277" [label = "(warn,warn(\"bad packet, malformed option field\"))" ]
"1000279" [label = "(RETURN,return 0;,return 0;)" ]
"1000282" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000283" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000284" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000287" [label = "(log_option_part_0,log_option_part_0(\"option found\", v4))" ]
"1000290" [label = "(RETURN,return v4 + 2;,return v4 + 2;)" ]
"1000291" [label = "(<operator>.addition,v4 + 2)" ]
"1000108" [label = "(METHOD,udhcp_get_option)" ]
"1000294" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000122" 
  "1000122" -> "1000127" 
  "1000125" -> "1000141" 
  "1000125" -> "1000156" 
  "1000125" -> "1000217" 
  "1000125" -> "1000272" 
  "1000127" -> "1000125" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000156" 
  "1000144" -> "1000217" 
  "1000144" -> "1000272" 
  "1000144" -> "1000147" 
  "1000147" -> "1000149" 
  "1000149" -> "1000152" 
  "1000152" -> "1000141" 
  "1000152" -> "1000156" 
  "1000152" -> "1000277" 
  "1000156" -> "1000217" 
  "1000156" -> "1000272" 
  "1000156" -> "1000162" 
  "1000160" -> "1000167" 
  "1000162" -> "1000160" 
  "1000166" -> "1000172" 
  "1000166" -> "1000182" 
  "1000167" -> "1000166" 
  "1000172" -> "1000175" 
  "1000175" -> "1000141" 
  "1000175" -> "1000156" 
  "1000175" -> "1000217" 
  "1000180" -> "1000187" 
  "1000182" -> "1000180" 
  "1000186" -> "1000192" 
  "1000186" -> "1000210" 
  "1000187" -> "1000186" 
  "1000192" -> "1000198" 
  "1000196" -> "1000202" 
  "1000196" -> "1000208" 
  "1000197" -> "1000196" 
  "1000198" -> "1000197" 
  "1000202" -> "1000205" 
  "1000205" -> "1000208" 
  "1000208" -> "1000294" 
  "1000210" -> "1000213" 
  "1000213" -> "1000141" 
  "1000213" -> "1000156" 
  "1000213" -> "1000217" 
  "1000217" -> "1000277" 
  "1000217" -> "1000224" 
  "1000221" -> "1000228" 
  "1000223" -> "1000221" 
  "1000224" -> "1000223" 
  "1000228" -> "1000232" 
  "1000232" -> "1000277" 
  "1000232" -> "1000237" 
  "1000237" -> "1000272" 
  "1000237" -> "1000243" 
  "1000242" -> "1000252" 
  "1000242" -> "1000263" 
  "1000243" -> "1000242" 
  "1000243" -> "1000246" 
  "1000246" -> "1000242" 
  "1000250" -> "1000255" 
  "1000252" -> "1000250" 
  "1000255" -> "1000258" 
  "1000258" -> "1000267" 
  "1000263" -> "1000267" 
  "1000267" -> "1000141" 
  "1000267" -> "1000156" 
  "1000267" -> "1000217" 
  "1000267" -> "1000272" 
  "1000267" -> "1000277" 
  "1000271" -> "1000284" 
  "1000271" -> "1000277" 
  "1000272" -> "1000271" 
  "1000277" -> "1000279" 
  "1000279" -> "1000294" 
  "1000282" -> "1000287" 
  "1000282" -> "1000291" 
  "1000283" -> "1000282" 
  "1000284" -> "1000283" 
  "1000287" -> "1000291" 
  "1000290" -> "1000294" 
  "1000291" -> "1000290" 
  "1000108" -> "1000119" 
}
