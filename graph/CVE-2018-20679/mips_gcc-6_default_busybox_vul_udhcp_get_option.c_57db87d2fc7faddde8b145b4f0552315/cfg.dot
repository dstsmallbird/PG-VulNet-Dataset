digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v2 = 0)" ]
"1000124" [label = "(<operator>.assignment,v3 = 388)" ]
"1000127" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000129" [label = "(<operator>.addition,a1 + 240)" ]
"1000139" [label = "(<operator>.assignment,i = *v4)" ]
"1000141" [label = "(<operator>.indirection,*v4)" ]
"1000143" [label = "(<operator>.assignment,i = *v4)" ]
"1000145" [label = "(<operator>.indirection,*v4)" ]
"1000149" [label = "(<operator>.logicalNot,!i)" ]
"1000152" [label = "(<operator>.preDecrement,--v3)" ]
"1000154" [label = "(<operator>.preIncrement,++v4)" ]
"1000158" [label = "(<operator>.equals,i == 255)" ]
"1000163" [label = "(<operator>.logicalOr,v3 == 1 || (v9 = v4[1] + 2, v3 -= v9, v3 < 0))" ]
"1000164" [label = "(<operator>.equals,v3 == 1)" ]
"1000168" [label = "(<operator>.assignment,v9 = v4[1] + 2)" ]
"1000170" [label = "(<operator>.addition,v4[1] + 2)" ]
"1000171" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000176" [label = "(<operator>.assignmentMinus,v3 -= v9)" ]
"1000179" [label = "(<operator>.lessThan,v3 < 0)" ]
"1000184" [label = "(<operator>.assignment,v6 = 0)" ]
"1000187" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\"))" ]
"1000189" [label = "(RETURN,return v6;,return v6;)" ]
"1000192" [label = "(<operator>.equals,a2 == i)" ]
"1000196" [label = "(<operator>.assignment,v10 = v4)" ]
"1000199" [label = "(<operator>.assignment,v6 = v4 + 2)" ]
"1000201" [label = "(<operator>.addition,v4 + 2)" ]
"1000204" [label = "(log_option,log_option(\"option found\", v10))" ]
"1000207" [label = "(RETURN,return v6;,return v6;)" ]
"1000210" [label = "(<operator>.equals,i == 52)" ]
"1000215" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000218" [label = "(<operators>.assignmentOr,v2 |= v4[2])" ]
"1000220" [label = "(<operator>.indirectIndexAccess,v4[2])" ]
"1000223" [label = "(<operator>.assignmentPlus,v4 += v9)" ]
"1000228" [label = "(<operator>.assignmentPlus,v4 += v9)" ]
"1000233" [label = "(<operator>.logicalNot,!v3)" ]
"1000236" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000238" [label = "(<operator>.addition,a1 + 108)" ]
"1000242" [label = "(<operator>.equals,(v2 & 0x101) == 1)" ]
"1000243" [label = "(<operator>.and,v2 & 0x101)" ]
"1000248" [label = "(<operators>.assignmentOr,v2 |= 0x101u)" ]
"1000251" [label = "(<operator>.assignment,v3 = 128)" ]
"1000256" [label = "(<operator>.assignment,v8 = (v2 & 0x202) != 2)" ]
"1000258" [label = "(<operator>.notEquals,(v2 & 0x202) != 2)" ]
"1000259" [label = "(<operator>.and,v2 & 0x202)" ]
"1000263" [label = "(<operators>.assignmentOr,v2 |= 0x202u)" ]
"1000267" [label = "(<operator>.logicalNot,!v8)" ]
"1000270" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000272" [label = "(<operator>.addition,a1 + 44)" ]
"1000275" [label = "(<operator>.assignment,v3 = 64)" ]
"1000280" [label = "(<operator>.assignment,v6 = 0)" ]
"1000284" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000285" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000286" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000289" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000292" [label = "(RETURN,return v6;,return v6;)" ]
"1000109" [label = "(METHOD,udhcp_get_option)" ]
"1000294" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000124" 
  "1000124" -> "1000129" 
  "1000127" -> "1000141" 
  "1000127" -> "1000259" 
  "1000127" -> "1000280" 
  "1000129" -> "1000127" 
  "1000139" -> "1000149" 
  "1000141" -> "1000139" 
  "1000143" -> "1000149" 
  "1000145" -> "1000143" 
  "1000149" -> "1000152" 
  "1000149" -> "1000158" 
  "1000152" -> "1000154" 
  "1000154" -> "1000233" 
  "1000158" -> "1000238" 
  "1000158" -> "1000259" 
  "1000158" -> "1000280" 
  "1000158" -> "1000164" 
  "1000163" -> "1000184" 
  "1000163" -> "1000192" 
  "1000164" -> "1000163" 
  "1000164" -> "1000171" 
  "1000168" -> "1000176" 
  "1000170" -> "1000168" 
  "1000171" -> "1000170" 
  "1000176" -> "1000179" 
  "1000179" -> "1000163" 
  "1000184" -> "1000187" 
  "1000187" -> "1000189" 
  "1000189" -> "1000294" 
  "1000192" -> "1000196" 
  "1000192" -> "1000210" 
  "1000196" -> "1000201" 
  "1000199" -> "1000204" 
  "1000201" -> "1000199" 
  "1000204" -> "1000207" 
  "1000207" -> "1000294" 
  "1000210" -> "1000215" 
  "1000210" -> "1000228" 
  "1000215" -> "1000220" 
  "1000215" -> "1000223" 
  "1000218" -> "1000223" 
  "1000220" -> "1000218" 
  "1000223" -> "1000233" 
  "1000228" -> "1000233" 
  "1000233" -> "1000184" 
  "1000233" -> "1000145" 
  "1000236" -> "1000243" 
  "1000238" -> "1000236" 
  "1000242" -> "1000248" 
  "1000242" -> "1000259" 
  "1000242" -> "1000280" 
  "1000243" -> "1000242" 
  "1000248" -> "1000251" 
  "1000251" -> "1000141" 
  "1000251" -> "1000259" 
  "1000251" -> "1000280" 
  "1000251" -> "1000141" 
  "1000251" -> "1000259" 
  "1000256" -> "1000263" 
  "1000258" -> "1000256" 
  "1000259" -> "1000258" 
  "1000263" -> "1000267" 
  "1000267" -> "1000272" 
  "1000267" -> "1000280" 
  "1000270" -> "1000275" 
  "1000272" -> "1000270" 
  "1000275" -> "1000141" 
  "1000275" -> "1000259" 
  "1000275" -> "1000280" 
  "1000280" -> "1000286" 
  "1000284" -> "1000289" 
  "1000284" -> "1000292" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000289" -> "1000292" 
  "1000292" -> "1000294" 
  "1000109" -> "1000121" 
}
