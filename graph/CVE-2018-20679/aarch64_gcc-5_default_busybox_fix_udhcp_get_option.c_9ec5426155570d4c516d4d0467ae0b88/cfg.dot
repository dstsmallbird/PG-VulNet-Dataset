digraph udhcp_get_option {  
"1000121" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000123" [label = "(<operator>.addition,a1 + 240)" ]
"1000126" [label = "(<operator>.assignment,v3 = 0)" ]
"1000129" [label = "(<operator>.assignment,v4 = 388)" ]
"1000138" [label = "(<operator>.assignment,v5 = *v2)" ]
"1000140" [label = "(<operator>.indirection,*v2)" ]
"1000143" [label = "(<operator>.indirection,*v2)" ]
"1000146" [label = "(<operator>.preDecrement,--v4)" ]
"1000148" [label = "(<operator>.preIncrement,++v2)" ]
"1000152" [label = "(<operator>.logicalNot,!v4)" ]
"1000156" [label = "(<operator>.notEquals,v5 != 255)" ]
"1000161" [label = "(<operator>.equals,(v3 & 0x101) == 1)" ]
"1000162" [label = "(<operator>.and,v3 & 0x101)" ]
"1000167" [label = "(<operators>.assignmentOr,v3 |= 0x101u)" ]
"1000170" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000172" [label = "(<operator>.addition,a1 + 108)" ]
"1000175" [label = "(<operator>.assignment,v4 = 128)" ]
"1000181" [label = "(<operator>.notEquals,(v3 & 0x202) != 2)" ]
"1000182" [label = "(<operator>.and,v3 & 0x202)" ]
"1000189" [label = "(<operator>.greaterThan,(unsigned int)dhcp_verbose > 2)" ]
"1000190" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000191" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000194" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000197" [label = "(RETURN,return v6;,return v6;)" ]
"1000199" [label = "(<operators>.assignmentOr,v3 |= 0x202u)" ]
"1000202" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000204" [label = "(<operator>.addition,a1 + 44)" ]
"1000207" [label = "(<operator>.assignment,v4 = 64)" ]
"1000211" [label = "(<operator>.equals,v4 == 1)" ]
"1000215" [label = "(<operator>.assignment,v7 = v2[1])" ]
"1000217" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000220" [label = "(<operator>.assignmentMinus,v4 -= v7 + 2)" ]
"1000222" [label = "(<operator>.addition,v7 + 2)" ]
"1000226" [label = "(<operator>.lessThan,v4 < 0)" ]
"1000231" [label = "(<operator>.notEquals,(_DWORD)a2 != v5)" ]
"1000232" [label = "(<operator>.cast,(_DWORD)a2)" ]
"1000233" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000238" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000241" [label = "(<operator>.assignment,v9 = v5 == 52)" ]
"1000243" [label = "(<operator>.equals,v5 == 52)" ]
"1000247" [label = "(<operator>.assignment,v9 = 0)" ]
"1000252" [label = "(<operators>.assignmentOr,v3 |= v2[2])" ]
"1000254" [label = "(<operator>.indirectIndexAccess,v2[2])" ]
"1000257" [label = "(<operator>.assignmentPlus,v2 += v7 + 2)" ]
"1000259" [label = "(<operator>.addition,v7 + 2)" ]
"1000264" [label = "(<operator>.logicalNot,!v2[1])" ]
"1000265" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000271" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2))" ]
"1000274" [label = "(RETURN,return v6;,return v6;)" ]
"1000276" [label = "(<operator>.assignment,v8 = v2)" ]
"1000279" [label = "(<operator>.assignment,v6 = v2 + 2)" ]
"1000281" [label = "(<operator>.addition,v2 + 2)" ]
"1000284" [label = "(log_option,log_option(\"option found\", v8))" ]
"1000287" [label = "(RETURN,return v6;,return v6;)" ]
"1000109" [label = "(METHOD,udhcp_get_option)" ]
"1000289" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000126" 
  "1000123" -> "1000121" 
  "1000126" -> "1000129" 
  "1000129" -> "1000140" 
  "1000129" -> "1000156" 
  "1000129" -> "1000211" 
  "1000138" -> "1000143" 
  "1000140" -> "1000138" 
  "1000143" -> "1000156" 
  "1000143" -> "1000211" 
  "1000143" -> "1000146" 
  "1000146" -> "1000148" 
  "1000148" -> "1000152" 
  "1000152" -> "1000140" 
  "1000152" -> "1000156" 
  "1000152" -> "1000271" 
  "1000156" -> "1000211" 
  "1000156" -> "1000162" 
  "1000161" -> "1000167" 
  "1000161" -> "1000182" 
  "1000162" -> "1000161" 
  "1000167" -> "1000172" 
  "1000170" -> "1000175" 
  "1000172" -> "1000170" 
  "1000175" -> "1000140" 
  "1000175" -> "1000156" 
  "1000175" -> "1000211" 
  "1000181" -> "1000191" 
  "1000181" -> "1000199" 
  "1000182" -> "1000181" 
  "1000189" -> "1000194" 
  "1000189" -> "1000197" 
  "1000190" -> "1000189" 
  "1000191" -> "1000190" 
  "1000194" -> "1000197" 
  "1000197" -> "1000289" 
  "1000199" -> "1000204" 
  "1000202" -> "1000207" 
  "1000204" -> "1000202" 
  "1000207" -> "1000140" 
  "1000207" -> "1000156" 
  "1000207" -> "1000211" 
  "1000211" -> "1000271" 
  "1000211" -> "1000217" 
  "1000215" -> "1000222" 
  "1000217" -> "1000215" 
  "1000220" -> "1000226" 
  "1000222" -> "1000220" 
  "1000226" -> "1000233" 
  "1000226" -> "1000271" 
  "1000231" -> "1000238" 
  "1000231" -> "1000265" 
  "1000232" -> "1000231" 
  "1000233" -> "1000232" 
  "1000238" -> "1000243" 
  "1000238" -> "1000247" 
  "1000241" -> "1000254" 
  "1000241" -> "1000259" 
  "1000243" -> "1000241" 
  "1000247" -> "1000254" 
  "1000247" -> "1000259" 
  "1000252" -> "1000259" 
  "1000254" -> "1000252" 
  "1000257" -> "1000152" 
  "1000259" -> "1000257" 
  "1000264" -> "1000271" 
  "1000264" -> "1000276" 
  "1000265" -> "1000264" 
  "1000271" -> "1000274" 
  "1000274" -> "1000289" 
  "1000276" -> "1000281" 
  "1000279" -> "1000284" 
  "1000281" -> "1000279" 
  "1000284" -> "1000287" 
  "1000287" -> "1000289" 
  "1000109" -> "1000123" 
}
