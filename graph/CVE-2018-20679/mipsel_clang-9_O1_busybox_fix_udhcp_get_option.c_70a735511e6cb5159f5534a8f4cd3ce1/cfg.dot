digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000131" [label = "(<operator>.addition,a1 + 108)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000136" [label = "(<operator>.addition,a1 + 44)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 240)" ]
"1000141" [label = "(<operator>.addition,a1 + 240)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000159" [label = "(<operator>.assignment,v7 = 0)" ]
"1000162" [label = "(<operator>.assignment,v8 = 0)" ]
"1000168" [label = "(<operator>.assignment,v9 = v4 + v7)" ]
"1000170" [label = "(<operator>.addition,v4 + v7)" ]
"1000173" [label = "(<operator>.assignment,v10 = *(unsigned __int8 *)(v4 + v7))" ]
"1000175" [label = "(<operator>.indirection,*(unsigned __int8 *)(v4 + v7))" ]
"1000176" [label = "(<operator>.cast,(unsigned __int8 *)(v4 + v7))" ]
"1000177" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000178" [label = "(<operator>.addition,v4 + v7)" ]
"1000182" [label = "(<operator>.indirection,*(_BYTE *)(v4 + v7))" ]
"1000183" [label = "(<operator>.cast,(_BYTE *)(v4 + v7))" ]
"1000184" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000185" [label = "(<operator>.addition,v4 + v7)" ]
"1000189" [label = "(<operator>.preDecrement,--v8)" ]
"1000191" [label = "(<operator>.preIncrement,++v7)" ]
"1000194" [label = "(<operator>.lessThan,v5 + v8 + 1 < 2)" ]
"1000195" [label = "(<operator>.addition,v5 + v8 + 1)" ]
"1000197" [label = "(<operator>.addition,v8 + 1)" ]
"1000203" [label = "(<operator>.equals,v10 == 255)" ]
"1000208" [label = "(<operator>.lessThan,v5 + v8 < 2)" ]
"1000209" [label = "(<operator>.addition,v5 + v8)" ]
"1000214" [label = "(<operator>.assignment,v11 = *(unsigned __int8 *)(v9 + 1))" ]
"1000216" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 1))" ]
"1000217" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 1))" ]
"1000218" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000219" [label = "(<operator>.addition,v9 + 1)" ]
"1000222" [label = "(<operator>.assignment,v5 = v5 - v11 + v8 - 2)" ]
"1000224" [label = "(<operator>.subtraction,v5 - v11 + v8 - 2)" ]
"1000226" [label = "(<operator>.addition,v11 + v8 - 2)" ]
"1000228" [label = "(<operator>.subtraction,v8 - 2)" ]
"1000232" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000237" [label = "(<operator>.equals,v10 == a2)" ]
"1000242" [label = "(<operator>.indirection,*(_BYTE *)(v9 + 1))" ]
"1000243" [label = "(<operator>.cast,(_BYTE *)(v9 + 1))" ]
"1000244" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000245" [label = "(<operator>.addition,v9 + 1)" ]
"1000249" [label = "(<operator>.assignment,v12 = v4 - v8)" ]
"1000251" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000254" [label = "(log_option,log_option(\"option found\", v4 - v8, 255, 1))" ]
"1000256" [label = "(<operator>.subtraction,v4 - v8)" ]
"1000261" [label = "(RETURN,return v12 + 2;,return v12 + 2;)" ]
"1000262" [label = "(<operator>.addition,v12 + 2)" ]
"1000266" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, 255, 1))" ]
"1000271" [label = "(RETURN,return 0;,return 0;)" ]
"1000274" [label = "(<operator>.logicalAnd,v10 == 52 && *(_BYTE *)(v9 + 1))" ]
"1000275" [label = "(<operator>.equals,v10 == 52)" ]
"1000278" [label = "(<operator>.indirection,*(_BYTE *)(v9 + 1))" ]
"1000279" [label = "(<operator>.cast,(_BYTE *)(v9 + 1))" ]
"1000280" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000281" [label = "(<operator>.addition,v9 + 1)" ]
"1000284" [label = "(<operators>.assignmentOr,v6 |= *(unsigned __int8 *)(v9 + 2))" ]
"1000286" [label = "(<operator>.indirection,*(unsigned __int8 *)(v9 + 2))" ]
"1000287" [label = "(<operator>.cast,(unsigned __int8 *)(v9 + 2))" ]
"1000288" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000289" [label = "(<operator>.addition,v9 + 2)" ]
"1000292" [label = "(<operator>.assignment,v4 = v4 + v11 - v8 + 2)" ]
"1000294" [label = "(<operator>.addition,v4 + v11 - v8 + 2)" ]
"1000296" [label = "(<operator>.subtraction,v11 - v8 + 2)" ]
"1000298" [label = "(<operator>.addition,v8 + 2)" ]
"1000302" [label = "(<operator>.lessEqualsThan,v5 <= 0)" ]
"1000307" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000308" [label = "(<operator>.and,v6 & 0x101)" ]
"1000313" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000316" [label = "(<operator>.assignment,v5 = 128)" ]
"1000319" [label = "(<operator>.assignment,v4 = v2)" ]
"1000325" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000326" [label = "(<operator>.and,v6 & 0x202)" ]
"1000331" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000334" [label = "(<operator>.assignment,v5 = 64)" ]
"1000337" [label = "(<operator>.assignment,v4 = v3)" ]
"1000342" [label = "(<operator>.assignment,v13 = 0)" ]
"1000346" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000347" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000348" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000351" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000354" [label = "(RETURN,return v13;,return v13;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000356" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000159" 
  "1000147" -> "1000308" 
  "1000147" -> "1000326" 
  "1000147" -> "1000342" 
  "1000159" -> "1000162" 
  "1000162" -> "1000170" 
  "1000162" -> "1000203" 
  "1000168" -> "1000177" 
  "1000170" -> "1000168" 
  "1000173" -> "1000184" 
  "1000175" -> "1000173" 
  "1000176" -> "1000175" 
  "1000177" -> "1000178" 
  "1000178" -> "1000176" 
  "1000182" -> "1000203" 
  "1000182" -> "1000308" 
  "1000182" -> "1000326" 
  "1000182" -> "1000342" 
  "1000182" -> "1000189" 
  "1000183" -> "1000182" 
  "1000184" -> "1000185" 
  "1000185" -> "1000183" 
  "1000189" -> "1000191" 
  "1000191" -> "1000197" 
  "1000194" -> "1000170" 
  "1000194" -> "1000203" 
  "1000194" -> "1000266" 
  "1000195" -> "1000194" 
  "1000197" -> "1000195" 
  "1000203" -> "1000308" 
  "1000203" -> "1000326" 
  "1000203" -> "1000342" 
  "1000203" -> "1000209" 
  "1000208" -> "1000266" 
  "1000208" -> "1000218" 
  "1000209" -> "1000208" 
  "1000214" -> "1000228" 
  "1000216" -> "1000214" 
  "1000217" -> "1000216" 
  "1000218" -> "1000219" 
  "1000219" -> "1000217" 
  "1000222" -> "1000232" 
  "1000224" -> "1000222" 
  "1000226" -> "1000224" 
  "1000228" -> "1000226" 
  "1000232" -> "1000266" 
  "1000232" -> "1000237" 
  "1000237" -> "1000244" 
  "1000237" -> "1000275" 
  "1000242" -> "1000251" 
  "1000242" -> "1000266" 
  "1000243" -> "1000242" 
  "1000244" -> "1000245" 
  "1000245" -> "1000243" 
  "1000249" -> "1000256" 
  "1000251" -> "1000249" 
  "1000254" -> "1000262" 
  "1000256" -> "1000254" 
  "1000261" -> "1000356" 
  "1000262" -> "1000261" 
  "1000266" -> "1000271" 
  "1000271" -> "1000356" 
  "1000274" -> "1000288" 
  "1000274" -> "1000298" 
  "1000275" -> "1000280" 
  "1000275" -> "1000274" 
  "1000278" -> "1000274" 
  "1000279" -> "1000278" 
  "1000280" -> "1000281" 
  "1000281" -> "1000279" 
  "1000284" -> "1000298" 
  "1000286" -> "1000284" 
  "1000287" -> "1000286" 
  "1000288" -> "1000289" 
  "1000289" -> "1000287" 
  "1000292" -> "1000302" 
  "1000294" -> "1000292" 
  "1000296" -> "1000294" 
  "1000298" -> "1000296" 
  "1000302" -> "1000159" 
  "1000302" -> "1000308" 
  "1000302" -> "1000266" 
  "1000307" -> "1000313" 
  "1000307" -> "1000326" 
  "1000307" -> "1000342" 
  "1000308" -> "1000307" 
  "1000313" -> "1000316" 
  "1000316" -> "1000319" 
  "1000319" -> "1000159" 
  "1000319" -> "1000308" 
  "1000319" -> "1000326" 
  "1000319" -> "1000342" 
  "1000319" -> "1000159" 
  "1000319" -> "1000308" 
  "1000319" -> "1000326" 
  "1000325" -> "1000331" 
  "1000325" -> "1000342" 
  "1000326" -> "1000325" 
  "1000331" -> "1000334" 
  "1000334" -> "1000337" 
  "1000337" -> "1000159" 
  "1000337" -> "1000308" 
  "1000337" -> "1000326" 
  "1000337" -> "1000342" 
  "1000342" -> "1000348" 
  "1000346" -> "1000351" 
  "1000346" -> "1000354" 
  "1000347" -> "1000346" 
  "1000348" -> "1000347" 
  "1000351" -> "1000354" 
  "1000354" -> "1000356" 
  "1000113" -> "1000131" 
}
