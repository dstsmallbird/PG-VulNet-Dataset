digraph udhcp_get_option {  
"1000132" [label = "(<operator>.assignment,v4 = a1 + 44)" ]
"1000134" [label = "(<operator>.addition,a1 + 44)" ]
"1000137" [label = "(<operator>.assignment,v5 = a1 + 108)" ]
"1000139" [label = "(<operator>.addition,a1 + 108)" ]
"1000142" [label = "(<operator>.assignment,v6 = a1 + 240)" ]
"1000144" [label = "(<operator>.addition,a1 + 240)" ]
"1000147" [label = "(<operator>.assignment,v7 = 388)" ]
"1000150" [label = "(<operator>.assignment,v8 = 0)" ]
"1000156" [label = "(<operator>.assignment,v9 = 2)" ]
"1000159" [label = "(<operator>.assignment,v10 = 0)" ]
"1000165" [label = "(<operator>.assignment,v11 = v6 + v9)" ]
"1000167" [label = "(<operator>.addition,v6 + v9)" ]
"1000170" [label = "(<operator>.assignment,v12 = *(unsigned __int8 *)(v6 + v9 - 2))" ]
"1000172" [label = "(<operator>.indirection,*(unsigned __int8 *)(v6 + v9 - 2))" ]
"1000173" [label = "(<operator>.cast,(unsigned __int8 *)(v6 + v9 - 2))" ]
"1000174" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000175" [label = "(<operator>.addition,v6 + v9 - 2)" ]
"1000177" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000181" [label = "(<operator>.indirection,*(_BYTE *)(v6 + v9 - 2))" ]
"1000182" [label = "(<operator>.cast,(_BYTE *)(v6 + v9 - 2))" ]
"1000183" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000184" [label = "(<operator>.addition,v6 + v9 - 2)" ]
"1000186" [label = "(<operator>.subtraction,v9 - 2)" ]
"1000190" [label = "(<operator>.preDecrement,--v10)" ]
"1000192" [label = "(<operator>.preIncrement,++v9)" ]
"1000195" [label = "(<operator>.lessThan,v7 + v10 + 1 < 2)" ]
"1000196" [label = "(<operator>.addition,v7 + v10 + 1)" ]
"1000198" [label = "(<operator>.addition,v10 + 1)" ]
"1000204" [label = "(<operator>.equals,v12 == 255)" ]
"1000209" [label = "(<operator>.equals,(v8 & 0x101) == 1)" ]
"1000210" [label = "(<operator>.and,v8 & 0x101)" ]
"1000215" [label = "(<operators>.assignmentOr,v8 |= 0x101u)" ]
"1000218" [label = "(<operator>.assignment,v7 = 128)" ]
"1000221" [label = "(<operator>.assignment,v6 = v5)" ]
"1000225" [label = "(<operator>.assignment,a3 = 514)" ]
"1000229" [label = "(<operator>.equals,(v8 & 0x202) == 2)" ]
"1000230" [label = "(<operator>.and,v8 & 0x202)" ]
"1000235" [label = "(<operators>.assignmentOr,v8 |= 0x202u)" ]
"1000238" [label = "(<operator>.assignment,v7 = 64)" ]
"1000241" [label = "(<operator>.assignment,v6 = v4)" ]
"1000245" [label = "(<operator>.assignment,v14 = 0)" ]
"1000249" [label = "(<operator>.lessThan,(unsigned int)dhcp_verbose < 3)" ]
"1000250" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000251" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000254" [label = "(RETURN,return v14;,return v14;)" ]
"1000256" [label = "(bb_error_msg,bb_error_msg(\"option 0x%02x not found\", a2))" ]
"1000259" [label = "(RETURN,return 0;,return 0;)" ]
"1000261" [label = "(<operator>.assignment,a3 = v7 + v10)" ]
"1000263" [label = "(<operator>.addition,v7 + v10)" ]
"1000266" [label = "(<operator>.assignment,v13 = v7 + v10 < 2)" ]
"1000268" [label = "(<operator>.lessThan,v7 + v10 < 2)" ]
"1000269" [label = "(<operator>.addition,v7 + v10)" ]
"1000274" [label = "(<operator>.greaterEqualsThan,v7 + v10 >= 2)" ]
"1000275" [label = "(<operator>.addition,v7 + v10)" ]
"1000280" [label = "(<operator>.assignment,v3 = v6 - v10)" ]
"1000282" [label = "(<operator>.subtraction,v6 - v10)" ]
"1000285" [label = "(<operator>.assignment,a3 = *(unsigned __int8 *)(v6 - v10 + 1))" ]
"1000287" [label = "(<operator>.indirection,*(unsigned __int8 *)(v6 - v10 + 1))" ]
"1000288" [label = "(<operator>.cast,(unsigned __int8 *)(v6 - v10 + 1))" ]
"1000289" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000290" [label = "(<operator>.subtraction,v6 - v10 + 1)" ]
"1000292" [label = "(<operator>.addition,v10 + 1)" ]
"1000295" [label = "(<operator>.assignment,v7 = v7 - a3 + v10 - 2)" ]
"1000297" [label = "(<operator>.subtraction,v7 - a3 + v10 - 2)" ]
"1000299" [label = "(<operator>.addition,a3 + v10 - 2)" ]
"1000301" [label = "(<operator>.subtraction,v10 - 2)" ]
"1000304" [label = "(<operator>.assignment,v13 = v7 < 0)" ]
"1000306" [label = "(<operator>.lessThan,v7 < 0)" ]
"1000313" [label = "(bb_error_msg,bb_error_msg(\"bad packet, malformed option field\", a2, a3, v9))" ]
"1000318" [label = "(RETURN,return 0;,return 0;)" ]
"1000321" [label = "(<operator>.equals,v12 == a2)" ]
"1000326" [label = "(<operator>.equals,v12 == 52)" ]
"1000332" [label = "(<operators>.assignmentOr,v8 |= *(unsigned __int8 *)(v6 + v9))" ]
"1000334" [label = "(<operator>.indirection,*(unsigned __int8 *)(v6 + v9))" ]
"1000335" [label = "(<operator>.cast,(unsigned __int8 *)(v6 + v9))" ]
"1000336" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000337" [label = "(<operator>.addition,v6 + v9)" ]
"1000340" [label = "(<operator>.assignment,v6 = v6 + a3 - v10 + 2)" ]
"1000342" [label = "(<operator>.addition,v6 + a3 - v10 + 2)" ]
"1000344" [label = "(<operator>.subtraction,a3 - v10 + 2)" ]
"1000346" [label = "(<operator>.addition,v10 + 2)" ]
"1000350" [label = "(<operator>.lessThan,v7 < 1)" ]
"1000354" [label = "(<operator>.assignment,v14 = v3 + 2)" ]
"1000356" [label = "(<operator>.addition,v3 + 2)" ]
"1000360" [label = "(<operator>.lessEqualsThan,(unsigned int)dhcp_verbose <= 1)" ]
"1000361" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000362" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000365" [label = "(RETURN,return v14;,return v14;)" ]
"1000367" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v16, v3 + 2) = 0)" ]
"1000368" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v16, v3 + 2))" ]
"1000369" [label = "(<operator>.cast,(_BYTE *)bin2hex(v16, v3 + 2))" ]
"1000370" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000371" [label = "(bin2hex,bin2hex(v16, v3 + 2))" ]
"1000373" [label = "(<operator>.addition,v3 + 2)" ]
"1000377" [label = "(bb_error_msg,bb_error_msg(\"%s: 0x%02x %s\", \"option found\", *(unsigned __int8 *)(v11 - 2), v16))" ]
"1000380" [label = "(<operator>.indirection,*(unsigned __int8 *)(v11 - 2))" ]
"1000381" [label = "(<operator>.cast,(unsigned __int8 *)(v11 - 2))" ]
"1000382" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000383" [label = "(<operator>.subtraction,v11 - 2)" ]
"1000387" [label = "(RETURN,return v14;,return v14;)" ]
"1000114" [label = "(METHOD,udhcp_get_option)" ]
"1000389" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000132" -> "1000139" 
  "1000134" -> "1000132" 
  "1000137" -> "1000144" 
  "1000139" -> "1000137" 
  "1000142" -> "1000147" 
  "1000144" -> "1000142" 
  "1000147" -> "1000150" 
  "1000150" -> "1000156" 
  "1000150" -> "1000356" 
  "1000156" -> "1000159" 
  "1000159" -> "1000167" 
  "1000159" -> "1000204" 
  "1000165" -> "1000174" 
  "1000167" -> "1000165" 
  "1000170" -> "1000183" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000174" -> "1000177" 
  "1000175" -> "1000173" 
  "1000177" -> "1000175" 
  "1000181" -> "1000204" 
  "1000181" -> "1000356" 
  "1000181" -> "1000190" 
  "1000182" -> "1000181" 
  "1000183" -> "1000186" 
  "1000184" -> "1000182" 
  "1000186" -> "1000184" 
  "1000190" -> "1000192" 
  "1000192" -> "1000198" 
  "1000195" -> "1000167" 
  "1000195" -> "1000204" 
  "1000195" -> "1000313" 
  "1000196" -> "1000195" 
  "1000198" -> "1000196" 
  "1000204" -> "1000210" 
  "1000204" -> "1000263" 
  "1000209" -> "1000215" 
  "1000209" -> "1000225" 
  "1000210" -> "1000209" 
  "1000215" -> "1000218" 
  "1000218" -> "1000221" 
  "1000221" -> "1000156" 
  "1000221" -> "1000356" 
  "1000225" -> "1000230" 
  "1000229" -> "1000235" 
  "1000229" -> "1000245" 
  "1000230" -> "1000229" 
  "1000235" -> "1000238" 
  "1000238" -> "1000241" 
  "1000241" -> "1000156" 
  "1000241" -> "1000356" 
  "1000245" -> "1000251" 
  "1000249" -> "1000254" 
  "1000249" -> "1000256" 
  "1000250" -> "1000249" 
  "1000251" -> "1000250" 
  "1000254" -> "1000389" 
  "1000256" -> "1000259" 
  "1000259" -> "1000389" 
  "1000261" -> "1000269" 
  "1000263" -> "1000261" 
  "1000266" -> "1000275" 
  "1000268" -> "1000266" 
  "1000269" -> "1000268" 
  "1000274" -> "1000282" 
  "1000274" -> "1000313" 
  "1000274" -> "1000321" 
  "1000275" -> "1000274" 
  "1000280" -> "1000289" 
  "1000282" -> "1000280" 
  "1000285" -> "1000301" 
  "1000287" -> "1000285" 
  "1000288" -> "1000287" 
  "1000289" -> "1000292" 
  "1000290" -> "1000288" 
  "1000292" -> "1000290" 
  "1000295" -> "1000306" 
  "1000297" -> "1000295" 
  "1000299" -> "1000297" 
  "1000301" -> "1000299" 
  "1000304" -> "1000313" 
  "1000304" -> "1000321" 
  "1000306" -> "1000304" 
  "1000313" -> "1000318" 
  "1000318" -> "1000389" 
  "1000321" -> "1000356" 
  "1000321" -> "1000326" 
  "1000326" -> "1000336" 
  "1000326" -> "1000346" 
  "1000326" -> "1000346" 
  "1000332" -> "1000346" 
  "1000334" -> "1000332" 
  "1000335" -> "1000334" 
  "1000336" -> "1000337" 
  "1000337" -> "1000335" 
  "1000340" -> "1000350" 
  "1000342" -> "1000340" 
  "1000344" -> "1000342" 
  "1000346" -> "1000344" 
  "1000350" -> "1000156" 
  "1000350" -> "1000356" 
  "1000350" -> "1000313" 
  "1000354" -> "1000362" 
  "1000356" -> "1000354" 
  "1000360" -> "1000370" 
  "1000360" -> "1000365" 
  "1000361" -> "1000360" 
  "1000362" -> "1000361" 
  "1000365" -> "1000389" 
  "1000367" -> "1000382" 
  "1000368" -> "1000367" 
  "1000369" -> "1000368" 
  "1000370" -> "1000373" 
  "1000371" -> "1000369" 
  "1000373" -> "1000371" 
  "1000377" -> "1000387" 
  "1000380" -> "1000377" 
  "1000381" -> "1000380" 
  "1000382" -> "1000383" 
  "1000383" -> "1000381" 
  "1000387" -> "1000389" 
  "1000114" -> "1000134" 
}
