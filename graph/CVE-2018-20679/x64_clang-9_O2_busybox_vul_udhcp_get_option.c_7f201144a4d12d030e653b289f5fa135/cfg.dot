digraph udhcp_get_option {  
"1000129" [label = "(<operator>.assignment,v2 = a1 + 240)" ]
"1000131" [label = "(<operator>.addition,a1 + 240)" ]
"1000134" [label = "(<operator>.assignment,v3 = a1 + 44)" ]
"1000136" [label = "(<operator>.addition,a1 + 44)" ]
"1000139" [label = "(<operator>.assignment,v4 = a1 + 108)" ]
"1000141" [label = "(<operator>.addition,a1 + 108)" ]
"1000144" [label = "(<operator>.assignment,v5 = 388)" ]
"1000147" [label = "(<operator>.assignment,v6 = 0)" ]
"1000153" [label = "(<operator>.assignment,LODWORD(v7) = 1)" ]
"1000154" [label = "(LODWORD,LODWORD(v7))" ]
"1000161" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v2 + v8))" ]
"1000163" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000164" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000165" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000166" [label = "(<operator>.addition,v2 + v8)" ]
"1000170" [label = "(<operator>.indirection,*(_BYTE *)(v2 + v8))" ]
"1000171" [label = "(<operator>.cast,(_BYTE *)(v2 + v8))" ]
"1000172" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000173" [label = "(<operator>.addition,v2 + v8)" ]
"1000177" [label = "(<operator>.preIncrement,++v8)" ]
"1000179" [label = "(<operator>.assignment,LODWORD(v7) = v7 - 1)" ]
"1000180" [label = "(LODWORD,LODWORD(v7))" ]
"1000182" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000185" [label = "(<operator>.assignment,v9 = v7 + v5)" ]
"1000187" [label = "(<operator>.addition,v7 + v5)" ]
"1000191" [label = "(<operator>.lessThan,(int)v7 + v5 < 2)" ]
"1000192" [label = "(<operator>.addition,(int)v7 + v5)" ]
"1000193" [label = "(<operator>.cast,(int)v7)" ]
"1000194" [label = "(UNKNOWN,int,int)" ]
"1000200" [label = "(<operator>.equals,(_BYTE)v9 == 0xFF)" ]
"1000201" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000202" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000207" [label = "(<operator>.equals,(v6 & 0x101) == 1)" ]
"1000208" [label = "(<operator>.and,v6 & 0x101)" ]
"1000213" [label = "(<operators>.assignmentOr,v6 |= 0x101u)" ]
"1000216" [label = "(<operator>.assignment,v5 = 128)" ]
"1000219" [label = "(<operator>.assignment,v2 = a1 + 108)" ]
"1000221" [label = "(<operator>.addition,a1 + 108)" ]
"1000226" [label = "(<operator>.equals,(v6 & 0x202) == 2)" ]
"1000227" [label = "(<operator>.and,v6 & 0x202)" ]
"1000232" [label = "(<operators>.assignmentOr,v6 |= 0x202u)" ]
"1000235" [label = "(<operator>.assignment,v5 = 64)" ]
"1000238" [label = "(<operator>.assignment,v2 = a1 + 44)" ]
"1000240" [label = "(<operator>.addition,a1 + 44)" ]
"1000246" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 3)" ]
"1000247" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000248" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000251" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"option 0x%02x not found\", a2, v7, v9, v3, v4, v14[0]))" ]
"1000252" [label = "(<operator>.cast,(unsigned int)\"option 0x%02x not found\")" ]
"1000253" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000260" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000265" [label = "(<operator>.assignment,LODWORD(v7) = v5 - v8)" ]
"1000266" [label = "(LODWORD,LODWORD(v7))" ]
"1000268" [label = "(<operator>.subtraction,v5 - v8)" ]
"1000272" [label = "(<operator>.logicalOr,v5 - (int)v8 < 2\n        || (v7 = *(unsigned __int8 *)(v2 + v8 + 1), v5 = v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8, v5 < 0))" ]
"1000273" [label = "(<operator>.lessThan,v5 - (int)v8 < 2)" ]
"1000274" [label = "(<operator>.subtraction,v5 - (int)v8)" ]
"1000276" [label = "(<operator>.cast,(int)v8)" ]
"1000277" [label = "(UNKNOWN,int,int)" ]
"1000281" [label = "(<operator>.assignment,v7 = *(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000283" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000284" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000285" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000286" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000288" [label = "(<operator>.addition,v8 + 1)" ]
"1000292" [label = "(<operator>.assignment,v5 = v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000294" [label = "(<operator>.subtraction,v5 - 2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000296" [label = "(<operator>.subtraction,2 - *(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000298" [label = "(<operator>.subtraction,*(unsigned __int8 *)(v2 + v8 + 1) - v8)" ]
"1000299" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000300" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 1))" ]
"1000301" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000302" [label = "(<operator>.addition,v2 + v8 + 1)" ]
"1000304" [label = "(<operator>.addition,v8 + 1)" ]
"1000308" [label = "(<operator>.lessThan,v5 < 0)" ]
"1000314" [label = "(bb_error_msg,bb_error_msg((unsigned int)\"bad packet, malformed option field\", a2, v7, v9, v3, v4, v14[0]))" ]
"1000315" [label = "(<operator>.cast,(unsigned int)\"bad packet, malformed option field\")" ]
"1000316" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000323" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000326" [label = "(RETURN,return v10;,return v10;)" ]
"1000329" [label = "(<operator>.notEquals,v9 != a2)" ]
"1000334" [label = "(<operator>.logicalAnd,(_BYTE)v9 == 52 && (_BYTE)v7)" ]
"1000335" [label = "(<operator>.equals,(_BYTE)v9 == 52)" ]
"1000336" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000337" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000340" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000341" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000344" [label = "(<operator>.assignment,v9 = *(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000346" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000347" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8 + 2))" ]
"1000348" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000349" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000351" [label = "(<operator>.addition,v8 + 2)" ]
"1000354" [label = "(<operators>.assignmentOr,v6 |= v9)" ]
"1000357" [label = "(<operator>.assignmentPlus,v2 += v8 + v7 + 2)" ]
"1000359" [label = "(<operator>.addition,v8 + v7 + 2)" ]
"1000361" [label = "(<operator>.addition,v7 + 2)" ]
"1000366" [label = "(<operator>.greaterThan,v5 > 0)" ]
"1000372" [label = "(<operator>.greaterEqualsThan,(unsigned int)dhcp_verbose >= 2)" ]
"1000373" [label = "(<operator>.cast,(unsigned int)dhcp_verbose)" ]
"1000374" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000378" [label = "(<operator>.assignment,*(_BYTE *)bin2hex(v14, v2 + v8 + 2) = 0)" ]
"1000379" [label = "(<operator>.indirection,*(_BYTE *)bin2hex(v14, v2 + v8 + 2))" ]
"1000380" [label = "(<operator>.cast,(_BYTE *)bin2hex(v14, v2 + v8 + 2))" ]
"1000381" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000382" [label = "(bin2hex,bin2hex(v14, v2 + v8 + 2))" ]
"1000384" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000386" [label = "(<operator>.addition,v8 + 2)" ]
"1000390" [label = "(bb_error_msg,bb_error_msg(\n          (unsigned int)\"%s: 0x%02x %s\",\n          (unsigned int)\"option found\",\n          *(unsigned __int8 *)(v2 + v8),\n          (unsigned int)v14,\n          v12,\n          v13,\n          v14[0]))" ]
"1000391" [label = "(<operator>.cast,(unsigned int)\"%s: 0x%02x %s\")" ]
"1000392" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000394" [label = "(<operator>.cast,(unsigned int)\"option found\")" ]
"1000395" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000397" [label = "(<operator>.indirection,*(unsigned __int8 *)(v2 + v8))" ]
"1000398" [label = "(<operator>.cast,(unsigned __int8 *)(v2 + v8))" ]
"1000399" [label = "(UNKNOWN,unsigned __int8 *,unsigned __int8 *)" ]
"1000400" [label = "(<operator>.addition,v2 + v8)" ]
"1000403" [label = "(<operator>.cast,(unsigned int)v14)" ]
"1000404" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000408" [label = "(<operator>.indirectIndexAccess,v14[0])" ]
"1000411" [label = "(<operator>.assignment,v10 = v2 + v8 + 2)" ]
"1000413" [label = "(<operator>.addition,v2 + v8 + 2)" ]
"1000415" [label = "(<operator>.addition,v8 + 2)" ]
"1000418" [label = "(RETURN,return v10;,return v10;)" ]
"1000113" [label = "(METHOD,udhcp_get_option)" ]
"1000420" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000129" -> "1000136" 
  "1000131" -> "1000129" 
  "1000134" -> "1000141" 
  "1000136" -> "1000134" 
  "1000139" -> "1000144" 
  "1000141" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000420" 
  "1000147" -> "1000154" 
  "1000153" -> "1000202" 
  "1000153" -> "1000165" 
  "1000154" -> "1000153" 
  "1000161" -> "1000172" 
  "1000163" -> "1000161" 
  "1000164" -> "1000163" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000170" -> "1000202" 
  "1000170" -> "1000420" 
  "1000170" -> "1000177" 
  "1000171" -> "1000170" 
  "1000172" -> "1000173" 
  "1000173" -> "1000171" 
  "1000177" -> "1000180" 
  "1000179" -> "1000187" 
  "1000180" -> "1000182" 
  "1000182" -> "1000179" 
  "1000185" -> "1000194" 
  "1000187" -> "1000185" 
  "1000191" -> "1000202" 
  "1000191" -> "1000165" 
  "1000191" -> "1000316" 
  "1000192" -> "1000191" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000200" -> "1000208" 
  "1000200" -> "1000266" 
  "1000201" -> "1000200" 
  "1000202" -> "1000201" 
  "1000207" -> "1000213" 
  "1000207" -> "1000227" 
  "1000208" -> "1000207" 
  "1000213" -> "1000216" 
  "1000216" -> "1000221" 
  "1000219" -> "1000366" 
  "1000221" -> "1000219" 
  "1000226" -> "1000232" 
  "1000226" -> "1000248" 
  "1000227" -> "1000226" 
  "1000232" -> "1000235" 
  "1000235" -> "1000240" 
  "1000238" -> "1000366" 
  "1000240" -> "1000238" 
  "1000246" -> "1000253" 
  "1000246" -> "1000418" 
  "1000247" -> "1000246" 
  "1000248" -> "1000247" 
  "1000251" -> "1000418" 
  "1000252" -> "1000260" 
  "1000253" -> "1000252" 
  "1000260" -> "1000251" 
  "1000265" -> "1000277" 
  "1000266" -> "1000268" 
  "1000268" -> "1000265" 
  "1000272" -> "1000316" 
  "1000272" -> "1000329" 
  "1000273" -> "1000272" 
  "1000273" -> "1000285" 
  "1000274" -> "1000273" 
  "1000276" -> "1000274" 
  "1000277" -> "1000276" 
  "1000281" -> "1000301" 
  "1000283" -> "1000281" 
  "1000284" -> "1000283" 
  "1000285" -> "1000288" 
  "1000286" -> "1000284" 
  "1000288" -> "1000286" 
  "1000292" -> "1000308" 
  "1000294" -> "1000292" 
  "1000296" -> "1000294" 
  "1000298" -> "1000296" 
  "1000299" -> "1000298" 
  "1000300" -> "1000299" 
  "1000301" -> "1000304" 
  "1000302" -> "1000300" 
  "1000304" -> "1000302" 
  "1000308" -> "1000272" 
  "1000314" -> "1000326" 
  "1000315" -> "1000323" 
  "1000316" -> "1000315" 
  "1000323" -> "1000314" 
  "1000326" -> "1000420" 
  "1000329" -> "1000337" 
  "1000329" -> "1000374" 
  "1000334" -> "1000348" 
  "1000334" -> "1000361" 
  "1000335" -> "1000341" 
  "1000335" -> "1000334" 
  "1000336" -> "1000335" 
  "1000337" -> "1000336" 
  "1000340" -> "1000334" 
  "1000341" -> "1000340" 
  "1000344" -> "1000354" 
  "1000346" -> "1000344" 
  "1000347" -> "1000346" 
  "1000348" -> "1000351" 
  "1000349" -> "1000347" 
  "1000351" -> "1000349" 
  "1000354" -> "1000361" 
  "1000357" -> "1000366" 
  "1000359" -> "1000357" 
  "1000361" -> "1000359" 
  "1000366" -> "1000420" 
  "1000366" -> "1000154" 
  "1000366" -> "1000316" 
  "1000372" -> "1000381" 
  "1000372" -> "1000415" 
  "1000373" -> "1000372" 
  "1000374" -> "1000373" 
  "1000378" -> "1000392" 
  "1000379" -> "1000378" 
  "1000380" -> "1000379" 
  "1000381" -> "1000386" 
  "1000382" -> "1000380" 
  "1000384" -> "1000382" 
  "1000386" -> "1000384" 
  "1000390" -> "1000415" 
  "1000391" -> "1000395" 
  "1000392" -> "1000391" 
  "1000394" -> "1000399" 
  "1000395" -> "1000394" 
  "1000397" -> "1000404" 
  "1000398" -> "1000397" 
  "1000399" -> "1000400" 
  "1000400" -> "1000398" 
  "1000403" -> "1000408" 
  "1000404" -> "1000403" 
  "1000408" -> "1000390" 
  "1000411" -> "1000418" 
  "1000413" -> "1000411" 
  "1000415" -> "1000413" 
  "1000418" -> "1000420" 
  "1000113" -> "1000131" 
}
