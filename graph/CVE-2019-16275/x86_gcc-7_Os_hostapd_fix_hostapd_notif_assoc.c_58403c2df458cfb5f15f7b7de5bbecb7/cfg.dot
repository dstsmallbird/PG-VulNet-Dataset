digraph hostapd_notif_assoc {  
"1000166" [label = "(<operator>.assignment,v35 = __readgsdword(0x14u))" ]
"1000168" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000171" [label = "(<operator>.logicalNot,!addr)" ]
"1000174" [label = "(wpa_printf,wpa_printf(2, \"hostapd_notif_assoc: Skip event with no address\", hapd, hapd))" ]
"1000179" [label = "(RETURN,return -1;,return -1;)" ]
"1000180" [label = "(<operator>.minus,-1)" ]
"1000182" [label = "(<operator>.assignment,v5 = *addr)" ]
"1000184" [label = "(<operator>.indirection,*addr)" ]
"1000186" [label = "(<operator>.assignment,ielen = addr[1])" ]
"1000188" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000191" [label = "(<operator>.assignment,v25 = addr[2])" ]
"1000193" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000196" [label = "(<operator>.assignment,p = addr[3])" ]
"1000198" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000201" [label = "(<operator>.assignment,v24 = addr[4])" ]
"1000203" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000206" [label = "(<operator>.assignment,v6 = addr[5])" ]
"1000208" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000212" [label = "(<operator>.logicalOr,(v5 & 1) != 0\n    || !((unsigned __int8)v6 | (unsigned __int8)(v24 | p | v25 | v5 | ielen))\n    || (v22 = addr[5], v23 = *addr, v7 = memcmp(addr, hapd->own_addr, 6u), v5 = v23, v6 = v22, !v7))" ]
"1000213" [label = "(<operator>.notEquals,(v5 & 1) != 0)" ]
"1000214" [label = "(<operator>.and,v5 & 1)" ]
"1000218" [label = "(<operator>.logicalOr,!((unsigned __int8)v6 | (unsigned __int8)(v24 | p | v25 | v5 | ielen))\n    || (v22 = addr[5], v23 = *addr, v7 = memcmp(addr, hapd->own_addr, 6u), v5 = v23, v6 = v22, !v7))" ]
"1000219" [label = "(<operator>.logicalNot,!((unsigned __int8)v6 | (unsigned __int8)(v24 | p | v25 | v5 | ielen)))" ]
"1000220" [label = "(<operator>.or,(unsigned __int8)v6 | (unsigned __int8)(v24 | p | v25 | v5 | ielen))" ]
"1000221" [label = "(<operator>.cast,(unsigned __int8)v6)" ]
"1000222" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000224" [label = "(<operator>.cast,(unsigned __int8)(v24 | p | v25 | v5 | ielen))" ]
"1000225" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000226" [label = "(<operator>.or,v24 | p | v25 | v5 | ielen)" ]
"1000228" [label = "(<operator>.or,p | v25 | v5 | ielen)" ]
"1000230" [label = "(<operator>.or,v25 | v5 | ielen)" ]
"1000232" [label = "(<operator>.or,v5 | ielen)" ]
"1000236" [label = "(<operator>.assignment,v22 = addr[5])" ]
"1000238" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000242" [label = "(<operator>.assignment,v23 = *addr)" ]
"1000244" [label = "(<operator>.indirection,*addr)" ]
"1000247" [label = "(<operator>.assignment,v7 = memcmp(addr, hapd->own_addr, 6u))" ]
"1000249" [label = "(memcmp,memcmp(addr, hapd->own_addr, 6u))" ]
"1000251" [label = "(<operator>.indirectFieldAccess,hapd->own_addr)" ]
"1000253" [label = "(FIELD_IDENTIFIER,own_addr,own_addr)" ]
"1000256" [label = "(<operator>.assignment,v5 = v23)" ]
"1000260" [label = "(<operator>.assignment,v6 = v22)" ]
"1000263" [label = "(<operator>.logicalNot,!v7)" ]
"1000266" [label = "(wpa_printf,wpa_printf(\n      2,\n      \"%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently\",\n      \"hostapd_notif_assoc\",\n      v5,\n      ielen,\n      v25,\n      p,\n      v24,\n      v6))" ]
"1000276" [label = "(RETURN,return 0;,return 0;)" ]
"1000278" [label = "(random_add_randomness,random_add_randomness(addr, 6u))" ]
"1000281" [label = "(hostapd_logger,hostapd_logger(hapd, addr, 1u, 2, \"associated\"))" ]
"1000287" [label = "(ieee802_11_parse_elems,ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0))" ]
"1000290" [label = "(<operator>.addressOf,&elems)" ]
"1000294" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000296" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000298" [label = "(<operator>.assignment,pa = (u8 *)(elems.wps_ie - 2))" ]
"1000300" [label = "(<operator>.cast,(u8 *)(elems.wps_ie - 2))" ]
"1000301" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000302" [label = "(<operator>.subtraction,elems.wps_ie - 2)" ]
"1000303" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000305" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000307" [label = "(<operator>.assignment,ielena = elems.wps_ie_len + 2)" ]
"1000309" [label = "(<operator>.addition,elems.wps_ie_len + 2)" ]
"1000310" [label = "(<operator>.fieldAccess,elems.wps_ie_len)" ]
"1000312" [label = "(FIELD_IDENTIFIER,wps_ie_len,wps_ie_len)" ]
"1000314" [label = "(wpa_printf,wpa_printf(2, \"STA included WPS IE in (Re)AssocReq\", ielena, ielena))" ]
"1000321" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000323" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000325" [label = "(<operator>.assignment,pa = (u8 *)(elems.rsn_ie - 2))" ]
"1000327" [label = "(<operator>.cast,(u8 *)(elems.rsn_ie - 2))" ]
"1000328" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000329" [label = "(<operator>.subtraction,elems.rsn_ie - 2)" ]
"1000330" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000332" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000334" [label = "(<operator>.assignment,ielena = elems.rsn_ie_len + 2)" ]
"1000336" [label = "(<operator>.addition,elems.rsn_ie_len + 2)" ]
"1000337" [label = "(<operator>.fieldAccess,elems.rsn_ie_len)" ]
"1000339" [label = "(FIELD_IDENTIFIER,rsn_ie_len,rsn_ie_len)" ]
"1000341" [label = "(wpa_printf,wpa_printf(2, \"STA included RSN IE in (Re)AssocReq\", ielena, ielena))" ]
"1000348" [label = "(<operator>.assignment,pa = (u8 *)elems.wpa_ie)" ]
"1000350" [label = "(<operator>.cast,(u8 *)elems.wpa_ie)" ]
"1000351" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000352" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000354" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000356" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000358" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000360" [label = "(<operator>.assignment,pa = (u8 *)(elems.wpa_ie - 2))" ]
"1000362" [label = "(<operator>.cast,(u8 *)(elems.wpa_ie - 2))" ]
"1000363" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000364" [label = "(<operator>.subtraction,elems.wpa_ie - 2)" ]
"1000365" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000367" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000369" [label = "(<operator>.assignment,ielena = elems.wpa_ie_len + 2)" ]
"1000371" [label = "(<operator>.addition,elems.wpa_ie_len + 2)" ]
"1000372" [label = "(<operator>.fieldAccess,elems.wpa_ie_len)" ]
"1000374" [label = "(FIELD_IDENTIFIER,wpa_ie_len,wpa_ie_len)" ]
"1000376" [label = "(wpa_printf,wpa_printf(2, \"STA included WPA IE in (Re)AssocReq\", ielena, ielena))" ]
"1000383" [label = "(wpa_printf,wpa_printf(2, \"STA did not include WPS/RSN/WPA IE in (Re)AssocReq\", 0, 0))" ]
"1000388" [label = "(<operator>.assignment,ielena = 0)" ]
"1000391" [label = "(<operator>.assignment,v8 = ap_get_sta(hapd, addr))" ]
"1000393" [label = "(ap_get_sta,ap_get_sta(hapd, addr))" ]
"1000396" [label = "(<operator>.assignment,v9 = v8)" ]
"1000402" [label = "(ap_sta_no_session_timeout,ap_sta_no_session_timeout(hapd, v8))" ]
"1000405" [label = "(accounting_sta_stop,accounting_sta_stop(hapd, v9))" ]
"1000408" [label = "(<operator>.assignment,v9->timeout_next = STA_NULLFUNC)" ]
"1000409" [label = "(<operator>.indirectFieldAccess,v9->timeout_next)" ]
"1000411" [label = "(FIELD_IDENTIFIER,timeout_next,timeout_next)" ]
"1000415" [label = "(<operator>.assignment,v9 = ap_sta_add(hapd, addr))" ]
"1000417" [label = "(ap_sta_add,ap_sta_add(hapd, addr))" ]
"1000421" [label = "(<operator>.logicalNot,!v9)" ]
"1000424" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, addr, 5))" ]
"1000428" [label = "(RETURN,return -1;,return -1;)" ]
"1000429" [label = "(<operator>.minus,-1)" ]
"1000431" [label = "(<operator>.assignment,v10 = hapd->iface)" ]
"1000433" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000435" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000436" [label = "(<operators>.assignmentAnd,v9->flags &= 0xFFFECFFF)" ]
"1000437" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000439" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000442" [label = "(<operator>.logicalAnd,!v10->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000443" [label = "(<operator>.logicalNot,!v10->drv_max_acl_mac_addrs)" ]
"1000444" [label = "(<operator>.indirectFieldAccess,v10->drv_max_acl_mac_addrs)" ]
"1000446" [label = "(FIELD_IDENTIFIER,drv_max_acl_mac_addrs,drv_max_acl_mac_addrs)" ]
"1000447" [label = "(<operator>.notEquals,hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000448" [label = "(hostapd_check_acl,hostapd_check_acl(hapd, addr, 0))" ]
"1000454" [label = "(wpa_printf,wpa_printf(\n      3,\n      \"STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect\",\n      *addr,\n      addr[1],\n      addr[2],\n      addr[3],\n      addr[4],\n      addr[5]))" ]
"1000457" [label = "(<operator>.indirection,*addr)" ]
"1000459" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000462" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000465" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000468" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000471" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000474" [label = "(<operator>.assignment,v11 = 1)" ]
"1000478" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, v9->addr, v11))" ]
"1000480" [label = "(<operator>.indirectFieldAccess,v9->addr)" ]
"1000482" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000484" [label = "(ap_free_sta,ap_free_sta(hapd, v9))" ]
"1000487" [label = "(RETURN,return -1;,return -1;)" ]
"1000488" [label = "(<operator>.minus,-1)" ]
"1000490" [label = "(ap_copy_sta_supp_op_classes,ap_copy_sta_supp_op_classes(v9, elems.supp_op_classes, elems.supp_op_classes_len))" ]
"1000492" [label = "(<operator>.fieldAccess,elems.supp_op_classes)" ]
"1000494" [label = "(FIELD_IDENTIFIER,supp_op_classes,supp_op_classes)" ]
"1000495" [label = "(<operator>.fieldAccess,elems.supp_op_classes_len)" ]
"1000497" [label = "(FIELD_IDENTIFIER,supp_op_classes_len,supp_op_classes_len)" ]
"1000498" [label = "(<operator>.assignment,v13 = hapd->conf)" ]
"1000500" [label = "(<operator>.indirectFieldAccess,hapd->conf)" ]
"1000502" [label = "(FIELD_IDENTIFIER,conf,conf)" ]
"1000504" [label = "(<operator>.logicalNot,!v13->wpa)" ]
"1000505" [label = "(<operator>.indirectFieldAccess,v13->wpa)" ]
"1000507" [label = "(FIELD_IDENTIFIER,wpa,wpa)" ]
"1000510" [label = "(<operator>.assignment,v20 = v9->flags & 2)" ]
"1000512" [label = "(<operator>.and,v9->flags & 2)" ]
"1000513" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000515" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000517" [label = "(<operator>.assignment,v9->flags = v9->flags & 0xFFF7FFFF | 3)" ]
"1000518" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000520" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000521" [label = "(<operator>.or,v9->flags & 0xFFF7FFFF | 3)" ]
"1000522" [label = "(<operator>.and,v9->flags & 0xFFF7FFFF)" ]
"1000523" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000525" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000528" [label = "(<operator>.assignment,resa = v20)" ]
"1000531" [label = "(hostapd_set_sta_flags,hostapd_set_sta_flags(hapd, v9))" ]
"1000535" [label = "(<operator>.logicalAnd,reassoc && v9->auth_alg == 2)" ]
"1000537" [label = "(<operator>.equals,v9->auth_alg == 2)" ]
"1000538" [label = "(<operator>.indirectFieldAccess,v9->auth_alg)" ]
"1000540" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000542" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v9->wpa_sm, WPA_ASSOC_FT))" ]
"1000543" [label = "(<operator>.indirectFieldAccess,v9->wpa_sm)" ]
"1000545" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000548" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v9->wpa_sm, WPA_ASSOC))" ]
"1000549" [label = "(<operator>.indirectFieldAccess,v9->wpa_sm)" ]
"1000551" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000553" [label = "(hostapd_new_assoc_sta,hostapd_new_assoc_sta(hapd, v9, resa != 0))" ]
"1000556" [label = "(<operator>.notEquals,resa != 0)" ]
"1000559" [label = "(ieee802_1x_notify_port_enabled,ieee802_1x_notify_port_enabled(v9->eapol_sm, 1))" ]
"1000560" [label = "(<operator>.indirectFieldAccess,v9->eapol_sm)" ]
"1000562" [label = "(FIELD_IDENTIFIER,eapol_sm,eapol_sm)" ]
"1000564" [label = "(RETURN,return 0;,return 0;)" ]
"1000567" [label = "(<operator>.logicalOr,!pa || !ielena)" ]
"1000568" [label = "(<operator>.logicalNot,!pa)" ]
"1000570" [label = "(<operator>.logicalNot,!ielena)" ]
"1000573" [label = "(wpa_printf,wpa_printf(2, \"No WPA/RSN IE from STA\", v13, hapd->conf))" ]
"1000577" [label = "(<operator>.indirectFieldAccess,hapd->conf)" ]
"1000579" [label = "(FIELD_IDENTIFIER,conf,conf)" ]
"1000580" [label = "(<operator>.assignment,v11 = 13)" ]
"1000585" [label = "(<operator>.logicalNot,!v9->wpa_sm)" ]
"1000586" [label = "(<operator>.indirectFieldAccess,v9->wpa_sm)" ]
"1000588" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000589" [label = "(<operator>.assignment,v9->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v9->addr, 0))" ]
"1000590" [label = "(<operator>.indirectFieldAccess,v9->wpa_sm)" ]
"1000592" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000593" [label = "(wpa_auth_sta_init,wpa_auth_sta_init(hapd->wpa_auth, v9->addr, 0))" ]
"1000594" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000596" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000597" [label = "(<operator>.indirectFieldAccess,v9->addr)" ]
"1000599" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000601" [label = "(<operator>.assignment,v14 = v9->wpa_sm)" ]
"1000603" [label = "(<operator>.indirectFieldAccess,v9->wpa_sm)" ]
"1000605" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000607" [label = "(<operator>.logicalNot,!v14)" ]
"1000610" [label = "(wpa_printf,wpa_printf(5, \"Failed to initialize WPA state machine\", v12, v12))" ]
"1000615" [label = "(RETURN,return -1;,return -1;)" ]
"1000616" [label = "(<operator>.minus,-1)" ]
"1000618" [label = "(<operator>.assignment,v15 = wpa_validate_wpa_ie(\n          hapd->wpa_auth,\n          v14,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000620" [label = "(wpa_validate_wpa_ie,wpa_validate_wpa_ie(\n          hapd->wpa_auth,\n          v14,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000621" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000623" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000625" [label = "(<operator>.indirectFieldAccess,hapd->iface->freq)" ]
"1000626" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000628" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000629" [label = "(FIELD_IDENTIFIER,freq,freq)" ]
"1000632" [label = "(<operator>.fieldAccess,elems.mdie)" ]
"1000634" [label = "(FIELD_IDENTIFIER,mdie,mdie)" ]
"1000635" [label = "(<operator>.fieldAccess,elems.mdie_len)" ]
"1000637" [label = "(FIELD_IDENTIFIER,mdie_len,mdie_len)" ]
"1000638" [label = "(<operator>.fieldAccess,elems.owe_dh)" ]
"1000640" [label = "(FIELD_IDENTIFIER,owe_dh,owe_dh)" ]
"1000641" [label = "(<operator>.fieldAccess,elems.owe_dh_len)" ]
"1000643" [label = "(FIELD_IDENTIFIER,owe_dh_len,owe_dh_len)" ]
"1000647" [label = "(<operator>.assignment,res = v15)" ]
"1000650" [label = "(wpa_printf,wpa_printf(2, \"WPA/RSN information element rejected? (res %u)\", v15, v16))" ]
"1000655" [label = "(wpa_hexdump,wpa_hexdump(2, \"IE\", pa, ielena))" ]
"1000660" [label = "(<operator>.assignment,v11 = 18)" ]
"1000664" [label = "(<operator>.notEquals,res != 2)" ]
"1000668" [label = "(<operator>.assignment,v11 = 19)" ]
"1000672" [label = "(<operator>.notEquals,res != 3)" ]
"1000676" [label = "(<operator>.assignment,v11 = 20)" ]
"1000680" [label = "(<operator>.notEquals,res != 4)" ]
"1000684" [label = "(<operator>.assignment,v11 = 13)" ]
"1000688" [label = "(<operator>.equals,res == 8)" ]
"1000691" [label = "(<operator>.assignment,v11 = 24)" ]
"1000696" [label = "(<operator>.logicalAnd,(v9->flags & 0x402) == 1026 && !v9->sa_query_timed_out && v9->sa_query_count > 0)" ]
"1000697" [label = "(<operator>.equals,(v9->flags & 0x402) == 1026)" ]
"1000698" [label = "(<operator>.and,v9->flags & 0x402)" ]
"1000699" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000701" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000704" [label = "(<operator>.logicalAnd,!v9->sa_query_timed_out && v9->sa_query_count > 0)" ]
"1000705" [label = "(<operator>.logicalNot,!v9->sa_query_timed_out)" ]
"1000706" [label = "(<operator>.indirectFieldAccess,v9->sa_query_timed_out)" ]
"1000708" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000709" [label = "(<operator>.greaterThan,v9->sa_query_count > 0)" ]
"1000710" [label = "(<operator>.indirectFieldAccess,v9->sa_query_count)" ]
"1000712" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000714" [label = "(ap_check_sa_query_timeout,ap_check_sa_query_timeout(hapd, v9))" ]
"1000718" [label = "(<operator>.logicalOr,(v9->flags & 0x402) != 1026 || (v17 = v9->sa_query_timed_out) != 0 || v9->auth_alg == 2)" ]
"1000719" [label = "(<operator>.notEquals,(v9->flags & 0x402) != 1026)" ]
"1000720" [label = "(<operator>.and,v9->flags & 0x402)" ]
"1000721" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000723" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000726" [label = "(<operator>.logicalOr,(v17 = v9->sa_query_timed_out) != 0 || v9->auth_alg == 2)" ]
"1000727" [label = "(<operator>.notEquals,(v17 = v9->sa_query_timed_out) != 0)" ]
"1000728" [label = "(<operator>.assignment,v17 = v9->sa_query_timed_out)" ]
"1000730" [label = "(<operator>.indirectFieldAccess,v9->sa_query_timed_out)" ]
"1000732" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000734" [label = "(<operator>.equals,v9->auth_alg == 2)" ]
"1000735" [label = "(<operator>.indirectFieldAccess,v9->auth_alg)" ]
"1000737" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000741" [label = "(wpa_auth_uses_mfp,wpa_auth_uses_mfp(v9->wpa_sm))" ]
"1000742" [label = "(<operator>.indirectFieldAccess,v9->wpa_sm)" ]
"1000744" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000745" [label = "(<operators>.assignmentOr,v9->flags |= 0x400u)" ]
"1000746" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000748" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000751" [label = "(<operators>.assignmentAnd,v9->flags &= 0xFFFFFBFF)" ]
"1000752" [label = "(<operator>.indirectFieldAccess,v9->flags)" ]
"1000754" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000758" [label = "(<operator>.logicalNot,!v9->sa_query_count)" ]
"1000759" [label = "(<operator>.indirectFieldAccess,v9->sa_query_count)" ]
"1000761" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000763" [label = "(ap_sta_start_sa_query,ap_sta_start_sa_query(hapd, v9))" ]
"1000766" [label = "(<operator>.assignment,v17 = 0)" ]
"1000769" [label = "(<operator>.assignment,ielenb = v17)" ]
"1000772" [label = "(<operator>.assignment,v18 = hostapd_eid_assoc_comeback_time(hapd, v9, buf))" ]
"1000774" [label = "(hostapd_eid_assoc_comeback_time,hostapd_eid_assoc_comeback_time(hapd, v9, buf))" ]
"1000778" [label = "(hostapd_sta_assoc,hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v18 - buf))" ]
"1000784" [label = "(<operator>.subtraction,v18 - buf)" ]
"1000787" [label = "(RETURN,return ielenb;,return ielenb;)" ]
"1000130" [label = "(METHOD,hostapd_notif_assoc)" ]
"1000789" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000166" -> "1000171" 
  "1000168" -> "1000166" 
  "1000171" -> "1000174" 
  "1000171" -> "1000184" 
  "1000174" -> "1000180" 
  "1000179" -> "1000789" 
  "1000180" -> "1000179" 
  "1000182" -> "1000188" 
  "1000184" -> "1000182" 
  "1000186" -> "1000193" 
  "1000188" -> "1000186" 
  "1000191" -> "1000198" 
  "1000193" -> "1000191" 
  "1000196" -> "1000203" 
  "1000198" -> "1000196" 
  "1000201" -> "1000208" 
  "1000203" -> "1000201" 
  "1000206" -> "1000214" 
  "1000208" -> "1000206" 
  "1000212" -> "1000266" 
  "1000212" -> "1000278" 
  "1000213" -> "1000222" 
  "1000213" -> "1000212" 
  "1000214" -> "1000213" 
  "1000218" -> "1000212" 
  "1000219" -> "1000218" 
  "1000219" -> "1000238" 
  "1000220" -> "1000219" 
  "1000221" -> "1000225" 
  "1000222" -> "1000221" 
  "1000224" -> "1000220" 
  "1000225" -> "1000232" 
  "1000226" -> "1000224" 
  "1000228" -> "1000226" 
  "1000230" -> "1000228" 
  "1000232" -> "1000230" 
  "1000236" -> "1000244" 
  "1000238" -> "1000236" 
  "1000242" -> "1000253" 
  "1000244" -> "1000242" 
  "1000247" -> "1000256" 
  "1000249" -> "1000247" 
  "1000251" -> "1000249" 
  "1000253" -> "1000251" 
  "1000256" -> "1000260" 
  "1000260" -> "1000263" 
  "1000263" -> "1000218" 
  "1000266" -> "1000276" 
  "1000276" -> "1000789" 
  "1000278" -> "1000281" 
  "1000281" -> "1000290" 
  "1000287" -> "1000296" 
  "1000290" -> "1000287" 
  "1000294" -> "1000301" 
  "1000294" -> "1000323" 
  "1000296" -> "1000294" 
  "1000298" -> "1000312" 
  "1000300" -> "1000298" 
  "1000301" -> "1000305" 
  "1000302" -> "1000300" 
  "1000303" -> "1000302" 
  "1000305" -> "1000303" 
  "1000307" -> "1000314" 
  "1000309" -> "1000307" 
  "1000310" -> "1000309" 
  "1000312" -> "1000310" 
  "1000314" -> "1000393" 
  "1000321" -> "1000328" 
  "1000321" -> "1000351" 
  "1000323" -> "1000321" 
  "1000325" -> "1000339" 
  "1000327" -> "1000325" 
  "1000328" -> "1000332" 
  "1000329" -> "1000327" 
  "1000330" -> "1000329" 
  "1000332" -> "1000330" 
  "1000334" -> "1000341" 
  "1000336" -> "1000334" 
  "1000337" -> "1000336" 
  "1000339" -> "1000337" 
  "1000341" -> "1000393" 
  "1000348" -> "1000358" 
  "1000350" -> "1000348" 
  "1000351" -> "1000354" 
  "1000352" -> "1000350" 
  "1000354" -> "1000352" 
  "1000356" -> "1000363" 
  "1000356" -> "1000383" 
  "1000358" -> "1000356" 
  "1000360" -> "1000374" 
  "1000362" -> "1000360" 
  "1000363" -> "1000367" 
  "1000364" -> "1000362" 
  "1000365" -> "1000364" 
  "1000367" -> "1000365" 
  "1000369" -> "1000376" 
  "1000371" -> "1000369" 
  "1000372" -> "1000371" 
  "1000374" -> "1000372" 
  "1000376" -> "1000393" 
  "1000383" -> "1000388" 
  "1000388" -> "1000393" 
  "1000391" -> "1000396" 
  "1000393" -> "1000391" 
  "1000396" -> "1000402" 
  "1000396" -> "1000417" 
  "1000402" -> "1000405" 
  "1000405" -> "1000411" 
  "1000408" -> "1000435" 
  "1000409" -> "1000408" 
  "1000411" -> "1000409" 
  "1000415" -> "1000421" 
  "1000417" -> "1000415" 
  "1000421" -> "1000424" 
  "1000421" -> "1000435" 
  "1000424" -> "1000429" 
  "1000428" -> "1000789" 
  "1000429" -> "1000428" 
  "1000431" -> "1000439" 
  "1000433" -> "1000431" 
  "1000435" -> "1000433" 
  "1000436" -> "1000446" 
  "1000437" -> "1000436" 
  "1000439" -> "1000437" 
  "1000442" -> "1000457" 
  "1000442" -> "1000494" 
  "1000443" -> "1000442" 
  "1000443" -> "1000448" 
  "1000444" -> "1000443" 
  "1000446" -> "1000444" 
  "1000447" -> "1000442" 
  "1000448" -> "1000447" 
  "1000454" -> "1000474" 
  "1000457" -> "1000459" 
  "1000459" -> "1000462" 
  "1000462" -> "1000465" 
  "1000465" -> "1000468" 
  "1000468" -> "1000471" 
  "1000471" -> "1000454" 
  "1000474" -> "1000482" 
  "1000478" -> "1000484" 
  "1000480" -> "1000478" 
  "1000482" -> "1000480" 
  "1000484" -> "1000488" 
  "1000487" -> "1000789" 
  "1000488" -> "1000487" 
  "1000490" -> "1000502" 
  "1000492" -> "1000497" 
  "1000494" -> "1000492" 
  "1000495" -> "1000490" 
  "1000497" -> "1000495" 
  "1000498" -> "1000507" 
  "1000500" -> "1000498" 
  "1000502" -> "1000500" 
  "1000504" -> "1000515" 
  "1000504" -> "1000568" 
  "1000505" -> "1000504" 
  "1000507" -> "1000505" 
  "1000510" -> "1000520" 
  "1000512" -> "1000510" 
  "1000513" -> "1000512" 
  "1000515" -> "1000513" 
  "1000517" -> "1000528" 
  "1000518" -> "1000525" 
  "1000520" -> "1000518" 
  "1000521" -> "1000517" 
  "1000522" -> "1000521" 
  "1000523" -> "1000522" 
  "1000525" -> "1000523" 
  "1000528" -> "1000531" 
  "1000531" -> "1000535" 
  "1000531" -> "1000540" 
  "1000535" -> "1000545" 
  "1000535" -> "1000551" 
  "1000537" -> "1000535" 
  "1000538" -> "1000537" 
  "1000540" -> "1000538" 
  "1000542" -> "1000556" 
  "1000543" -> "1000542" 
  "1000545" -> "1000543" 
  "1000548" -> "1000556" 
  "1000549" -> "1000548" 
  "1000551" -> "1000549" 
  "1000553" -> "1000562" 
  "1000556" -> "1000553" 
  "1000559" -> "1000564" 
  "1000560" -> "1000559" 
  "1000562" -> "1000560" 
  "1000564" -> "1000789" 
  "1000567" -> "1000579" 
  "1000567" -> "1000588" 
  "1000568" -> "1000567" 
  "1000568" -> "1000570" 
  "1000570" -> "1000567" 
  "1000573" -> "1000580" 
  "1000577" -> "1000573" 
  "1000579" -> "1000577" 
  "1000580" -> "1000482" 
  "1000585" -> "1000592" 
  "1000585" -> "1000605" 
  "1000586" -> "1000585" 
  "1000588" -> "1000586" 
  "1000589" -> "1000605" 
  "1000590" -> "1000596" 
  "1000592" -> "1000590" 
  "1000593" -> "1000589" 
  "1000594" -> "1000599" 
  "1000596" -> "1000594" 
  "1000597" -> "1000593" 
  "1000599" -> "1000597" 
  "1000601" -> "1000607" 
  "1000603" -> "1000601" 
  "1000605" -> "1000603" 
  "1000607" -> "1000610" 
  "1000607" -> "1000623" 
  "1000610" -> "1000616" 
  "1000615" -> "1000789" 
  "1000616" -> "1000615" 
  "1000618" -> "1000647" 
  "1000618" -> "1000701" 
  "1000620" -> "1000618" 
  "1000621" -> "1000628" 
  "1000623" -> "1000621" 
  "1000625" -> "1000634" 
  "1000626" -> "1000629" 
  "1000628" -> "1000626" 
  "1000629" -> "1000625" 
  "1000632" -> "1000637" 
  "1000634" -> "1000632" 
  "1000635" -> "1000640" 
  "1000637" -> "1000635" 
  "1000638" -> "1000643" 
  "1000640" -> "1000638" 
  "1000641" -> "1000620" 
  "1000643" -> "1000641" 
  "1000647" -> "1000650" 
  "1000650" -> "1000655" 
  "1000655" -> "1000660" 
  "1000660" -> "1000664" 
  "1000664" -> "1000668" 
  "1000664" -> "1000482" 
  "1000668" -> "1000672" 
  "1000672" -> "1000676" 
  "1000672" -> "1000482" 
  "1000676" -> "1000680" 
  "1000680" -> "1000684" 
  "1000680" -> "1000482" 
  "1000684" -> "1000688" 
  "1000688" -> "1000691" 
  "1000688" -> "1000482" 
  "1000691" -> "1000482" 
  "1000696" -> "1000714" 
  "1000696" -> "1000723" 
  "1000697" -> "1000696" 
  "1000697" -> "1000708" 
  "1000698" -> "1000697" 
  "1000699" -> "1000698" 
  "1000701" -> "1000699" 
  "1000704" -> "1000696" 
  "1000705" -> "1000704" 
  "1000705" -> "1000712" 
  "1000706" -> "1000705" 
  "1000708" -> "1000706" 
  "1000709" -> "1000704" 
  "1000710" -> "1000709" 
  "1000712" -> "1000710" 
  "1000714" -> "1000723" 
  "1000718" -> "1000744" 
  "1000718" -> "1000761" 
  "1000719" -> "1000718" 
  "1000719" -> "1000732" 
  "1000720" -> "1000719" 
  "1000721" -> "1000720" 
  "1000723" -> "1000721" 
  "1000726" -> "1000718" 
  "1000727" -> "1000726" 
  "1000727" -> "1000737" 
  "1000728" -> "1000727" 
  "1000730" -> "1000728" 
  "1000732" -> "1000730" 
  "1000734" -> "1000726" 
  "1000735" -> "1000734" 
  "1000737" -> "1000735" 
  "1000741" -> "1000748" 
  "1000741" -> "1000754" 
  "1000742" -> "1000741" 
  "1000744" -> "1000742" 
  "1000745" -> "1000515" 
  "1000746" -> "1000745" 
  "1000748" -> "1000746" 
  "1000751" -> "1000515" 
  "1000752" -> "1000751" 
  "1000754" -> "1000752" 
  "1000758" -> "1000763" 
  "1000758" -> "1000769" 
  "1000759" -> "1000758" 
  "1000761" -> "1000759" 
  "1000763" -> "1000766" 
  "1000766" -> "1000769" 
  "1000769" -> "1000774" 
  "1000772" -> "1000784" 
  "1000774" -> "1000772" 
  "1000778" -> "1000787" 
  "1000784" -> "1000778" 
  "1000787" -> "1000789" 
  "1000130" -> "1000168" 
}
