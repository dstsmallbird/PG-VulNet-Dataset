digraph hostapd_notif_assoc {  
"1000164" [label = "(<operator>.assignment,v34 = __readgsdword(0x14u))" ]
"1000166" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000169" [label = "(<operator>.logicalNot,!addr)" ]
"1000172" [label = "(wpa_printf,wpa_printf(2, \"hostapd_notif_assoc: Skip event with no address\"))" ]
"1000175" [label = "(RETURN,return -1;,return -1;)" ]
"1000176" [label = "(<operator>.minus,-1)" ]
"1000178" [label = "(<operator>.assignment,v5 = *addr)" ]
"1000180" [label = "(<operator>.indirection,*addr)" ]
"1000182" [label = "(<operator>.assignment,res = addr[1])" ]
"1000184" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000188" [label = "(<operator>.notEquals,(*addr & 1) != 0)" ]
"1000189" [label = "(<operator>.and,*addr & 1)" ]
"1000190" [label = "(<operator>.indirection,*addr)" ]
"1000195" [label = "(<operator>.assignment,v6 = addr[3])" ]
"1000197" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000200" [label = "(<operator>.assignment,p = addr[2])" ]
"1000202" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000205" [label = "(<operator>.assignment,ielen = addr[4])" ]
"1000207" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000210" [label = "(<operator>.assignment,v7 = addr[5])" ]
"1000212" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000216" [label = "(<operator>.assignment,p = addr[2])" ]
"1000218" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000221" [label = "(<operator>.assignment,v6 = addr[3])" ]
"1000223" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000226" [label = "(<operator>.assignment,ielen = addr[4])" ]
"1000228" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000231" [label = "(<operator>.assignment,v30 = addr[5])" ]
"1000233" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000236" [label = "(<operator>.assignment,v7 = v30 | ielen | v6 | p | v5 | addr[1])" ]
"1000238" [label = "(<operator>.or,v30 | ielen | v6 | p | v5 | addr[1])" ]
"1000240" [label = "(<operator>.or,ielen | v6 | p | v5 | addr[1])" ]
"1000242" [label = "(<operator>.or,v6 | p | v5 | addr[1])" ]
"1000244" [label = "(<operator>.or,p | v5 | addr[1])" ]
"1000246" [label = "(<operator>.or,v5 | addr[1])" ]
"1000248" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000252" [label = "(<operator>.logicalNot,!v7)" ]
"1000256" [label = "(wpa_printf,wpa_printf(\n      2,\n      \"%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently\",\n      \"hostapd_notif_assoc\",\n      v5,\n      res,\n      p,\n      v6,\n      ielen,\n      v7))" ]
"1000266" [label = "(RETURN,return 0;,return 0;)" ]
"1000268" [label = "(<operator>.assignment,v31 = addr[3])" ]
"1000270" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000274" [label = "(<operator>.logicalNot,!memcmp(addr, hapd->own_addr, 6u))" ]
"1000275" [label = "(memcmp,memcmp(addr, hapd->own_addr, 6u))" ]
"1000277" [label = "(<operator>.indirectFieldAccess,hapd->own_addr)" ]
"1000279" [label = "(FIELD_IDENTIFIER,own_addr,own_addr)" ]
"1000282" [label = "(<operator>.assignment,v7 = v30)" ]
"1000285" [label = "(<operator>.assignment,v6 = v31)" ]
"1000289" [label = "(random_add_randomness,random_add_randomness(addr, 6u))" ]
"1000292" [label = "(hostapd_logger,hostapd_logger(hapd, addr, 1u, 2, \"associated\"))" ]
"1000298" [label = "(ieee802_11_parse_elems,ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0))" ]
"1000301" [label = "(<operator>.addressOf,&elems)" ]
"1000305" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000307" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000309" [label = "(<operator>.assignment,pa = (u8 *)(elems.wps_ie - 2))" ]
"1000311" [label = "(<operator>.cast,(u8 *)(elems.wps_ie - 2))" ]
"1000312" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000313" [label = "(<operator>.subtraction,elems.wps_ie - 2)" ]
"1000314" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000316" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000318" [label = "(<operator>.assignment,ielena = elems.wps_ie_len + 2)" ]
"1000320" [label = "(<operator>.addition,elems.wps_ie_len + 2)" ]
"1000321" [label = "(<operator>.fieldAccess,elems.wps_ie_len)" ]
"1000323" [label = "(FIELD_IDENTIFIER,wps_ie_len,wps_ie_len)" ]
"1000325" [label = "(wpa_printf,wpa_printf(2, \"STA included WPS IE in (Re)AssocReq\"))" ]
"1000330" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000332" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000334" [label = "(<operator>.assignment,pa = (u8 *)(elems.rsn_ie - 2))" ]
"1000336" [label = "(<operator>.cast,(u8 *)(elems.rsn_ie - 2))" ]
"1000337" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000338" [label = "(<operator>.subtraction,elems.rsn_ie - 2)" ]
"1000339" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000341" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000343" [label = "(<operator>.assignment,ielena = elems.rsn_ie_len + 2)" ]
"1000345" [label = "(<operator>.addition,elems.rsn_ie_len + 2)" ]
"1000346" [label = "(<operator>.fieldAccess,elems.rsn_ie_len)" ]
"1000348" [label = "(FIELD_IDENTIFIER,rsn_ie_len,rsn_ie_len)" ]
"1000350" [label = "(wpa_printf,wpa_printf(2, \"STA included RSN IE in (Re)AssocReq\"))" ]
"1000355" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000357" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000359" [label = "(<operator>.assignment,pa = (u8 *)(elems.wpa_ie - 2))" ]
"1000361" [label = "(<operator>.cast,(u8 *)(elems.wpa_ie - 2))" ]
"1000362" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000363" [label = "(<operator>.subtraction,elems.wpa_ie - 2)" ]
"1000364" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000366" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000368" [label = "(<operator>.assignment,ielena = elems.wpa_ie_len + 2)" ]
"1000370" [label = "(<operator>.addition,elems.wpa_ie_len + 2)" ]
"1000371" [label = "(<operator>.fieldAccess,elems.wpa_ie_len)" ]
"1000373" [label = "(FIELD_IDENTIFIER,wpa_ie_len,wpa_ie_len)" ]
"1000375" [label = "(wpa_printf,wpa_printf(2, \"STA included WPA IE in (Re)AssocReq\"))" ]
"1000380" [label = "(wpa_printf,wpa_printf(2, \"STA did not include WPS/RSN/WPA IE in (Re)AssocReq\"))" ]
"1000383" [label = "(<operator>.assignment,ielena = 0)" ]
"1000386" [label = "(<operator>.assignment,pa = 0)" ]
"1000389" [label = "(<operator>.assignment,v10 = ap_get_sta(hapd, addr))" ]
"1000391" [label = "(ap_get_sta,ap_get_sta(hapd, addr))" ]
"1000394" [label = "(<operator>.assignment,v11 = v10)" ]
"1000400" [label = "(ap_sta_no_session_timeout,ap_sta_no_session_timeout(hapd, v10))" ]
"1000403" [label = "(accounting_sta_stop,accounting_sta_stop(hapd, v11))" ]
"1000406" [label = "(<operator>.assignment,v11->timeout_next = STA_NULLFUNC)" ]
"1000407" [label = "(<operator>.indirectFieldAccess,v11->timeout_next)" ]
"1000409" [label = "(FIELD_IDENTIFIER,timeout_next,timeout_next)" ]
"1000413" [label = "(<operator>.assignment,v11 = ap_sta_add(hapd, addr))" ]
"1000415" [label = "(ap_sta_add,ap_sta_add(hapd, addr))" ]
"1000419" [label = "(<operator>.logicalNot,!v11)" ]
"1000422" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, addr, 5))" ]
"1000426" [label = "(RETURN,return -1;,return -1;)" ]
"1000427" [label = "(<operator>.minus,-1)" ]
"1000429" [label = "(<operator>.assignment,v12 = hapd->iface)" ]
"1000431" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000433" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000434" [label = "(<operators>.assignmentAnd,v11->flags &= 0xFFFECFFF)" ]
"1000435" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000437" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000440" [label = "(<operator>.logicalAnd,!v12->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000441" [label = "(<operator>.logicalNot,!v12->drv_max_acl_mac_addrs)" ]
"1000442" [label = "(<operator>.indirectFieldAccess,v12->drv_max_acl_mac_addrs)" ]
"1000444" [label = "(FIELD_IDENTIFIER,drv_max_acl_mac_addrs,drv_max_acl_mac_addrs)" ]
"1000445" [label = "(<operator>.notEquals,hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000446" [label = "(hostapd_check_acl,hostapd_check_acl(hapd, addr, 0))" ]
"1000452" [label = "(wpa_printf,wpa_printf(\n      3,\n      \"STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect\",\n      *addr,\n      addr[1],\n      addr[2],\n      addr[3],\n      addr[4],\n      addr[5]))" ]
"1000455" [label = "(<operator>.indirection,*addr)" ]
"1000457" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000460" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000463" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000466" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000469" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000472" [label = "(<operator>.assignment,v20 = 1)" ]
"1000476" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, v11->addr, v20))" ]
"1000478" [label = "(<operator>.indirectFieldAccess,v11->addr)" ]
"1000480" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000482" [label = "(ap_free_sta,ap_free_sta(hapd, v11))" ]
"1000485" [label = "(RETURN,return -1;,return -1;)" ]
"1000486" [label = "(<operator>.minus,-1)" ]
"1000488" [label = "(ap_copy_sta_supp_op_classes,ap_copy_sta_supp_op_classes(v11, elems.supp_op_classes, elems.supp_op_classes_len))" ]
"1000490" [label = "(<operator>.fieldAccess,elems.supp_op_classes)" ]
"1000492" [label = "(FIELD_IDENTIFIER,supp_op_classes,supp_op_classes)" ]
"1000493" [label = "(<operator>.fieldAccess,elems.supp_op_classes_len)" ]
"1000495" [label = "(FIELD_IDENTIFIER,supp_op_classes_len,supp_op_classes_len)" ]
"1000497" [label = "(<operator>.logicalNot,!hapd->conf->wpa)" ]
"1000498" [label = "(<operator>.indirectFieldAccess,hapd->conf->wpa)" ]
"1000499" [label = "(<operator>.indirectFieldAccess,hapd->conf)" ]
"1000501" [label = "(FIELD_IDENTIFIER,conf,conf)" ]
"1000502" [label = "(FIELD_IDENTIFIER,wpa,wpa)" ]
"1000504" [label = "(<operator>.assignment,v16 = v11->flags)" ]
"1000506" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000508" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000511" [label = "(<operator>.logicalOr,!pa || !ielena)" ]
"1000512" [label = "(<operator>.logicalNot,!pa)" ]
"1000514" [label = "(<operator>.logicalNot,!ielena)" ]
"1000517" [label = "(wpa_printf,wpa_printf(2, \"No WPA/RSN IE from STA\"))" ]
"1000520" [label = "(<operator>.assignment,v20 = 13)" ]
"1000524" [label = "(<operator>.assignment,v13 = v11->wpa_sm)" ]
"1000526" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000528" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000530" [label = "(<operator>.logicalNot,!v13)" ]
"1000533" [label = "(<operator>.assignment,v13 = wpa_auth_sta_init(hapd->wpa_auth, v11->addr, 0))" ]
"1000535" [label = "(wpa_auth_sta_init,wpa_auth_sta_init(hapd->wpa_auth, v11->addr, 0))" ]
"1000536" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000538" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000539" [label = "(<operator>.indirectFieldAccess,v11->addr)" ]
"1000541" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000543" [label = "(<operator>.assignment,v11->wpa_sm = v13)" ]
"1000544" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000546" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000549" [label = "(<operator>.logicalNot,!v13)" ]
"1000552" [label = "(wpa_printf,wpa_printf(5, \"Failed to initialize WPA state machine\", 0, 0))" ]
"1000557" [label = "(RETURN,return -1;,return -1;)" ]
"1000558" [label = "(<operator>.minus,-1)" ]
"1000560" [label = "(<operator>.assignment,v14 = wpa_validate_wpa_ie(\n          hapd->wpa_auth,\n          v13,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000562" [label = "(wpa_validate_wpa_ie,wpa_validate_wpa_ie(\n          hapd->wpa_auth,\n          v13,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000563" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000565" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000567" [label = "(<operator>.indirectFieldAccess,hapd->iface->freq)" ]
"1000568" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000570" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000571" [label = "(FIELD_IDENTIFIER,freq,freq)" ]
"1000574" [label = "(<operator>.fieldAccess,elems.mdie)" ]
"1000576" [label = "(FIELD_IDENTIFIER,mdie,mdie)" ]
"1000577" [label = "(<operator>.fieldAccess,elems.mdie_len)" ]
"1000579" [label = "(FIELD_IDENTIFIER,mdie_len,mdie_len)" ]
"1000580" [label = "(<operator>.fieldAccess,elems.owe_dh)" ]
"1000582" [label = "(FIELD_IDENTIFIER,owe_dh,owe_dh)" ]
"1000583" [label = "(<operator>.fieldAccess,elems.owe_dh_len)" ]
"1000585" [label = "(FIELD_IDENTIFIER,owe_dh_len,owe_dh_len)" ]
"1000589" [label = "(<operator>.assignment,resa = v14)" ]
"1000592" [label = "(wpa_printf,wpa_printf(2, \"WPA/RSN information element rejected? (res %u)\", v14))" ]
"1000596" [label = "(wpa_hexdump,wpa_hexdump(2, \"IE\", pa, ielena))" ]
"1000601" [label = "(<operator>.assignment,v20 = 18)" ]
"1000605" [label = "(<operator>.notEquals,resa != 2)" ]
"1000609" [label = "(<operator>.assignment,v20 = 19)" ]
"1000613" [label = "(<operator>.notEquals,resa != 3)" ]
"1000617" [label = "(<operator>.assignment,v20 = 20)" ]
"1000621" [label = "(<operator>.notEquals,resa != 4)" ]
"1000625" [label = "(<operator>.assignment,v20 = 24)" ]
"1000629" [label = "(<operator>.notEquals,resa != 8)" ]
"1000632" [label = "(<operator>.assignment,v20 = 13)" ]
"1000637" [label = "(<operator>.equals,(v11->flags & 0x402) == 1026)" ]
"1000638" [label = "(<operator>.and,v11->flags & 0x402)" ]
"1000639" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000641" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000645" [label = "(<operator>.assignment,v18 = (u8 *)v11->sa_query_timed_out)" ]
"1000647" [label = "(<operator>.cast,(u8 *)v11->sa_query_timed_out)" ]
"1000648" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000649" [label = "(<operator>.indirectFieldAccess,v11->sa_query_timed_out)" ]
"1000651" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000653" [label = "(<operator>.logicalNot,!v18)" ]
"1000657" [label = "(<operator>.logicalOr,v11->sa_query_count <= 0\n        || (pb = (u8 *)v11->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v11), (v11->flags & 0x402) == 1026)\n        && (v18 = pb, !v11->sa_query_timed_out))" ]
"1000658" [label = "(<operator>.lessEqualsThan,v11->sa_query_count <= 0)" ]
"1000659" [label = "(<operator>.indirectFieldAccess,v11->sa_query_count)" ]
"1000661" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000663" [label = "(<operator>.logicalAnd,(pb = (u8 *)v11->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v11), (v11->flags & 0x402) == 1026)\n        && (v18 = pb, !v11->sa_query_timed_out))" ]
"1000665" [label = "(<operator>.assignment,pb = (u8 *)v11->sa_query_timed_out)" ]
"1000667" [label = "(<operator>.cast,(u8 *)v11->sa_query_timed_out)" ]
"1000668" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000669" [label = "(<operator>.indirectFieldAccess,v11->sa_query_timed_out)" ]
"1000671" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000673" [label = "(ap_check_sa_query_timeout,ap_check_sa_query_timeout(hapd, v11))" ]
"1000676" [label = "(<operator>.equals,(v11->flags & 0x402) == 1026)" ]
"1000677" [label = "(<operator>.and,v11->flags & 0x402)" ]
"1000678" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000680" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000684" [label = "(<operator>.assignment,v18 = pb)" ]
"1000687" [label = "(<operator>.logicalNot,!v11->sa_query_timed_out)" ]
"1000688" [label = "(<operator>.indirectFieldAccess,v11->sa_query_timed_out)" ]
"1000690" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000693" [label = "(<operator>.notEquals,v11->auth_alg != 2)" ]
"1000694" [label = "(<operator>.indirectFieldAccess,v11->auth_alg)" ]
"1000696" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000700" [label = "(<operator>.logicalNot,!v11->sa_query_count)" ]
"1000701" [label = "(<operator>.indirectFieldAccess,v11->sa_query_count)" ]
"1000703" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000705" [label = "(<operator>.assignment,pc = v18)" ]
"1000708" [label = "(ap_sta_start_sa_query,ap_sta_start_sa_query(hapd, v11))" ]
"1000711" [label = "(<operator>.assignment,v18 = pc)" ]
"1000714" [label = "(<operator>.assignment,ielenb = (int)v18)" ]
"1000716" [label = "(<operator>.cast,(int)v18)" ]
"1000717" [label = "(UNKNOWN,int,int)" ]
"1000719" [label = "(<operator>.assignment,v19 = hostapd_eid_assoc_comeback_time(hapd, v11, buf))" ]
"1000721" [label = "(hostapd_eid_assoc_comeback_time,hostapd_eid_assoc_comeback_time(hapd, v11, buf))" ]
"1000725" [label = "(hostapd_sta_assoc,hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v19 - buf))" ]
"1000731" [label = "(<operator>.subtraction,v19 - buf)" ]
"1000734" [label = "(RETURN,return ielenb;,return ielenb;)" ]
"1000736" [label = "(<operator>.assignment,v15 = wpa_auth_uses_mfp(v11->wpa_sm) == 0)" ]
"1000738" [label = "(<operator>.equals,wpa_auth_uses_mfp(v11->wpa_sm) == 0)" ]
"1000739" [label = "(wpa_auth_uses_mfp,wpa_auth_uses_mfp(v11->wpa_sm))" ]
"1000740" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000742" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000744" [label = "(<operator>.assignment,v16 = v11->flags)" ]
"1000746" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000748" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000751" [label = "(<operators>.assignmentAnd,BYTE1(v16) &= 0xFBu)" ]
"1000752" [label = "(BYTE1,BYTE1(v16))" ]
"1000756" [label = "(<operators>.assignmentOr,BYTE1(v16) |= 4u)" ]
"1000757" [label = "(BYTE1,BYTE1(v16))" ]
"1000761" [label = "(<operator>.assignment,v17 = v16 & 2)" ]
"1000763" [label = "(<operator>.and,v16 & 2)" ]
"1000766" [label = "(<operator>.assignment,v11->flags = v16 & 0xFFF7FFFF | 3)" ]
"1000767" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000769" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000770" [label = "(<operator>.or,v16 & 0xFFF7FFFF | 3)" ]
"1000771" [label = "(<operator>.and,v16 & 0xFFF7FFFF)" ]
"1000775" [label = "(hostapd_set_sta_flags,hostapd_set_sta_flags(hapd, v11))" ]
"1000779" [label = "(<operator>.logicalAnd,reassoc && v11->auth_alg == 2)" ]
"1000781" [label = "(<operator>.equals,v11->auth_alg == 2)" ]
"1000782" [label = "(<operator>.indirectFieldAccess,v11->auth_alg)" ]
"1000784" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000786" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v11->wpa_sm, WPA_ASSOC_FT))" ]
"1000787" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000789" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000792" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v11->wpa_sm, WPA_ASSOC))" ]
"1000793" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000795" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000797" [label = "(hostapd_new_assoc_sta,hostapd_new_assoc_sta(hapd, v11, v17 != 0))" ]
"1000800" [label = "(<operator>.notEquals,v17 != 0)" ]
"1000803" [label = "(ieee802_1x_notify_port_enabled,ieee802_1x_notify_port_enabled(v11->eapol_sm, 1))" ]
"1000804" [label = "(<operator>.indirectFieldAccess,v11->eapol_sm)" ]
"1000806" [label = "(FIELD_IDENTIFIER,eapol_sm,eapol_sm)" ]
"1000808" [label = "(RETURN,return 0;,return 0;)" ]
"1000129" [label = "(METHOD,hostapd_notif_assoc)" ]
"1000810" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000164" -> "1000169" 
  "1000166" -> "1000164" 
  "1000169" -> "1000172" 
  "1000169" -> "1000180" 
  "1000172" -> "1000176" 
  "1000175" -> "1000810" 
  "1000176" -> "1000175" 
  "1000178" -> "1000184" 
  "1000180" -> "1000178" 
  "1000182" -> "1000190" 
  "1000184" -> "1000182" 
  "1000188" -> "1000197" 
  "1000188" -> "1000218" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000195" -> "1000202" 
  "1000197" -> "1000195" 
  "1000200" -> "1000207" 
  "1000202" -> "1000200" 
  "1000205" -> "1000212" 
  "1000207" -> "1000205" 
  "1000210" -> "1000256" 
  "1000212" -> "1000210" 
  "1000216" -> "1000223" 
  "1000218" -> "1000216" 
  "1000221" -> "1000228" 
  "1000223" -> "1000221" 
  "1000226" -> "1000233" 
  "1000228" -> "1000226" 
  "1000231" -> "1000248" 
  "1000233" -> "1000231" 
  "1000236" -> "1000252" 
  "1000238" -> "1000236" 
  "1000240" -> "1000238" 
  "1000242" -> "1000240" 
  "1000244" -> "1000242" 
  "1000246" -> "1000244" 
  "1000248" -> "1000246" 
  "1000252" -> "1000256" 
  "1000252" -> "1000270" 
  "1000256" -> "1000266" 
  "1000266" -> "1000810" 
  "1000268" -> "1000279" 
  "1000270" -> "1000268" 
  "1000274" -> "1000282" 
  "1000274" -> "1000289" 
  "1000275" -> "1000274" 
  "1000277" -> "1000275" 
  "1000279" -> "1000277" 
  "1000282" -> "1000285" 
  "1000285" -> "1000256" 
  "1000289" -> "1000292" 
  "1000292" -> "1000301" 
  "1000298" -> "1000307" 
  "1000301" -> "1000298" 
  "1000305" -> "1000312" 
  "1000305" -> "1000332" 
  "1000307" -> "1000305" 
  "1000309" -> "1000323" 
  "1000311" -> "1000309" 
  "1000312" -> "1000316" 
  "1000313" -> "1000311" 
  "1000314" -> "1000313" 
  "1000316" -> "1000314" 
  "1000318" -> "1000325" 
  "1000320" -> "1000318" 
  "1000321" -> "1000320" 
  "1000323" -> "1000321" 
  "1000325" -> "1000391" 
  "1000330" -> "1000337" 
  "1000330" -> "1000357" 
  "1000332" -> "1000330" 
  "1000334" -> "1000348" 
  "1000336" -> "1000334" 
  "1000337" -> "1000341" 
  "1000338" -> "1000336" 
  "1000339" -> "1000338" 
  "1000341" -> "1000339" 
  "1000343" -> "1000350" 
  "1000345" -> "1000343" 
  "1000346" -> "1000345" 
  "1000348" -> "1000346" 
  "1000350" -> "1000391" 
  "1000355" -> "1000362" 
  "1000355" -> "1000380" 
  "1000357" -> "1000355" 
  "1000359" -> "1000373" 
  "1000361" -> "1000359" 
  "1000362" -> "1000366" 
  "1000363" -> "1000361" 
  "1000364" -> "1000363" 
  "1000366" -> "1000364" 
  "1000368" -> "1000375" 
  "1000370" -> "1000368" 
  "1000371" -> "1000370" 
  "1000373" -> "1000371" 
  "1000375" -> "1000391" 
  "1000380" -> "1000383" 
  "1000383" -> "1000386" 
  "1000386" -> "1000391" 
  "1000389" -> "1000394" 
  "1000391" -> "1000389" 
  "1000394" -> "1000400" 
  "1000394" -> "1000415" 
  "1000400" -> "1000403" 
  "1000403" -> "1000409" 
  "1000406" -> "1000433" 
  "1000407" -> "1000406" 
  "1000409" -> "1000407" 
  "1000413" -> "1000419" 
  "1000415" -> "1000413" 
  "1000419" -> "1000422" 
  "1000419" -> "1000433" 
  "1000422" -> "1000427" 
  "1000426" -> "1000810" 
  "1000427" -> "1000426" 
  "1000429" -> "1000437" 
  "1000431" -> "1000429" 
  "1000433" -> "1000431" 
  "1000434" -> "1000444" 
  "1000435" -> "1000434" 
  "1000437" -> "1000435" 
  "1000440" -> "1000455" 
  "1000440" -> "1000492" 
  "1000441" -> "1000440" 
  "1000441" -> "1000446" 
  "1000442" -> "1000441" 
  "1000444" -> "1000442" 
  "1000445" -> "1000440" 
  "1000446" -> "1000445" 
  "1000452" -> "1000472" 
  "1000455" -> "1000457" 
  "1000457" -> "1000460" 
  "1000460" -> "1000463" 
  "1000463" -> "1000466" 
  "1000466" -> "1000469" 
  "1000469" -> "1000452" 
  "1000472" -> "1000480" 
  "1000476" -> "1000482" 
  "1000478" -> "1000476" 
  "1000480" -> "1000478" 
  "1000482" -> "1000486" 
  "1000485" -> "1000810" 
  "1000486" -> "1000485" 
  "1000488" -> "1000501" 
  "1000490" -> "1000495" 
  "1000492" -> "1000490" 
  "1000493" -> "1000488" 
  "1000495" -> "1000493" 
  "1000497" -> "1000508" 
  "1000497" -> "1000512" 
  "1000498" -> "1000497" 
  "1000499" -> "1000502" 
  "1000501" -> "1000499" 
  "1000502" -> "1000498" 
  "1000504" -> "1000763" 
  "1000506" -> "1000504" 
  "1000508" -> "1000506" 
  "1000511" -> "1000517" 
  "1000511" -> "1000528" 
  "1000512" -> "1000511" 
  "1000512" -> "1000514" 
  "1000514" -> "1000511" 
  "1000517" -> "1000520" 
  "1000520" -> "1000480" 
  "1000524" -> "1000530" 
  "1000526" -> "1000524" 
  "1000528" -> "1000526" 
  "1000530" -> "1000538" 
  "1000530" -> "1000565" 
  "1000533" -> "1000546" 
  "1000535" -> "1000533" 
  "1000536" -> "1000541" 
  "1000538" -> "1000536" 
  "1000539" -> "1000535" 
  "1000541" -> "1000539" 
  "1000543" -> "1000549" 
  "1000544" -> "1000543" 
  "1000546" -> "1000544" 
  "1000549" -> "1000552" 
  "1000549" -> "1000565" 
  "1000552" -> "1000558" 
  "1000557" -> "1000810" 
  "1000558" -> "1000557" 
  "1000560" -> "1000589" 
  "1000560" -> "1000641" 
  "1000562" -> "1000560" 
  "1000563" -> "1000570" 
  "1000565" -> "1000563" 
  "1000567" -> "1000576" 
  "1000568" -> "1000571" 
  "1000570" -> "1000568" 
  "1000571" -> "1000567" 
  "1000574" -> "1000579" 
  "1000576" -> "1000574" 
  "1000577" -> "1000582" 
  "1000579" -> "1000577" 
  "1000580" -> "1000585" 
  "1000582" -> "1000580" 
  "1000583" -> "1000562" 
  "1000585" -> "1000583" 
  "1000589" -> "1000592" 
  "1000592" -> "1000596" 
  "1000596" -> "1000601" 
  "1000601" -> "1000605" 
  "1000605" -> "1000609" 
  "1000605" -> "1000480" 
  "1000609" -> "1000613" 
  "1000613" -> "1000617" 
  "1000613" -> "1000480" 
  "1000617" -> "1000621" 
  "1000621" -> "1000625" 
  "1000621" -> "1000480" 
  "1000625" -> "1000629" 
  "1000629" -> "1000632" 
  "1000629" -> "1000480" 
  "1000632" -> "1000480" 
  "1000637" -> "1000648" 
  "1000637" -> "1000742" 
  "1000638" -> "1000637" 
  "1000639" -> "1000638" 
  "1000641" -> "1000639" 
  "1000645" -> "1000653" 
  "1000647" -> "1000645" 
  "1000648" -> "1000651" 
  "1000649" -> "1000647" 
  "1000651" -> "1000649" 
  "1000653" -> "1000661" 
  "1000653" -> "1000742" 
  "1000657" -> "1000696" 
  "1000657" -> "1000742" 
  "1000658" -> "1000657" 
  "1000658" -> "1000668" 
  "1000659" -> "1000658" 
  "1000661" -> "1000659" 
  "1000663" -> "1000657" 
  "1000665" -> "1000673" 
  "1000667" -> "1000665" 
  "1000668" -> "1000671" 
  "1000669" -> "1000667" 
  "1000671" -> "1000669" 
  "1000673" -> "1000680" 
  "1000676" -> "1000663" 
  "1000676" -> "1000684" 
  "1000677" -> "1000676" 
  "1000678" -> "1000677" 
  "1000680" -> "1000678" 
  "1000684" -> "1000690" 
  "1000687" -> "1000663" 
  "1000688" -> "1000687" 
  "1000690" -> "1000688" 
  "1000693" -> "1000703" 
  "1000693" -> "1000742" 
  "1000694" -> "1000693" 
  "1000696" -> "1000694" 
  "1000700" -> "1000705" 
  "1000700" -> "1000717" 
  "1000701" -> "1000700" 
  "1000703" -> "1000701" 
  "1000705" -> "1000708" 
  "1000708" -> "1000711" 
  "1000711" -> "1000717" 
  "1000714" -> "1000721" 
  "1000716" -> "1000714" 
  "1000717" -> "1000716" 
  "1000719" -> "1000731" 
  "1000721" -> "1000719" 
  "1000725" -> "1000734" 
  "1000731" -> "1000725" 
  "1000734" -> "1000810" 
  "1000736" -> "1000748" 
  "1000738" -> "1000736" 
  "1000739" -> "1000738" 
  "1000740" -> "1000739" 
  "1000742" -> "1000740" 
  "1000744" -> "1000752" 
  "1000744" -> "1000757" 
  "1000746" -> "1000744" 
  "1000748" -> "1000746" 
  "1000751" -> "1000763" 
  "1000752" -> "1000751" 
  "1000756" -> "1000763" 
  "1000757" -> "1000756" 
  "1000761" -> "1000769" 
  "1000763" -> "1000761" 
  "1000766" -> "1000775" 
  "1000767" -> "1000771" 
  "1000769" -> "1000767" 
  "1000770" -> "1000766" 
  "1000771" -> "1000770" 
  "1000775" -> "1000779" 
  "1000775" -> "1000784" 
  "1000779" -> "1000789" 
  "1000779" -> "1000795" 
  "1000781" -> "1000779" 
  "1000782" -> "1000781" 
  "1000784" -> "1000782" 
  "1000786" -> "1000800" 
  "1000787" -> "1000786" 
  "1000789" -> "1000787" 
  "1000792" -> "1000800" 
  "1000793" -> "1000792" 
  "1000795" -> "1000793" 
  "1000797" -> "1000806" 
  "1000800" -> "1000797" 
  "1000803" -> "1000808" 
  "1000804" -> "1000803" 
  "1000806" -> "1000804" 
  "1000808" -> "1000810" 
  "1000129" -> "1000166" 
}
