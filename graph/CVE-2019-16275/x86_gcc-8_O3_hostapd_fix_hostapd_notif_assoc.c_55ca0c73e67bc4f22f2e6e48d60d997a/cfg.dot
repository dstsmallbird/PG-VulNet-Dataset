digraph hostapd_notif_assoc {  
"1000166" [label = "(<operator>.assignment,v35 = __readgsdword(0x14u))" ]
"1000168" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000171" [label = "(<operator>.logicalNot,!addr)" ]
"1000174" [label = "(wpa_printf,wpa_printf(2, \"hostapd_notif_assoc: Skip event with no address\"))" ]
"1000177" [label = "(RETURN,return -1;,return -1;)" ]
"1000178" [label = "(<operator>.minus,-1)" ]
"1000180" [label = "(<operator>.assignment,v5 = *addr)" ]
"1000182" [label = "(<operator>.indirection,*addr)" ]
"1000184" [label = "(<operator>.assignment,v6 = addr[4])" ]
"1000186" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000189" [label = "(<operator>.assignment,p = addr[2])" ]
"1000191" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000194" [label = "(<operator>.assignment,ielen = addr[3])" ]
"1000196" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000200" [label = "(<operator>.logicalOr,(v5 & 1) != 0\n    || !(addr[5] | (unsigned __int8)(v6 | ielen | p | v5 | addr[1]))\n    || *(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000201" [label = "(<operator>.notEquals,(v5 & 1) != 0)" ]
"1000202" [label = "(<operator>.and,v5 & 1)" ]
"1000206" [label = "(<operator>.logicalOr,!(addr[5] | (unsigned __int8)(v6 | ielen | p | v5 | addr[1]))\n    || *(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000207" [label = "(<operator>.logicalNot,!(addr[5] | (unsigned __int8)(v6 | ielen | p | v5 | addr[1])))" ]
"1000208" [label = "(<operator>.or,addr[5] | (unsigned __int8)(v6 | ielen | p | v5 | addr[1]))" ]
"1000209" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000212" [label = "(<operator>.cast,(unsigned __int8)(v6 | ielen | p | v5 | addr[1]))" ]
"1000213" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000214" [label = "(<operator>.or,v6 | ielen | p | v5 | addr[1])" ]
"1000216" [label = "(<operator>.or,ielen | p | v5 | addr[1])" ]
"1000218" [label = "(<operator>.or,p | v5 | addr[1])" ]
"1000220" [label = "(<operator>.or,v5 | addr[1])" ]
"1000222" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000225" [label = "(<operator>.logicalAnd,*(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000226" [label = "(<operator>.equals,*(_DWORD *)addr == *(_DWORD *)hapd->own_addr)" ]
"1000227" [label = "(<operator>.indirection,*(_DWORD *)addr)" ]
"1000228" [label = "(<operator>.cast,(_DWORD *)addr)" ]
"1000229" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000231" [label = "(<operator>.indirection,*(_DWORD *)hapd->own_addr)" ]
"1000232" [label = "(<operator>.cast,(_DWORD *)hapd->own_addr)" ]
"1000233" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000234" [label = "(<operator>.indirectFieldAccess,hapd->own_addr)" ]
"1000236" [label = "(FIELD_IDENTIFIER,own_addr,own_addr)" ]
"1000237" [label = "(<operator>.equals,*((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000238" [label = "(<operator>.indirection,*((_WORD *)addr + 2))" ]
"1000239" [label = "(<operator>.addition,(_WORD *)addr + 2)" ]
"1000240" [label = "(<operator>.cast,(_WORD *)addr)" ]
"1000241" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000244" [label = "(<operator>.indirection,*(_WORD *)&hapd->own_addr[4])" ]
"1000245" [label = "(<operator>.cast,(_WORD *)&hapd->own_addr[4])" ]
"1000246" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000247" [label = "(<operator>.addressOf,&hapd->own_addr[4])" ]
"1000248" [label = "(<operator>.indirectIndexAccess,hapd->own_addr[4])" ]
"1000249" [label = "(<operator>.indirectFieldAccess,hapd->own_addr)" ]
"1000251" [label = "(FIELD_IDENTIFIER,own_addr,own_addr)" ]
"1000254" [label = "(wpa_printf,wpa_printf(\n      2,\n      \"%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently\",\n      \"hostapd_notif_assoc\",\n      v5,\n      addr[1],\n      p,\n      ielen,\n      v6,\n      addr[5]))" ]
"1000259" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000265" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000268" [label = "(RETURN,return 0;,return 0;)" ]
"1000270" [label = "(random_add_randomness,random_add_randomness(addr, 6u))" ]
"1000273" [label = "(hostapd_logger,hostapd_logger(hapd, addr, 1u, 2, \"associated\"))" ]
"1000279" [label = "(ieee802_11_parse_elems,ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0))" ]
"1000282" [label = "(<operator>.addressOf,&elems)" ]
"1000286" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000288" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000290" [label = "(<operator>.assignment,pa = (u8 *)(elems.wps_ie - 2))" ]
"1000292" [label = "(<operator>.cast,(u8 *)(elems.wps_ie - 2))" ]
"1000293" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000294" [label = "(<operator>.subtraction,elems.wps_ie - 2)" ]
"1000295" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000297" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000299" [label = "(<operator>.assignment,ielena = elems.wps_ie_len + 2)" ]
"1000301" [label = "(<operator>.addition,elems.wps_ie_len + 2)" ]
"1000302" [label = "(<operator>.fieldAccess,elems.wps_ie_len)" ]
"1000304" [label = "(FIELD_IDENTIFIER,wps_ie_len,wps_ie_len)" ]
"1000306" [label = "(wpa_printf,wpa_printf(2, \"STA included WPS IE in (Re)AssocReq\"))" ]
"1000310" [label = "(<operator>.assignment,res = 0)" ]
"1000315" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000317" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000319" [label = "(<operator>.assignment,pa = (u8 *)(elems.rsn_ie - 2))" ]
"1000321" [label = "(<operator>.cast,(u8 *)(elems.rsn_ie - 2))" ]
"1000322" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000323" [label = "(<operator>.subtraction,elems.rsn_ie - 2)" ]
"1000324" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000326" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000328" [label = "(<operator>.assignment,ielena = elems.rsn_ie_len + 2)" ]
"1000330" [label = "(<operator>.addition,elems.rsn_ie_len + 2)" ]
"1000331" [label = "(<operator>.fieldAccess,elems.rsn_ie_len)" ]
"1000333" [label = "(FIELD_IDENTIFIER,rsn_ie_len,rsn_ie_len)" ]
"1000335" [label = "(wpa_printf,wpa_printf(2, \"STA included RSN IE in (Re)AssocReq\"))" ]
"1000339" [label = "(<operator>.assignment,pa = (u8 *)elems.wpa_ie)" ]
"1000341" [label = "(<operator>.cast,(u8 *)elems.wpa_ie)" ]
"1000342" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000343" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000345" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000347" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000349" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000351" [label = "(<operator>.assignment,pa = (u8 *)(elems.wpa_ie - 2))" ]
"1000353" [label = "(<operator>.cast,(u8 *)(elems.wpa_ie - 2))" ]
"1000354" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000355" [label = "(<operator>.subtraction,elems.wpa_ie - 2)" ]
"1000356" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000358" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000360" [label = "(<operator>.assignment,ielena = elems.wpa_ie_len + 2)" ]
"1000362" [label = "(<operator>.addition,elems.wpa_ie_len + 2)" ]
"1000363" [label = "(<operator>.fieldAccess,elems.wpa_ie_len)" ]
"1000365" [label = "(FIELD_IDENTIFIER,wpa_ie_len,wpa_ie_len)" ]
"1000367" [label = "(wpa_printf,wpa_printf(2, \"STA included WPA IE in (Re)AssocReq\"))" ]
"1000371" [label = "(wpa_printf,wpa_printf(2, \"STA did not include WPS/RSN/WPA IE in (Re)AssocReq\"))" ]
"1000374" [label = "(<operator>.assignment,res = 1)" ]
"1000377" [label = "(<operator>.assignment,ielena = 0)" ]
"1000381" [label = "(<operator>.assignment,v7 = ap_get_sta(hapd, addr))" ]
"1000383" [label = "(ap_get_sta,ap_get_sta(hapd, addr))" ]
"1000386" [label = "(<operator>.assignment,v8 = v7)" ]
"1000392" [label = "(ap_sta_no_session_timeout,ap_sta_no_session_timeout(hapd, v7))" ]
"1000395" [label = "(accounting_sta_stop,accounting_sta_stop(hapd, v8))" ]
"1000398" [label = "(<operator>.assignment,v8->timeout_next = STA_NULLFUNC)" ]
"1000399" [label = "(<operator>.indirectFieldAccess,v8->timeout_next)" ]
"1000401" [label = "(FIELD_IDENTIFIER,timeout_next,timeout_next)" ]
"1000405" [label = "(<operator>.assignment,v8 = ap_sta_add(hapd, addr))" ]
"1000407" [label = "(ap_sta_add,ap_sta_add(hapd, addr))" ]
"1000411" [label = "(<operator>.logicalNot,!v8)" ]
"1000414" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, addr, 5))" ]
"1000418" [label = "(RETURN,return -1;,return -1;)" ]
"1000419" [label = "(<operator>.minus,-1)" ]
"1000421" [label = "(<operator>.assignment,v9 = hapd->iface)" ]
"1000423" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000425" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000426" [label = "(<operators>.assignmentAnd,v8->flags &= 0xFFFECFFF)" ]
"1000427" [label = "(<operator>.indirectFieldAccess,v8->flags)" ]
"1000429" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000432" [label = "(<operator>.logicalAnd,!v9->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000433" [label = "(<operator>.logicalNot,!v9->drv_max_acl_mac_addrs)" ]
"1000434" [label = "(<operator>.indirectFieldAccess,v9->drv_max_acl_mac_addrs)" ]
"1000436" [label = "(FIELD_IDENTIFIER,drv_max_acl_mac_addrs,drv_max_acl_mac_addrs)" ]
"1000437" [label = "(<operator>.notEquals,hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000438" [label = "(hostapd_check_acl,hostapd_check_acl(hapd, addr, 0))" ]
"1000444" [label = "(wpa_printf,wpa_printf(\n      3,\n      \"STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect\",\n      *addr,\n      addr[1],\n      addr[2],\n      addr[3],\n      addr[4],\n      addr[5]))" ]
"1000447" [label = "(<operator>.indirection,*addr)" ]
"1000449" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000452" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000455" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000458" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000461" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000464" [label = "(<operator>.assignment,v23 = 1)" ]
"1000468" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, v8->addr, v23))" ]
"1000470" [label = "(<operator>.indirectFieldAccess,v8->addr)" ]
"1000472" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000474" [label = "(ap_free_sta,ap_free_sta(hapd, v8))" ]
"1000477" [label = "(RETURN,return -1;,return -1;)" ]
"1000478" [label = "(<operator>.minus,-1)" ]
"1000480" [label = "(ap_copy_sta_supp_op_classes,ap_copy_sta_supp_op_classes(v8, elems.supp_op_classes, elems.supp_op_classes_len))" ]
"1000482" [label = "(<operator>.fieldAccess,elems.supp_op_classes)" ]
"1000484" [label = "(FIELD_IDENTIFIER,supp_op_classes,supp_op_classes)" ]
"1000485" [label = "(<operator>.fieldAccess,elems.supp_op_classes_len)" ]
"1000487" [label = "(FIELD_IDENTIFIER,supp_op_classes_len,supp_op_classes_len)" ]
"1000489" [label = "(<operator>.logicalNot,!hapd->conf->wpa)" ]
"1000490" [label = "(<operator>.indirectFieldAccess,hapd->conf->wpa)" ]
"1000491" [label = "(<operator>.indirectFieldAccess,hapd->conf)" ]
"1000493" [label = "(FIELD_IDENTIFIER,conf,conf)" ]
"1000494" [label = "(FIELD_IDENTIFIER,wpa,wpa)" ]
"1000496" [label = "(<operator>.assignment,v15 = v8->flags)" ]
"1000498" [label = "(<operator>.indirectFieldAccess,v8->flags)" ]
"1000500" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000502" [label = "(<operator>.assignment,v16 = v15 & 2)" ]
"1000504" [label = "(<operator>.and,v15 & 2)" ]
"1000507" [label = "(<operator>.assignment,v8->flags = v15 & 0xFFF7FFFF | 3)" ]
"1000508" [label = "(<operator>.indirectFieldAccess,v8->flags)" ]
"1000510" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000511" [label = "(<operator>.or,v15 & 0xFFF7FFFF | 3)" ]
"1000512" [label = "(<operator>.and,v15 & 0xFFF7FFFF)" ]
"1000516" [label = "(hostapd_set_sta_flags,hostapd_set_sta_flags(hapd, v8))" ]
"1000519" [label = "(<operator>.assignment,v17 = v8->wpa_sm)" ]
"1000521" [label = "(<operator>.indirectFieldAccess,v8->wpa_sm)" ]
"1000523" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000525" [label = "(<operator>.logicalAnd,reassoc && v8->auth_alg == 2)" ]
"1000527" [label = "(<operator>.equals,v8->auth_alg == 2)" ]
"1000528" [label = "(<operator>.indirectFieldAccess,v8->auth_alg)" ]
"1000530" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000532" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v17, WPA_ASSOC_FT))" ]
"1000536" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v17, WPA_ASSOC))" ]
"1000539" [label = "(hostapd_new_assoc_sta,hostapd_new_assoc_sta(hapd, v8, v16 != 0))" ]
"1000542" [label = "(<operator>.notEquals,v16 != 0)" ]
"1000545" [label = "(ieee802_1x_notify_port_enabled,ieee802_1x_notify_port_enabled(v8->eapol_sm, 1))" ]
"1000546" [label = "(<operator>.indirectFieldAccess,v8->eapol_sm)" ]
"1000548" [label = "(FIELD_IDENTIFIER,eapol_sm,eapol_sm)" ]
"1000550" [label = "(RETURN,return 0;,return 0;)" ]
"1000553" [label = "(<operator>.logicalOr,!pa || res)" ]
"1000554" [label = "(<operator>.logicalNot,!pa)" ]
"1000558" [label = "(wpa_printf,wpa_printf(2, \"No WPA/RSN IE from STA\", addr, addr))" ]
"1000563" [label = "(<operator>.assignment,v23 = 13)" ]
"1000567" [label = "(<operator>.assignment,v10 = v8->wpa_sm)" ]
"1000569" [label = "(<operator>.indirectFieldAccess,v8->wpa_sm)" ]
"1000571" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000572" [label = "(<operator>.assignment,v11 = hapd->wpa_auth)" ]
"1000574" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000576" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000578" [label = "(<operator>.logicalNot,!v10)" ]
"1000581" [label = "(<operator>.assignment,v10 = wpa_auth_sta_init(v11, v8->addr, 0))" ]
"1000583" [label = "(wpa_auth_sta_init,wpa_auth_sta_init(v11, v8->addr, 0))" ]
"1000585" [label = "(<operator>.indirectFieldAccess,v8->addr)" ]
"1000587" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000589" [label = "(<operator>.assignment,v8->wpa_sm = v10)" ]
"1000590" [label = "(<operator>.indirectFieldAccess,v8->wpa_sm)" ]
"1000592" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000595" [label = "(<operator>.logicalNot,!v10)" ]
"1000598" [label = "(wpa_printf,wpa_printf(5, \"Failed to initialize WPA state machine\", v22, v22))" ]
"1000603" [label = "(RETURN,return -1;,return -1;)" ]
"1000604" [label = "(<operator>.minus,-1)" ]
"1000606" [label = "(<operator>.assignment,v11 = hapd->wpa_auth)" ]
"1000608" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000610" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000611" [label = "(<operator>.assignment,v12 = wpa_validate_wpa_ie(\n          v11,\n          v10,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000613" [label = "(wpa_validate_wpa_ie,wpa_validate_wpa_ie(\n          v11,\n          v10,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000616" [label = "(<operator>.indirectFieldAccess,hapd->iface->freq)" ]
"1000617" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000619" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000620" [label = "(FIELD_IDENTIFIER,freq,freq)" ]
"1000623" [label = "(<operator>.fieldAccess,elems.mdie)" ]
"1000625" [label = "(FIELD_IDENTIFIER,mdie,mdie)" ]
"1000626" [label = "(<operator>.fieldAccess,elems.mdie_len)" ]
"1000628" [label = "(FIELD_IDENTIFIER,mdie_len,mdie_len)" ]
"1000629" [label = "(<operator>.fieldAccess,elems.owe_dh)" ]
"1000631" [label = "(FIELD_IDENTIFIER,owe_dh,owe_dh)" ]
"1000632" [label = "(<operator>.fieldAccess,elems.owe_dh_len)" ]
"1000634" [label = "(FIELD_IDENTIFIER,owe_dh_len,owe_dh_len)" ]
"1000638" [label = "(<operator>.assignment,resa = v12)" ]
"1000641" [label = "(wpa_printf,wpa_printf(2, \"WPA/RSN information element rejected? (res %u)\", v12, v13))" ]
"1000646" [label = "(wpa_hexdump,wpa_hexdump(2, \"IE\", pa, ielena))" ]
"1000655" [label = "(<operator>.assignment,v23 = 18)" ]
"1000660" [label = "(<operator>.assignment,v23 = 19)" ]
"1000665" [label = "(<operator>.assignment,v23 = 20)" ]
"1000670" [label = "(<operator>.assignment,v23 = 24)" ]
"1000674" [label = "(<operator>.notEquals,resa != 8)" ]
"1000677" [label = "(<operator>.assignment,v23 = 13)" ]
"1000683" [label = "(<operator>.logicalOr,(v8->flags & 0x402) != 1026\n    || (v20 = (u8 *)v8->sa_query_timed_out) != 0\n    || v8->sa_query_count > 0\n    && ((pb = (u8 *)v8->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v8), (v8->flags & 0x402) != 1026)\n     || (v20 = pb, v8->sa_query_timed_out))\n    || v8->auth_alg == 2)" ]
"1000684" [label = "(<operator>.notEquals,(v8->flags & 0x402) != 1026)" ]
"1000685" [label = "(<operator>.and,v8->flags & 0x402)" ]
"1000686" [label = "(<operator>.indirectFieldAccess,v8->flags)" ]
"1000688" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000691" [label = "(<operator>.logicalOr,(v20 = (u8 *)v8->sa_query_timed_out) != 0\n    || v8->sa_query_count > 0\n    && ((pb = (u8 *)v8->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v8), (v8->flags & 0x402) != 1026)\n     || (v20 = pb, v8->sa_query_timed_out))\n    || v8->auth_alg == 2)" ]
"1000692" [label = "(<operator>.notEquals,(v20 = (u8 *)v8->sa_query_timed_out) != 0)" ]
"1000693" [label = "(<operator>.assignment,v20 = (u8 *)v8->sa_query_timed_out)" ]
"1000695" [label = "(<operator>.cast,(u8 *)v8->sa_query_timed_out)" ]
"1000696" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000697" [label = "(<operator>.indirectFieldAccess,v8->sa_query_timed_out)" ]
"1000699" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000701" [label = "(<operator>.logicalOr,v8->sa_query_count > 0\n    && ((pb = (u8 *)v8->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v8), (v8->flags & 0x402) != 1026)\n     || (v20 = pb, v8->sa_query_timed_out))\n    || v8->auth_alg == 2)" ]
"1000702" [label = "(<operator>.logicalAnd,v8->sa_query_count > 0\n    && ((pb = (u8 *)v8->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v8), (v8->flags & 0x402) != 1026)\n     || (v20 = pb, v8->sa_query_timed_out)))" ]
"1000703" [label = "(<operator>.greaterThan,v8->sa_query_count > 0)" ]
"1000704" [label = "(<operator>.indirectFieldAccess,v8->sa_query_count)" ]
"1000706" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000708" [label = "(<operator>.logicalOr,(pb = (u8 *)v8->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v8), (v8->flags & 0x402) != 1026)\n     || (v20 = pb, v8->sa_query_timed_out))" ]
"1000710" [label = "(<operator>.assignment,pb = (u8 *)v8->sa_query_timed_out)" ]
"1000712" [label = "(<operator>.cast,(u8 *)v8->sa_query_timed_out)" ]
"1000713" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000714" [label = "(<operator>.indirectFieldAccess,v8->sa_query_timed_out)" ]
"1000716" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000718" [label = "(ap_check_sa_query_timeout,ap_check_sa_query_timeout(hapd, v8))" ]
"1000721" [label = "(<operator>.notEquals,(v8->flags & 0x402) != 1026)" ]
"1000722" [label = "(<operator>.and,v8->flags & 0x402)" ]
"1000723" [label = "(<operator>.indirectFieldAccess,v8->flags)" ]
"1000725" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000729" [label = "(<operator>.assignment,v20 = pb)" ]
"1000732" [label = "(<operator>.indirectFieldAccess,v8->sa_query_timed_out)" ]
"1000734" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000735" [label = "(<operator>.equals,v8->auth_alg == 2)" ]
"1000736" [label = "(<operator>.indirectFieldAccess,v8->auth_alg)" ]
"1000738" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000741" [label = "(<operator>.assignment,v14 = wpa_auth_uses_mfp(v8->wpa_sm) == 0)" ]
"1000743" [label = "(<operator>.equals,wpa_auth_uses_mfp(v8->wpa_sm) == 0)" ]
"1000744" [label = "(wpa_auth_uses_mfp,wpa_auth_uses_mfp(v8->wpa_sm))" ]
"1000745" [label = "(<operator>.indirectFieldAccess,v8->wpa_sm)" ]
"1000747" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000749" [label = "(<operator>.assignment,v15 = v8->flags)" ]
"1000751" [label = "(<operator>.indirectFieldAccess,v8->flags)" ]
"1000753" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000756" [label = "(<operators>.assignmentAnd,BYTE1(v15) &= 0xFBu)" ]
"1000757" [label = "(BYTE1,BYTE1(v15))" ]
"1000761" [label = "(<operators>.assignmentOr,BYTE1(v15) |= 4u)" ]
"1000762" [label = "(BYTE1,BYTE1(v15))" ]
"1000767" [label = "(<operator>.logicalNot,!v8->sa_query_count)" ]
"1000768" [label = "(<operator>.indirectFieldAccess,v8->sa_query_count)" ]
"1000770" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000772" [label = "(<operator>.assignment,pc = v20)" ]
"1000775" [label = "(ap_sta_start_sa_query,ap_sta_start_sa_query(hapd, v8))" ]
"1000778" [label = "(<operator>.assignment,v20 = pc)" ]
"1000781" [label = "(<operator>.assignment,ielenb = (int)v20)" ]
"1000783" [label = "(<operator>.cast,(int)v20)" ]
"1000784" [label = "(UNKNOWN,int,int)" ]
"1000786" [label = "(<operator>.assignment,v21 = hostapd_eid_assoc_comeback_time(hapd, v8, buf))" ]
"1000788" [label = "(hostapd_eid_assoc_comeback_time,hostapd_eid_assoc_comeback_time(hapd, v8, buf))" ]
"1000792" [label = "(hostapd_sta_assoc,hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v21 - buf))" ]
"1000798" [label = "(<operator>.subtraction,v21 - buf)" ]
"1000801" [label = "(RETURN,return ielenb;,return ielenb;)" ]
"1000130" [label = "(METHOD,hostapd_notif_assoc)" ]
"1000803" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000166" -> "1000171" 
  "1000168" -> "1000166" 
  "1000171" -> "1000174" 
  "1000171" -> "1000182" 
  "1000174" -> "1000178" 
  "1000177" -> "1000803" 
  "1000178" -> "1000177" 
  "1000180" -> "1000186" 
  "1000182" -> "1000180" 
  "1000184" -> "1000191" 
  "1000186" -> "1000184" 
  "1000189" -> "1000196" 
  "1000191" -> "1000189" 
  "1000194" -> "1000202" 
  "1000196" -> "1000194" 
  "1000200" -> "1000259" 
  "1000200" -> "1000270" 
  "1000201" -> "1000200" 
  "1000201" -> "1000209" 
  "1000202" -> "1000201" 
  "1000206" -> "1000200" 
  "1000207" -> "1000229" 
  "1000207" -> "1000206" 
  "1000208" -> "1000207" 
  "1000209" -> "1000213" 
  "1000212" -> "1000208" 
  "1000213" -> "1000222" 
  "1000214" -> "1000212" 
  "1000216" -> "1000214" 
  "1000218" -> "1000216" 
  "1000220" -> "1000218" 
  "1000222" -> "1000220" 
  "1000225" -> "1000206" 
  "1000226" -> "1000241" 
  "1000226" -> "1000225" 
  "1000227" -> "1000233" 
  "1000228" -> "1000227" 
  "1000229" -> "1000228" 
  "1000231" -> "1000226" 
  "1000232" -> "1000231" 
  "1000233" -> "1000236" 
  "1000234" -> "1000232" 
  "1000236" -> "1000234" 
  "1000237" -> "1000225" 
  "1000238" -> "1000246" 
  "1000239" -> "1000238" 
  "1000240" -> "1000239" 
  "1000241" -> "1000240" 
  "1000244" -> "1000237" 
  "1000245" -> "1000244" 
  "1000246" -> "1000251" 
  "1000247" -> "1000245" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000251" -> "1000249" 
  "1000254" -> "1000268" 
  "1000259" -> "1000265" 
  "1000265" -> "1000254" 
  "1000268" -> "1000803" 
  "1000270" -> "1000273" 
  "1000273" -> "1000282" 
  "1000279" -> "1000288" 
  "1000282" -> "1000279" 
  "1000286" -> "1000293" 
  "1000286" -> "1000317" 
  "1000288" -> "1000286" 
  "1000290" -> "1000304" 
  "1000292" -> "1000290" 
  "1000293" -> "1000297" 
  "1000294" -> "1000292" 
  "1000295" -> "1000294" 
  "1000297" -> "1000295" 
  "1000299" -> "1000306" 
  "1000301" -> "1000299" 
  "1000302" -> "1000301" 
  "1000304" -> "1000302" 
  "1000306" -> "1000310" 
  "1000310" -> "1000383" 
  "1000315" -> "1000322" 
  "1000315" -> "1000342" 
  "1000317" -> "1000315" 
  "1000319" -> "1000333" 
  "1000321" -> "1000319" 
  "1000322" -> "1000326" 
  "1000323" -> "1000321" 
  "1000324" -> "1000323" 
  "1000326" -> "1000324" 
  "1000328" -> "1000335" 
  "1000330" -> "1000328" 
  "1000331" -> "1000330" 
  "1000333" -> "1000331" 
  "1000335" -> "1000310" 
  "1000339" -> "1000349" 
  "1000341" -> "1000339" 
  "1000342" -> "1000345" 
  "1000343" -> "1000341" 
  "1000345" -> "1000343" 
  "1000347" -> "1000354" 
  "1000347" -> "1000371" 
  "1000349" -> "1000347" 
  "1000351" -> "1000365" 
  "1000353" -> "1000351" 
  "1000354" -> "1000358" 
  "1000355" -> "1000353" 
  "1000356" -> "1000355" 
  "1000358" -> "1000356" 
  "1000360" -> "1000367" 
  "1000362" -> "1000360" 
  "1000363" -> "1000362" 
  "1000365" -> "1000363" 
  "1000367" -> "1000310" 
  "1000371" -> "1000374" 
  "1000374" -> "1000377" 
  "1000377" -> "1000383" 
  "1000381" -> "1000386" 
  "1000383" -> "1000381" 
  "1000386" -> "1000392" 
  "1000386" -> "1000407" 
  "1000392" -> "1000395" 
  "1000395" -> "1000401" 
  "1000398" -> "1000425" 
  "1000399" -> "1000398" 
  "1000401" -> "1000399" 
  "1000405" -> "1000411" 
  "1000407" -> "1000405" 
  "1000411" -> "1000414" 
  "1000411" -> "1000425" 
  "1000414" -> "1000419" 
  "1000418" -> "1000803" 
  "1000419" -> "1000418" 
  "1000421" -> "1000429" 
  "1000423" -> "1000421" 
  "1000425" -> "1000423" 
  "1000426" -> "1000436" 
  "1000427" -> "1000426" 
  "1000429" -> "1000427" 
  "1000432" -> "1000447" 
  "1000432" -> "1000484" 
  "1000433" -> "1000432" 
  "1000433" -> "1000438" 
  "1000434" -> "1000433" 
  "1000436" -> "1000434" 
  "1000437" -> "1000432" 
  "1000438" -> "1000437" 
  "1000444" -> "1000464" 
  "1000447" -> "1000449" 
  "1000449" -> "1000452" 
  "1000452" -> "1000455" 
  "1000455" -> "1000458" 
  "1000458" -> "1000461" 
  "1000461" -> "1000444" 
  "1000464" -> "1000472" 
  "1000468" -> "1000474" 
  "1000470" -> "1000468" 
  "1000472" -> "1000470" 
  "1000474" -> "1000478" 
  "1000477" -> "1000803" 
  "1000478" -> "1000477" 
  "1000480" -> "1000493" 
  "1000482" -> "1000487" 
  "1000484" -> "1000482" 
  "1000485" -> "1000480" 
  "1000487" -> "1000485" 
  "1000489" -> "1000500" 
  "1000489" -> "1000554" 
  "1000490" -> "1000489" 
  "1000491" -> "1000494" 
  "1000493" -> "1000491" 
  "1000494" -> "1000490" 
  "1000496" -> "1000504" 
  "1000498" -> "1000496" 
  "1000500" -> "1000498" 
  "1000502" -> "1000510" 
  "1000504" -> "1000502" 
  "1000507" -> "1000516" 
  "1000508" -> "1000512" 
  "1000510" -> "1000508" 
  "1000511" -> "1000507" 
  "1000512" -> "1000511" 
  "1000516" -> "1000523" 
  "1000519" -> "1000525" 
  "1000519" -> "1000530" 
  "1000521" -> "1000519" 
  "1000523" -> "1000521" 
  "1000525" -> "1000532" 
  "1000525" -> "1000536" 
  "1000527" -> "1000525" 
  "1000528" -> "1000527" 
  "1000530" -> "1000528" 
  "1000532" -> "1000542" 
  "1000536" -> "1000542" 
  "1000539" -> "1000548" 
  "1000542" -> "1000539" 
  "1000545" -> "1000550" 
  "1000546" -> "1000545" 
  "1000548" -> "1000546" 
  "1000550" -> "1000803" 
  "1000553" -> "1000558" 
  "1000553" -> "1000571" 
  "1000554" -> "1000553" 
  "1000554" -> "1000553" 
  "1000558" -> "1000563" 
  "1000563" -> "1000472" 
  "1000567" -> "1000576" 
  "1000569" -> "1000567" 
  "1000571" -> "1000569" 
  "1000572" -> "1000578" 
  "1000574" -> "1000572" 
  "1000576" -> "1000574" 
  "1000578" -> "1000587" 
  "1000578" -> "1000619" 
  "1000581" -> "1000592" 
  "1000583" -> "1000581" 
  "1000585" -> "1000583" 
  "1000587" -> "1000585" 
  "1000589" -> "1000595" 
  "1000590" -> "1000589" 
  "1000592" -> "1000590" 
  "1000595" -> "1000598" 
  "1000595" -> "1000610" 
  "1000598" -> "1000604" 
  "1000603" -> "1000803" 
  "1000604" -> "1000603" 
  "1000606" -> "1000619" 
  "1000608" -> "1000606" 
  "1000610" -> "1000608" 
  "1000611" -> "1000638" 
  "1000611" -> "1000688" 
  "1000613" -> "1000611" 
  "1000616" -> "1000625" 
  "1000617" -> "1000620" 
  "1000619" -> "1000617" 
  "1000620" -> "1000616" 
  "1000623" -> "1000628" 
  "1000625" -> "1000623" 
  "1000626" -> "1000631" 
  "1000628" -> "1000626" 
  "1000629" -> "1000634" 
  "1000631" -> "1000629" 
  "1000632" -> "1000613" 
  "1000634" -> "1000632" 
  "1000638" -> "1000641" 
  "1000641" -> "1000646" 
  "1000646" -> "1000655" 
  "1000646" -> "1000660" 
  "1000646" -> "1000665" 
  "1000646" -> "1000670" 
  "1000655" -> "1000472" 
  "1000660" -> "1000472" 
  "1000665" -> "1000472" 
  "1000670" -> "1000674" 
  "1000674" -> "1000677" 
  "1000674" -> "1000472" 
  "1000677" -> "1000472" 
  "1000683" -> "1000747" 
  "1000683" -> "1000770" 
  "1000684" -> "1000683" 
  "1000684" -> "1000696" 
  "1000685" -> "1000684" 
  "1000686" -> "1000685" 
  "1000688" -> "1000686" 
  "1000691" -> "1000683" 
  "1000692" -> "1000691" 
  "1000692" -> "1000706" 
  "1000693" -> "1000692" 
  "1000695" -> "1000693" 
  "1000696" -> "1000699" 
  "1000697" -> "1000695" 
  "1000699" -> "1000697" 
  "1000701" -> "1000691" 
  "1000702" -> "1000701" 
  "1000702" -> "1000738" 
  "1000703" -> "1000702" 
  "1000703" -> "1000713" 
  "1000704" -> "1000703" 
  "1000706" -> "1000704" 
  "1000708" -> "1000702" 
  "1000710" -> "1000718" 
  "1000712" -> "1000710" 
  "1000713" -> "1000716" 
  "1000714" -> "1000712" 
  "1000716" -> "1000714" 
  "1000718" -> "1000725" 
  "1000721" -> "1000708" 
  "1000721" -> "1000729" 
  "1000722" -> "1000721" 
  "1000723" -> "1000722" 
  "1000725" -> "1000723" 
  "1000729" -> "1000734" 
  "1000732" -> "1000708" 
  "1000734" -> "1000732" 
  "1000735" -> "1000701" 
  "1000736" -> "1000735" 
  "1000738" -> "1000736" 
  "1000741" -> "1000753" 
  "1000743" -> "1000741" 
  "1000744" -> "1000743" 
  "1000745" -> "1000744" 
  "1000747" -> "1000745" 
  "1000749" -> "1000757" 
  "1000749" -> "1000762" 
  "1000751" -> "1000749" 
  "1000753" -> "1000751" 
  "1000756" -> "1000504" 
  "1000757" -> "1000756" 
  "1000761" -> "1000504" 
  "1000762" -> "1000761" 
  "1000767" -> "1000772" 
  "1000767" -> "1000784" 
  "1000768" -> "1000767" 
  "1000770" -> "1000768" 
  "1000772" -> "1000775" 
  "1000775" -> "1000778" 
  "1000778" -> "1000784" 
  "1000781" -> "1000788" 
  "1000783" -> "1000781" 
  "1000784" -> "1000783" 
  "1000786" -> "1000798" 
  "1000788" -> "1000786" 
  "1000792" -> "1000801" 
  "1000798" -> "1000792" 
  "1000801" -> "1000803" 
  "1000130" -> "1000168" 
}
