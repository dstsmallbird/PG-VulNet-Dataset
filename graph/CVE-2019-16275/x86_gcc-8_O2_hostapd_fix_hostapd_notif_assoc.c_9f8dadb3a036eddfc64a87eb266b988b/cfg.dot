digraph hostapd_notif_assoc {  
"1000164" [label = "(<operator>.assignment,v34 = __readgsdword(0x14u))" ]
"1000166" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000169" [label = "(<operator>.logicalNot,!addr)" ]
"1000172" [label = "(wpa_printf,wpa_printf(2, \"hostapd_notif_assoc: Skip event with no address\"))" ]
"1000175" [label = "(RETURN,return -1;,return -1;)" ]
"1000176" [label = "(<operator>.minus,-1)" ]
"1000178" [label = "(<operator>.assignment,p = *addr)" ]
"1000180" [label = "(<operator>.indirection,*addr)" ]
"1000182" [label = "(<operator>.assignment,res = addr[2])" ]
"1000184" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000187" [label = "(<operator>.assignment,ielen = addr[3])" ]
"1000189" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000192" [label = "(<operator>.assignment,v5 = addr[4])" ]
"1000194" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000198" [label = "(<operator>.logicalOr,(*addr & 1) != 0\n    || !(addr[5] | (unsigned __int8)(v5 | ielen | res | p | addr[1]))\n    || *(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000199" [label = "(<operator>.notEquals,(*addr & 1) != 0)" ]
"1000200" [label = "(<operator>.and,*addr & 1)" ]
"1000201" [label = "(<operator>.indirection,*addr)" ]
"1000205" [label = "(<operator>.logicalOr,!(addr[5] | (unsigned __int8)(v5 | ielen | res | p | addr[1]))\n    || *(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000206" [label = "(<operator>.logicalNot,!(addr[5] | (unsigned __int8)(v5 | ielen | res | p | addr[1])))" ]
"1000207" [label = "(<operator>.or,addr[5] | (unsigned __int8)(v5 | ielen | res | p | addr[1]))" ]
"1000208" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000211" [label = "(<operator>.cast,(unsigned __int8)(v5 | ielen | res | p | addr[1]))" ]
"1000212" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000213" [label = "(<operator>.or,v5 | ielen | res | p | addr[1])" ]
"1000215" [label = "(<operator>.or,ielen | res | p | addr[1])" ]
"1000217" [label = "(<operator>.or,res | p | addr[1])" ]
"1000219" [label = "(<operator>.or,p | addr[1])" ]
"1000221" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000224" [label = "(<operator>.logicalAnd,*(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000225" [label = "(<operator>.equals,*(_DWORD *)addr == *(_DWORD *)hapd->own_addr)" ]
"1000226" [label = "(<operator>.indirection,*(_DWORD *)addr)" ]
"1000227" [label = "(<operator>.cast,(_DWORD *)addr)" ]
"1000228" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000230" [label = "(<operator>.indirection,*(_DWORD *)hapd->own_addr)" ]
"1000231" [label = "(<operator>.cast,(_DWORD *)hapd->own_addr)" ]
"1000232" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000233" [label = "(<operator>.indirectFieldAccess,hapd->own_addr)" ]
"1000235" [label = "(FIELD_IDENTIFIER,own_addr,own_addr)" ]
"1000236" [label = "(<operator>.equals,*((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4])" ]
"1000237" [label = "(<operator>.indirection,*((_WORD *)addr + 2))" ]
"1000238" [label = "(<operator>.addition,(_WORD *)addr + 2)" ]
"1000239" [label = "(<operator>.cast,(_WORD *)addr)" ]
"1000240" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000243" [label = "(<operator>.indirection,*(_WORD *)&hapd->own_addr[4])" ]
"1000244" [label = "(<operator>.cast,(_WORD *)&hapd->own_addr[4])" ]
"1000245" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000246" [label = "(<operator>.addressOf,&hapd->own_addr[4])" ]
"1000247" [label = "(<operator>.indirectIndexAccess,hapd->own_addr[4])" ]
"1000248" [label = "(<operator>.indirectFieldAccess,hapd->own_addr)" ]
"1000250" [label = "(FIELD_IDENTIFIER,own_addr,own_addr)" ]
"1000253" [label = "(wpa_printf,wpa_printf(\n      2,\n      \"%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently\",\n      \"hostapd_notif_assoc\",\n      p,\n      addr[1],\n      res,\n      ielen,\n      v5,\n      addr[5]))" ]
"1000258" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000264" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000267" [label = "(RETURN,return 0;,return 0;)" ]
"1000269" [label = "(random_add_randomness,random_add_randomness(addr, 6u))" ]
"1000272" [label = "(hostapd_logger,hostapd_logger(hapd, addr, 1u, 2, \"associated\"))" ]
"1000278" [label = "(ieee802_11_parse_elems,ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0))" ]
"1000281" [label = "(<operator>.addressOf,&elems)" ]
"1000285" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000287" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000289" [label = "(<operator>.assignment,pa = (u8 *)(elems.wps_ie - 2))" ]
"1000291" [label = "(<operator>.cast,(u8 *)(elems.wps_ie - 2))" ]
"1000292" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000293" [label = "(<operator>.subtraction,elems.wps_ie - 2)" ]
"1000294" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000296" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000298" [label = "(<operator>.assignment,ielena = elems.wps_ie_len + 2)" ]
"1000300" [label = "(<operator>.addition,elems.wps_ie_len + 2)" ]
"1000301" [label = "(<operator>.fieldAccess,elems.wps_ie_len)" ]
"1000303" [label = "(FIELD_IDENTIFIER,wps_ie_len,wps_ie_len)" ]
"1000305" [label = "(wpa_printf,wpa_printf(2, \"STA included WPS IE in (Re)AssocReq\"))" ]
"1000310" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000312" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000314" [label = "(<operator>.assignment,pa = (u8 *)(elems.rsn_ie - 2))" ]
"1000316" [label = "(<operator>.cast,(u8 *)(elems.rsn_ie - 2))" ]
"1000317" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000318" [label = "(<operator>.subtraction,elems.rsn_ie - 2)" ]
"1000319" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000321" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000323" [label = "(<operator>.assignment,ielena = elems.rsn_ie_len + 2)" ]
"1000325" [label = "(<operator>.addition,elems.rsn_ie_len + 2)" ]
"1000326" [label = "(<operator>.fieldAccess,elems.rsn_ie_len)" ]
"1000328" [label = "(FIELD_IDENTIFIER,rsn_ie_len,rsn_ie_len)" ]
"1000330" [label = "(wpa_printf,wpa_printf(2, \"STA included RSN IE in (Re)AssocReq\"))" ]
"1000335" [label = "(<operator>.assignment,pa = (u8 *)elems.wpa_ie)" ]
"1000337" [label = "(<operator>.cast,(u8 *)elems.wpa_ie)" ]
"1000338" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000339" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000341" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000343" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000345" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000347" [label = "(<operator>.assignment,pa = (u8 *)(elems.wpa_ie - 2))" ]
"1000349" [label = "(<operator>.cast,(u8 *)(elems.wpa_ie - 2))" ]
"1000350" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000351" [label = "(<operator>.subtraction,elems.wpa_ie - 2)" ]
"1000352" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000354" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000356" [label = "(<operator>.assignment,ielena = elems.wpa_ie_len + 2)" ]
"1000358" [label = "(<operator>.addition,elems.wpa_ie_len + 2)" ]
"1000359" [label = "(<operator>.fieldAccess,elems.wpa_ie_len)" ]
"1000361" [label = "(FIELD_IDENTIFIER,wpa_ie_len,wpa_ie_len)" ]
"1000363" [label = "(wpa_printf,wpa_printf(2, \"STA included WPA IE in (Re)AssocReq\"))" ]
"1000368" [label = "(wpa_printf,wpa_printf(2, \"STA did not include WPS/RSN/WPA IE in (Re)AssocReq\"))" ]
"1000371" [label = "(<operator>.assignment,ielena = 0)" ]
"1000374" [label = "(<operator>.assignment,v6 = ap_get_sta(hapd, addr))" ]
"1000376" [label = "(ap_get_sta,ap_get_sta(hapd, addr))" ]
"1000379" [label = "(<operator>.assignment,v7 = v6)" ]
"1000385" [label = "(ap_sta_no_session_timeout,ap_sta_no_session_timeout(hapd, v6))" ]
"1000388" [label = "(accounting_sta_stop,accounting_sta_stop(hapd, v7))" ]
"1000391" [label = "(<operator>.assignment,v7->timeout_next = STA_NULLFUNC)" ]
"1000392" [label = "(<operator>.indirectFieldAccess,v7->timeout_next)" ]
"1000394" [label = "(FIELD_IDENTIFIER,timeout_next,timeout_next)" ]
"1000398" [label = "(<operator>.assignment,v7 = ap_sta_add(hapd, addr))" ]
"1000400" [label = "(ap_sta_add,ap_sta_add(hapd, addr))" ]
"1000404" [label = "(<operator>.logicalNot,!v7)" ]
"1000407" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, addr, 5))" ]
"1000411" [label = "(RETURN,return -1;,return -1;)" ]
"1000412" [label = "(<operator>.minus,-1)" ]
"1000414" [label = "(<operator>.assignment,v8 = hapd->iface)" ]
"1000416" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000418" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000419" [label = "(<operators>.assignmentAnd,v7->flags &= 0xFFFECFFF)" ]
"1000420" [label = "(<operator>.indirectFieldAccess,v7->flags)" ]
"1000422" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000425" [label = "(<operator>.logicalAnd,!v8->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000426" [label = "(<operator>.logicalNot,!v8->drv_max_acl_mac_addrs)" ]
"1000427" [label = "(<operator>.indirectFieldAccess,v8->drv_max_acl_mac_addrs)" ]
"1000429" [label = "(FIELD_IDENTIFIER,drv_max_acl_mac_addrs,drv_max_acl_mac_addrs)" ]
"1000430" [label = "(<operator>.notEquals,hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000431" [label = "(hostapd_check_acl,hostapd_check_acl(hapd, addr, 0))" ]
"1000437" [label = "(wpa_printf,wpa_printf(\n      3,\n      \"STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect\",\n      *addr,\n      addr[1],\n      addr[2],\n      addr[3],\n      addr[4],\n      addr[5]))" ]
"1000440" [label = "(<operator>.indirection,*addr)" ]
"1000442" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000445" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000448" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000451" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000454" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000457" [label = "(<operator>.assignment,v22 = 1)" ]
"1000461" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, v7->addr, v22))" ]
"1000463" [label = "(<operator>.indirectFieldAccess,v7->addr)" ]
"1000465" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000467" [label = "(ap_free_sta,ap_free_sta(hapd, v7))" ]
"1000470" [label = "(RETURN,return -1;,return -1;)" ]
"1000471" [label = "(<operator>.minus,-1)" ]
"1000473" [label = "(ap_copy_sta_supp_op_classes,ap_copy_sta_supp_op_classes(v7, elems.supp_op_classes, elems.supp_op_classes_len))" ]
"1000475" [label = "(<operator>.fieldAccess,elems.supp_op_classes)" ]
"1000477" [label = "(FIELD_IDENTIFIER,supp_op_classes,supp_op_classes)" ]
"1000478" [label = "(<operator>.fieldAccess,elems.supp_op_classes_len)" ]
"1000480" [label = "(FIELD_IDENTIFIER,supp_op_classes_len,supp_op_classes_len)" ]
"1000482" [label = "(<operator>.logicalNot,!hapd->conf->wpa)" ]
"1000483" [label = "(<operator>.indirectFieldAccess,hapd->conf->wpa)" ]
"1000484" [label = "(<operator>.indirectFieldAccess,hapd->conf)" ]
"1000486" [label = "(FIELD_IDENTIFIER,conf,conf)" ]
"1000487" [label = "(FIELD_IDENTIFIER,wpa,wpa)" ]
"1000489" [label = "(<operator>.assignment,v14 = v7->flags)" ]
"1000491" [label = "(<operator>.indirectFieldAccess,v7->flags)" ]
"1000493" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000495" [label = "(<operator>.assignment,v15 = v14 & 2)" ]
"1000497" [label = "(<operator>.and,v14 & 2)" ]
"1000500" [label = "(<operator>.assignment,v7->flags = v14 & 0xFFF7FFFF | 3)" ]
"1000501" [label = "(<operator>.indirectFieldAccess,v7->flags)" ]
"1000503" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000504" [label = "(<operator>.or,v14 & 0xFFF7FFFF | 3)" ]
"1000505" [label = "(<operator>.and,v14 & 0xFFF7FFFF)" ]
"1000509" [label = "(hostapd_set_sta_flags,hostapd_set_sta_flags(hapd, v7))" ]
"1000512" [label = "(<operator>.assignment,v16 = v7->wpa_sm)" ]
"1000514" [label = "(<operator>.indirectFieldAccess,v7->wpa_sm)" ]
"1000516" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000518" [label = "(<operator>.logicalAnd,reassoc && v7->auth_alg == 2)" ]
"1000520" [label = "(<operator>.equals,v7->auth_alg == 2)" ]
"1000521" [label = "(<operator>.indirectFieldAccess,v7->auth_alg)" ]
"1000523" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000525" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v16, WPA_ASSOC_FT))" ]
"1000529" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v16, WPA_ASSOC))" ]
"1000532" [label = "(hostapd_new_assoc_sta,hostapd_new_assoc_sta(hapd, v7, v15 != 0))" ]
"1000535" [label = "(<operator>.notEquals,v15 != 0)" ]
"1000538" [label = "(ieee802_1x_notify_port_enabled,ieee802_1x_notify_port_enabled(v7->eapol_sm, 1))" ]
"1000539" [label = "(<operator>.indirectFieldAccess,v7->eapol_sm)" ]
"1000541" [label = "(FIELD_IDENTIFIER,eapol_sm,eapol_sm)" ]
"1000543" [label = "(RETURN,return 0;,return 0;)" ]
"1000546" [label = "(<operator>.logicalOr,!pa || !ielena)" ]
"1000547" [label = "(<operator>.logicalNot,!pa)" ]
"1000549" [label = "(<operator>.logicalNot,!ielena)" ]
"1000552" [label = "(wpa_printf,wpa_printf(2, \"No WPA/RSN IE from STA\", addr, addr))" ]
"1000557" [label = "(<operator>.assignment,v22 = 13)" ]
"1000561" [label = "(<operator>.assignment,v9 = v7->wpa_sm)" ]
"1000563" [label = "(<operator>.indirectFieldAccess,v7->wpa_sm)" ]
"1000565" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000566" [label = "(<operator>.assignment,v10 = hapd->wpa_auth)" ]
"1000568" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000570" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000572" [label = "(<operator>.logicalNot,!v9)" ]
"1000575" [label = "(<operator>.assignment,v9 = wpa_auth_sta_init(v10, v7->addr, 0))" ]
"1000577" [label = "(wpa_auth_sta_init,wpa_auth_sta_init(v10, v7->addr, 0))" ]
"1000579" [label = "(<operator>.indirectFieldAccess,v7->addr)" ]
"1000581" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000583" [label = "(<operator>.assignment,v7->wpa_sm = v9)" ]
"1000584" [label = "(<operator>.indirectFieldAccess,v7->wpa_sm)" ]
"1000586" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000589" [label = "(<operator>.logicalNot,!v9)" ]
"1000592" [label = "(wpa_printf,wpa_printf(5, \"Failed to initialize WPA state machine\", v21, v21))" ]
"1000597" [label = "(RETURN,return -1;,return -1;)" ]
"1000598" [label = "(<operator>.minus,-1)" ]
"1000600" [label = "(<operator>.assignment,v10 = hapd->wpa_auth)" ]
"1000602" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000604" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000605" [label = "(<operator>.assignment,v11 = wpa_validate_wpa_ie(\n          v10,\n          v9,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000607" [label = "(wpa_validate_wpa_ie,wpa_validate_wpa_ie(\n          v10,\n          v9,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000610" [label = "(<operator>.indirectFieldAccess,hapd->iface->freq)" ]
"1000611" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000613" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000614" [label = "(FIELD_IDENTIFIER,freq,freq)" ]
"1000617" [label = "(<operator>.fieldAccess,elems.mdie)" ]
"1000619" [label = "(FIELD_IDENTIFIER,mdie,mdie)" ]
"1000620" [label = "(<operator>.fieldAccess,elems.mdie_len)" ]
"1000622" [label = "(FIELD_IDENTIFIER,mdie_len,mdie_len)" ]
"1000623" [label = "(<operator>.fieldAccess,elems.owe_dh)" ]
"1000625" [label = "(FIELD_IDENTIFIER,owe_dh,owe_dh)" ]
"1000626" [label = "(<operator>.fieldAccess,elems.owe_dh_len)" ]
"1000628" [label = "(FIELD_IDENTIFIER,owe_dh_len,owe_dh_len)" ]
"1000632" [label = "(<operator>.assignment,resa = v11)" ]
"1000635" [label = "(wpa_printf,wpa_printf(2, \"WPA/RSN information element rejected? (res %u)\", v11, v12))" ]
"1000640" [label = "(wpa_hexdump,wpa_hexdump(2, \"IE\", pa, ielena))" ]
"1000649" [label = "(<operator>.assignment,v22 = 18)" ]
"1000654" [label = "(<operator>.assignment,v22 = 19)" ]
"1000659" [label = "(<operator>.assignment,v22 = 20)" ]
"1000664" [label = "(<operator>.assignment,v22 = 24)" ]
"1000668" [label = "(<operator>.notEquals,resa != 8)" ]
"1000671" [label = "(<operator>.assignment,v22 = 13)" ]
"1000677" [label = "(<operator>.logicalOr,(v7->flags & 0x402) != 1026\n    || (v19 = (u8 *)v7->sa_query_timed_out) != 0\n    || v7->sa_query_count > 0\n    && ((pb = (u8 *)v7->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v7), (v7->flags & 0x402) != 1026)\n     || (v19 = pb, v7->sa_query_timed_out))\n    || v7->auth_alg == 2)" ]
"1000678" [label = "(<operator>.notEquals,(v7->flags & 0x402) != 1026)" ]
"1000679" [label = "(<operator>.and,v7->flags & 0x402)" ]
"1000680" [label = "(<operator>.indirectFieldAccess,v7->flags)" ]
"1000682" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000685" [label = "(<operator>.logicalOr,(v19 = (u8 *)v7->sa_query_timed_out) != 0\n    || v7->sa_query_count > 0\n    && ((pb = (u8 *)v7->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v7), (v7->flags & 0x402) != 1026)\n     || (v19 = pb, v7->sa_query_timed_out))\n    || v7->auth_alg == 2)" ]
"1000686" [label = "(<operator>.notEquals,(v19 = (u8 *)v7->sa_query_timed_out) != 0)" ]
"1000687" [label = "(<operator>.assignment,v19 = (u8 *)v7->sa_query_timed_out)" ]
"1000689" [label = "(<operator>.cast,(u8 *)v7->sa_query_timed_out)" ]
"1000690" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000691" [label = "(<operator>.indirectFieldAccess,v7->sa_query_timed_out)" ]
"1000693" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000695" [label = "(<operator>.logicalOr,v7->sa_query_count > 0\n    && ((pb = (u8 *)v7->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v7), (v7->flags & 0x402) != 1026)\n     || (v19 = pb, v7->sa_query_timed_out))\n    || v7->auth_alg == 2)" ]
"1000696" [label = "(<operator>.logicalAnd,v7->sa_query_count > 0\n    && ((pb = (u8 *)v7->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v7), (v7->flags & 0x402) != 1026)\n     || (v19 = pb, v7->sa_query_timed_out)))" ]
"1000697" [label = "(<operator>.greaterThan,v7->sa_query_count > 0)" ]
"1000698" [label = "(<operator>.indirectFieldAccess,v7->sa_query_count)" ]
"1000700" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000702" [label = "(<operator>.logicalOr,(pb = (u8 *)v7->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v7), (v7->flags & 0x402) != 1026)\n     || (v19 = pb, v7->sa_query_timed_out))" ]
"1000704" [label = "(<operator>.assignment,pb = (u8 *)v7->sa_query_timed_out)" ]
"1000706" [label = "(<operator>.cast,(u8 *)v7->sa_query_timed_out)" ]
"1000707" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000708" [label = "(<operator>.indirectFieldAccess,v7->sa_query_timed_out)" ]
"1000710" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000712" [label = "(ap_check_sa_query_timeout,ap_check_sa_query_timeout(hapd, v7))" ]
"1000715" [label = "(<operator>.notEquals,(v7->flags & 0x402) != 1026)" ]
"1000716" [label = "(<operator>.and,v7->flags & 0x402)" ]
"1000717" [label = "(<operator>.indirectFieldAccess,v7->flags)" ]
"1000719" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000723" [label = "(<operator>.assignment,v19 = pb)" ]
"1000726" [label = "(<operator>.indirectFieldAccess,v7->sa_query_timed_out)" ]
"1000728" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000729" [label = "(<operator>.equals,v7->auth_alg == 2)" ]
"1000730" [label = "(<operator>.indirectFieldAccess,v7->auth_alg)" ]
"1000732" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000735" [label = "(<operator>.assignment,v13 = wpa_auth_uses_mfp(v7->wpa_sm) == 0)" ]
"1000737" [label = "(<operator>.equals,wpa_auth_uses_mfp(v7->wpa_sm) == 0)" ]
"1000738" [label = "(wpa_auth_uses_mfp,wpa_auth_uses_mfp(v7->wpa_sm))" ]
"1000739" [label = "(<operator>.indirectFieldAccess,v7->wpa_sm)" ]
"1000741" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000743" [label = "(<operator>.assignment,v14 = v7->flags)" ]
"1000745" [label = "(<operator>.indirectFieldAccess,v7->flags)" ]
"1000747" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000750" [label = "(<operators>.assignmentAnd,BYTE1(v14) &= 0xFBu)" ]
"1000751" [label = "(BYTE1,BYTE1(v14))" ]
"1000755" [label = "(<operators>.assignmentOr,BYTE1(v14) |= 4u)" ]
"1000756" [label = "(BYTE1,BYTE1(v14))" ]
"1000761" [label = "(<operator>.logicalNot,!v7->sa_query_count)" ]
"1000762" [label = "(<operator>.indirectFieldAccess,v7->sa_query_count)" ]
"1000764" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000766" [label = "(<operator>.assignment,pc = v19)" ]
"1000769" [label = "(ap_sta_start_sa_query,ap_sta_start_sa_query(hapd, v7))" ]
"1000772" [label = "(<operator>.assignment,v19 = pc)" ]
"1000775" [label = "(<operator>.assignment,ielenb = (int)v19)" ]
"1000777" [label = "(<operator>.cast,(int)v19)" ]
"1000778" [label = "(UNKNOWN,int,int)" ]
"1000780" [label = "(<operator>.assignment,v20 = hostapd_eid_assoc_comeback_time(hapd, v7, buf))" ]
"1000782" [label = "(hostapd_eid_assoc_comeback_time,hostapd_eid_assoc_comeback_time(hapd, v7, buf))" ]
"1000786" [label = "(hostapd_sta_assoc,hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v20 - buf))" ]
"1000792" [label = "(<operator>.subtraction,v20 - buf)" ]
"1000795" [label = "(RETURN,return ielenb;,return ielenb;)" ]
"1000129" [label = "(METHOD,hostapd_notif_assoc)" ]
"1000797" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000164" -> "1000169" 
  "1000166" -> "1000164" 
  "1000169" -> "1000172" 
  "1000169" -> "1000180" 
  "1000172" -> "1000176" 
  "1000175" -> "1000797" 
  "1000176" -> "1000175" 
  "1000178" -> "1000184" 
  "1000180" -> "1000178" 
  "1000182" -> "1000189" 
  "1000184" -> "1000182" 
  "1000187" -> "1000194" 
  "1000189" -> "1000187" 
  "1000192" -> "1000201" 
  "1000194" -> "1000192" 
  "1000198" -> "1000258" 
  "1000198" -> "1000269" 
  "1000199" -> "1000198" 
  "1000199" -> "1000208" 
  "1000200" -> "1000199" 
  "1000201" -> "1000200" 
  "1000205" -> "1000198" 
  "1000206" -> "1000228" 
  "1000206" -> "1000205" 
  "1000207" -> "1000206" 
  "1000208" -> "1000212" 
  "1000211" -> "1000207" 
  "1000212" -> "1000221" 
  "1000213" -> "1000211" 
  "1000215" -> "1000213" 
  "1000217" -> "1000215" 
  "1000219" -> "1000217" 
  "1000221" -> "1000219" 
  "1000224" -> "1000205" 
  "1000225" -> "1000240" 
  "1000225" -> "1000224" 
  "1000226" -> "1000232" 
  "1000227" -> "1000226" 
  "1000228" -> "1000227" 
  "1000230" -> "1000225" 
  "1000231" -> "1000230" 
  "1000232" -> "1000235" 
  "1000233" -> "1000231" 
  "1000235" -> "1000233" 
  "1000236" -> "1000224" 
  "1000237" -> "1000245" 
  "1000238" -> "1000237" 
  "1000239" -> "1000238" 
  "1000240" -> "1000239" 
  "1000243" -> "1000236" 
  "1000244" -> "1000243" 
  "1000245" -> "1000250" 
  "1000246" -> "1000244" 
  "1000247" -> "1000246" 
  "1000248" -> "1000247" 
  "1000250" -> "1000248" 
  "1000253" -> "1000267" 
  "1000258" -> "1000264" 
  "1000264" -> "1000253" 
  "1000267" -> "1000797" 
  "1000269" -> "1000272" 
  "1000272" -> "1000281" 
  "1000278" -> "1000287" 
  "1000281" -> "1000278" 
  "1000285" -> "1000292" 
  "1000285" -> "1000312" 
  "1000287" -> "1000285" 
  "1000289" -> "1000303" 
  "1000291" -> "1000289" 
  "1000292" -> "1000296" 
  "1000293" -> "1000291" 
  "1000294" -> "1000293" 
  "1000296" -> "1000294" 
  "1000298" -> "1000305" 
  "1000300" -> "1000298" 
  "1000301" -> "1000300" 
  "1000303" -> "1000301" 
  "1000305" -> "1000376" 
  "1000310" -> "1000317" 
  "1000310" -> "1000338" 
  "1000312" -> "1000310" 
  "1000314" -> "1000328" 
  "1000316" -> "1000314" 
  "1000317" -> "1000321" 
  "1000318" -> "1000316" 
  "1000319" -> "1000318" 
  "1000321" -> "1000319" 
  "1000323" -> "1000330" 
  "1000325" -> "1000323" 
  "1000326" -> "1000325" 
  "1000328" -> "1000326" 
  "1000330" -> "1000376" 
  "1000335" -> "1000345" 
  "1000337" -> "1000335" 
  "1000338" -> "1000341" 
  "1000339" -> "1000337" 
  "1000341" -> "1000339" 
  "1000343" -> "1000350" 
  "1000343" -> "1000368" 
  "1000345" -> "1000343" 
  "1000347" -> "1000361" 
  "1000349" -> "1000347" 
  "1000350" -> "1000354" 
  "1000351" -> "1000349" 
  "1000352" -> "1000351" 
  "1000354" -> "1000352" 
  "1000356" -> "1000363" 
  "1000358" -> "1000356" 
  "1000359" -> "1000358" 
  "1000361" -> "1000359" 
  "1000363" -> "1000376" 
  "1000368" -> "1000371" 
  "1000371" -> "1000376" 
  "1000374" -> "1000379" 
  "1000376" -> "1000374" 
  "1000379" -> "1000385" 
  "1000379" -> "1000400" 
  "1000385" -> "1000388" 
  "1000388" -> "1000394" 
  "1000391" -> "1000418" 
  "1000392" -> "1000391" 
  "1000394" -> "1000392" 
  "1000398" -> "1000404" 
  "1000400" -> "1000398" 
  "1000404" -> "1000407" 
  "1000404" -> "1000418" 
  "1000407" -> "1000412" 
  "1000411" -> "1000797" 
  "1000412" -> "1000411" 
  "1000414" -> "1000422" 
  "1000416" -> "1000414" 
  "1000418" -> "1000416" 
  "1000419" -> "1000429" 
  "1000420" -> "1000419" 
  "1000422" -> "1000420" 
  "1000425" -> "1000440" 
  "1000425" -> "1000477" 
  "1000426" -> "1000425" 
  "1000426" -> "1000431" 
  "1000427" -> "1000426" 
  "1000429" -> "1000427" 
  "1000430" -> "1000425" 
  "1000431" -> "1000430" 
  "1000437" -> "1000457" 
  "1000440" -> "1000442" 
  "1000442" -> "1000445" 
  "1000445" -> "1000448" 
  "1000448" -> "1000451" 
  "1000451" -> "1000454" 
  "1000454" -> "1000437" 
  "1000457" -> "1000465" 
  "1000461" -> "1000467" 
  "1000463" -> "1000461" 
  "1000465" -> "1000463" 
  "1000467" -> "1000471" 
  "1000470" -> "1000797" 
  "1000471" -> "1000470" 
  "1000473" -> "1000486" 
  "1000475" -> "1000480" 
  "1000477" -> "1000475" 
  "1000478" -> "1000473" 
  "1000480" -> "1000478" 
  "1000482" -> "1000493" 
  "1000482" -> "1000547" 
  "1000483" -> "1000482" 
  "1000484" -> "1000487" 
  "1000486" -> "1000484" 
  "1000487" -> "1000483" 
  "1000489" -> "1000497" 
  "1000491" -> "1000489" 
  "1000493" -> "1000491" 
  "1000495" -> "1000503" 
  "1000497" -> "1000495" 
  "1000500" -> "1000509" 
  "1000501" -> "1000505" 
  "1000503" -> "1000501" 
  "1000504" -> "1000500" 
  "1000505" -> "1000504" 
  "1000509" -> "1000516" 
  "1000512" -> "1000518" 
  "1000512" -> "1000523" 
  "1000514" -> "1000512" 
  "1000516" -> "1000514" 
  "1000518" -> "1000525" 
  "1000518" -> "1000529" 
  "1000520" -> "1000518" 
  "1000521" -> "1000520" 
  "1000523" -> "1000521" 
  "1000525" -> "1000535" 
  "1000529" -> "1000535" 
  "1000532" -> "1000541" 
  "1000535" -> "1000532" 
  "1000538" -> "1000543" 
  "1000539" -> "1000538" 
  "1000541" -> "1000539" 
  "1000543" -> "1000797" 
  "1000546" -> "1000552" 
  "1000546" -> "1000565" 
  "1000547" -> "1000546" 
  "1000547" -> "1000549" 
  "1000549" -> "1000546" 
  "1000552" -> "1000557" 
  "1000557" -> "1000465" 
  "1000561" -> "1000570" 
  "1000563" -> "1000561" 
  "1000565" -> "1000563" 
  "1000566" -> "1000572" 
  "1000568" -> "1000566" 
  "1000570" -> "1000568" 
  "1000572" -> "1000581" 
  "1000572" -> "1000613" 
  "1000575" -> "1000586" 
  "1000577" -> "1000575" 
  "1000579" -> "1000577" 
  "1000581" -> "1000579" 
  "1000583" -> "1000589" 
  "1000584" -> "1000583" 
  "1000586" -> "1000584" 
  "1000589" -> "1000592" 
  "1000589" -> "1000604" 
  "1000592" -> "1000598" 
  "1000597" -> "1000797" 
  "1000598" -> "1000597" 
  "1000600" -> "1000613" 
  "1000602" -> "1000600" 
  "1000604" -> "1000602" 
  "1000605" -> "1000632" 
  "1000605" -> "1000682" 
  "1000607" -> "1000605" 
  "1000610" -> "1000619" 
  "1000611" -> "1000614" 
  "1000613" -> "1000611" 
  "1000614" -> "1000610" 
  "1000617" -> "1000622" 
  "1000619" -> "1000617" 
  "1000620" -> "1000625" 
  "1000622" -> "1000620" 
  "1000623" -> "1000628" 
  "1000625" -> "1000623" 
  "1000626" -> "1000607" 
  "1000628" -> "1000626" 
  "1000632" -> "1000635" 
  "1000635" -> "1000640" 
  "1000640" -> "1000649" 
  "1000640" -> "1000654" 
  "1000640" -> "1000659" 
  "1000640" -> "1000664" 
  "1000649" -> "1000465" 
  "1000654" -> "1000465" 
  "1000659" -> "1000465" 
  "1000664" -> "1000668" 
  "1000668" -> "1000671" 
  "1000668" -> "1000465" 
  "1000671" -> "1000465" 
  "1000677" -> "1000741" 
  "1000677" -> "1000764" 
  "1000678" -> "1000677" 
  "1000678" -> "1000690" 
  "1000679" -> "1000678" 
  "1000680" -> "1000679" 
  "1000682" -> "1000680" 
  "1000685" -> "1000677" 
  "1000686" -> "1000685" 
  "1000686" -> "1000700" 
  "1000687" -> "1000686" 
  "1000689" -> "1000687" 
  "1000690" -> "1000693" 
  "1000691" -> "1000689" 
  "1000693" -> "1000691" 
  "1000695" -> "1000685" 
  "1000696" -> "1000695" 
  "1000696" -> "1000732" 
  "1000697" -> "1000696" 
  "1000697" -> "1000707" 
  "1000698" -> "1000697" 
  "1000700" -> "1000698" 
  "1000702" -> "1000696" 
  "1000704" -> "1000712" 
  "1000706" -> "1000704" 
  "1000707" -> "1000710" 
  "1000708" -> "1000706" 
  "1000710" -> "1000708" 
  "1000712" -> "1000719" 
  "1000715" -> "1000702" 
  "1000715" -> "1000723" 
  "1000716" -> "1000715" 
  "1000717" -> "1000716" 
  "1000719" -> "1000717" 
  "1000723" -> "1000728" 
  "1000726" -> "1000702" 
  "1000728" -> "1000726" 
  "1000729" -> "1000695" 
  "1000730" -> "1000729" 
  "1000732" -> "1000730" 
  "1000735" -> "1000747" 
  "1000737" -> "1000735" 
  "1000738" -> "1000737" 
  "1000739" -> "1000738" 
  "1000741" -> "1000739" 
  "1000743" -> "1000751" 
  "1000743" -> "1000756" 
  "1000745" -> "1000743" 
  "1000747" -> "1000745" 
  "1000750" -> "1000497" 
  "1000751" -> "1000750" 
  "1000755" -> "1000497" 
  "1000756" -> "1000755" 
  "1000761" -> "1000766" 
  "1000761" -> "1000778" 
  "1000762" -> "1000761" 
  "1000764" -> "1000762" 
  "1000766" -> "1000769" 
  "1000769" -> "1000772" 
  "1000772" -> "1000778" 
  "1000775" -> "1000782" 
  "1000777" -> "1000775" 
  "1000778" -> "1000777" 
  "1000780" -> "1000792" 
  "1000782" -> "1000780" 
  "1000786" -> "1000795" 
  "1000792" -> "1000786" 
  "1000795" -> "1000797" 
  "1000129" -> "1000166" 
}
