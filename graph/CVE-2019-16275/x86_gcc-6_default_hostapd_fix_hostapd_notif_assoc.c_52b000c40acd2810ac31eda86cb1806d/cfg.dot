digraph hostapd_notif_assoc {  
"1000164" [label = "(<operator>.assignment,v34 = __readgsdword(0x14u))" ]
"1000166" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000169" [label = "(<operator>.logicalNot,!addr)" ]
"1000172" [label = "(wpa_printf,wpa_printf(2, \"hostapd_notif_assoc: Skip event with no address\"))" ]
"1000175" [label = "(RETURN,return -1;,return -1;)" ]
"1000176" [label = "(<operator>.minus,-1)" ]
"1000178" [label = "(<operator>.assignment,v5 = *addr)" ]
"1000180" [label = "(<operator>.indirection,*addr)" ]
"1000182" [label = "(<operator>.assignment,res = addr[1])" ]
"1000184" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000188" [label = "(<operator>.notEquals,(*addr & 1) != 0)" ]
"1000189" [label = "(<operator>.and,*addr & 1)" ]
"1000190" [label = "(<operator>.indirection,*addr)" ]
"1000195" [label = "(<operator>.assignment,v6 = addr[3])" ]
"1000197" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000200" [label = "(<operator>.assignment,p = addr[2])" ]
"1000202" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000205" [label = "(<operator>.assignment,ielen = addr[4])" ]
"1000207" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000210" [label = "(<operator>.assignment,v7 = addr[5])" ]
"1000212" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000216" [label = "(<operator>.assignment,p = addr[2])" ]
"1000218" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000221" [label = "(<operator>.assignment,v6 = addr[3])" ]
"1000223" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000226" [label = "(<operator>.assignment,ielen = addr[4])" ]
"1000228" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000231" [label = "(<operator>.assignment,v30 = addr[5])" ]
"1000233" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000236" [label = "(<operator>.assignment,v7 = v30 | ielen | v6 | p | v5 | addr[1])" ]
"1000238" [label = "(<operator>.or,v30 | ielen | v6 | p | v5 | addr[1])" ]
"1000240" [label = "(<operator>.or,ielen | v6 | p | v5 | addr[1])" ]
"1000242" [label = "(<operator>.or,v6 | p | v5 | addr[1])" ]
"1000244" [label = "(<operator>.or,p | v5 | addr[1])" ]
"1000246" [label = "(<operator>.or,v5 | addr[1])" ]
"1000248" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000252" [label = "(<operator>.logicalNot,!v7)" ]
"1000256" [label = "(wpa_printf,wpa_printf(\n      2,\n      \"%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently\",\n      \"hostapd_notif_assoc\",\n      v5,\n      res,\n      p,\n      v6,\n      ielen,\n      v7))" ]
"1000266" [label = "(RETURN,return 0;,return 0;)" ]
"1000268" [label = "(<operator>.assignment,v31 = addr[3])" ]
"1000270" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000274" [label = "(<operator>.logicalNot,!memcmp(addr, hapd->own_addr, 6u))" ]
"1000275" [label = "(memcmp,memcmp(addr, hapd->own_addr, 6u))" ]
"1000277" [label = "(<operator>.indirectFieldAccess,hapd->own_addr)" ]
"1000279" [label = "(FIELD_IDENTIFIER,own_addr,own_addr)" ]
"1000282" [label = "(<operator>.assignment,v7 = v30)" ]
"1000285" [label = "(<operator>.assignment,v6 = v31)" ]
"1000289" [label = "(random_add_randomness,random_add_randomness(addr, 6u))" ]
"1000292" [label = "(hostapd_logger,hostapd_logger(hapd, addr, 1u, 2, \"associated\"))" ]
"1000298" [label = "(ieee802_11_parse_elems,ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0))" ]
"1000301" [label = "(<operator>.addressOf,&elems)" ]
"1000305" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000307" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000309" [label = "(<operator>.assignment,pa = (u8 *)(elems.wps_ie - 2))" ]
"1000311" [label = "(<operator>.cast,(u8 *)(elems.wps_ie - 2))" ]
"1000312" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000313" [label = "(<operator>.subtraction,elems.wps_ie - 2)" ]
"1000314" [label = "(<operator>.fieldAccess,elems.wps_ie)" ]
"1000316" [label = "(FIELD_IDENTIFIER,wps_ie,wps_ie)" ]
"1000318" [label = "(<operator>.assignment,ielena = elems.wps_ie_len + 2)" ]
"1000320" [label = "(<operator>.addition,elems.wps_ie_len + 2)" ]
"1000321" [label = "(<operator>.fieldAccess,elems.wps_ie_len)" ]
"1000323" [label = "(FIELD_IDENTIFIER,wps_ie_len,wps_ie_len)" ]
"1000325" [label = "(wpa_printf,wpa_printf(2, \"STA included WPS IE in (Re)AssocReq\"))" ]
"1000330" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000332" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000334" [label = "(<operator>.assignment,pa = (u8 *)(elems.rsn_ie - 2))" ]
"1000336" [label = "(<operator>.cast,(u8 *)(elems.rsn_ie - 2))" ]
"1000337" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000338" [label = "(<operator>.subtraction,elems.rsn_ie - 2)" ]
"1000339" [label = "(<operator>.fieldAccess,elems.rsn_ie)" ]
"1000341" [label = "(FIELD_IDENTIFIER,rsn_ie,rsn_ie)" ]
"1000343" [label = "(<operator>.assignment,ielena = elems.rsn_ie_len + 2)" ]
"1000345" [label = "(<operator>.addition,elems.rsn_ie_len + 2)" ]
"1000346" [label = "(<operator>.fieldAccess,elems.rsn_ie_len)" ]
"1000348" [label = "(FIELD_IDENTIFIER,rsn_ie_len,rsn_ie_len)" ]
"1000350" [label = "(wpa_printf,wpa_printf(2, \"STA included RSN IE in (Re)AssocReq\"))" ]
"1000355" [label = "(<operator>.assignment,pa = (u8 *)elems.wpa_ie)" ]
"1000357" [label = "(<operator>.cast,(u8 *)elems.wpa_ie)" ]
"1000358" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000359" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000361" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000363" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000365" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000367" [label = "(<operator>.assignment,pa = (u8 *)(elems.wpa_ie - 2))" ]
"1000369" [label = "(<operator>.cast,(u8 *)(elems.wpa_ie - 2))" ]
"1000370" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000371" [label = "(<operator>.subtraction,elems.wpa_ie - 2)" ]
"1000372" [label = "(<operator>.fieldAccess,elems.wpa_ie)" ]
"1000374" [label = "(FIELD_IDENTIFIER,wpa_ie,wpa_ie)" ]
"1000376" [label = "(<operator>.assignment,ielena = elems.wpa_ie_len + 2)" ]
"1000378" [label = "(<operator>.addition,elems.wpa_ie_len + 2)" ]
"1000379" [label = "(<operator>.fieldAccess,elems.wpa_ie_len)" ]
"1000381" [label = "(FIELD_IDENTIFIER,wpa_ie_len,wpa_ie_len)" ]
"1000383" [label = "(wpa_printf,wpa_printf(2, \"STA included WPA IE in (Re)AssocReq\"))" ]
"1000388" [label = "(wpa_printf,wpa_printf(2, \"STA did not include WPS/RSN/WPA IE in (Re)AssocReq\"))" ]
"1000391" [label = "(<operator>.assignment,ielena = 0)" ]
"1000394" [label = "(<operator>.assignment,v10 = ap_get_sta(hapd, addr))" ]
"1000396" [label = "(ap_get_sta,ap_get_sta(hapd, addr))" ]
"1000399" [label = "(<operator>.assignment,v11 = v10)" ]
"1000405" [label = "(ap_sta_no_session_timeout,ap_sta_no_session_timeout(hapd, v10))" ]
"1000408" [label = "(accounting_sta_stop,accounting_sta_stop(hapd, v11))" ]
"1000411" [label = "(<operator>.assignment,v11->timeout_next = STA_NULLFUNC)" ]
"1000412" [label = "(<operator>.indirectFieldAccess,v11->timeout_next)" ]
"1000414" [label = "(FIELD_IDENTIFIER,timeout_next,timeout_next)" ]
"1000418" [label = "(<operator>.assignment,v11 = ap_sta_add(hapd, addr))" ]
"1000420" [label = "(ap_sta_add,ap_sta_add(hapd, addr))" ]
"1000424" [label = "(<operator>.logicalNot,!v11)" ]
"1000427" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, addr, 5))" ]
"1000431" [label = "(RETURN,return -1;,return -1;)" ]
"1000432" [label = "(<operator>.minus,-1)" ]
"1000434" [label = "(<operator>.assignment,v12 = hapd->iface)" ]
"1000436" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000438" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000439" [label = "(<operators>.assignmentAnd,v11->flags &= 0xFFFECFFF)" ]
"1000440" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000442" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000445" [label = "(<operator>.logicalAnd,!v12->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000446" [label = "(<operator>.logicalNot,!v12->drv_max_acl_mac_addrs)" ]
"1000447" [label = "(<operator>.indirectFieldAccess,v12->drv_max_acl_mac_addrs)" ]
"1000449" [label = "(FIELD_IDENTIFIER,drv_max_acl_mac_addrs,drv_max_acl_mac_addrs)" ]
"1000450" [label = "(<operator>.notEquals,hostapd_check_acl(hapd, addr, 0) != 1)" ]
"1000451" [label = "(hostapd_check_acl,hostapd_check_acl(hapd, addr, 0))" ]
"1000457" [label = "(wpa_printf,wpa_printf(\n      3,\n      \"STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect\",\n      *addr,\n      addr[1],\n      addr[2],\n      addr[3],\n      addr[4],\n      addr[5]))" ]
"1000460" [label = "(<operator>.indirection,*addr)" ]
"1000462" [label = "(<operator>.indirectIndexAccess,addr[1])" ]
"1000465" [label = "(<operator>.indirectIndexAccess,addr[2])" ]
"1000468" [label = "(<operator>.indirectIndexAccess,addr[3])" ]
"1000471" [label = "(<operator>.indirectIndexAccess,addr[4])" ]
"1000474" [label = "(<operator>.indirectIndexAccess,addr[5])" ]
"1000477" [label = "(<operator>.assignment,v20 = 1)" ]
"1000481" [label = "(hostapd_drv_sta_disassoc,hostapd_drv_sta_disassoc(hapd, v11->addr, v20))" ]
"1000483" [label = "(<operator>.indirectFieldAccess,v11->addr)" ]
"1000485" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000487" [label = "(ap_free_sta,ap_free_sta(hapd, v11))" ]
"1000490" [label = "(RETURN,return -1;,return -1;)" ]
"1000491" [label = "(<operator>.minus,-1)" ]
"1000493" [label = "(ap_copy_sta_supp_op_classes,ap_copy_sta_supp_op_classes(v11, elems.supp_op_classes, elems.supp_op_classes_len))" ]
"1000495" [label = "(<operator>.fieldAccess,elems.supp_op_classes)" ]
"1000497" [label = "(FIELD_IDENTIFIER,supp_op_classes,supp_op_classes)" ]
"1000498" [label = "(<operator>.fieldAccess,elems.supp_op_classes_len)" ]
"1000500" [label = "(FIELD_IDENTIFIER,supp_op_classes_len,supp_op_classes_len)" ]
"1000502" [label = "(<operator>.logicalNot,!hapd->conf->wpa)" ]
"1000503" [label = "(<operator>.indirectFieldAccess,hapd->conf->wpa)" ]
"1000504" [label = "(<operator>.indirectFieldAccess,hapd->conf)" ]
"1000506" [label = "(FIELD_IDENTIFIER,conf,conf)" ]
"1000507" [label = "(FIELD_IDENTIFIER,wpa,wpa)" ]
"1000509" [label = "(<operator>.assignment,v16 = v11->flags)" ]
"1000511" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000513" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000516" [label = "(<operator>.logicalOr,!pa || !ielena)" ]
"1000517" [label = "(<operator>.logicalNot,!pa)" ]
"1000519" [label = "(<operator>.logicalNot,!ielena)" ]
"1000522" [label = "(wpa_printf,wpa_printf(2, \"No WPA/RSN IE from STA\"))" ]
"1000525" [label = "(<operator>.assignment,v20 = 13)" ]
"1000529" [label = "(<operator>.assignment,v13 = v11->wpa_sm)" ]
"1000531" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000533" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000535" [label = "(<operator>.logicalNot,!v13)" ]
"1000538" [label = "(<operator>.assignment,v13 = wpa_auth_sta_init(hapd->wpa_auth, v11->addr, 0))" ]
"1000540" [label = "(wpa_auth_sta_init,wpa_auth_sta_init(hapd->wpa_auth, v11->addr, 0))" ]
"1000541" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000543" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000544" [label = "(<operator>.indirectFieldAccess,v11->addr)" ]
"1000546" [label = "(FIELD_IDENTIFIER,addr,addr)" ]
"1000548" [label = "(<operator>.assignment,v11->wpa_sm = v13)" ]
"1000549" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000551" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000554" [label = "(<operator>.logicalNot,!v13)" ]
"1000557" [label = "(wpa_printf,wpa_printf(5, \"Failed to initialize WPA state machine\", 0, 0))" ]
"1000562" [label = "(RETURN,return -1;,return -1;)" ]
"1000563" [label = "(<operator>.minus,-1)" ]
"1000565" [label = "(<operator>.assignment,v14 = wpa_validate_wpa_ie(\n          hapd->wpa_auth,\n          v13,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000567" [label = "(wpa_validate_wpa_ie,wpa_validate_wpa_ie(\n          hapd->wpa_auth,\n          v13,\n          hapd->iface->freq,\n          pa,\n          ielena,\n          elems.mdie,\n          elems.mdie_len,\n          elems.owe_dh,\n          elems.owe_dh_len))" ]
"1000568" [label = "(<operator>.indirectFieldAccess,hapd->wpa_auth)" ]
"1000570" [label = "(FIELD_IDENTIFIER,wpa_auth,wpa_auth)" ]
"1000572" [label = "(<operator>.indirectFieldAccess,hapd->iface->freq)" ]
"1000573" [label = "(<operator>.indirectFieldAccess,hapd->iface)" ]
"1000575" [label = "(FIELD_IDENTIFIER,iface,iface)" ]
"1000576" [label = "(FIELD_IDENTIFIER,freq,freq)" ]
"1000579" [label = "(<operator>.fieldAccess,elems.mdie)" ]
"1000581" [label = "(FIELD_IDENTIFIER,mdie,mdie)" ]
"1000582" [label = "(<operator>.fieldAccess,elems.mdie_len)" ]
"1000584" [label = "(FIELD_IDENTIFIER,mdie_len,mdie_len)" ]
"1000585" [label = "(<operator>.fieldAccess,elems.owe_dh)" ]
"1000587" [label = "(FIELD_IDENTIFIER,owe_dh,owe_dh)" ]
"1000588" [label = "(<operator>.fieldAccess,elems.owe_dh_len)" ]
"1000590" [label = "(FIELD_IDENTIFIER,owe_dh_len,owe_dh_len)" ]
"1000594" [label = "(<operator>.assignment,resa = v14)" ]
"1000597" [label = "(wpa_printf,wpa_printf(2, \"WPA/RSN information element rejected? (res %u)\", v14))" ]
"1000601" [label = "(wpa_hexdump,wpa_hexdump(2, \"IE\", pa, ielena))" ]
"1000606" [label = "(<operator>.assignment,v20 = 18)" ]
"1000610" [label = "(<operator>.notEquals,resa != 2)" ]
"1000614" [label = "(<operator>.assignment,v20 = 19)" ]
"1000618" [label = "(<operator>.notEquals,resa != 3)" ]
"1000622" [label = "(<operator>.assignment,v20 = 20)" ]
"1000626" [label = "(<operator>.notEquals,resa != 4)" ]
"1000630" [label = "(<operator>.assignment,v20 = 13)" ]
"1000634" [label = "(<operator>.equals,resa == 8)" ]
"1000637" [label = "(<operator>.assignment,v20 = 24)" ]
"1000642" [label = "(<operator>.equals,(v11->flags & 0x402) == 1026)" ]
"1000643" [label = "(<operator>.and,v11->flags & 0x402)" ]
"1000644" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000646" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000650" [label = "(<operator>.assignment,v18 = (u8 *)v11->sa_query_timed_out)" ]
"1000652" [label = "(<operator>.cast,(u8 *)v11->sa_query_timed_out)" ]
"1000653" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000654" [label = "(<operator>.indirectFieldAccess,v11->sa_query_timed_out)" ]
"1000656" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000658" [label = "(<operator>.logicalNot,!v18)" ]
"1000662" [label = "(<operator>.logicalOr,v11->sa_query_count <= 0\n        || (pb = (u8 *)v11->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v11), (v11->flags & 0x402) == 1026)\n        && (v18 = pb, !v11->sa_query_timed_out))" ]
"1000663" [label = "(<operator>.lessEqualsThan,v11->sa_query_count <= 0)" ]
"1000664" [label = "(<operator>.indirectFieldAccess,v11->sa_query_count)" ]
"1000666" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000668" [label = "(<operator>.logicalAnd,(pb = (u8 *)v11->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v11), (v11->flags & 0x402) == 1026)\n        && (v18 = pb, !v11->sa_query_timed_out))" ]
"1000670" [label = "(<operator>.assignment,pb = (u8 *)v11->sa_query_timed_out)" ]
"1000672" [label = "(<operator>.cast,(u8 *)v11->sa_query_timed_out)" ]
"1000673" [label = "(UNKNOWN,u8 *,u8 *)" ]
"1000674" [label = "(<operator>.indirectFieldAccess,v11->sa_query_timed_out)" ]
"1000676" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000678" [label = "(ap_check_sa_query_timeout,ap_check_sa_query_timeout(hapd, v11))" ]
"1000681" [label = "(<operator>.equals,(v11->flags & 0x402) == 1026)" ]
"1000682" [label = "(<operator>.and,v11->flags & 0x402)" ]
"1000683" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000685" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000689" [label = "(<operator>.assignment,v18 = pb)" ]
"1000692" [label = "(<operator>.logicalNot,!v11->sa_query_timed_out)" ]
"1000693" [label = "(<operator>.indirectFieldAccess,v11->sa_query_timed_out)" ]
"1000695" [label = "(FIELD_IDENTIFIER,sa_query_timed_out,sa_query_timed_out)" ]
"1000698" [label = "(<operator>.notEquals,v11->auth_alg != 2)" ]
"1000699" [label = "(<operator>.indirectFieldAccess,v11->auth_alg)" ]
"1000701" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000705" [label = "(<operator>.logicalNot,!v11->sa_query_count)" ]
"1000706" [label = "(<operator>.indirectFieldAccess,v11->sa_query_count)" ]
"1000708" [label = "(FIELD_IDENTIFIER,sa_query_count,sa_query_count)" ]
"1000710" [label = "(<operator>.assignment,pc = v18)" ]
"1000713" [label = "(ap_sta_start_sa_query,ap_sta_start_sa_query(hapd, v11))" ]
"1000716" [label = "(<operator>.assignment,v18 = pc)" ]
"1000719" [label = "(<operator>.assignment,ielenb = (int)v18)" ]
"1000721" [label = "(<operator>.cast,(int)v18)" ]
"1000722" [label = "(UNKNOWN,int,int)" ]
"1000724" [label = "(<operator>.assignment,v19 = hostapd_eid_assoc_comeback_time(hapd, v11, buf))" ]
"1000726" [label = "(hostapd_eid_assoc_comeback_time,hostapd_eid_assoc_comeback_time(hapd, v11, buf))" ]
"1000730" [label = "(hostapd_sta_assoc,hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v19 - buf))" ]
"1000736" [label = "(<operator>.subtraction,v19 - buf)" ]
"1000739" [label = "(RETURN,return ielenb;,return ielenb;)" ]
"1000741" [label = "(<operator>.assignment,v15 = wpa_auth_uses_mfp(v11->wpa_sm) == 0)" ]
"1000743" [label = "(<operator>.equals,wpa_auth_uses_mfp(v11->wpa_sm) == 0)" ]
"1000744" [label = "(wpa_auth_uses_mfp,wpa_auth_uses_mfp(v11->wpa_sm))" ]
"1000745" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000747" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000749" [label = "(<operator>.assignment,v16 = v11->flags)" ]
"1000751" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000753" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000756" [label = "(<operators>.assignmentAnd,BYTE1(v16) &= 0xFBu)" ]
"1000757" [label = "(BYTE1,BYTE1(v16))" ]
"1000761" [label = "(<operators>.assignmentOr,BYTE1(v16) |= 4u)" ]
"1000762" [label = "(BYTE1,BYTE1(v16))" ]
"1000766" [label = "(<operator>.assignment,v17 = v16 & 2)" ]
"1000768" [label = "(<operator>.and,v16 & 2)" ]
"1000771" [label = "(<operator>.assignment,v11->flags = v16 & 0xFFF7FFFF | 3)" ]
"1000772" [label = "(<operator>.indirectFieldAccess,v11->flags)" ]
"1000774" [label = "(FIELD_IDENTIFIER,flags,flags)" ]
"1000775" [label = "(<operator>.or,v16 & 0xFFF7FFFF | 3)" ]
"1000776" [label = "(<operator>.and,v16 & 0xFFF7FFFF)" ]
"1000780" [label = "(hostapd_set_sta_flags,hostapd_set_sta_flags(hapd, v11))" ]
"1000784" [label = "(<operator>.logicalAnd,reassoc && v11->auth_alg == 2)" ]
"1000786" [label = "(<operator>.equals,v11->auth_alg == 2)" ]
"1000787" [label = "(<operator>.indirectFieldAccess,v11->auth_alg)" ]
"1000789" [label = "(FIELD_IDENTIFIER,auth_alg,auth_alg)" ]
"1000791" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v11->wpa_sm, WPA_ASSOC_FT))" ]
"1000792" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000794" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000797" [label = "(wpa_auth_sm_event,wpa_auth_sm_event(v11->wpa_sm, WPA_ASSOC))" ]
"1000798" [label = "(<operator>.indirectFieldAccess,v11->wpa_sm)" ]
"1000800" [label = "(FIELD_IDENTIFIER,wpa_sm,wpa_sm)" ]
"1000802" [label = "(hostapd_new_assoc_sta,hostapd_new_assoc_sta(hapd, v11, v17 != 0))" ]
"1000805" [label = "(<operator>.notEquals,v17 != 0)" ]
"1000808" [label = "(ieee802_1x_notify_port_enabled,ieee802_1x_notify_port_enabled(v11->eapol_sm, 1))" ]
"1000809" [label = "(<operator>.indirectFieldAccess,v11->eapol_sm)" ]
"1000811" [label = "(FIELD_IDENTIFIER,eapol_sm,eapol_sm)" ]
"1000813" [label = "(RETURN,return 0;,return 0;)" ]
"1000129" [label = "(METHOD,hostapd_notif_assoc)" ]
"1000815" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000164" -> "1000169" 
  "1000166" -> "1000164" 
  "1000169" -> "1000172" 
  "1000169" -> "1000180" 
  "1000172" -> "1000176" 
  "1000175" -> "1000815" 
  "1000176" -> "1000175" 
  "1000178" -> "1000184" 
  "1000180" -> "1000178" 
  "1000182" -> "1000190" 
  "1000184" -> "1000182" 
  "1000188" -> "1000197" 
  "1000188" -> "1000218" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000195" -> "1000202" 
  "1000197" -> "1000195" 
  "1000200" -> "1000207" 
  "1000202" -> "1000200" 
  "1000205" -> "1000212" 
  "1000207" -> "1000205" 
  "1000210" -> "1000256" 
  "1000212" -> "1000210" 
  "1000216" -> "1000223" 
  "1000218" -> "1000216" 
  "1000221" -> "1000228" 
  "1000223" -> "1000221" 
  "1000226" -> "1000233" 
  "1000228" -> "1000226" 
  "1000231" -> "1000248" 
  "1000233" -> "1000231" 
  "1000236" -> "1000252" 
  "1000238" -> "1000236" 
  "1000240" -> "1000238" 
  "1000242" -> "1000240" 
  "1000244" -> "1000242" 
  "1000246" -> "1000244" 
  "1000248" -> "1000246" 
  "1000252" -> "1000256" 
  "1000252" -> "1000270" 
  "1000256" -> "1000266" 
  "1000266" -> "1000815" 
  "1000268" -> "1000279" 
  "1000270" -> "1000268" 
  "1000274" -> "1000282" 
  "1000274" -> "1000289" 
  "1000275" -> "1000274" 
  "1000277" -> "1000275" 
  "1000279" -> "1000277" 
  "1000282" -> "1000285" 
  "1000285" -> "1000256" 
  "1000289" -> "1000292" 
  "1000292" -> "1000301" 
  "1000298" -> "1000307" 
  "1000301" -> "1000298" 
  "1000305" -> "1000312" 
  "1000305" -> "1000332" 
  "1000307" -> "1000305" 
  "1000309" -> "1000323" 
  "1000311" -> "1000309" 
  "1000312" -> "1000316" 
  "1000313" -> "1000311" 
  "1000314" -> "1000313" 
  "1000316" -> "1000314" 
  "1000318" -> "1000325" 
  "1000320" -> "1000318" 
  "1000321" -> "1000320" 
  "1000323" -> "1000321" 
  "1000325" -> "1000396" 
  "1000330" -> "1000337" 
  "1000330" -> "1000358" 
  "1000332" -> "1000330" 
  "1000334" -> "1000348" 
  "1000336" -> "1000334" 
  "1000337" -> "1000341" 
  "1000338" -> "1000336" 
  "1000339" -> "1000338" 
  "1000341" -> "1000339" 
  "1000343" -> "1000350" 
  "1000345" -> "1000343" 
  "1000346" -> "1000345" 
  "1000348" -> "1000346" 
  "1000350" -> "1000396" 
  "1000355" -> "1000365" 
  "1000357" -> "1000355" 
  "1000358" -> "1000361" 
  "1000359" -> "1000357" 
  "1000361" -> "1000359" 
  "1000363" -> "1000370" 
  "1000363" -> "1000388" 
  "1000365" -> "1000363" 
  "1000367" -> "1000381" 
  "1000369" -> "1000367" 
  "1000370" -> "1000374" 
  "1000371" -> "1000369" 
  "1000372" -> "1000371" 
  "1000374" -> "1000372" 
  "1000376" -> "1000383" 
  "1000378" -> "1000376" 
  "1000379" -> "1000378" 
  "1000381" -> "1000379" 
  "1000383" -> "1000396" 
  "1000388" -> "1000391" 
  "1000391" -> "1000396" 
  "1000394" -> "1000399" 
  "1000396" -> "1000394" 
  "1000399" -> "1000405" 
  "1000399" -> "1000420" 
  "1000405" -> "1000408" 
  "1000408" -> "1000414" 
  "1000411" -> "1000438" 
  "1000412" -> "1000411" 
  "1000414" -> "1000412" 
  "1000418" -> "1000424" 
  "1000420" -> "1000418" 
  "1000424" -> "1000427" 
  "1000424" -> "1000438" 
  "1000427" -> "1000432" 
  "1000431" -> "1000815" 
  "1000432" -> "1000431" 
  "1000434" -> "1000442" 
  "1000436" -> "1000434" 
  "1000438" -> "1000436" 
  "1000439" -> "1000449" 
  "1000440" -> "1000439" 
  "1000442" -> "1000440" 
  "1000445" -> "1000460" 
  "1000445" -> "1000497" 
  "1000446" -> "1000445" 
  "1000446" -> "1000451" 
  "1000447" -> "1000446" 
  "1000449" -> "1000447" 
  "1000450" -> "1000445" 
  "1000451" -> "1000450" 
  "1000457" -> "1000477" 
  "1000460" -> "1000462" 
  "1000462" -> "1000465" 
  "1000465" -> "1000468" 
  "1000468" -> "1000471" 
  "1000471" -> "1000474" 
  "1000474" -> "1000457" 
  "1000477" -> "1000485" 
  "1000481" -> "1000487" 
  "1000483" -> "1000481" 
  "1000485" -> "1000483" 
  "1000487" -> "1000491" 
  "1000490" -> "1000815" 
  "1000491" -> "1000490" 
  "1000493" -> "1000506" 
  "1000495" -> "1000500" 
  "1000497" -> "1000495" 
  "1000498" -> "1000493" 
  "1000500" -> "1000498" 
  "1000502" -> "1000513" 
  "1000502" -> "1000517" 
  "1000503" -> "1000502" 
  "1000504" -> "1000507" 
  "1000506" -> "1000504" 
  "1000507" -> "1000503" 
  "1000509" -> "1000768" 
  "1000511" -> "1000509" 
  "1000513" -> "1000511" 
  "1000516" -> "1000522" 
  "1000516" -> "1000533" 
  "1000517" -> "1000516" 
  "1000517" -> "1000519" 
  "1000519" -> "1000516" 
  "1000522" -> "1000525" 
  "1000525" -> "1000485" 
  "1000529" -> "1000535" 
  "1000531" -> "1000529" 
  "1000533" -> "1000531" 
  "1000535" -> "1000543" 
  "1000535" -> "1000570" 
  "1000538" -> "1000551" 
  "1000540" -> "1000538" 
  "1000541" -> "1000546" 
  "1000543" -> "1000541" 
  "1000544" -> "1000540" 
  "1000546" -> "1000544" 
  "1000548" -> "1000554" 
  "1000549" -> "1000548" 
  "1000551" -> "1000549" 
  "1000554" -> "1000557" 
  "1000554" -> "1000570" 
  "1000557" -> "1000563" 
  "1000562" -> "1000815" 
  "1000563" -> "1000562" 
  "1000565" -> "1000594" 
  "1000565" -> "1000646" 
  "1000567" -> "1000565" 
  "1000568" -> "1000575" 
  "1000570" -> "1000568" 
  "1000572" -> "1000581" 
  "1000573" -> "1000576" 
  "1000575" -> "1000573" 
  "1000576" -> "1000572" 
  "1000579" -> "1000584" 
  "1000581" -> "1000579" 
  "1000582" -> "1000587" 
  "1000584" -> "1000582" 
  "1000585" -> "1000590" 
  "1000587" -> "1000585" 
  "1000588" -> "1000567" 
  "1000590" -> "1000588" 
  "1000594" -> "1000597" 
  "1000597" -> "1000601" 
  "1000601" -> "1000606" 
  "1000606" -> "1000610" 
  "1000610" -> "1000614" 
  "1000610" -> "1000485" 
  "1000614" -> "1000618" 
  "1000618" -> "1000622" 
  "1000618" -> "1000485" 
  "1000622" -> "1000626" 
  "1000626" -> "1000630" 
  "1000626" -> "1000485" 
  "1000630" -> "1000634" 
  "1000634" -> "1000637" 
  "1000634" -> "1000485" 
  "1000637" -> "1000485" 
  "1000642" -> "1000653" 
  "1000642" -> "1000747" 
  "1000643" -> "1000642" 
  "1000644" -> "1000643" 
  "1000646" -> "1000644" 
  "1000650" -> "1000658" 
  "1000652" -> "1000650" 
  "1000653" -> "1000656" 
  "1000654" -> "1000652" 
  "1000656" -> "1000654" 
  "1000658" -> "1000666" 
  "1000658" -> "1000747" 
  "1000662" -> "1000701" 
  "1000662" -> "1000747" 
  "1000663" -> "1000662" 
  "1000663" -> "1000673" 
  "1000664" -> "1000663" 
  "1000666" -> "1000664" 
  "1000668" -> "1000662" 
  "1000670" -> "1000678" 
  "1000672" -> "1000670" 
  "1000673" -> "1000676" 
  "1000674" -> "1000672" 
  "1000676" -> "1000674" 
  "1000678" -> "1000685" 
  "1000681" -> "1000668" 
  "1000681" -> "1000689" 
  "1000682" -> "1000681" 
  "1000683" -> "1000682" 
  "1000685" -> "1000683" 
  "1000689" -> "1000695" 
  "1000692" -> "1000668" 
  "1000693" -> "1000692" 
  "1000695" -> "1000693" 
  "1000698" -> "1000708" 
  "1000698" -> "1000747" 
  "1000699" -> "1000698" 
  "1000701" -> "1000699" 
  "1000705" -> "1000710" 
  "1000705" -> "1000722" 
  "1000706" -> "1000705" 
  "1000708" -> "1000706" 
  "1000710" -> "1000713" 
  "1000713" -> "1000716" 
  "1000716" -> "1000722" 
  "1000719" -> "1000726" 
  "1000721" -> "1000719" 
  "1000722" -> "1000721" 
  "1000724" -> "1000736" 
  "1000726" -> "1000724" 
  "1000730" -> "1000739" 
  "1000736" -> "1000730" 
  "1000739" -> "1000815" 
  "1000741" -> "1000753" 
  "1000743" -> "1000741" 
  "1000744" -> "1000743" 
  "1000745" -> "1000744" 
  "1000747" -> "1000745" 
  "1000749" -> "1000757" 
  "1000749" -> "1000762" 
  "1000751" -> "1000749" 
  "1000753" -> "1000751" 
  "1000756" -> "1000768" 
  "1000757" -> "1000756" 
  "1000761" -> "1000768" 
  "1000762" -> "1000761" 
  "1000766" -> "1000774" 
  "1000768" -> "1000766" 
  "1000771" -> "1000780" 
  "1000772" -> "1000776" 
  "1000774" -> "1000772" 
  "1000775" -> "1000771" 
  "1000776" -> "1000775" 
  "1000780" -> "1000784" 
  "1000780" -> "1000789" 
  "1000784" -> "1000794" 
  "1000784" -> "1000800" 
  "1000786" -> "1000784" 
  "1000787" -> "1000786" 
  "1000789" -> "1000787" 
  "1000791" -> "1000805" 
  "1000792" -> "1000791" 
  "1000794" -> "1000792" 
  "1000797" -> "1000805" 
  "1000798" -> "1000797" 
  "1000800" -> "1000798" 
  "1000802" -> "1000811" 
  "1000805" -> "1000802" 
  "1000808" -> "1000813" 
  "1000809" -> "1000808" 
  "1000811" -> "1000809" 
  "1000813" -> "1000815" 
  "1000129" -> "1000166" 
}
