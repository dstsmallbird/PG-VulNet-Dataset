digraph tftp_connect {  
"1000125" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000127" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000130" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000131" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000136" [label = "(<operator>.logicalNot,!v4)" ]
"1000138" [label = "(RETURN,return 27;,return 27;)" ]
"1000140" [label = "(<operator>.assignment,v5 = v4)" ]
"1000143" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000145" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000146" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000148" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000149" [label = "(<operator>.indirection,*a1)" ]
"1000155" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000157" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000158" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000159" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000160" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000161" [label = "(<operator>.indirection,*a1)" ]
"1000165" [label = "(<operator>.greaterEqualsThan,(unsigned int)(v6 - 8) >= 0xFFB1)" ]
"1000166" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000167" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000168" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000172" [label = "(RETURN,return 71;,return 71;)" ]
"1000176" [label = "(<operator>.assignment,v7 = 512)" ]
"1000180" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 328))" ]
"1000181" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000182" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000183" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000184" [label = "(<operator>.addition,v5 + 328)" ]
"1000188" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v7 + 4))" ]
"1000190" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000192" [label = "(<operator>.addition,v7 + 4)" ]
"1000195" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v9)" ]
"1000196" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000197" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000198" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000199" [label = "(<operator>.addition,v5 + 328)" ]
"1000204" [label = "(<operator>.logicalNot,!v9)" ]
"1000206" [label = "(RETURN,return 27;,return 27;)" ]
"1000209" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000210" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000211" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000212" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000213" [label = "(<operator>.addition,v5 + 332)" ]
"1000217" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v7 + 4))" ]
"1000219" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000221" [label = "(<operator>.addition,v7 + 4)" ]
"1000224" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v10)" ]
"1000225" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000226" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000227" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000228" [label = "(<operator>.addition,v5 + 332)" ]
"1000233" [label = "(<operator>.logicalNot,!v10)" ]
"1000235" [label = "(RETURN,return 27;,return 27;)" ]
"1000237" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000240" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000241" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000242" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000243" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000244" [label = "(<operator>.addition,v5 + 16)" ]
"1000248" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = a1[105])" ]
"1000249" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000250" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000251" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000252" [label = "(<operator>.addition,v5 + 20)" ]
"1000255" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000258" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000259" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000260" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000261" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000264" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000265" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000266" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000267" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000268" [label = "(<operator>.addition,v5 + 8)" ]
"1000271" [label = "(<operator>.minus,-100)" ]
"1000273" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = v7)" ]
"1000274" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000275" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000276" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000277" [label = "(<operator>.addition,v5 + 320)" ]
"1000281" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v7)" ]
"1000282" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000283" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000284" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000285" [label = "(<operator>.addition,v5 + 324)" ]
"1000289" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000290" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000291" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000292" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000293" [label = "(<operator>.addition,v5 + 52)" ]
"1000296" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000297" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000298" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000299" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000300" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000304" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000307" [label = "(<operator>.notEquals,((a1[147] >> 25) & 1) != 0)" ]
"1000308" [label = "(<operator>.and,(a1[147] >> 25) & 1)" ]
"1000309" [label = "(<operator>.arithmeticShiftRight,a1[147] >> 25)" ]
"1000310" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000318" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000319" [label = "(<operator>.indirection,*a1)" ]
"1000321" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000322" [label = "(<operator>.indirection,*a2)" ]
"1000325" [label = "(RETURN,return 0;,return 0;)" ]
"1000328" [label = "(<operator>.logicalNot,!bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000329" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000330" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000331" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000332" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000333" [label = "(<operator>.addition,v5 + 20)" ]
"1000336" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000337" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000338" [label = "(<operator>.addition,v5 + 52)" ]
"1000341" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000342" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000343" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000344" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000345" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000350" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFDFFFFFF | 0x2000000)" ]
"1000351" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000354" [label = "(<operator>.or,a1[147] & 0xFDFFFFFF | 0x2000000)" ]
"1000355" [label = "(<operator>.and,a1[147] & 0xFDFFFFFF)" ]
"1000356" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000362" [label = "(<operator>.assignment,v11 = *a1)" ]
"1000364" [label = "(<operator>.indirection,*a1)" ]
"1000366" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000368" [label = "(_errno_location,_errno_location())" ]
"1000369" [label = "(<operator>.assignment,v13 = (const char *)Curl_strerror(*v12, v14, 128))" ]
"1000371" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v14, 128))" ]
"1000372" [label = "(UNKNOWN,const char *,const char *)" ]
"1000373" [label = "(Curl_strerror,Curl_strerror(*v12, v14, 128))" ]
"1000374" [label = "(<operator>.indirection,*v12)" ]
"1000378" [label = "(Curl_failf,Curl_failf(v11, \"bind() failed; %s\", v13))" ]
"1000382" [label = "(RETURN,return 7;,return 7;)" ]
"1000111" [label = "(METHOD,tftp_connect)" ]
"1000384" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000125" -> "1000131" 
  "1000127" -> "1000125" 
  "1000130" -> "1000136" 
  "1000131" -> "1000130" 
  "1000136" -> "1000138" 
  "1000136" -> "1000140" 
  "1000138" -> "1000384" 
  "1000140" -> "1000147" 
  "1000143" -> "1000159" 
  "1000143" -> "1000176" 
  "1000145" -> "1000143" 
  "1000146" -> "1000145" 
  "1000147" -> "1000149" 
  "1000148" -> "1000146" 
  "1000149" -> "1000148" 
  "1000155" -> "1000167" 
  "1000157" -> "1000155" 
  "1000158" -> "1000157" 
  "1000159" -> "1000161" 
  "1000160" -> "1000158" 
  "1000161" -> "1000160" 
  "1000165" -> "1000183" 
  "1000165" -> "1000172" 
  "1000166" -> "1000165" 
  "1000167" -> "1000168" 
  "1000168" -> "1000166" 
  "1000172" -> "1000384" 
  "1000176" -> "1000183" 
  "1000180" -> "1000212" 
  "1000180" -> "1000192" 
  "1000181" -> "1000180" 
  "1000182" -> "1000181" 
  "1000183" -> "1000184" 
  "1000184" -> "1000182" 
  "1000188" -> "1000198" 
  "1000190" -> "1000188" 
  "1000192" -> "1000190" 
  "1000195" -> "1000204" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000198" -> "1000199" 
  "1000199" -> "1000197" 
  "1000204" -> "1000212" 
  "1000204" -> "1000206" 
  "1000206" -> "1000384" 
  "1000209" -> "1000221" 
  "1000209" -> "1000237" 
  "1000210" -> "1000209" 
  "1000211" -> "1000210" 
  "1000212" -> "1000213" 
  "1000213" -> "1000211" 
  "1000217" -> "1000227" 
  "1000219" -> "1000217" 
  "1000221" -> "1000219" 
  "1000224" -> "1000233" 
  "1000225" -> "1000224" 
  "1000226" -> "1000225" 
  "1000227" -> "1000228" 
  "1000228" -> "1000226" 
  "1000233" -> "1000235" 
  "1000233" -> "1000237" 
  "1000235" -> "1000384" 
  "1000237" -> "1000243" 
  "1000240" -> "1000251" 
  "1000241" -> "1000240" 
  "1000242" -> "1000241" 
  "1000243" -> "1000244" 
  "1000244" -> "1000242" 
  "1000248" -> "1000261" 
  "1000249" -> "1000255" 
  "1000250" -> "1000249" 
  "1000251" -> "1000252" 
  "1000252" -> "1000250" 
  "1000255" -> "1000248" 
  "1000258" -> "1000267" 
  "1000259" -> "1000258" 
  "1000260" -> "1000259" 
  "1000261" -> "1000260" 
  "1000264" -> "1000276" 
  "1000265" -> "1000271" 
  "1000266" -> "1000265" 
  "1000267" -> "1000268" 
  "1000268" -> "1000266" 
  "1000271" -> "1000264" 
  "1000273" -> "1000284" 
  "1000274" -> "1000273" 
  "1000275" -> "1000274" 
  "1000276" -> "1000277" 
  "1000277" -> "1000275" 
  "1000281" -> "1000292" 
  "1000282" -> "1000281" 
  "1000283" -> "1000282" 
  "1000284" -> "1000285" 
  "1000285" -> "1000283" 
  "1000289" -> "1000304" 
  "1000290" -> "1000298" 
  "1000291" -> "1000290" 
  "1000292" -> "1000293" 
  "1000293" -> "1000291" 
  "1000296" -> "1000289" 
  "1000297" -> "1000296" 
  "1000298" -> "1000300" 
  "1000299" -> "1000297" 
  "1000300" -> "1000299" 
  "1000304" -> "1000310" 
  "1000307" -> "1000332" 
  "1000307" -> "1000319" 
  "1000308" -> "1000307" 
  "1000309" -> "1000308" 
  "1000310" -> "1000309" 
  "1000318" -> "1000322" 
  "1000319" -> "1000318" 
  "1000321" -> "1000325" 
  "1000322" -> "1000321" 
  "1000325" -> "1000384" 
  "1000328" -> "1000351" 
  "1000328" -> "1000364" 
  "1000329" -> "1000328" 
  "1000330" -> "1000337" 
  "1000331" -> "1000330" 
  "1000332" -> "1000333" 
  "1000333" -> "1000331" 
  "1000336" -> "1000343" 
  "1000337" -> "1000338" 
  "1000338" -> "1000336" 
  "1000341" -> "1000329" 
  "1000342" -> "1000341" 
  "1000343" -> "1000345" 
  "1000344" -> "1000342" 
  "1000345" -> "1000344" 
  "1000350" -> "1000319" 
  "1000351" -> "1000356" 
  "1000354" -> "1000350" 
  "1000355" -> "1000354" 
  "1000356" -> "1000355" 
  "1000362" -> "1000368" 
  "1000364" -> "1000362" 
  "1000366" -> "1000372" 
  "1000368" -> "1000366" 
  "1000369" -> "1000378" 
  "1000371" -> "1000369" 
  "1000372" -> "1000374" 
  "1000373" -> "1000371" 
  "1000374" -> "1000373" 
  "1000378" -> "1000382" 
  "1000382" -> "1000384" 
  "1000111" -> "1000127" 
}
