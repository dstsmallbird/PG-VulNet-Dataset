digraph tftp_connect {  
"1000127" [label = "(<operator>.assignment,v14 = a1)" ]
"1000130" [label = "(<operator>.assignment,v13 = a2)" ]
"1000133" [label = "(<operator>.assignment,v11 = &elf_gnu_hash_bucket[30])" ]
"1000135" [label = "(<operator>.addressOf,&elf_gnu_hash_bucket[30])" ]
"1000136" [label = "(<operator>.indirectIndexAccess,elf_gnu_hash_bucket[30])" ]
"1000139" [label = "(<operator>.assignment,v2 = Curl_ccalloc(1, &elf_gnu_hash_indexes[2]))" ]
"1000141" [label = "(Curl_ccalloc,Curl_ccalloc(1, &elf_gnu_hash_indexes[2]))" ]
"1000143" [label = "(<operator>.addressOf,&elf_gnu_hash_indexes[2])" ]
"1000144" [label = "(<operator>.indirectIndexAccess,elf_gnu_hash_indexes[2])" ]
"1000147" [label = "(<operator>.assignment,v14[188] = v2)" ]
"1000148" [label = "(<operator>.indirectIndexAccess,v14[188])" ]
"1000152" [label = "(<operator>.assignment,v12 = v2)" ]
"1000156" [label = "(<operator>.logicalNot,!v2)" ]
"1000158" [label = "(RETURN,return 27;,return 27;)" ]
"1000161" [label = "(<operator>.indirection,*(_DWORD *)(*v14 + 1576))" ]
"1000162" [label = "(<operator>.cast,(_DWORD *)(*v14 + 1576))" ]
"1000163" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000164" [label = "(<operator>.addition,*v14 + 1576)" ]
"1000165" [label = "(<operator>.indirection,*v14)" ]
"1000169" [label = "(<operator>.assignment,v11 = *(int **)(*v14 + 1576))" ]
"1000171" [label = "(<operator>.indirection,*(int **)(*v14 + 1576))" ]
"1000172" [label = "(<operator>.cast,(int **)(*v14 + 1576))" ]
"1000173" [label = "(UNKNOWN,int **,int **)" ]
"1000174" [label = "(<operator>.addition,*v14 + 1576)" ]
"1000175" [label = "(<operator>.indirection,*v14)" ]
"1000179" [label = "(<operator>.logicalOr,(int)v11 > 65464 || (int)v11 < 8)" ]
"1000180" [label = "(<operator>.greaterThan,(int)v11 > 65464)" ]
"1000181" [label = "(<operator>.cast,(int)v11)" ]
"1000182" [label = "(UNKNOWN,int,int)" ]
"1000185" [label = "(<operator>.lessThan,(int)v11 < 8)" ]
"1000186" [label = "(<operator>.cast,(int)v11)" ]
"1000187" [label = "(UNKNOWN,int,int)" ]
"1000190" [label = "(RETURN,return 71;,return 71;)" ]
"1000193" [label = "(<operator>.logicalNot,!*(_DWORD *)(v12 + 328))" ]
"1000194" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 328))" ]
"1000195" [label = "(<operator>.cast,(_DWORD *)(v12 + 328))" ]
"1000196" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000197" [label = "(<operator>.addition,v12 + 328)" ]
"1000201" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 328) = Curl_ccalloc(1, v11 + 1))" ]
"1000202" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 328))" ]
"1000203" [label = "(<operator>.cast,(_DWORD *)(v12 + 328))" ]
"1000204" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000205" [label = "(<operator>.addition,v12 + 328)" ]
"1000208" [label = "(Curl_ccalloc,Curl_ccalloc(1, v11 + 1))" ]
"1000210" [label = "(<operator>.addition,v11 + 1)" ]
"1000214" [label = "(<operator>.logicalNot,!*(_DWORD *)(v12 + 328))" ]
"1000215" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 328))" ]
"1000216" [label = "(<operator>.cast,(_DWORD *)(v12 + 328))" ]
"1000217" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000218" [label = "(<operator>.addition,v12 + 328)" ]
"1000221" [label = "(RETURN,return 27;,return 27;)" ]
"1000224" [label = "(<operator>.logicalOr,*(_DWORD *)(v12 + 332) || (*(_DWORD *)(v12 + 332) = Curl_ccalloc(1, v11 + 1)) != 0)" ]
"1000225" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 332))" ]
"1000226" [label = "(<operator>.cast,(_DWORD *)(v12 + 332))" ]
"1000227" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000228" [label = "(<operator>.addition,v12 + 332)" ]
"1000231" [label = "(<operator>.notEquals,(*(_DWORD *)(v12 + 332) = Curl_ccalloc(1, v11 + 1)) != 0)" ]
"1000232" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 332) = Curl_ccalloc(1, v11 + 1))" ]
"1000233" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 332))" ]
"1000234" [label = "(<operator>.cast,(_DWORD *)(v12 + 332))" ]
"1000235" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000236" [label = "(<operator>.addition,v12 + 332)" ]
"1000239" [label = "(Curl_ccalloc,Curl_ccalloc(1, v11 + 1))" ]
"1000241" [label = "(<operator>.addition,v11 + 1)" ]
"1000246" [label = "(Curl_conncontrol,Curl_conncontrol(v14))" ]
"1000248" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 16) = v14)" ]
"1000249" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 16))" ]
"1000250" [label = "(<operator>.cast,(_DWORD *)(v12 + 16))" ]
"1000251" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000252" [label = "(<operator>.addition,v12 + 16)" ]
"1000256" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 20) = *(_DWORD *)(*(_DWORD *)(v12 + 16) + 420))" ]
"1000257" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 20))" ]
"1000258" [label = "(<operator>.cast,(_DWORD *)(v12 + 20))" ]
"1000259" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000260" [label = "(<operator>.addition,v12 + 20)" ]
"1000263" [label = "(<operator>.indirection,*(_DWORD *)(*(_DWORD *)(v12 + 16) + 420))" ]
"1000264" [label = "(<operator>.cast,(_DWORD *)(*(_DWORD *)(v12 + 16) + 420))" ]
"1000265" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000266" [label = "(<operator>.addition,*(_DWORD *)(v12 + 16) + 420)" ]
"1000267" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 16))" ]
"1000268" [label = "(<operator>.cast,(_DWORD *)(v12 + 16))" ]
"1000269" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000270" [label = "(<operator>.addition,v12 + 16)" ]
"1000274" [label = "(<operator>.assignment,*(_DWORD *)v12 = 0)" ]
"1000275" [label = "(<operator>.indirection,*(_DWORD *)v12)" ]
"1000276" [label = "(<operator>.cast,(_DWORD *)v12)" ]
"1000277" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000280" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 8) = -100)" ]
"1000281" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 8))" ]
"1000282" [label = "(<operator>.cast,(_DWORD *)(v12 + 8))" ]
"1000283" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000284" [label = "(<operator>.addition,v12 + 8)" ]
"1000287" [label = "(<operator>.minus,-100)" ]
"1000289" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 320) = v11)" ]
"1000290" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 320))" ]
"1000291" [label = "(<operator>.cast,(_DWORD *)(v12 + 320))" ]
"1000292" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000293" [label = "(<operator>.addition,v12 + 320)" ]
"1000297" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 324) = v11)" ]
"1000298" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 324))" ]
"1000299" [label = "(<operator>.cast,(_DWORD *)(v12 + 324))" ]
"1000300" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000301" [label = "(<operator>.addition,v12 + 324)" ]
"1000305" [label = "(<operator>.assignment,*(_WORD *)(v12 + 52) = *(_DWORD *)(v14[20] + 4))" ]
"1000306" [label = "(<operator>.indirection,*(_WORD *)(v12 + 52))" ]
"1000307" [label = "(<operator>.cast,(_WORD *)(v12 + 52))" ]
"1000308" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000309" [label = "(<operator>.addition,v12 + 52)" ]
"1000312" [label = "(<operator>.indirection,*(_DWORD *)(v14[20] + 4))" ]
"1000313" [label = "(<operator>.cast,(_DWORD *)(v14[20] + 4))" ]
"1000314" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000315" [label = "(<operator>.addition,v14[20] + 4)" ]
"1000316" [label = "(<operator>.indirectIndexAccess,v14[20])" ]
"1000320" [label = "(tftp_set_timeouts,tftp_set_timeouts(v12))" ]
"1000323" [label = "(<operator>.equals,((v14[147] >> 25) & 1) == 0)" ]
"1000324" [label = "(<operator>.and,(v14[147] >> 25) & 1)" ]
"1000325" [label = "(<operator>.arithmeticShiftRight,v14[147] >> 25)" ]
"1000326" [label = "(<operator>.indirectIndexAccess,v14[147])" ]
"1000334" [label = "(bind,bind(*(_DWORD *)(v12 + 20), (const struct sockaddr *)(v12 + 52), *(_DWORD *)(v14[20] + 16)))" ]
"1000335" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 20))" ]
"1000336" [label = "(<operator>.cast,(_DWORD *)(v12 + 20))" ]
"1000337" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000338" [label = "(<operator>.addition,v12 + 20)" ]
"1000341" [label = "(<operator>.cast,(const struct sockaddr *)(v12 + 52))" ]
"1000342" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000343" [label = "(<operator>.addition,v12 + 52)" ]
"1000346" [label = "(<operator>.indirection,*(_DWORD *)(v14[20] + 16))" ]
"1000347" [label = "(<operator>.cast,(_DWORD *)(v14[20] + 16))" ]
"1000348" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000349" [label = "(<operator>.addition,v14[20] + 16)" ]
"1000350" [label = "(<operator>.indirectIndexAccess,v14[20])" ]
"1000355" [label = "(<operator>.assignment,v8 = *v14)" ]
"1000357" [label = "(<operator>.indirection,*v14)" ]
"1000359" [label = "(<operator>.assignment,v3 = _errno_location())" ]
"1000361" [label = "(_errno_location,_errno_location())" ]
"1000362" [label = "(<operator>.assignment,v4 = (const char *)Curl_strerror(*v3, v9, &dword_80))" ]
"1000364" [label = "(<operator>.cast,(const char *)Curl_strerror(*v3, v9, &dword_80))" ]
"1000365" [label = "(UNKNOWN,const char *,const char *)" ]
"1000366" [label = "(Curl_strerror,Curl_strerror(*v3, v9, &dword_80))" ]
"1000367" [label = "(<operator>.indirection,*v3)" ]
"1000370" [label = "(<operator>.addressOf,&dword_80)" ]
"1000372" [label = "(Curl_failf,Curl_failf(v8, \"bind() failed; %s\", v4))" ]
"1000376" [label = "(RETURN,return 7;,return 7;)" ]
"1000378" [label = "(<operator>.assignment,v5 = v14)" ]
"1000381" [label = "(<operator>.assignment,v6 = v14[147] | 0x2000000)" ]
"1000383" [label = "(<operator>.or,v14[147] | 0x2000000)" ]
"1000384" [label = "(<operator>.indirectIndexAccess,v14[147])" ]
"1000388" [label = "(<operator>.assignment,v14[148] = v14[148])" ]
"1000389" [label = "(<operator>.indirectIndexAccess,v14[148])" ]
"1000392" [label = "(<operator>.indirectIndexAccess,v14[148])" ]
"1000395" [label = "(<operator>.assignment,v5[147] = v6)" ]
"1000396" [label = "(<operator>.indirectIndexAccess,v5[147])" ]
"1000400" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*v14))" ]
"1000401" [label = "(<operator>.indirection,*v14)" ]
"1000403" [label = "(<operator>.assignment,*v13 = 1)" ]
"1000404" [label = "(<operator>.indirection,*v13)" ]
"1000407" [label = "(RETURN,return 0;,return 0;)" ]
"1000409" [label = "(RETURN,return 27;,return 27;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000411" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000127" -> "1000130" 
  "1000130" -> "1000136" 
  "1000133" -> "1000144" 
  "1000135" -> "1000133" 
  "1000136" -> "1000135" 
  "1000139" -> "1000148" 
  "1000141" -> "1000139" 
  "1000143" -> "1000141" 
  "1000144" -> "1000143" 
  "1000147" -> "1000152" 
  "1000148" -> "1000147" 
  "1000152" -> "1000156" 
  "1000156" -> "1000163" 
  "1000156" -> "1000158" 
  "1000158" -> "1000411" 
  "1000161" -> "1000196" 
  "1000161" -> "1000173" 
  "1000162" -> "1000161" 
  "1000163" -> "1000165" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000169" -> "1000182" 
  "1000171" -> "1000169" 
  "1000172" -> "1000171" 
  "1000173" -> "1000175" 
  "1000174" -> "1000172" 
  "1000175" -> "1000174" 
  "1000179" -> "1000196" 
  "1000179" -> "1000190" 
  "1000180" -> "1000187" 
  "1000180" -> "1000179" 
  "1000181" -> "1000180" 
  "1000182" -> "1000181" 
  "1000185" -> "1000179" 
  "1000186" -> "1000185" 
  "1000187" -> "1000186" 
  "1000190" -> "1000411" 
  "1000193" -> "1000204" 
  "1000193" -> "1000227" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000196" -> "1000197" 
  "1000197" -> "1000195" 
  "1000201" -> "1000217" 
  "1000202" -> "1000210" 
  "1000203" -> "1000202" 
  "1000204" -> "1000205" 
  "1000205" -> "1000203" 
  "1000208" -> "1000201" 
  "1000210" -> "1000208" 
  "1000214" -> "1000227" 
  "1000214" -> "1000221" 
  "1000215" -> "1000214" 
  "1000216" -> "1000215" 
  "1000217" -> "1000218" 
  "1000218" -> "1000216" 
  "1000221" -> "1000411" 
  "1000224" -> "1000246" 
  "1000224" -> "1000409" 
  "1000225" -> "1000235" 
  "1000225" -> "1000224" 
  "1000226" -> "1000225" 
  "1000227" -> "1000228" 
  "1000228" -> "1000226" 
  "1000231" -> "1000224" 
  "1000232" -> "1000231" 
  "1000233" -> "1000241" 
  "1000234" -> "1000233" 
  "1000235" -> "1000236" 
  "1000236" -> "1000234" 
  "1000239" -> "1000232" 
  "1000241" -> "1000239" 
  "1000246" -> "1000251" 
  "1000248" -> "1000259" 
  "1000249" -> "1000248" 
  "1000250" -> "1000249" 
  "1000251" -> "1000252" 
  "1000252" -> "1000250" 
  "1000256" -> "1000277" 
  "1000257" -> "1000265" 
  "1000258" -> "1000257" 
  "1000259" -> "1000260" 
  "1000260" -> "1000258" 
  "1000263" -> "1000256" 
  "1000264" -> "1000263" 
  "1000265" -> "1000269" 
  "1000266" -> "1000264" 
  "1000267" -> "1000266" 
  "1000268" -> "1000267" 
  "1000269" -> "1000270" 
  "1000270" -> "1000268" 
  "1000274" -> "1000283" 
  "1000275" -> "1000274" 
  "1000276" -> "1000275" 
  "1000277" -> "1000276" 
  "1000280" -> "1000292" 
  "1000281" -> "1000287" 
  "1000282" -> "1000281" 
  "1000283" -> "1000284" 
  "1000284" -> "1000282" 
  "1000287" -> "1000280" 
  "1000289" -> "1000300" 
  "1000290" -> "1000289" 
  "1000291" -> "1000290" 
  "1000292" -> "1000293" 
  "1000293" -> "1000291" 
  "1000297" -> "1000308" 
  "1000298" -> "1000297" 
  "1000299" -> "1000298" 
  "1000300" -> "1000301" 
  "1000301" -> "1000299" 
  "1000305" -> "1000320" 
  "1000306" -> "1000314" 
  "1000307" -> "1000306" 
  "1000308" -> "1000309" 
  "1000309" -> "1000307" 
  "1000312" -> "1000305" 
  "1000313" -> "1000312" 
  "1000314" -> "1000316" 
  "1000315" -> "1000313" 
  "1000316" -> "1000315" 
  "1000320" -> "1000326" 
  "1000323" -> "1000337" 
  "1000323" -> "1000401" 
  "1000324" -> "1000323" 
  "1000325" -> "1000324" 
  "1000326" -> "1000325" 
  "1000334" -> "1000357" 
  "1000334" -> "1000378" 
  "1000335" -> "1000342" 
  "1000336" -> "1000335" 
  "1000337" -> "1000338" 
  "1000338" -> "1000336" 
  "1000341" -> "1000348" 
  "1000342" -> "1000343" 
  "1000343" -> "1000341" 
  "1000346" -> "1000334" 
  "1000347" -> "1000346" 
  "1000348" -> "1000350" 
  "1000349" -> "1000347" 
  "1000350" -> "1000349" 
  "1000355" -> "1000361" 
  "1000357" -> "1000355" 
  "1000359" -> "1000365" 
  "1000361" -> "1000359" 
  "1000362" -> "1000372" 
  "1000364" -> "1000362" 
  "1000365" -> "1000367" 
  "1000366" -> "1000364" 
  "1000367" -> "1000370" 
  "1000370" -> "1000366" 
  "1000372" -> "1000376" 
  "1000376" -> "1000411" 
  "1000378" -> "1000384" 
  "1000381" -> "1000389" 
  "1000383" -> "1000381" 
  "1000384" -> "1000383" 
  "1000388" -> "1000396" 
  "1000389" -> "1000392" 
  "1000392" -> "1000388" 
  "1000395" -> "1000401" 
  "1000396" -> "1000395" 
  "1000400" -> "1000404" 
  "1000401" -> "1000400" 
  "1000403" -> "1000407" 
  "1000404" -> "1000403" 
  "1000407" -> "1000411" 
  "1000409" -> "1000411" 
  "1000112" -> "1000127" 
}
