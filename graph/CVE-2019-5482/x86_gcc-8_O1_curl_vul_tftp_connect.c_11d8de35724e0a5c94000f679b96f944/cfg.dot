digraph tftp_connect {  
"1000125" [label = "(<operator>.assignment,v11 = __readgsdword(0x14u))" ]
"1000127" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000129" [label = "(<operator>.assignment,v2 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000140" [label = "(<operator>.logicalNot,!v2)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v3 = v2)" ]
"1000147" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000157" [label = "(<operator>.logicalNot,!v4)" ]
"1000160" [label = "(<operator>.assignment,v4 = 512)" ]
"1000164" [label = "(<operator>.assignment,result = 71)" ]
"1000168" [label = "(<operator>.lessEqualsThan,(unsigned int)(v4 - 8) <= 0xFFB0)" ]
"1000169" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000170" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000171" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000178" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 328))" ]
"1000179" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000180" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000181" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000182" [label = "(<operator>.addition,v3 + 328)" ]
"1000186" [label = "(<operator>.assignment,v6 = Curl_ccalloc(1, v4 + 4))" ]
"1000188" [label = "(Curl_ccalloc,Curl_ccalloc(1, v4 + 4))" ]
"1000190" [label = "(<operator>.addition,v4 + 4)" ]
"1000193" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 328) = v6)" ]
"1000194" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000195" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000196" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000197" [label = "(<operator>.addition,v3 + 328)" ]
"1000202" [label = "(<operator>.logicalNot,!v6)" ]
"1000204" [label = "(RETURN,return 27;,return 27;)" ]
"1000207" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 332))" ]
"1000208" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 332))" ]
"1000209" [label = "(<operator>.cast,(_DWORD *)(v3 + 332))" ]
"1000210" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000211" [label = "(<operator>.addition,v3 + 332)" ]
"1000215" [label = "(<operator>.assignment,v7 = Curl_ccalloc(1, v4 + 4))" ]
"1000217" [label = "(Curl_ccalloc,Curl_ccalloc(1, v4 + 4))" ]
"1000219" [label = "(<operator>.addition,v4 + 4)" ]
"1000222" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 332) = v7)" ]
"1000223" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 332))" ]
"1000224" [label = "(<operator>.cast,(_DWORD *)(v3 + 332))" ]
"1000225" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000226" [label = "(<operator>.addition,v3 + 332)" ]
"1000231" [label = "(<operator>.logicalNot,!v7)" ]
"1000233" [label = "(RETURN,return 27;,return 27;)" ]
"1000235" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000238" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 16) = a1)" ]
"1000239" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 16))" ]
"1000240" [label = "(<operator>.cast,(_DWORD *)(v3 + 16))" ]
"1000241" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000242" [label = "(<operator>.addition,v3 + 16)" ]
"1000246" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 20) = a1[103])" ]
"1000247" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000248" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000249" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000250" [label = "(<operator>.addition,v3 + 20)" ]
"1000253" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000256" [label = "(<operator>.assignment,*(_DWORD *)v3 = 0)" ]
"1000257" [label = "(<operator>.indirection,*(_DWORD *)v3)" ]
"1000258" [label = "(<operator>.cast,(_DWORD *)v3)" ]
"1000259" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000262" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 8) = -100)" ]
"1000263" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 8))" ]
"1000264" [label = "(<operator>.cast,(_DWORD *)(v3 + 8))" ]
"1000265" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000266" [label = "(<operator>.addition,v3 + 8)" ]
"1000269" [label = "(<operator>.minus,-100)" ]
"1000271" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 320) = v4)" ]
"1000272" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 320))" ]
"1000273" [label = "(<operator>.cast,(_DWORD *)(v3 + 320))" ]
"1000274" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000275" [label = "(<operator>.addition,v3 + 320)" ]
"1000279" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 324) = v4)" ]
"1000280" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 324))" ]
"1000281" [label = "(<operator>.cast,(_DWORD *)(v3 + 324))" ]
"1000282" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000283" [label = "(<operator>.addition,v3 + 324)" ]
"1000287" [label = "(<operator>.assignment,*(_WORD *)(v3 + 52) = *(_DWORD *)(a1[18] + 4))" ]
"1000288" [label = "(<operator>.indirection,*(_WORD *)(v3 + 52))" ]
"1000289" [label = "(<operator>.cast,(_WORD *)(v3 + 52))" ]
"1000290" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000291" [label = "(<operator>.addition,v3 + 52)" ]
"1000294" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 4))" ]
"1000295" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 4))" ]
"1000296" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000297" [label = "(<operator>.addition,a1[18] + 4)" ]
"1000298" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000302" [label = "(tftp_set_timeouts,tftp_set_timeouts())" ]
"1000304" [label = "(<operator>.equals,(*((_BYTE *)a1 + 583) & 2) == 0)" ]
"1000305" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000306" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000307" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000308" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000309" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000316" [label = "(bind,bind(*(_DWORD *)(v3 + 20), (const struct sockaddr *)(v3 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000317" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000318" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000319" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000320" [label = "(<operator>.addition,v3 + 20)" ]
"1000323" [label = "(<operator>.cast,(const struct sockaddr *)(v3 + 52))" ]
"1000324" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000325" [label = "(<operator>.addition,v3 + 52)" ]
"1000328" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000329" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000330" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000331" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000332" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000337" [label = "(<operator>.assignment,v8 = __errno_location())" ]
"1000339" [label = "(__errno_location,__errno_location())" ]
"1000340" [label = "(<operator>.assignment,v9 = Curl_strerror(*v8, buf, 128))" ]
"1000342" [label = "(Curl_strerror,Curl_strerror(*v8, buf, 128))" ]
"1000343" [label = "(<operator>.indirection,*v8)" ]
"1000347" [label = "(Curl_failf,Curl_failf(*a1, \"bind() failed; %s\", v9))" ]
"1000348" [label = "(<operator>.indirection,*a1)" ]
"1000352" [label = "(RETURN,return 7;,return 7;)" ]
"1000354" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000355" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000356" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000357" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000358" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000362" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000363" [label = "(<operator>.indirection,*a1)" ]
"1000365" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000366" [label = "(<operator>.indirection,*a2)" ]
"1000369" [label = "(<operator>.assignment,result = 0)" ]
"1000372" [label = "(RETURN,return result;,return result;)" ]
"1000111" [label = "(METHOD,tftp_connect)" ]
"1000374" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000125" -> "1000131" 
  "1000127" -> "1000125" 
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000144" 
  "1000142" -> "1000374" 
  "1000144" -> "1000151" 
  "1000147" -> "1000157" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000157" -> "1000160" 
  "1000157" -> "1000164" 
  "1000160" -> "1000181" 
  "1000164" -> "1000170" 
  "1000168" -> "1000181" 
  "1000168" -> "1000372" 
  "1000169" -> "1000168" 
  "1000170" -> "1000171" 
  "1000171" -> "1000169" 
  "1000178" -> "1000210" 
  "1000178" -> "1000190" 
  "1000179" -> "1000178" 
  "1000180" -> "1000179" 
  "1000181" -> "1000182" 
  "1000182" -> "1000180" 
  "1000186" -> "1000196" 
  "1000188" -> "1000186" 
  "1000190" -> "1000188" 
  "1000193" -> "1000202" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000196" -> "1000197" 
  "1000197" -> "1000195" 
  "1000202" -> "1000210" 
  "1000202" -> "1000204" 
  "1000204" -> "1000374" 
  "1000207" -> "1000219" 
  "1000207" -> "1000235" 
  "1000208" -> "1000207" 
  "1000209" -> "1000208" 
  "1000210" -> "1000211" 
  "1000211" -> "1000209" 
  "1000215" -> "1000225" 
  "1000217" -> "1000215" 
  "1000219" -> "1000217" 
  "1000222" -> "1000231" 
  "1000223" -> "1000222" 
  "1000224" -> "1000223" 
  "1000225" -> "1000226" 
  "1000226" -> "1000224" 
  "1000231" -> "1000233" 
  "1000231" -> "1000235" 
  "1000233" -> "1000374" 
  "1000235" -> "1000241" 
  "1000238" -> "1000249" 
  "1000239" -> "1000238" 
  "1000240" -> "1000239" 
  "1000241" -> "1000242" 
  "1000242" -> "1000240" 
  "1000246" -> "1000259" 
  "1000247" -> "1000253" 
  "1000248" -> "1000247" 
  "1000249" -> "1000250" 
  "1000250" -> "1000248" 
  "1000253" -> "1000246" 
  "1000256" -> "1000265" 
  "1000257" -> "1000256" 
  "1000258" -> "1000257" 
  "1000259" -> "1000258" 
  "1000262" -> "1000274" 
  "1000263" -> "1000269" 
  "1000264" -> "1000263" 
  "1000265" -> "1000266" 
  "1000266" -> "1000264" 
  "1000269" -> "1000262" 
  "1000271" -> "1000282" 
  "1000272" -> "1000271" 
  "1000273" -> "1000272" 
  "1000274" -> "1000275" 
  "1000275" -> "1000273" 
  "1000279" -> "1000290" 
  "1000280" -> "1000279" 
  "1000281" -> "1000280" 
  "1000282" -> "1000283" 
  "1000283" -> "1000281" 
  "1000287" -> "1000302" 
  "1000288" -> "1000296" 
  "1000289" -> "1000288" 
  "1000290" -> "1000291" 
  "1000291" -> "1000289" 
  "1000294" -> "1000287" 
  "1000295" -> "1000294" 
  "1000296" -> "1000298" 
  "1000297" -> "1000295" 
  "1000298" -> "1000297" 
  "1000302" -> "1000309" 
  "1000304" -> "1000319" 
  "1000304" -> "1000363" 
  "1000305" -> "1000304" 
  "1000306" -> "1000305" 
  "1000307" -> "1000306" 
  "1000308" -> "1000307" 
  "1000309" -> "1000308" 
  "1000316" -> "1000358" 
  "1000316" -> "1000339" 
  "1000317" -> "1000324" 
  "1000318" -> "1000317" 
  "1000319" -> "1000320" 
  "1000320" -> "1000318" 
  "1000323" -> "1000330" 
  "1000324" -> "1000325" 
  "1000325" -> "1000323" 
  "1000328" -> "1000316" 
  "1000329" -> "1000328" 
  "1000330" -> "1000332" 
  "1000331" -> "1000329" 
  "1000332" -> "1000331" 
  "1000337" -> "1000343" 
  "1000339" -> "1000337" 
  "1000340" -> "1000348" 
  "1000342" -> "1000340" 
  "1000343" -> "1000342" 
  "1000347" -> "1000352" 
  "1000348" -> "1000347" 
  "1000352" -> "1000374" 
  "1000354" -> "1000363" 
  "1000355" -> "1000354" 
  "1000356" -> "1000355" 
  "1000357" -> "1000356" 
  "1000358" -> "1000357" 
  "1000362" -> "1000366" 
  "1000363" -> "1000362" 
  "1000365" -> "1000369" 
  "1000366" -> "1000365" 
  "1000369" -> "1000372" 
  "1000372" -> "1000374" 
  "1000111" -> "1000127" 
}
