digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000140" [label = "(<operator>.logicalNot,!v4)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v5 = *(_DWORD *)(*a1 + 1576))" ]
"1000146" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000148" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000149" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000150" [label = "(<operator>.indirection,*a1)" ]
"1000153" [label = "(<operator>.assignment,v6 = v4)" ]
"1000159" [label = "(<operator>.assignment,result = 71)" ]
"1000163" [label = "(<operator>.greaterThan,(unsigned int)(v5 - 8) > 0xFFB0)" ]
"1000164" [label = "(<operator>.cast,(unsigned int)(v5 - 8))" ]
"1000165" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000166" [label = "(<operator>.subtraction,v5 - 8)" ]
"1000170" [label = "(RETURN,return result;,return result;)" ]
"1000172" [label = "(<operator>.assignment,v8 = 512)" ]
"1000176" [label = "(<operator>.greaterEqualsThan,v5 >= 513)" ]
"1000179" [label = "(<operator>.assignment,v8 = *(_DWORD *)(*a1 + 1576))" ]
"1000181" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000182" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000183" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000184" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000185" [label = "(<operator>.indirection,*a1)" ]
"1000188" [label = "(<operator>.assignment,v9 = v8 + 4)" ]
"1000190" [label = "(<operator>.addition,v8 + 4)" ]
"1000194" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000195" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000196" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000197" [label = "(<operator>.addition,v6 + 328)" ]
"1000203" [label = "(<operator>.assignment,v9 = 516)" ]
"1000206" [label = "(<operator>.assignment,v5 = 512)" ]
"1000210" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000211" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000212" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000213" [label = "(<operator>.addition,v4 + 328)" ]
"1000217" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v9))" ]
"1000219" [label = "(Curl_ccalloc,Curl_ccalloc(1, v9))" ]
"1000222" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v10)" ]
"1000223" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000224" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000225" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000226" [label = "(<operator>.addition,v6 + 328)" ]
"1000231" [label = "(<operator>.logicalNot,!v10)" ]
"1000233" [label = "(RETURN,return 27;,return 27;)" ]
"1000237" [label = "(<operator>.logicalOr,*(_DWORD *)(v6 + 332)\n    || (v11 = Curl_ccalloc(1, v9), *(_DWORD *)(v6 + 332) = v11, v12 = v11 == 0, result = 27, !v12))" ]
"1000238" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000239" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000240" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000241" [label = "(<operator>.addition,v6 + 332)" ]
"1000245" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1, v9))" ]
"1000247" [label = "(Curl_ccalloc,Curl_ccalloc(1, v9))" ]
"1000251" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 332) = v11)" ]
"1000252" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000253" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000254" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000255" [label = "(<operator>.addition,v6 + 332)" ]
"1000260" [label = "(<operator>.assignment,v12 = v11 == 0)" ]
"1000262" [label = "(<operator>.equals,v11 == 0)" ]
"1000266" [label = "(<operator>.assignment,result = 27)" ]
"1000269" [label = "(<operator>.logicalNot,!v12)" ]
"1000272" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000275" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000276" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000277" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000278" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000279" [label = "(<operator>.addition,v6 + 16)" ]
"1000283" [label = "(<operator>.assignment,v13 = a1[105])" ]
"1000285" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000288" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v5)" ]
"1000289" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000290" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000291" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000292" [label = "(<operator>.addition,v6 + 324)" ]
"1000296" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = 512)" ]
"1000297" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000298" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000299" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000300" [label = "(<operator>.addition,v6 + 320)" ]
"1000304" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000305" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000306" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000307" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000308" [label = "(<operator>.addition,v6 + 8)" ]
"1000311" [label = "(<operator>.minus,-100)" ]
"1000313" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = v13)" ]
"1000314" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000315" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000316" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000317" [label = "(<operator>.addition,v6 + 20)" ]
"1000321" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000322" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000323" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000324" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000327" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000328" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000329" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000330" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000331" [label = "(<operator>.addition,v6 + 52)" ]
"1000334" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000335" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000336" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000337" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000338" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000342" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000345" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 0x40) == 0)" ]
"1000346" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 0x40)" ]
"1000347" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000348" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000349" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000350" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000357" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000358" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000359" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000360" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000361" [label = "(<operator>.addition,v6 + 20)" ]
"1000364" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000365" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000366" [label = "(<operator>.addition,v6 + 52)" ]
"1000369" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000370" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000371" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000372" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000373" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000378" [label = "(<operator>.assignment,v14 = _errno_location())" ]
"1000380" [label = "(_errno_location,_errno_location())" ]
"1000381" [label = "(Curl_strerror,Curl_strerror(*v14, v15, 128))" ]
"1000382" [label = "(<operator>.indirection,*v14)" ]
"1000386" [label = "(Curl_failf,Curl_failf())" ]
"1000387" [label = "(RETURN,return 7;,return 7;)" ]
"1000389" [label = "(<operators>.assignmentOr,a1[147] |= 0x40u)" ]
"1000390" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000394" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000395" [label = "(<operator>.indirection,*a1)" ]
"1000397" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000398" [label = "(<operator>.indirection,*a2)" ]
"1000401" [label = "(<operator>.assignment,result = 0)" ]
"1000404" [label = "(RETURN,return result;,return result;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000406" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000148" 
  "1000142" -> "1000406" 
  "1000144" -> "1000153" 
  "1000146" -> "1000144" 
  "1000147" -> "1000146" 
  "1000148" -> "1000150" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000153" -> "1000159" 
  "1000153" -> "1000203" 
  "1000159" -> "1000165" 
  "1000163" -> "1000170" 
  "1000163" -> "1000172" 
  "1000164" -> "1000163" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000170" -> "1000406" 
  "1000172" -> "1000176" 
  "1000176" -> "1000183" 
  "1000176" -> "1000190" 
  "1000179" -> "1000190" 
  "1000181" -> "1000179" 
  "1000182" -> "1000181" 
  "1000183" -> "1000185" 
  "1000184" -> "1000182" 
  "1000185" -> "1000184" 
  "1000188" -> "1000196" 
  "1000190" -> "1000188" 
  "1000194" -> "1000240" 
  "1000194" -> "1000219" 
  "1000195" -> "1000194" 
  "1000196" -> "1000197" 
  "1000197" -> "1000195" 
  "1000203" -> "1000206" 
  "1000206" -> "1000212" 
  "1000210" -> "1000240" 
  "1000210" -> "1000219" 
  "1000211" -> "1000210" 
  "1000212" -> "1000213" 
  "1000213" -> "1000211" 
  "1000217" -> "1000225" 
  "1000219" -> "1000217" 
  "1000222" -> "1000231" 
  "1000223" -> "1000222" 
  "1000224" -> "1000223" 
  "1000225" -> "1000226" 
  "1000226" -> "1000224" 
  "1000231" -> "1000233" 
  "1000231" -> "1000240" 
  "1000233" -> "1000406" 
  "1000237" -> "1000272" 
  "1000237" -> "1000404" 
  "1000238" -> "1000237" 
  "1000238" -> "1000247" 
  "1000239" -> "1000238" 
  "1000240" -> "1000241" 
  "1000241" -> "1000239" 
  "1000245" -> "1000254" 
  "1000247" -> "1000245" 
  "1000251" -> "1000262" 
  "1000252" -> "1000251" 
  "1000253" -> "1000252" 
  "1000254" -> "1000255" 
  "1000255" -> "1000253" 
  "1000260" -> "1000266" 
  "1000262" -> "1000260" 
  "1000266" -> "1000269" 
  "1000269" -> "1000237" 
  "1000272" -> "1000278" 
  "1000275" -> "1000285" 
  "1000276" -> "1000275" 
  "1000277" -> "1000276" 
  "1000278" -> "1000279" 
  "1000279" -> "1000277" 
  "1000283" -> "1000291" 
  "1000285" -> "1000283" 
  "1000288" -> "1000299" 
  "1000289" -> "1000288" 
  "1000290" -> "1000289" 
  "1000291" -> "1000292" 
  "1000292" -> "1000290" 
  "1000296" -> "1000307" 
  "1000297" -> "1000296" 
  "1000298" -> "1000297" 
  "1000299" -> "1000300" 
  "1000300" -> "1000298" 
  "1000304" -> "1000316" 
  "1000305" -> "1000311" 
  "1000306" -> "1000305" 
  "1000307" -> "1000308" 
  "1000308" -> "1000306" 
  "1000311" -> "1000304" 
  "1000313" -> "1000324" 
  "1000314" -> "1000313" 
  "1000315" -> "1000314" 
  "1000316" -> "1000317" 
  "1000317" -> "1000315" 
  "1000321" -> "1000330" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000324" -> "1000323" 
  "1000327" -> "1000342" 
  "1000328" -> "1000336" 
  "1000329" -> "1000328" 
  "1000330" -> "1000331" 
  "1000331" -> "1000329" 
  "1000334" -> "1000327" 
  "1000335" -> "1000334" 
  "1000336" -> "1000338" 
  "1000337" -> "1000335" 
  "1000338" -> "1000337" 
  "1000342" -> "1000350" 
  "1000345" -> "1000360" 
  "1000345" -> "1000395" 
  "1000346" -> "1000345" 
  "1000347" -> "1000346" 
  "1000348" -> "1000347" 
  "1000349" -> "1000348" 
  "1000350" -> "1000349" 
  "1000357" -> "1000380" 
  "1000357" -> "1000390" 
  "1000358" -> "1000365" 
  "1000359" -> "1000358" 
  "1000360" -> "1000361" 
  "1000361" -> "1000359" 
  "1000364" -> "1000371" 
  "1000365" -> "1000366" 
  "1000366" -> "1000364" 
  "1000369" -> "1000357" 
  "1000370" -> "1000369" 
  "1000371" -> "1000373" 
  "1000372" -> "1000370" 
  "1000373" -> "1000372" 
  "1000378" -> "1000382" 
  "1000380" -> "1000378" 
  "1000381" -> "1000386" 
  "1000382" -> "1000381" 
  "1000386" -> "1000387" 
  "1000387" -> "1000406" 
  "1000389" -> "1000395" 
  "1000390" -> "1000389" 
  "1000394" -> "1000398" 
  "1000395" -> "1000394" 
  "1000397" -> "1000401" 
  "1000398" -> "1000397" 
  "1000401" -> "1000404" 
  "1000404" -> "1000406" 
  "1000113" -> "1000131" 
}
