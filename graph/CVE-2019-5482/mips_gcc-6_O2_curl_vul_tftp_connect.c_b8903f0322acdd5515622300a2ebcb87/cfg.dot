digraph tftp_connect {  
"1000131" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000133" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000136" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000137" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000142" [label = "(<operator>.logicalNot,!v4)" ]
"1000144" [label = "(RETURN,return 27;,return 27;)" ]
"1000146" [label = "(<operator>.assignment,v5 = v4)" ]
"1000149" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000152" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000153" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000154" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000155" [label = "(<operator>.indirection,*a1)" ]
"1000161" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000163" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000164" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000165" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000166" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000167" [label = "(<operator>.indirection,*a1)" ]
"1000171" [label = "(<operator>.greaterEqualsThan,(unsigned int)(v6 - 8) >= 0xFFB1)" ]
"1000172" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000173" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000174" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000178" [label = "(RETURN,return 71;,return 71;)" ]
"1000182" [label = "(<operator>.assignment,v7 = 512)" ]
"1000186" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 328))" ]
"1000187" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000188" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000189" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000190" [label = "(<operator>.addition,v5 + 328)" ]
"1000194" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1, v7 + 4))" ]
"1000196" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000198" [label = "(<operator>.addition,v7 + 4)" ]
"1000201" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v11)" ]
"1000202" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000203" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000204" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000205" [label = "(<operator>.addition,v5 + 328)" ]
"1000210" [label = "(<operator>.logicalNot,!v11)" ]
"1000212" [label = "(RETURN,return 27;,return 27;)" ]
"1000215" [label = "(<operator>.logicalOr,*(_DWORD *)(v5 + 332) || (v15 = Curl_ccalloc(1, v7 + 4), (*(_DWORD *)(v5 + 332) = v15) != 0))" ]
"1000216" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000217" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000218" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000219" [label = "(<operator>.addition,v5 + 332)" ]
"1000223" [label = "(<operator>.assignment,v15 = Curl_ccalloc(1, v7 + 4))" ]
"1000225" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000227" [label = "(<operator>.addition,v7 + 4)" ]
"1000230" [label = "(<operator>.notEquals,(*(_DWORD *)(v5 + 332) = v15) != 0)" ]
"1000231" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v15)" ]
"1000232" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000233" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000234" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000235" [label = "(<operator>.addition,v5 + 332)" ]
"1000241" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000244" [label = "(<operator>.assignment,v8 = a1[20])" ]
"1000246" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000249" [label = "(<operator>.assignment,v9 = a1[105])" ]
"1000251" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000254" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000255" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000256" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000257" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000258" [label = "(<operator>.addition,v5 + 16)" ]
"1000262" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000263" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000264" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000265" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000268" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = v9)" ]
"1000269" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000270" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000271" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000272" [label = "(<operator>.addition,v5 + 20)" ]
"1000276" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = v7)" ]
"1000277" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000278" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000279" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000280" [label = "(<operator>.addition,v5 + 320)" ]
"1000284" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000285" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000286" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000287" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000288" [label = "(<operator>.addition,v5 + 8)" ]
"1000291" [label = "(<operator>.minus,-100)" ]
"1000293" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v7)" ]
"1000294" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000295" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000296" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000297" [label = "(<operator>.addition,v5 + 324)" ]
"1000301" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(v8 + 4))" ]
"1000302" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000303" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000304" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000305" [label = "(<operator>.addition,v5 + 52)" ]
"1000308" [label = "(<operator>.indirection,*(_DWORD *)(v8 + 4))" ]
"1000309" [label = "(<operator>.cast,(_DWORD *)(v8 + 4))" ]
"1000310" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000311" [label = "(<operator>.addition,v8 + 4)" ]
"1000314" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000317" [label = "(<operator>.equals,(a1[147] & 0x40) == 0)" ]
"1000318" [label = "(<operator>.and,a1[147] & 0x40)" ]
"1000319" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000326" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000327" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000328" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000329" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000330" [label = "(<operator>.addition,v5 + 20)" ]
"1000333" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000334" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000335" [label = "(<operator>.addition,v5 + 52)" ]
"1000338" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000339" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000340" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000341" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000342" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000347" [label = "(<operator>.assignment,v13 = *a1)" ]
"1000349" [label = "(<operator>.indirection,*a1)" ]
"1000351" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000353" [label = "(_errno_location,_errno_location())" ]
"1000354" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v12, v16, 128))" ]
"1000356" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v16, 128))" ]
"1000357" [label = "(UNKNOWN,const char *,const char *)" ]
"1000358" [label = "(Curl_strerror,Curl_strerror(*v12, v16, 128))" ]
"1000359" [label = "(<operator>.indirection,*v12)" ]
"1000363" [label = "(Curl_failf,Curl_failf(v13, \"bind() failed; %s\", v14))" ]
"1000367" [label = "(RETURN,return 7;,return 7;)" ]
"1000369" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000370" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000373" [label = "(<operator>.or,a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000374" [label = "(<operator>.and,a1[147] & 0xFFFFFFBF)" ]
"1000375" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000380" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000381" [label = "(<operator>.indirection,*a1)" ]
"1000383" [label = "(<operator>.assignment,result = 0)" ]
"1000386" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000387" [label = "(<operator>.indirection,*a2)" ]
"1000390" [label = "(RETURN,return result;,return result;)" ]
"1000392" [label = "(RETURN,return 27;,return 27;)" ]
"1000114" [label = "(METHOD,tftp_connect)" ]
"1000394" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000131" -> "1000137" 
  "1000133" -> "1000131" 
  "1000136" -> "1000142" 
  "1000137" -> "1000136" 
  "1000142" -> "1000144" 
  "1000142" -> "1000146" 
  "1000144" -> "1000394" 
  "1000146" -> "1000153" 
  "1000149" -> "1000165" 
  "1000149" -> "1000182" 
  "1000151" -> "1000149" 
  "1000152" -> "1000151" 
  "1000153" -> "1000155" 
  "1000154" -> "1000152" 
  "1000155" -> "1000154" 
  "1000161" -> "1000173" 
  "1000163" -> "1000161" 
  "1000164" -> "1000163" 
  "1000165" -> "1000167" 
  "1000166" -> "1000164" 
  "1000167" -> "1000166" 
  "1000171" -> "1000189" 
  "1000171" -> "1000178" 
  "1000172" -> "1000171" 
  "1000173" -> "1000174" 
  "1000174" -> "1000172" 
  "1000178" -> "1000394" 
  "1000182" -> "1000189" 
  "1000186" -> "1000218" 
  "1000186" -> "1000198" 
  "1000187" -> "1000186" 
  "1000188" -> "1000187" 
  "1000189" -> "1000190" 
  "1000190" -> "1000188" 
  "1000194" -> "1000204" 
  "1000196" -> "1000194" 
  "1000198" -> "1000196" 
  "1000201" -> "1000210" 
  "1000202" -> "1000201" 
  "1000203" -> "1000202" 
  "1000204" -> "1000205" 
  "1000205" -> "1000203" 
  "1000210" -> "1000218" 
  "1000210" -> "1000212" 
  "1000212" -> "1000394" 
  "1000215" -> "1000241" 
  "1000215" -> "1000392" 
  "1000216" -> "1000215" 
  "1000216" -> "1000227" 
  "1000217" -> "1000216" 
  "1000218" -> "1000219" 
  "1000219" -> "1000217" 
  "1000223" -> "1000234" 
  "1000225" -> "1000223" 
  "1000227" -> "1000225" 
  "1000230" -> "1000215" 
  "1000231" -> "1000230" 
  "1000232" -> "1000231" 
  "1000233" -> "1000232" 
  "1000234" -> "1000235" 
  "1000235" -> "1000233" 
  "1000241" -> "1000246" 
  "1000244" -> "1000251" 
  "1000246" -> "1000244" 
  "1000249" -> "1000257" 
  "1000251" -> "1000249" 
  "1000254" -> "1000265" 
  "1000255" -> "1000254" 
  "1000256" -> "1000255" 
  "1000257" -> "1000258" 
  "1000258" -> "1000256" 
  "1000262" -> "1000271" 
  "1000263" -> "1000262" 
  "1000264" -> "1000263" 
  "1000265" -> "1000264" 
  "1000268" -> "1000279" 
  "1000269" -> "1000268" 
  "1000270" -> "1000269" 
  "1000271" -> "1000272" 
  "1000272" -> "1000270" 
  "1000276" -> "1000287" 
  "1000277" -> "1000276" 
  "1000278" -> "1000277" 
  "1000279" -> "1000280" 
  "1000280" -> "1000278" 
  "1000284" -> "1000296" 
  "1000285" -> "1000291" 
  "1000286" -> "1000285" 
  "1000287" -> "1000288" 
  "1000288" -> "1000286" 
  "1000291" -> "1000284" 
  "1000293" -> "1000304" 
  "1000294" -> "1000293" 
  "1000295" -> "1000294" 
  "1000296" -> "1000297" 
  "1000297" -> "1000295" 
  "1000301" -> "1000314" 
  "1000302" -> "1000310" 
  "1000303" -> "1000302" 
  "1000304" -> "1000305" 
  "1000305" -> "1000303" 
  "1000308" -> "1000301" 
  "1000309" -> "1000308" 
  "1000310" -> "1000311" 
  "1000311" -> "1000309" 
  "1000314" -> "1000319" 
  "1000317" -> "1000329" 
  "1000317" -> "1000381" 
  "1000318" -> "1000317" 
  "1000319" -> "1000318" 
  "1000326" -> "1000349" 
  "1000326" -> "1000370" 
  "1000327" -> "1000334" 
  "1000328" -> "1000327" 
  "1000329" -> "1000330" 
  "1000330" -> "1000328" 
  "1000333" -> "1000340" 
  "1000334" -> "1000335" 
  "1000335" -> "1000333" 
  "1000338" -> "1000326" 
  "1000339" -> "1000338" 
  "1000340" -> "1000342" 
  "1000341" -> "1000339" 
  "1000342" -> "1000341" 
  "1000347" -> "1000353" 
  "1000349" -> "1000347" 
  "1000351" -> "1000357" 
  "1000353" -> "1000351" 
  "1000354" -> "1000363" 
  "1000356" -> "1000354" 
  "1000357" -> "1000359" 
  "1000358" -> "1000356" 
  "1000359" -> "1000358" 
  "1000363" -> "1000367" 
  "1000367" -> "1000394" 
  "1000369" -> "1000381" 
  "1000370" -> "1000375" 
  "1000373" -> "1000369" 
  "1000374" -> "1000373" 
  "1000375" -> "1000374" 
  "1000380" -> "1000383" 
  "1000381" -> "1000380" 
  "1000383" -> "1000387" 
  "1000386" -> "1000390" 
  "1000387" -> "1000386" 
  "1000390" -> "1000394" 
  "1000392" -> "1000394" 
  "1000114" -> "1000133" 
}
