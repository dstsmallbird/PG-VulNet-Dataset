digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000140" [label = "(<operator>.logicalNot,!v4)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v6 = v4)" ]
"1000147" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000157" [label = "(<operator>.logicalNot,!v7)" ]
"1000160" [label = "(<operator>.assignment,v7 = 512)" ]
"1000164" [label = "(<operator>.assignment,result = 71)" ]
"1000168" [label = "(<operator>.lessThan,(unsigned int)(v7 - 8) < 0xFFB1)" ]
"1000169" [label = "(<operator>.cast,(unsigned int)(v7 - 8))" ]
"1000170" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000171" [label = "(<operator>.subtraction,v7 - 8)" ]
"1000178" [label = "(<operator>.logicalNot,!*(_DWORD *)(v6 + 328))" ]
"1000179" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000180" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000181" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000182" [label = "(<operator>.addition,v6 + 328)" ]
"1000186" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1, v7 + 4))" ]
"1000188" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000190" [label = "(<operator>.addition,v7 + 4)" ]
"1000193" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v11)" ]
"1000194" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000195" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000196" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000197" [label = "(<operator>.addition,v6 + 328)" ]
"1000202" [label = "(<operator>.logicalNot,!v11)" ]
"1000204" [label = "(RETURN,return 27;,return 27;)" ]
"1000207" [label = "(<operator>.logicalOr,*(_DWORD *)(v6 + 332) || (v8 = Curl_ccalloc(1, v7 + 4), (*(_DWORD *)(v6 + 332) = v8) != 0))" ]
"1000208" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000209" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000210" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000211" [label = "(<operator>.addition,v6 + 332)" ]
"1000215" [label = "(<operator>.assignment,v8 = Curl_ccalloc(1, v7 + 4))" ]
"1000217" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000219" [label = "(<operator>.addition,v7 + 4)" ]
"1000222" [label = "(<operator>.notEquals,(*(_DWORD *)(v6 + 332) = v8) != 0)" ]
"1000223" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 332) = v8)" ]
"1000224" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000225" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000226" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000227" [label = "(<operator>.addition,v6 + 332)" ]
"1000233" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000236" [label = "(<operator>.assignment,v9 = a1[105])" ]
"1000238" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000241" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000242" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000243" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000244" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000245" [label = "(<operator>.addition,v6 + 16)" ]
"1000249" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = v9)" ]
"1000250" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000251" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000252" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000253" [label = "(<operator>.addition,v6 + 20)" ]
"1000257" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000258" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000259" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000260" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000263" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000264" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000265" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000266" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000267" [label = "(<operator>.addition,v6 + 8)" ]
"1000270" [label = "(<operator>.minus,-100)" ]
"1000272" [label = "(<operator>.assignment,v10 = a1[20])" ]
"1000274" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000277" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = v7)" ]
"1000278" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000279" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000280" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000281" [label = "(<operator>.addition,v6 + 320)" ]
"1000285" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v7)" ]
"1000286" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000287" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000288" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000289" [label = "(<operator>.addition,v6 + 324)" ]
"1000293" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(v10 + 4))" ]
"1000294" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000295" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000296" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000297" [label = "(<operator>.addition,v6 + 52)" ]
"1000300" [label = "(<operator>.indirection,*(_DWORD *)(v10 + 4))" ]
"1000301" [label = "(<operator>.cast,(_DWORD *)(v10 + 4))" ]
"1000302" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000303" [label = "(<operator>.addition,v10 + 4)" ]
"1000306" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000309" [label = "(<operator>.equals,(a1[147] & 0x40) == 0)" ]
"1000310" [label = "(<operator>.and,a1[147] & 0x40)" ]
"1000311" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000318" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000319" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000320" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000321" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000322" [label = "(<operator>.addition,v6 + 20)" ]
"1000325" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000326" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000327" [label = "(<operator>.addition,v6 + 52)" ]
"1000330" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000331" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000332" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000333" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000334" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000339" [label = "(<operator>.assignment,v13 = *a1)" ]
"1000341" [label = "(<operator>.indirection,*a1)" ]
"1000343" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000345" [label = "(_errno_location,_errno_location())" ]
"1000346" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v12, v15, 128))" ]
"1000348" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v15, 128))" ]
"1000349" [label = "(UNKNOWN,const char *,const char *)" ]
"1000350" [label = "(Curl_strerror,Curl_strerror(*v12, v15, 128))" ]
"1000351" [label = "(<operator>.indirection,*v12)" ]
"1000355" [label = "(Curl_failf,Curl_failf(v13, \"bind() failed; %s\", v14))" ]
"1000359" [label = "(RETURN,return 7;,return 7;)" ]
"1000361" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000362" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000365" [label = "(<operator>.or,a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000366" [label = "(<operator>.and,a1[147] & 0xFFFFFFBF)" ]
"1000367" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000372" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000373" [label = "(<operator>.indirection,*a1)" ]
"1000375" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000376" [label = "(<operator>.indirection,*a2)" ]
"1000379" [label = "(RETURN,return 0;,return 0;)" ]
"1000381" [label = "(RETURN,return 27;,return 27;)" ]
"1000383" [label = "(RETURN,return result;,return result;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000385" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000144" 
  "1000142" -> "1000385" 
  "1000144" -> "1000151" 
  "1000147" -> "1000157" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000157" -> "1000160" 
  "1000157" -> "1000164" 
  "1000160" -> "1000181" 
  "1000164" -> "1000170" 
  "1000168" -> "1000181" 
  "1000168" -> "1000383" 
  "1000169" -> "1000168" 
  "1000170" -> "1000171" 
  "1000171" -> "1000169" 
  "1000178" -> "1000210" 
  "1000178" -> "1000190" 
  "1000179" -> "1000178" 
  "1000180" -> "1000179" 
  "1000181" -> "1000182" 
  "1000182" -> "1000180" 
  "1000186" -> "1000196" 
  "1000188" -> "1000186" 
  "1000190" -> "1000188" 
  "1000193" -> "1000202" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000196" -> "1000197" 
  "1000197" -> "1000195" 
  "1000202" -> "1000210" 
  "1000202" -> "1000204" 
  "1000204" -> "1000385" 
  "1000207" -> "1000233" 
  "1000207" -> "1000381" 
  "1000208" -> "1000207" 
  "1000208" -> "1000219" 
  "1000209" -> "1000208" 
  "1000210" -> "1000211" 
  "1000211" -> "1000209" 
  "1000215" -> "1000226" 
  "1000217" -> "1000215" 
  "1000219" -> "1000217" 
  "1000222" -> "1000207" 
  "1000223" -> "1000222" 
  "1000224" -> "1000223" 
  "1000225" -> "1000224" 
  "1000226" -> "1000227" 
  "1000227" -> "1000225" 
  "1000233" -> "1000238" 
  "1000236" -> "1000244" 
  "1000238" -> "1000236" 
  "1000241" -> "1000252" 
  "1000242" -> "1000241" 
  "1000243" -> "1000242" 
  "1000244" -> "1000245" 
  "1000245" -> "1000243" 
  "1000249" -> "1000260" 
  "1000250" -> "1000249" 
  "1000251" -> "1000250" 
  "1000252" -> "1000253" 
  "1000253" -> "1000251" 
  "1000257" -> "1000266" 
  "1000258" -> "1000257" 
  "1000259" -> "1000258" 
  "1000260" -> "1000259" 
  "1000263" -> "1000274" 
  "1000264" -> "1000270" 
  "1000265" -> "1000264" 
  "1000266" -> "1000267" 
  "1000267" -> "1000265" 
  "1000270" -> "1000263" 
  "1000272" -> "1000280" 
  "1000274" -> "1000272" 
  "1000277" -> "1000288" 
  "1000278" -> "1000277" 
  "1000279" -> "1000278" 
  "1000280" -> "1000281" 
  "1000281" -> "1000279" 
  "1000285" -> "1000296" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000288" -> "1000289" 
  "1000289" -> "1000287" 
  "1000293" -> "1000306" 
  "1000294" -> "1000302" 
  "1000295" -> "1000294" 
  "1000296" -> "1000297" 
  "1000297" -> "1000295" 
  "1000300" -> "1000293" 
  "1000301" -> "1000300" 
  "1000302" -> "1000303" 
  "1000303" -> "1000301" 
  "1000306" -> "1000311" 
  "1000309" -> "1000321" 
  "1000309" -> "1000373" 
  "1000310" -> "1000309" 
  "1000311" -> "1000310" 
  "1000318" -> "1000341" 
  "1000318" -> "1000362" 
  "1000319" -> "1000326" 
  "1000320" -> "1000319" 
  "1000321" -> "1000322" 
  "1000322" -> "1000320" 
  "1000325" -> "1000332" 
  "1000326" -> "1000327" 
  "1000327" -> "1000325" 
  "1000330" -> "1000318" 
  "1000331" -> "1000330" 
  "1000332" -> "1000334" 
  "1000333" -> "1000331" 
  "1000334" -> "1000333" 
  "1000339" -> "1000345" 
  "1000341" -> "1000339" 
  "1000343" -> "1000349" 
  "1000345" -> "1000343" 
  "1000346" -> "1000355" 
  "1000348" -> "1000346" 
  "1000349" -> "1000351" 
  "1000350" -> "1000348" 
  "1000351" -> "1000350" 
  "1000355" -> "1000359" 
  "1000359" -> "1000385" 
  "1000361" -> "1000373" 
  "1000362" -> "1000367" 
  "1000365" -> "1000361" 
  "1000366" -> "1000365" 
  "1000367" -> "1000366" 
  "1000372" -> "1000376" 
  "1000373" -> "1000372" 
  "1000375" -> "1000379" 
  "1000376" -> "1000375" 
  "1000379" -> "1000385" 
  "1000381" -> "1000385" 
  "1000383" -> "1000385" 
  "1000113" -> "1000131" 
}
