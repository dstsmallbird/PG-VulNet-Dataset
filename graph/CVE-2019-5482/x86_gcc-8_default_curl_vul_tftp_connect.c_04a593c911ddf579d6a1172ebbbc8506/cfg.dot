digraph tftp_connect {  
"1000131" [label = "(<operator>.assignment,v14 = __readgsdword(0x14u))" ]
"1000133" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000135" [label = "(<operator>.assignment,v2 = Curl_ccalloc(1, 336))" ]
"1000137" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000140" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000141" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000146" [label = "(<operator>.logicalNot,!v2)" ]
"1000148" [label = "(RETURN,return 27;,return 27;)" ]
"1000150" [label = "(<operator>.assignment,v3 = v2)" ]
"1000153" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000155" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000156" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000157" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000158" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000159" [label = "(<operator>.indirection,*a1)" ]
"1000163" [label = "(<operator>.logicalNot,!v4)" ]
"1000166" [label = "(<operator>.assignment,v4 = 512)" ]
"1000170" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000171" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000172" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000173" [label = "(<operator>.addition,v2 + 328)" ]
"1000178" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v4 + 4))" ]
"1000180" [label = "(Curl_ccalloc,Curl_ccalloc(1, v4 + 4))" ]
"1000182" [label = "(<operator>.addition,v4 + 4)" ]
"1000185" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 328) = v9)" ]
"1000186" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000187" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000188" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000189" [label = "(<operator>.addition,v3 + 328)" ]
"1000194" [label = "(<operator>.logicalNot,!v9)" ]
"1000196" [label = "(RETURN,return 27;,return 27;)" ]
"1000199" [label = "(<operator>.assignment,result = 71)" ]
"1000203" [label = "(<operator>.greaterThan,(unsigned int)(v4 - 8) > 0xFFB0)" ]
"1000204" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000205" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000206" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000210" [label = "(RETURN,return result;,return result;)" ]
"1000213" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 328))" ]
"1000214" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000215" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000216" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000217" [label = "(<operator>.addition,v3 + 328)" ]
"1000223" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 332))" ]
"1000224" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 332))" ]
"1000225" [label = "(<operator>.cast,(_DWORD *)(v3 + 332))" ]
"1000226" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000227" [label = "(<operator>.addition,v3 + 332)" ]
"1000231" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v4 + 4))" ]
"1000233" [label = "(Curl_ccalloc,Curl_ccalloc(1, v4 + 4))" ]
"1000235" [label = "(<operator>.addition,v4 + 4)" ]
"1000238" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 332) = v10)" ]
"1000239" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 332))" ]
"1000240" [label = "(<operator>.cast,(_DWORD *)(v3 + 332))" ]
"1000241" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000242" [label = "(<operator>.addition,v3 + 332)" ]
"1000247" [label = "(<operator>.logicalNot,!v10)" ]
"1000249" [label = "(RETURN,return 27;,return 27;)" ]
"1000251" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000254" [label = "(<operator>.assignment,v5 = a1[103])" ]
"1000256" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000259" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 16) = a1)" ]
"1000260" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 16))" ]
"1000261" [label = "(<operator>.cast,(_DWORD *)(v3 + 16))" ]
"1000262" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000263" [label = "(<operator>.addition,v3 + 16)" ]
"1000267" [label = "(<operator>.assignment,*(_DWORD *)v3 = 0)" ]
"1000268" [label = "(<operator>.indirection,*(_DWORD *)v3)" ]
"1000269" [label = "(<operator>.cast,(_DWORD *)v3)" ]
"1000270" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000273" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 20) = v5)" ]
"1000274" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000275" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000276" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000277" [label = "(<operator>.addition,v3 + 20)" ]
"1000281" [label = "(<operator>.assignment,v6 = a1[18])" ]
"1000283" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000286" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 8) = -100)" ]
"1000287" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 8))" ]
"1000288" [label = "(<operator>.cast,(_DWORD *)(v3 + 8))" ]
"1000289" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000290" [label = "(<operator>.addition,v3 + 8)" ]
"1000293" [label = "(<operator>.minus,-100)" ]
"1000295" [label = "(<operator>.assignment,v7 = *(_DWORD *)(v6 + 4))" ]
"1000297" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 4))" ]
"1000298" [label = "(<operator>.cast,(_DWORD *)(v6 + 4))" ]
"1000299" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000300" [label = "(<operator>.addition,v6 + 4)" ]
"1000303" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 320) = v4)" ]
"1000304" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 320))" ]
"1000305" [label = "(<operator>.cast,(_DWORD *)(v3 + 320))" ]
"1000306" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000307" [label = "(<operator>.addition,v3 + 320)" ]
"1000311" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 324) = v4)" ]
"1000312" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 324))" ]
"1000313" [label = "(<operator>.cast,(_DWORD *)(v3 + 324))" ]
"1000314" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000315" [label = "(<operator>.addition,v3 + 324)" ]
"1000319" [label = "(<operator>.assignment,*(_WORD *)(v3 + 52) = v7)" ]
"1000320" [label = "(<operator>.indirection,*(_WORD *)(v3 + 52))" ]
"1000321" [label = "(<operator>.cast,(_WORD *)(v3 + 52))" ]
"1000322" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000323" [label = "(<operator>.addition,v3 + 52)" ]
"1000327" [label = "(tftp_set_timeouts,tftp_set_timeouts())" ]
"1000329" [label = "(<operator>.equals,(*((_BYTE *)a1 + 583) & 2) == 0)" ]
"1000330" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000331" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000332" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000333" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000334" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000341" [label = "(bind,bind(*(_DWORD *)(v3 + 20), (const struct sockaddr *)(v3 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000342" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000343" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000344" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000345" [label = "(<operator>.addition,v3 + 20)" ]
"1000348" [label = "(<operator>.cast,(const struct sockaddr *)(v3 + 52))" ]
"1000349" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000350" [label = "(<operator>.addition,v3 + 52)" ]
"1000353" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000354" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000355" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000356" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000357" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000362" [label = "(<operator>.assignment,v11 = __errno_location())" ]
"1000364" [label = "(__errno_location,__errno_location())" ]
"1000365" [label = "(<operator>.assignment,v12 = Curl_strerror(*v11, buf, 128))" ]
"1000367" [label = "(Curl_strerror,Curl_strerror(*v11, buf, 128))" ]
"1000368" [label = "(<operator>.indirection,*v11)" ]
"1000372" [label = "(Curl_failf,Curl_failf(*a1, \"bind() failed; %s\", v12))" ]
"1000373" [label = "(<operator>.indirection,*a1)" ]
"1000377" [label = "(RETURN,return 7;,return 7;)" ]
"1000379" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000380" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000381" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000382" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000383" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000387" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000388" [label = "(<operator>.indirection,*a1)" ]
"1000390" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000391" [label = "(<operator>.indirection,*a2)" ]
"1000394" [label = "(RETURN,return 0;,return 0;)" ]
"1000114" [label = "(METHOD,tftp_connect)" ]
"1000396" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000131" -> "1000137" 
  "1000133" -> "1000131" 
  "1000135" -> "1000141" 
  "1000137" -> "1000135" 
  "1000140" -> "1000146" 
  "1000141" -> "1000140" 
  "1000146" -> "1000148" 
  "1000146" -> "1000150" 
  "1000148" -> "1000396" 
  "1000150" -> "1000157" 
  "1000153" -> "1000163" 
  "1000155" -> "1000153" 
  "1000156" -> "1000155" 
  "1000157" -> "1000159" 
  "1000158" -> "1000156" 
  "1000159" -> "1000158" 
  "1000163" -> "1000166" 
  "1000163" -> "1000199" 
  "1000166" -> "1000172" 
  "1000170" -> "1000226" 
  "1000170" -> "1000182" 
  "1000171" -> "1000170" 
  "1000172" -> "1000173" 
  "1000173" -> "1000171" 
  "1000178" -> "1000188" 
  "1000180" -> "1000178" 
  "1000182" -> "1000180" 
  "1000185" -> "1000194" 
  "1000186" -> "1000185" 
  "1000187" -> "1000186" 
  "1000188" -> "1000189" 
  "1000189" -> "1000187" 
  "1000194" -> "1000196" 
  "1000194" -> "1000226" 
  "1000196" -> "1000396" 
  "1000199" -> "1000205" 
  "1000203" -> "1000216" 
  "1000203" -> "1000210" 
  "1000204" -> "1000203" 
  "1000205" -> "1000206" 
  "1000206" -> "1000204" 
  "1000210" -> "1000396" 
  "1000213" -> "1000182" 
  "1000213" -> "1000226" 
  "1000214" -> "1000213" 
  "1000215" -> "1000214" 
  "1000216" -> "1000217" 
  "1000217" -> "1000215" 
  "1000223" -> "1000235" 
  "1000223" -> "1000251" 
  "1000224" -> "1000223" 
  "1000225" -> "1000224" 
  "1000226" -> "1000227" 
  "1000227" -> "1000225" 
  "1000231" -> "1000241" 
  "1000233" -> "1000231" 
  "1000235" -> "1000233" 
  "1000238" -> "1000247" 
  "1000239" -> "1000238" 
  "1000240" -> "1000239" 
  "1000241" -> "1000242" 
  "1000242" -> "1000240" 
  "1000247" -> "1000249" 
  "1000247" -> "1000251" 
  "1000249" -> "1000396" 
  "1000251" -> "1000256" 
  "1000254" -> "1000262" 
  "1000256" -> "1000254" 
  "1000259" -> "1000270" 
  "1000260" -> "1000259" 
  "1000261" -> "1000260" 
  "1000262" -> "1000263" 
  "1000263" -> "1000261" 
  "1000267" -> "1000276" 
  "1000268" -> "1000267" 
  "1000269" -> "1000268" 
  "1000270" -> "1000269" 
  "1000273" -> "1000283" 
  "1000274" -> "1000273" 
  "1000275" -> "1000274" 
  "1000276" -> "1000277" 
  "1000277" -> "1000275" 
  "1000281" -> "1000289" 
  "1000283" -> "1000281" 
  "1000286" -> "1000299" 
  "1000287" -> "1000293" 
  "1000288" -> "1000287" 
  "1000289" -> "1000290" 
  "1000290" -> "1000288" 
  "1000293" -> "1000286" 
  "1000295" -> "1000306" 
  "1000297" -> "1000295" 
  "1000298" -> "1000297" 
  "1000299" -> "1000300" 
  "1000300" -> "1000298" 
  "1000303" -> "1000314" 
  "1000304" -> "1000303" 
  "1000305" -> "1000304" 
  "1000306" -> "1000307" 
  "1000307" -> "1000305" 
  "1000311" -> "1000322" 
  "1000312" -> "1000311" 
  "1000313" -> "1000312" 
  "1000314" -> "1000315" 
  "1000315" -> "1000313" 
  "1000319" -> "1000327" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000322" -> "1000323" 
  "1000323" -> "1000321" 
  "1000327" -> "1000334" 
  "1000329" -> "1000344" 
  "1000329" -> "1000388" 
  "1000330" -> "1000329" 
  "1000331" -> "1000330" 
  "1000332" -> "1000331" 
  "1000333" -> "1000332" 
  "1000334" -> "1000333" 
  "1000341" -> "1000383" 
  "1000341" -> "1000364" 
  "1000342" -> "1000349" 
  "1000343" -> "1000342" 
  "1000344" -> "1000345" 
  "1000345" -> "1000343" 
  "1000348" -> "1000355" 
  "1000349" -> "1000350" 
  "1000350" -> "1000348" 
  "1000353" -> "1000341" 
  "1000354" -> "1000353" 
  "1000355" -> "1000357" 
  "1000356" -> "1000354" 
  "1000357" -> "1000356" 
  "1000362" -> "1000368" 
  "1000364" -> "1000362" 
  "1000365" -> "1000373" 
  "1000367" -> "1000365" 
  "1000368" -> "1000367" 
  "1000372" -> "1000377" 
  "1000373" -> "1000372" 
  "1000377" -> "1000396" 
  "1000379" -> "1000388" 
  "1000380" -> "1000379" 
  "1000381" -> "1000380" 
  "1000382" -> "1000381" 
  "1000383" -> "1000382" 
  "1000387" -> "1000391" 
  "1000388" -> "1000387" 
  "1000390" -> "1000394" 
  "1000391" -> "1000390" 
  "1000394" -> "1000396" 
  "1000114" -> "1000133" 
}
