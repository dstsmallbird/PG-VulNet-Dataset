digraph tftp_connect {  
"1000123" [label = "(<operator>.assignment,v11 = 512)" ]
"1000129" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000130" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000134" [label = "(<operator>.assignment,v12 = v2)" ]
"1000138" [label = "(<operator>.logicalNot,!v2)" ]
"1000140" [label = "(RETURN,return 27;,return 27;)" ]
"1000143" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000144" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000145" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000146" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000147" [label = "(<operator>.indirection,*a1)" ]
"1000151" [label = "(<operator>.assignment,v11 = *(_DWORD *)(*a1 + 1568))" ]
"1000153" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000154" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000155" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000156" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000157" [label = "(<operator>.indirection,*a1)" ]
"1000161" [label = "(<operator>.logicalOr,v11 > 65464 || v11 < 8)" ]
"1000162" [label = "(<operator>.greaterThan,v11 > 65464)" ]
"1000165" [label = "(<operator>.lessThan,v11 < 8)" ]
"1000168" [label = "(RETURN,return 71;,return 71;)" ]
"1000170" [label = "(<operator>.assignment,v10 = v11)" ]
"1000174" [label = "(<operator>.lessThan,v11 < 512)" ]
"1000177" [label = "(<operator>.assignment,v10 = 512)" ]
"1000183" [label = "(<operator>.addition,v10 + 4)" ]
"1000186" [label = "(RETURN,return 27;,return 27;)" ]
"1000189" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000192" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 16) = a1)" ]
"1000193" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 16))" ]
"1000194" [label = "(<operator>.cast,(_DWORD *)(v12 + 16))" ]
"1000195" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000196" [label = "(<operator>.addition,v12 + 16)" ]
"1000200" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 20) = *(_DWORD *)(*(_DWORD *)(v12 + 16) + 412))" ]
"1000201" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 20))" ]
"1000202" [label = "(<operator>.cast,(_DWORD *)(v12 + 20))" ]
"1000203" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000204" [label = "(<operator>.addition,v12 + 20)" ]
"1000207" [label = "(<operator>.indirection,*(_DWORD *)(*(_DWORD *)(v12 + 16) + 412))" ]
"1000208" [label = "(<operator>.cast,(_DWORD *)(*(_DWORD *)(v12 + 16) + 412))" ]
"1000209" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000210" [label = "(<operator>.addition,*(_DWORD *)(v12 + 16) + 412)" ]
"1000211" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 16))" ]
"1000212" [label = "(<operator>.cast,(_DWORD *)(v12 + 16))" ]
"1000213" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000214" [label = "(<operator>.addition,v12 + 16)" ]
"1000218" [label = "(<operator>.assignment,*(_DWORD *)v12 = 0)" ]
"1000219" [label = "(<operator>.indirection,*(_DWORD *)v12)" ]
"1000220" [label = "(<operator>.cast,(_DWORD *)v12)" ]
"1000221" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000224" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 8) = -100)" ]
"1000225" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 8))" ]
"1000226" [label = "(<operator>.cast,(_DWORD *)(v12 + 8))" ]
"1000227" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000228" [label = "(<operator>.addition,v12 + 8)" ]
"1000231" [label = "(<operator>.minus,-100)" ]
"1000233" [label = "(<operator>.addition,elf_gnu_hash_bucket + 120)" ]
"1000236" [label = "(<operator>.assignment,*(_DWORD *)(v12 + 324) = v11)" ]
"1000237" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 324))" ]
"1000238" [label = "(<operator>.cast,(_DWORD *)(v12 + 324))" ]
"1000239" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000240" [label = "(<operator>.addition,v12 + 324)" ]
"1000244" [label = "(<operator>.assignment,*(_WORD *)(v12 + 52) = *(_WORD *)(a1[18] + 4))" ]
"1000245" [label = "(<operator>.indirection,*(_WORD *)(v12 + 52))" ]
"1000246" [label = "(<operator>.cast,(_WORD *)(v12 + 52))" ]
"1000247" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000248" [label = "(<operator>.addition,v12 + 52)" ]
"1000251" [label = "(<operator>.indirection,*(_WORD *)(a1[18] + 4))" ]
"1000252" [label = "(<operator>.cast,(_WORD *)(a1[18] + 4))" ]
"1000253" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000254" [label = "(<operator>.addition,a1[18] + 4)" ]
"1000255" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000259" [label = "(tftp_set_timeouts,tftp_set_timeouts(v12))" ]
"1000262" [label = "(<operator>.equals,((a1[145] >> 25) & 1) == 0)" ]
"1000263" [label = "(<operator>.and,(a1[145] >> 25) & 1)" ]
"1000264" [label = "(<operator>.arithmeticShiftRight,a1[145] >> 25)" ]
"1000265" [label = "(<operator>.indirectIndexAccess,a1[145])" ]
"1000273" [label = "(bind,bind(*(_DWORD *)(v12 + 20), (const struct sockaddr *)(v12 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000274" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 20))" ]
"1000275" [label = "(<operator>.cast,(_DWORD *)(v12 + 20))" ]
"1000276" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000277" [label = "(<operator>.addition,v12 + 20)" ]
"1000280" [label = "(<operator>.cast,(const struct sockaddr *)(v12 + 52))" ]
"1000281" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000282" [label = "(<operator>.addition,v12 + 52)" ]
"1000285" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000286" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000287" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000288" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000289" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000294" [label = "(<operator>.assignment,v7 = *a1)" ]
"1000296" [label = "(<operator>.indirection,*a1)" ]
"1000298" [label = "(<operator>.assignment,v3 = __errno_location())" ]
"1000300" [label = "(__errno_location,__errno_location())" ]
"1000301" [label = "(<operator>.assignment,v4 = Curl_strerror(*v3, buf, 128))" ]
"1000303" [label = "(Curl_strerror,Curl_strerror(*v3, buf, 128))" ]
"1000304" [label = "(<operator>.indirection,*v3)" ]
"1000308" [label = "(Curl_failf,Curl_failf(v7, (char *)&GLOBAL_OFFSET_TABLE_ - 19699, v4))" ]
"1000310" [label = "(<operator>.subtraction,(char *)&GLOBAL_OFFSET_TABLE_ - 19699)" ]
"1000311" [label = "(<operator>.cast,(char *)&GLOBAL_OFFSET_TABLE_)" ]
"1000312" [label = "(UNKNOWN,char *,char *)" ]
"1000313" [label = "(<operator>.addressOf,&GLOBAL_OFFSET_TABLE_)" ]
"1000317" [label = "(RETURN,return 7;,return 7;)" ]
"1000319" [label = "(<operator>.assignment,v5 = *(_DWORD *)((char *)a1 + (_DWORD)(&dword_86244 - 137216)) | 0x2000000)" ]
"1000321" [label = "(<operator>.or,*(_DWORD *)((char *)a1 + (_DWORD)(&dword_86244 - 137216)) | 0x2000000)" ]
"1000322" [label = "(<operator>.indirection,*(_DWORD *)((char *)a1 + (_DWORD)(&dword_86244 - 137216)))" ]
"1000323" [label = "(<operator>.cast,(_DWORD *)((char *)a1 + (_DWORD)(&dword_86244 - 137216)))" ]
"1000324" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000325" [label = "(<operator>.addition,(char *)a1 + (_DWORD)(&dword_86244 - 137216))" ]
"1000326" [label = "(<operator>.cast,(char *)a1)" ]
"1000327" [label = "(UNKNOWN,char *,char *)" ]
"1000329" [label = "(<operator>.cast,(_DWORD)(&dword_86244 - 137216))" ]
"1000330" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000331" [label = "(<operator>.subtraction,&dword_86244 - 137216)" ]
"1000332" [label = "(<operator>.addressOf,&dword_86244)" ]
"1000336" [label = "(<operator>.assignment,*(_DWORD *)((char *)a1 + (_DWORD)(&dword_86248 - 137216)) = *(_DWORD *)((char *)a1\n                                                                            + (_DWORD)(&dword_86248 - 137216)))" ]
"1000337" [label = "(<operator>.indirection,*(_DWORD *)((char *)a1 + (_DWORD)(&dword_86248 - 137216)))" ]
"1000338" [label = "(<operator>.cast,(_DWORD *)((char *)a1 + (_DWORD)(&dword_86248 - 137216)))" ]
"1000339" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000340" [label = "(<operator>.addition,(char *)a1 + (_DWORD)(&dword_86248 - 137216))" ]
"1000341" [label = "(<operator>.cast,(char *)a1)" ]
"1000342" [label = "(UNKNOWN,char *,char *)" ]
"1000344" [label = "(<operator>.cast,(_DWORD)(&dword_86248 - 137216))" ]
"1000345" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000346" [label = "(<operator>.subtraction,&dword_86248 - 137216)" ]
"1000347" [label = "(<operator>.addressOf,&dword_86248)" ]
"1000350" [label = "(<operator>.indirection,*(_DWORD *)((char *)a1\n                                                                            + (_DWORD)(&dword_86248 - 137216)))" ]
"1000351" [label = "(<operator>.cast,(_DWORD *)((char *)a1\n                                                                            + (_DWORD)(&dword_86248 - 137216)))" ]
"1000352" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000353" [label = "(<operator>.addition,(char *)a1\n                                                                            + (_DWORD)(&dword_86248 - 137216))" ]
"1000354" [label = "(<operator>.cast,(char *)a1)" ]
"1000355" [label = "(UNKNOWN,char *,char *)" ]
"1000357" [label = "(<operator>.cast,(_DWORD)(&dword_86248 - 137216))" ]
"1000358" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000359" [label = "(<operator>.subtraction,&dword_86248 - 137216)" ]
"1000360" [label = "(<operator>.addressOf,&dword_86248)" ]
"1000363" [label = "(<operator>.assignment,*(_DWORD *)((char *)a1 + (_DWORD)(&dword_86244 - 137216)) = v5)" ]
"1000364" [label = "(<operator>.indirection,*(_DWORD *)((char *)a1 + (_DWORD)(&dword_86244 - 137216)))" ]
"1000365" [label = "(<operator>.cast,(_DWORD *)((char *)a1 + (_DWORD)(&dword_86244 - 137216)))" ]
"1000366" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000367" [label = "(<operator>.addition,(char *)a1 + (_DWORD)(&dword_86244 - 137216))" ]
"1000368" [label = "(<operator>.cast,(char *)a1)" ]
"1000369" [label = "(UNKNOWN,char *,char *)" ]
"1000371" [label = "(<operator>.cast,(_DWORD)(&dword_86244 - 137216))" ]
"1000372" [label = "(UNKNOWN,_DWORD,_DWORD)" ]
"1000373" [label = "(<operator>.subtraction,&dword_86244 - 137216)" ]
"1000374" [label = "(<operator>.addressOf,&dword_86244)" ]
"1000378" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000379" [label = "(<operator>.indirection,*a1)" ]
"1000381" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000382" [label = "(<operator>.indirection,*a2)" ]
"1000385" [label = "(RETURN,return 0;,return 0;)" ]
"1000387" [label = "(RETURN,return 27;,return 27;)" ]
"1000110" [label = "(METHOD,tftp_connect)" ]
"1000389" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000123" -> "1000130" 
  "1000129" -> "1000134" 
  "1000130" -> "1000129" 
  "1000134" -> "1000138" 
  "1000138" -> "1000145" 
  "1000138" -> "1000140" 
  "1000140" -> "1000389" 
  "1000143" -> "1000155" 
  "1000143" -> "1000170" 
  "1000144" -> "1000143" 
  "1000145" -> "1000147" 
  "1000146" -> "1000144" 
  "1000147" -> "1000146" 
  "1000151" -> "1000162" 
  "1000153" -> "1000151" 
  "1000154" -> "1000153" 
  "1000155" -> "1000157" 
  "1000156" -> "1000154" 
  "1000157" -> "1000156" 
  "1000161" -> "1000168" 
  "1000161" -> "1000170" 
  "1000162" -> "1000161" 
  "1000162" -> "1000165" 
  "1000165" -> "1000161" 
  "1000168" -> "1000389" 
  "1000170" -> "1000174" 
  "1000174" -> "1000177" 
  "1000174" -> "1000183" 
  "1000177" -> "1000183" 
  "1000183" -> "1000186" 
  "1000186" -> "1000389" 
  "1000189" -> "1000195" 
  "1000192" -> "1000203" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000195" -> "1000196" 
  "1000196" -> "1000194" 
  "1000200" -> "1000221" 
  "1000201" -> "1000209" 
  "1000202" -> "1000201" 
  "1000203" -> "1000204" 
  "1000204" -> "1000202" 
  "1000207" -> "1000200" 
  "1000208" -> "1000207" 
  "1000209" -> "1000213" 
  "1000210" -> "1000208" 
  "1000211" -> "1000210" 
  "1000212" -> "1000211" 
  "1000213" -> "1000214" 
  "1000214" -> "1000212" 
  "1000218" -> "1000227" 
  "1000219" -> "1000218" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000224" -> "1000233" 
  "1000225" -> "1000231" 
  "1000226" -> "1000225" 
  "1000227" -> "1000228" 
  "1000228" -> "1000226" 
  "1000231" -> "1000224" 
  "1000233" -> "1000239" 
  "1000236" -> "1000247" 
  "1000237" -> "1000236" 
  "1000238" -> "1000237" 
  "1000239" -> "1000240" 
  "1000240" -> "1000238" 
  "1000244" -> "1000259" 
  "1000245" -> "1000253" 
  "1000246" -> "1000245" 
  "1000247" -> "1000248" 
  "1000248" -> "1000246" 
  "1000251" -> "1000244" 
  "1000252" -> "1000251" 
  "1000253" -> "1000255" 
  "1000254" -> "1000252" 
  "1000255" -> "1000254" 
  "1000259" -> "1000265" 
  "1000262" -> "1000276" 
  "1000262" -> "1000379" 
  "1000263" -> "1000262" 
  "1000264" -> "1000263" 
  "1000265" -> "1000264" 
  "1000273" -> "1000296" 
  "1000273" -> "1000324" 
  "1000274" -> "1000281" 
  "1000275" -> "1000274" 
  "1000276" -> "1000277" 
  "1000277" -> "1000275" 
  "1000280" -> "1000287" 
  "1000281" -> "1000282" 
  "1000282" -> "1000280" 
  "1000285" -> "1000273" 
  "1000286" -> "1000285" 
  "1000287" -> "1000289" 
  "1000288" -> "1000286" 
  "1000289" -> "1000288" 
  "1000294" -> "1000300" 
  "1000296" -> "1000294" 
  "1000298" -> "1000304" 
  "1000300" -> "1000298" 
  "1000301" -> "1000312" 
  "1000303" -> "1000301" 
  "1000304" -> "1000303" 
  "1000308" -> "1000317" 
  "1000310" -> "1000308" 
  "1000311" -> "1000310" 
  "1000312" -> "1000313" 
  "1000313" -> "1000311" 
  "1000317" -> "1000389" 
  "1000319" -> "1000339" 
  "1000321" -> "1000319" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000324" -> "1000327" 
  "1000325" -> "1000323" 
  "1000326" -> "1000330" 
  "1000327" -> "1000326" 
  "1000329" -> "1000325" 
  "1000330" -> "1000332" 
  "1000331" -> "1000329" 
  "1000332" -> "1000331" 
  "1000336" -> "1000366" 
  "1000337" -> "1000352" 
  "1000338" -> "1000337" 
  "1000339" -> "1000342" 
  "1000340" -> "1000338" 
  "1000341" -> "1000345" 
  "1000342" -> "1000341" 
  "1000344" -> "1000340" 
  "1000345" -> "1000347" 
  "1000346" -> "1000344" 
  "1000347" -> "1000346" 
  "1000350" -> "1000336" 
  "1000351" -> "1000350" 
  "1000352" -> "1000355" 
  "1000353" -> "1000351" 
  "1000354" -> "1000358" 
  "1000355" -> "1000354" 
  "1000357" -> "1000353" 
  "1000358" -> "1000360" 
  "1000359" -> "1000357" 
  "1000360" -> "1000359" 
  "1000363" -> "1000379" 
  "1000364" -> "1000363" 
  "1000365" -> "1000364" 
  "1000366" -> "1000369" 
  "1000367" -> "1000365" 
  "1000368" -> "1000372" 
  "1000369" -> "1000368" 
  "1000371" -> "1000367" 
  "1000372" -> "1000374" 
  "1000373" -> "1000371" 
  "1000374" -> "1000373" 
  "1000378" -> "1000382" 
  "1000379" -> "1000378" 
  "1000381" -> "1000385" 
  "1000382" -> "1000381" 
  "1000385" -> "1000389" 
  "1000387" -> "1000389" 
  "1000110" -> "1000123" 
}
