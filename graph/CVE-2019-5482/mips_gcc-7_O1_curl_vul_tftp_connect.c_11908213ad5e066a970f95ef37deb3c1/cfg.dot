digraph tftp_connect {  
"1000125" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000127" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000130" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000131" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000136" [label = "(<operator>.logicalNot,!v4)" ]
"1000138" [label = "(RETURN,return 27;,return 27;)" ]
"1000140" [label = "(<operator>.assignment,v5 = v4)" ]
"1000143" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000145" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000146" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000148" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000149" [label = "(<operator>.indirection,*a1)" ]
"1000155" [label = "(<operator>.assignment,result = 71)" ]
"1000159" [label = "(<operator>.greaterEqualsThan,(unsigned int)(v6 - 8) >= 0xFFB1)" ]
"1000160" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000161" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000162" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000166" [label = "(RETURN,return result;,return result;)" ]
"1000170" [label = "(<operator>.assignment,v6 = 512)" ]
"1000174" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 328))" ]
"1000175" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000176" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000177" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000178" [label = "(<operator>.addition,v5 + 328)" ]
"1000182" [label = "(<operator>.assignment,v8 = Curl_ccalloc(1, v6 + 4))" ]
"1000184" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000186" [label = "(<operator>.addition,v6 + 4)" ]
"1000189" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v8)" ]
"1000190" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000191" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000192" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000193" [label = "(<operator>.addition,v5 + 328)" ]
"1000198" [label = "(<operator>.logicalNot,!v8)" ]
"1000200" [label = "(RETURN,return 27;,return 27;)" ]
"1000203" [label = "(<operator>.logicalOr,*(_DWORD *)(v5 + 332) || (v9 = Curl_ccalloc(1, v6 + 4), (*(_DWORD *)(v5 + 332) = v9) != 0))" ]
"1000204" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000205" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000206" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000207" [label = "(<operator>.addition,v5 + 332)" ]
"1000211" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v6 + 4))" ]
"1000213" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000215" [label = "(<operator>.addition,v6 + 4)" ]
"1000218" [label = "(<operator>.notEquals,(*(_DWORD *)(v5 + 332) = v9) != 0)" ]
"1000219" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v9)" ]
"1000220" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000221" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000222" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000223" [label = "(<operator>.addition,v5 + 332)" ]
"1000229" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000232" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000233" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000234" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000235" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000236" [label = "(<operator>.addition,v5 + 16)" ]
"1000240" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = a1[105])" ]
"1000241" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000242" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000243" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000244" [label = "(<operator>.addition,v5 + 20)" ]
"1000247" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000250" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000251" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000252" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000253" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000256" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000257" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000258" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000259" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000260" [label = "(<operator>.addition,v5 + 8)" ]
"1000263" [label = "(<operator>.minus,-100)" ]
"1000265" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = v6)" ]
"1000266" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000267" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000268" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000269" [label = "(<operator>.addition,v5 + 320)" ]
"1000273" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v6)" ]
"1000274" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000275" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000276" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000277" [label = "(<operator>.addition,v5 + 324)" ]
"1000281" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000282" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000283" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000284" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000285" [label = "(<operator>.addition,v5 + 52)" ]
"1000288" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000289" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000290" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000291" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000292" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000296" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000299" [label = "(<operator>.equals,(a1[147] & 0x40) == 0)" ]
"1000300" [label = "(<operator>.and,a1[147] & 0x40)" ]
"1000301" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000308" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000309" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000310" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000311" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000312" [label = "(<operator>.addition,v5 + 20)" ]
"1000315" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000316" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000317" [label = "(<operator>.addition,v5 + 52)" ]
"1000320" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000321" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000322" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000323" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000324" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000329" [label = "(<operator>.assignment,v10 = *a1)" ]
"1000331" [label = "(<operator>.indirection,*a1)" ]
"1000333" [label = "(<operator>.assignment,v11 = _errno_location())" ]
"1000335" [label = "(_errno_location,_errno_location())" ]
"1000336" [label = "(<operator>.assignment,v12 = (const char *)Curl_strerror(*v11, v13, 128))" ]
"1000338" [label = "(<operator>.cast,(const char *)Curl_strerror(*v11, v13, 128))" ]
"1000339" [label = "(UNKNOWN,const char *,const char *)" ]
"1000340" [label = "(Curl_strerror,Curl_strerror(*v11, v13, 128))" ]
"1000341" [label = "(<operator>.indirection,*v11)" ]
"1000345" [label = "(Curl_failf,Curl_failf(v10, \"bind() failed; %s\", v12))" ]
"1000349" [label = "(RETURN,return 7;,return 7;)" ]
"1000351" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000352" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000355" [label = "(<operator>.or,a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000356" [label = "(<operator>.and,a1[147] & 0xFFFFFFBF)" ]
"1000357" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000362" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000363" [label = "(<operator>.indirection,*a1)" ]
"1000365" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000366" [label = "(<operator>.indirection,*a2)" ]
"1000369" [label = "(RETURN,return 0;,return 0;)" ]
"1000371" [label = "(RETURN,return 27;,return 27;)" ]
"1000111" [label = "(METHOD,tftp_connect)" ]
"1000373" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000125" -> "1000131" 
  "1000127" -> "1000125" 
  "1000130" -> "1000136" 
  "1000131" -> "1000130" 
  "1000136" -> "1000138" 
  "1000136" -> "1000140" 
  "1000138" -> "1000373" 
  "1000140" -> "1000147" 
  "1000143" -> "1000155" 
  "1000143" -> "1000170" 
  "1000145" -> "1000143" 
  "1000146" -> "1000145" 
  "1000147" -> "1000149" 
  "1000148" -> "1000146" 
  "1000149" -> "1000148" 
  "1000155" -> "1000161" 
  "1000159" -> "1000177" 
  "1000159" -> "1000166" 
  "1000160" -> "1000159" 
  "1000161" -> "1000162" 
  "1000162" -> "1000160" 
  "1000166" -> "1000373" 
  "1000170" -> "1000177" 
  "1000174" -> "1000206" 
  "1000174" -> "1000186" 
  "1000175" -> "1000174" 
  "1000176" -> "1000175" 
  "1000177" -> "1000178" 
  "1000178" -> "1000176" 
  "1000182" -> "1000192" 
  "1000184" -> "1000182" 
  "1000186" -> "1000184" 
  "1000189" -> "1000198" 
  "1000190" -> "1000189" 
  "1000191" -> "1000190" 
  "1000192" -> "1000193" 
  "1000193" -> "1000191" 
  "1000198" -> "1000206" 
  "1000198" -> "1000200" 
  "1000200" -> "1000373" 
  "1000203" -> "1000229" 
  "1000203" -> "1000371" 
  "1000204" -> "1000203" 
  "1000204" -> "1000215" 
  "1000205" -> "1000204" 
  "1000206" -> "1000207" 
  "1000207" -> "1000205" 
  "1000211" -> "1000222" 
  "1000213" -> "1000211" 
  "1000215" -> "1000213" 
  "1000218" -> "1000203" 
  "1000219" -> "1000218" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000222" -> "1000223" 
  "1000223" -> "1000221" 
  "1000229" -> "1000235" 
  "1000232" -> "1000243" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000235" -> "1000236" 
  "1000236" -> "1000234" 
  "1000240" -> "1000253" 
  "1000241" -> "1000247" 
  "1000242" -> "1000241" 
  "1000243" -> "1000244" 
  "1000244" -> "1000242" 
  "1000247" -> "1000240" 
  "1000250" -> "1000259" 
  "1000251" -> "1000250" 
  "1000252" -> "1000251" 
  "1000253" -> "1000252" 
  "1000256" -> "1000268" 
  "1000257" -> "1000263" 
  "1000258" -> "1000257" 
  "1000259" -> "1000260" 
  "1000260" -> "1000258" 
  "1000263" -> "1000256" 
  "1000265" -> "1000276" 
  "1000266" -> "1000265" 
  "1000267" -> "1000266" 
  "1000268" -> "1000269" 
  "1000269" -> "1000267" 
  "1000273" -> "1000284" 
  "1000274" -> "1000273" 
  "1000275" -> "1000274" 
  "1000276" -> "1000277" 
  "1000277" -> "1000275" 
  "1000281" -> "1000296" 
  "1000282" -> "1000290" 
  "1000283" -> "1000282" 
  "1000284" -> "1000285" 
  "1000285" -> "1000283" 
  "1000288" -> "1000281" 
  "1000289" -> "1000288" 
  "1000290" -> "1000292" 
  "1000291" -> "1000289" 
  "1000292" -> "1000291" 
  "1000296" -> "1000301" 
  "1000299" -> "1000311" 
  "1000299" -> "1000363" 
  "1000300" -> "1000299" 
  "1000301" -> "1000300" 
  "1000308" -> "1000331" 
  "1000308" -> "1000352" 
  "1000309" -> "1000316" 
  "1000310" -> "1000309" 
  "1000311" -> "1000312" 
  "1000312" -> "1000310" 
  "1000315" -> "1000322" 
  "1000316" -> "1000317" 
  "1000317" -> "1000315" 
  "1000320" -> "1000308" 
  "1000321" -> "1000320" 
  "1000322" -> "1000324" 
  "1000323" -> "1000321" 
  "1000324" -> "1000323" 
  "1000329" -> "1000335" 
  "1000331" -> "1000329" 
  "1000333" -> "1000339" 
  "1000335" -> "1000333" 
  "1000336" -> "1000345" 
  "1000338" -> "1000336" 
  "1000339" -> "1000341" 
  "1000340" -> "1000338" 
  "1000341" -> "1000340" 
  "1000345" -> "1000349" 
  "1000349" -> "1000373" 
  "1000351" -> "1000363" 
  "1000352" -> "1000357" 
  "1000355" -> "1000351" 
  "1000356" -> "1000355" 
  "1000357" -> "1000356" 
  "1000362" -> "1000366" 
  "1000363" -> "1000362" 
  "1000365" -> "1000369" 
  "1000366" -> "1000365" 
  "1000369" -> "1000373" 
  "1000371" -> "1000373" 
  "1000111" -> "1000127" 
}
