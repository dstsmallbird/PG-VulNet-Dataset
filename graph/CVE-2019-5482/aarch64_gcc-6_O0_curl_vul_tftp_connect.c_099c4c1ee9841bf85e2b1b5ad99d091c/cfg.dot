digraph tftp_connect {  
"1000117" [label = "(<operator>.assignment,v8 = 512)" ]
"1000120" [label = "(<operator>.assignment,v9 = a1[148])" ]
"1000122" [label = "(<operator>.indirectIndexAccess,a1[148])" ]
"1000126" [label = "(<operator>.logicalNot,!v9)" ]
"1000131" [label = "(<operator>.logicalOr,v8 > 65464 || v8 <= 7)" ]
"1000132" [label = "(<operator>.greaterThan,v8 > 65464)" ]
"1000135" [label = "(<operator>.lessEqualsThan,v8 <= 7)" ]
"1000140" [label = "(<operator>.logicalNot,!*(_QWORD *)(v9 + 352))" ]
"1000141" [label = "(<operator>.indirection,*(_QWORD *)(v9 + 352))" ]
"1000142" [label = "(<operator>.cast,(_QWORD *)(v9 + 352))" ]
"1000143" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000144" [label = "(<operator>.addition,v9 + 352)" ]
"1000149" [label = "(<operator>.logicalNot,!*(_QWORD *)(v9 + 352))" ]
"1000150" [label = "(<operator>.indirection,*(_QWORD *)(v9 + 352))" ]
"1000151" [label = "(<operator>.cast,(_QWORD *)(v9 + 352))" ]
"1000152" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000153" [label = "(<operator>.addition,v9 + 352)" ]
"1000158" [label = "(<operator>.logicalNot,!*(_QWORD *)(v9 + 360))" ]
"1000159" [label = "(<operator>.indirection,*(_QWORD *)(v9 + 360))" ]
"1000160" [label = "(<operator>.cast,(_QWORD *)(v9 + 360))" ]
"1000161" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000162" [label = "(<operator>.addition,v9 + 360)" ]
"1000167" [label = "(<operator>.logicalNot,!*(_QWORD *)(v9 + 360))" ]
"1000168" [label = "(<operator>.indirection,*(_QWORD *)(v9 + 360))" ]
"1000169" [label = "(<operator>.cast,(_QWORD *)(v9 + 360))" ]
"1000170" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000171" [label = "(<operator>.addition,v9 + 360)" ]
"1000175" [label = "(<operator>.assignment,*(_QWORD *)(v9 + 16) = a1)" ]
"1000176" [label = "(<operator>.indirection,*(_QWORD *)(v9 + 16))" ]
"1000177" [label = "(<operator>.cast,(_QWORD *)(v9 + 16))" ]
"1000178" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000179" [label = "(<operator>.addition,v9 + 16)" ]
"1000183" [label = "(<operator>.assignment,*(_DWORD *)v9 = 0)" ]
"1000184" [label = "(<operator>.indirection,*(_DWORD *)v9)" ]
"1000185" [label = "(<operator>.cast,(_DWORD *)v9)" ]
"1000186" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000189" [label = "(<operator>.assignment,*(_DWORD *)(v9 + 8) = -100)" ]
"1000190" [label = "(<operator>.indirection,*(_DWORD *)(v9 + 8))" ]
"1000191" [label = "(<operator>.cast,(_DWORD *)(v9 + 8))" ]
"1000192" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000193" [label = "(<operator>.addition,v9 + 8)" ]
"1000196" [label = "(<operator>.minus,-100)" ]
"1000198" [label = "(<operator>.assignment,*(_DWORD *)(v9 + 340) = v8)" ]
"1000199" [label = "(<operator>.indirection,*(_DWORD *)(v9 + 340))" ]
"1000200" [label = "(<operator>.cast,(_DWORD *)(v9 + 340))" ]
"1000201" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000202" [label = "(<operator>.addition,v9 + 340)" ]
"1000206" [label = "(<operator>.assignment,*(_DWORD *)(v9 + 344) = v8)" ]
"1000207" [label = "(<operator>.indirection,*(_DWORD *)(v9 + 344))" ]
"1000208" [label = "(<operator>.cast,(_DWORD *)(v9 + 344))" ]
"1000209" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000210" [label = "(<operator>.addition,v9 + 344)" ]
"1000214" [label = "(tftp_set_timeouts,tftp_set_timeouts(v9))" ]
"1000217" [label = "(<operator>.equals,(*((_BYTE *)a1 + 895) & 2) == 0)" ]
"1000218" [label = "(<operator>.and,*((_BYTE *)a1 + 895) & 2)" ]
"1000219" [label = "(<operator>.indirection,*((_BYTE *)a1 + 895))" ]
"1000220" [label = "(<operator>.addition,(_BYTE *)a1 + 895)" ]
"1000221" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000222" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000229" [label = "(<operator>.assignment,v3 = *a1)" ]
"1000231" [label = "(<operator>.indirection,*a1)" ]
"1000233" [label = "(<operator>.assignment,v4 = __errno_location())" ]
"1000235" [label = "(__errno_location,__errno_location())" ]
"1000236" [label = "(Curl_failf,Curl_failf(v3, \"bind() failed; %s\", v5))" ]
"1000241" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 895) |= 2u)" ]
"1000242" [label = "(<operator>.indirection,*((_BYTE *)a1 + 895))" ]
"1000243" [label = "(<operator>.addition,(_BYTE *)a1 + 895)" ]
"1000244" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000245" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000249" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000250" [label = "(<operator>.indirection,*a1)" ]
"1000252" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000253" [label = "(<operator>.indirection,*a2)" ]
"1000107" [label = "(METHOD,tftp_connect)" ]
"1000257" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000117" -> "1000122" 
  "1000120" -> "1000126" 
  "1000122" -> "1000120" 
  "1000126" -> "1000132" 
  "1000131" -> "1000143" 
  "1000132" -> "1000131" 
  "1000132" -> "1000135" 
  "1000135" -> "1000131" 
  "1000140" -> "1000152" 
  "1000140" -> "1000161" 
  "1000141" -> "1000140" 
  "1000142" -> "1000141" 
  "1000143" -> "1000144" 
  "1000144" -> "1000142" 
  "1000149" -> "1000161" 
  "1000150" -> "1000149" 
  "1000151" -> "1000150" 
  "1000152" -> "1000153" 
  "1000153" -> "1000151" 
  "1000158" -> "1000170" 
  "1000158" -> "1000178" 
  "1000159" -> "1000158" 
  "1000160" -> "1000159" 
  "1000161" -> "1000162" 
  "1000162" -> "1000160" 
  "1000167" -> "1000178" 
  "1000168" -> "1000167" 
  "1000169" -> "1000168" 
  "1000170" -> "1000171" 
  "1000171" -> "1000169" 
  "1000175" -> "1000186" 
  "1000176" -> "1000175" 
  "1000177" -> "1000176" 
  "1000178" -> "1000179" 
  "1000179" -> "1000177" 
  "1000183" -> "1000192" 
  "1000184" -> "1000183" 
  "1000185" -> "1000184" 
  "1000186" -> "1000185" 
  "1000189" -> "1000201" 
  "1000190" -> "1000196" 
  "1000191" -> "1000190" 
  "1000192" -> "1000193" 
  "1000193" -> "1000191" 
  "1000196" -> "1000189" 
  "1000198" -> "1000209" 
  "1000199" -> "1000198" 
  "1000200" -> "1000199" 
  "1000201" -> "1000202" 
  "1000202" -> "1000200" 
  "1000206" -> "1000214" 
  "1000207" -> "1000206" 
  "1000208" -> "1000207" 
  "1000209" -> "1000210" 
  "1000210" -> "1000208" 
  "1000214" -> "1000222" 
  "1000217" -> "1000231" 
  "1000217" -> "1000250" 
  "1000218" -> "1000217" 
  "1000219" -> "1000218" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000222" -> "1000221" 
  "1000229" -> "1000235" 
  "1000231" -> "1000229" 
  "1000233" -> "1000236" 
  "1000235" -> "1000233" 
  "1000236" -> "1000245" 
  "1000241" -> "1000250" 
  "1000242" -> "1000241" 
  "1000243" -> "1000242" 
  "1000244" -> "1000243" 
  "1000245" -> "1000244" 
  "1000249" -> "1000253" 
  "1000250" -> "1000249" 
  "1000252" -> "1000257" 
  "1000253" -> "1000252" 
  "1000107" -> "1000117" 
}
