digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000140" [label = "(<operator>.logicalNot,!v4)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v5 = v4)" ]
"1000147" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000159" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000161" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000162" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000163" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000164" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000165" [label = "(<operator>.indirection,*a1)" ]
"1000169" [label = "(<operator>.greaterEqualsThan,(unsigned int)(v6 - 8) >= 0xFFB1)" ]
"1000170" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000171" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000172" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000176" [label = "(RETURN,return 71;,return 71;)" ]
"1000180" [label = "(<operator>.assignment,v7 = 512)" ]
"1000183" [label = "(<operator>.assignment,v9 = 512)" ]
"1000187" [label = "(<operator>.greaterEqualsThan,v7 >= 512)" ]
"1000190" [label = "(<operator>.assignment,v9 = v7)" ]
"1000193" [label = "(<operator>.assignment,v10 = v9)" ]
"1000197" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 328))" ]
"1000198" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000199" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000200" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000201" [label = "(<operator>.addition,v5 + 328)" ]
"1000205" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1, v9 + 4))" ]
"1000207" [label = "(Curl_ccalloc,Curl_ccalloc(1, v9 + 4))" ]
"1000209" [label = "(<operator>.addition,v9 + 4)" ]
"1000212" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v11)" ]
"1000213" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000214" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000215" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000216" [label = "(<operator>.addition,v5 + 328)" ]
"1000221" [label = "(<operator>.logicalNot,!v11)" ]
"1000223" [label = "(RETURN,return 27;,return 27;)" ]
"1000226" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000227" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000228" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000229" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000230" [label = "(<operator>.addition,v5 + 332)" ]
"1000234" [label = "(<operator>.assignment,v12 = Curl_ccalloc(1, v10 + 4))" ]
"1000236" [label = "(Curl_ccalloc,Curl_ccalloc(1, v10 + 4))" ]
"1000238" [label = "(<operator>.addition,v10 + 4)" ]
"1000241" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v12)" ]
"1000242" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000243" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000244" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000245" [label = "(<operator>.addition,v5 + 332)" ]
"1000250" [label = "(<operator>.logicalNot,!v12)" ]
"1000252" [label = "(RETURN,return 27;,return 27;)" ]
"1000254" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000257" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000258" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000259" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000260" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000261" [label = "(<operator>.addition,v5 + 16)" ]
"1000265" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = a1[105])" ]
"1000266" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000267" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000268" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000269" [label = "(<operator>.addition,v5 + 20)" ]
"1000272" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000275" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000276" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000277" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000278" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000281" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000282" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000283" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000284" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000285" [label = "(<operator>.addition,v5 + 8)" ]
"1000288" [label = "(<operator>.minus,-100)" ]
"1000290" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = 512)" ]
"1000291" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000292" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000293" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000294" [label = "(<operator>.addition,v5 + 320)" ]
"1000298" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v7)" ]
"1000299" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000300" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000301" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000302" [label = "(<operator>.addition,v5 + 324)" ]
"1000306" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000307" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000308" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000309" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000310" [label = "(<operator>.addition,v5 + 52)" ]
"1000313" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000314" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000315" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000316" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000317" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000321" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000324" [label = "(<operator>.notEquals,(a1[147] & 0x40) != 0)" ]
"1000325" [label = "(<operator>.and,a1[147] & 0x40)" ]
"1000326" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000333" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000334" [label = "(<operator>.indirection,*a1)" ]
"1000336" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000337" [label = "(<operator>.indirection,*a2)" ]
"1000340" [label = "(RETURN,return 0;,return 0;)" ]
"1000343" [label = "(<operator>.logicalNot,!bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000344" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000345" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000346" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000347" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000348" [label = "(<operator>.addition,v5 + 20)" ]
"1000351" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000352" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000353" [label = "(<operator>.addition,v5 + 52)" ]
"1000356" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000357" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000358" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000359" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000360" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000365" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000366" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000369" [label = "(<operator>.or,a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000370" [label = "(<operator>.and,a1[147] & 0xFFFFFFBF)" ]
"1000371" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000377" [label = "(<operator>.assignment,v13 = *a1)" ]
"1000379" [label = "(<operator>.indirection,*a1)" ]
"1000381" [label = "(<operator>.assignment,v14 = _errno_location())" ]
"1000383" [label = "(_errno_location,_errno_location())" ]
"1000384" [label = "(<operator>.assignment,v15 = (const char *)Curl_strerror(*v14, v16, 128))" ]
"1000386" [label = "(<operator>.cast,(const char *)Curl_strerror(*v14, v16, 128))" ]
"1000387" [label = "(UNKNOWN,const char *,const char *)" ]
"1000388" [label = "(Curl_strerror,Curl_strerror(*v14, v16, 128))" ]
"1000389" [label = "(<operator>.indirection,*v14)" ]
"1000393" [label = "(Curl_failf,Curl_failf(v13, \"bind() failed; %s\", v15))" ]
"1000397" [label = "(RETURN,return 7;,return 7;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000399" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000144" 
  "1000142" -> "1000399" 
  "1000144" -> "1000151" 
  "1000147" -> "1000163" 
  "1000147" -> "1000180" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000159" -> "1000171" 
  "1000161" -> "1000159" 
  "1000162" -> "1000161" 
  "1000163" -> "1000165" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000169" -> "1000176" 
  "1000169" -> "1000183" 
  "1000170" -> "1000169" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000176" -> "1000399" 
  "1000180" -> "1000183" 
  "1000183" -> "1000187" 
  "1000187" -> "1000190" 
  "1000187" -> "1000193" 
  "1000190" -> "1000193" 
  "1000193" -> "1000200" 
  "1000197" -> "1000229" 
  "1000197" -> "1000209" 
  "1000198" -> "1000197" 
  "1000199" -> "1000198" 
  "1000200" -> "1000201" 
  "1000201" -> "1000199" 
  "1000205" -> "1000215" 
  "1000207" -> "1000205" 
  "1000209" -> "1000207" 
  "1000212" -> "1000221" 
  "1000213" -> "1000212" 
  "1000214" -> "1000213" 
  "1000215" -> "1000216" 
  "1000216" -> "1000214" 
  "1000221" -> "1000229" 
  "1000221" -> "1000223" 
  "1000223" -> "1000399" 
  "1000226" -> "1000238" 
  "1000226" -> "1000254" 
  "1000227" -> "1000226" 
  "1000228" -> "1000227" 
  "1000229" -> "1000230" 
  "1000230" -> "1000228" 
  "1000234" -> "1000244" 
  "1000236" -> "1000234" 
  "1000238" -> "1000236" 
  "1000241" -> "1000250" 
  "1000242" -> "1000241" 
  "1000243" -> "1000242" 
  "1000244" -> "1000245" 
  "1000245" -> "1000243" 
  "1000250" -> "1000252" 
  "1000250" -> "1000254" 
  "1000252" -> "1000399" 
  "1000254" -> "1000260" 
  "1000257" -> "1000268" 
  "1000258" -> "1000257" 
  "1000259" -> "1000258" 
  "1000260" -> "1000261" 
  "1000261" -> "1000259" 
  "1000265" -> "1000278" 
  "1000266" -> "1000272" 
  "1000267" -> "1000266" 
  "1000268" -> "1000269" 
  "1000269" -> "1000267" 
  "1000272" -> "1000265" 
  "1000275" -> "1000284" 
  "1000276" -> "1000275" 
  "1000277" -> "1000276" 
  "1000278" -> "1000277" 
  "1000281" -> "1000293" 
  "1000282" -> "1000288" 
  "1000283" -> "1000282" 
  "1000284" -> "1000285" 
  "1000285" -> "1000283" 
  "1000288" -> "1000281" 
  "1000290" -> "1000301" 
  "1000291" -> "1000290" 
  "1000292" -> "1000291" 
  "1000293" -> "1000294" 
  "1000294" -> "1000292" 
  "1000298" -> "1000309" 
  "1000299" -> "1000298" 
  "1000300" -> "1000299" 
  "1000301" -> "1000302" 
  "1000302" -> "1000300" 
  "1000306" -> "1000321" 
  "1000307" -> "1000315" 
  "1000308" -> "1000307" 
  "1000309" -> "1000310" 
  "1000310" -> "1000308" 
  "1000313" -> "1000306" 
  "1000314" -> "1000313" 
  "1000315" -> "1000317" 
  "1000316" -> "1000314" 
  "1000317" -> "1000316" 
  "1000321" -> "1000326" 
  "1000324" -> "1000347" 
  "1000324" -> "1000334" 
  "1000325" -> "1000324" 
  "1000326" -> "1000325" 
  "1000333" -> "1000337" 
  "1000334" -> "1000333" 
  "1000336" -> "1000340" 
  "1000337" -> "1000336" 
  "1000340" -> "1000399" 
  "1000343" -> "1000366" 
  "1000343" -> "1000379" 
  "1000344" -> "1000343" 
  "1000345" -> "1000352" 
  "1000346" -> "1000345" 
  "1000347" -> "1000348" 
  "1000348" -> "1000346" 
  "1000351" -> "1000358" 
  "1000352" -> "1000353" 
  "1000353" -> "1000351" 
  "1000356" -> "1000344" 
  "1000357" -> "1000356" 
  "1000358" -> "1000360" 
  "1000359" -> "1000357" 
  "1000360" -> "1000359" 
  "1000365" -> "1000334" 
  "1000366" -> "1000371" 
  "1000369" -> "1000365" 
  "1000370" -> "1000369" 
  "1000371" -> "1000370" 
  "1000377" -> "1000383" 
  "1000379" -> "1000377" 
  "1000381" -> "1000387" 
  "1000383" -> "1000381" 
  "1000384" -> "1000393" 
  "1000386" -> "1000384" 
  "1000387" -> "1000389" 
  "1000388" -> "1000386" 
  "1000389" -> "1000388" 
  "1000393" -> "1000397" 
  "1000397" -> "1000399" 
  "1000113" -> "1000131" 
}
