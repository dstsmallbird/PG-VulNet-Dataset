digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000140" [label = "(<operator>.logicalNot,!v4)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v6 = v4)" ]
"1000147" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000159" [label = "(<operator>.assignment,result = 71)" ]
"1000163" [label = "(<operator>.greaterEqualsThan,(unsigned int)(v7 - 8) >= 0xFFB1)" ]
"1000164" [label = "(<operator>.cast,(unsigned int)(v7 - 8))" ]
"1000165" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000166" [label = "(<operator>.subtraction,v7 - 8)" ]
"1000170" [label = "(RETURN,return result;,return result;)" ]
"1000172" [label = "(<operator>.assignment,v8 = *(_DWORD *)(v6 + 328))" ]
"1000174" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000175" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000176" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000177" [label = "(<operator>.addition,v6 + 328)" ]
"1000182" [label = "(<operator>.assignment,v7 = 512)" ]
"1000185" [label = "(<operator>.assignment,v8 = *(_DWORD *)(v4 + 328))" ]
"1000187" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000188" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000189" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000190" [label = "(<operator>.addition,v4 + 328)" ]
"1000194" [label = "(<operator>.logicalNot,!v8)" ]
"1000197" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v7 + 4))" ]
"1000199" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000201" [label = "(<operator>.addition,v7 + 4)" ]
"1000204" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v9)" ]
"1000205" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000206" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000207" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000208" [label = "(<operator>.addition,v6 + 328)" ]
"1000213" [label = "(<operator>.logicalNot,!v9)" ]
"1000215" [label = "(RETURN,return 27;,return 27;)" ]
"1000218" [label = "(<operator>.logicalNot,!*(_DWORD *)(v6 + 332))" ]
"1000219" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000220" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000221" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000222" [label = "(<operator>.addition,v6 + 332)" ]
"1000226" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v7 + 4))" ]
"1000228" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000230" [label = "(<operator>.addition,v7 + 4)" ]
"1000233" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 332) = v10)" ]
"1000234" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000235" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000236" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000237" [label = "(<operator>.addition,v6 + 332)" ]
"1000242" [label = "(<operator>.logicalNot,!v10)" ]
"1000244" [label = "(RETURN,return 27;,return 27;)" ]
"1000246" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000249" [label = "(<operator>.assignment,v11 = a1[105])" ]
"1000251" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000254" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000255" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000256" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000257" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000258" [label = "(<operator>.addition,v6 + 16)" ]
"1000262" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000263" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000264" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000265" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000268" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = v11)" ]
"1000269" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000270" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000271" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000272" [label = "(<operator>.addition,v6 + 20)" ]
"1000276" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = v7)" ]
"1000277" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000278" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000279" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000280" [label = "(<operator>.addition,v6 + 320)" ]
"1000284" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v7)" ]
"1000285" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000286" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000287" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000288" [label = "(<operator>.addition,v6 + 324)" ]
"1000292" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000293" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000294" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000295" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000296" [label = "(<operator>.addition,v6 + 8)" ]
"1000299" [label = "(<operator>.minus,-100)" ]
"1000301" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000302" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000303" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000304" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000305" [label = "(<operator>.addition,v6 + 52)" ]
"1000308" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000309" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000310" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000311" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000312" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000316" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000319" [label = "(<operator>.equals,(a1[147] & 0x40) == 0)" ]
"1000320" [label = "(<operator>.and,a1[147] & 0x40)" ]
"1000321" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000328" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000329" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000330" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000331" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000332" [label = "(<operator>.addition,v6 + 20)" ]
"1000335" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000336" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000337" [label = "(<operator>.addition,v6 + 52)" ]
"1000340" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000341" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000342" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000343" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000344" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000349" [label = "(<operator>.assignment,v13 = *a1)" ]
"1000351" [label = "(<operator>.indirection,*a1)" ]
"1000353" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000355" [label = "(_errno_location,_errno_location())" ]
"1000356" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v12, v15, 128))" ]
"1000358" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v15, 128))" ]
"1000359" [label = "(UNKNOWN,const char *,const char *)" ]
"1000360" [label = "(Curl_strerror,Curl_strerror(*v12, v15, 128))" ]
"1000361" [label = "(<operator>.indirection,*v12)" ]
"1000365" [label = "(Curl_failf,Curl_failf(v13, \"bind() failed; %s\", v14))" ]
"1000369" [label = "(RETURN,return 7;,return 7;)" ]
"1000371" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000372" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000375" [label = "(<operator>.or,a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000376" [label = "(<operator>.and,a1[147] & 0xFFFFFFBF)" ]
"1000377" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000382" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000383" [label = "(<operator>.indirection,*a1)" ]
"1000385" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000386" [label = "(<operator>.indirection,*a2)" ]
"1000389" [label = "(RETURN,return 0;,return 0;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000391" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000144" 
  "1000142" -> "1000391" 
  "1000144" -> "1000151" 
  "1000147" -> "1000159" 
  "1000147" -> "1000182" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000159" -> "1000165" 
  "1000163" -> "1000170" 
  "1000163" -> "1000176" 
  "1000164" -> "1000163" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000170" -> "1000391" 
  "1000172" -> "1000194" 
  "1000174" -> "1000172" 
  "1000175" -> "1000174" 
  "1000176" -> "1000177" 
  "1000177" -> "1000175" 
  "1000182" -> "1000189" 
  "1000185" -> "1000194" 
  "1000187" -> "1000185" 
  "1000188" -> "1000187" 
  "1000189" -> "1000190" 
  "1000190" -> "1000188" 
  "1000194" -> "1000221" 
  "1000194" -> "1000201" 
  "1000197" -> "1000207" 
  "1000199" -> "1000197" 
  "1000201" -> "1000199" 
  "1000204" -> "1000213" 
  "1000205" -> "1000204" 
  "1000206" -> "1000205" 
  "1000207" -> "1000208" 
  "1000208" -> "1000206" 
  "1000213" -> "1000221" 
  "1000213" -> "1000215" 
  "1000215" -> "1000391" 
  "1000218" -> "1000230" 
  "1000218" -> "1000246" 
  "1000219" -> "1000218" 
  "1000220" -> "1000219" 
  "1000221" -> "1000222" 
  "1000222" -> "1000220" 
  "1000226" -> "1000236" 
  "1000228" -> "1000226" 
  "1000230" -> "1000228" 
  "1000233" -> "1000242" 
  "1000234" -> "1000233" 
  "1000235" -> "1000234" 
  "1000236" -> "1000237" 
  "1000237" -> "1000235" 
  "1000242" -> "1000244" 
  "1000242" -> "1000246" 
  "1000244" -> "1000391" 
  "1000246" -> "1000251" 
  "1000249" -> "1000257" 
  "1000251" -> "1000249" 
  "1000254" -> "1000265" 
  "1000255" -> "1000254" 
  "1000256" -> "1000255" 
  "1000257" -> "1000258" 
  "1000258" -> "1000256" 
  "1000262" -> "1000271" 
  "1000263" -> "1000262" 
  "1000264" -> "1000263" 
  "1000265" -> "1000264" 
  "1000268" -> "1000279" 
  "1000269" -> "1000268" 
  "1000270" -> "1000269" 
  "1000271" -> "1000272" 
  "1000272" -> "1000270" 
  "1000276" -> "1000287" 
  "1000277" -> "1000276" 
  "1000278" -> "1000277" 
  "1000279" -> "1000280" 
  "1000280" -> "1000278" 
  "1000284" -> "1000295" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000287" -> "1000288" 
  "1000288" -> "1000286" 
  "1000292" -> "1000304" 
  "1000293" -> "1000299" 
  "1000294" -> "1000293" 
  "1000295" -> "1000296" 
  "1000296" -> "1000294" 
  "1000299" -> "1000292" 
  "1000301" -> "1000316" 
  "1000302" -> "1000310" 
  "1000303" -> "1000302" 
  "1000304" -> "1000305" 
  "1000305" -> "1000303" 
  "1000308" -> "1000301" 
  "1000309" -> "1000308" 
  "1000310" -> "1000312" 
  "1000311" -> "1000309" 
  "1000312" -> "1000311" 
  "1000316" -> "1000321" 
  "1000319" -> "1000331" 
  "1000319" -> "1000383" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000328" -> "1000351" 
  "1000328" -> "1000372" 
  "1000329" -> "1000336" 
  "1000330" -> "1000329" 
  "1000331" -> "1000332" 
  "1000332" -> "1000330" 
  "1000335" -> "1000342" 
  "1000336" -> "1000337" 
  "1000337" -> "1000335" 
  "1000340" -> "1000328" 
  "1000341" -> "1000340" 
  "1000342" -> "1000344" 
  "1000343" -> "1000341" 
  "1000344" -> "1000343" 
  "1000349" -> "1000355" 
  "1000351" -> "1000349" 
  "1000353" -> "1000359" 
  "1000355" -> "1000353" 
  "1000356" -> "1000365" 
  "1000358" -> "1000356" 
  "1000359" -> "1000361" 
  "1000360" -> "1000358" 
  "1000361" -> "1000360" 
  "1000365" -> "1000369" 
  "1000369" -> "1000391" 
  "1000371" -> "1000383" 
  "1000372" -> "1000377" 
  "1000375" -> "1000371" 
  "1000376" -> "1000375" 
  "1000377" -> "1000376" 
  "1000382" -> "1000386" 
  "1000383" -> "1000382" 
  "1000385" -> "1000389" 
  "1000386" -> "1000385" 
  "1000389" -> "1000391" 
  "1000113" -> "1000131" 
}
