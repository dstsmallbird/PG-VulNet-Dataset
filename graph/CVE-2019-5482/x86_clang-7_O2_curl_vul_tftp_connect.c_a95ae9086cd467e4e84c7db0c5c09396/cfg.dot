digraph tftp_connect {  
"1000130" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000131" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000136" [label = "(<operator>.logicalNot,!v2)" ]
"1000138" [label = "(RETURN,return 27;,return 27;)" ]
"1000140" [label = "(<operator>.assignment,v3 = v2)" ]
"1000143" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000145" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000146" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000147" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000148" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000149" [label = "(<operator>.indirection,*a1)" ]
"1000155" [label = "(<operator>.assignment,result = 71)" ]
"1000159" [label = "(<operator>.greaterThan,(unsigned int)(v4 - 8) > 0xFFB0)" ]
"1000160" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000161" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000162" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000166" [label = "(RETURN,return result;,return result;)" ]
"1000169" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 328))" ]
"1000170" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000171" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000172" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000173" [label = "(<operator>.addition,v3 + 328)" ]
"1000180" [label = "(<operator>.addition,v4 + 4)" ]
"1000183" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 328) = v6)" ]
"1000184" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000185" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000186" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000187" [label = "(<operator>.addition,v3 + 328)" ]
"1000194" [label = "(RETURN,return 27;,return 27;)" ]
"1000198" [label = "(<operator>.assignment,v4 = 512)" ]
"1000202" [label = "(<operator>.logicalNot,!*(_DWORD *)(v2 + 328))" ]
"1000203" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000204" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000205" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000206" [label = "(<operator>.addition,v2 + 328)" ]
"1000212" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000215" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 16) = a1)" ]
"1000216" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 16))" ]
"1000217" [label = "(<operator>.cast,(_DWORD *)(v3 + 16))" ]
"1000218" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000219" [label = "(<operator>.addition,v3 + 16)" ]
"1000223" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 20) = a1[103])" ]
"1000224" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000225" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000226" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000227" [label = "(<operator>.addition,v3 + 20)" ]
"1000230" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000233" [label = "(<operator>.assignment,*(_DWORD *)v3 = 0)" ]
"1000234" [label = "(<operator>.indirection,*(_DWORD *)v3)" ]
"1000235" [label = "(<operator>.cast,(_DWORD *)v3)" ]
"1000236" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000239" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 8) = -100)" ]
"1000240" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 8))" ]
"1000241" [label = "(<operator>.cast,(_DWORD *)(v3 + 8))" ]
"1000242" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000243" [label = "(<operator>.addition,v3 + 8)" ]
"1000246" [label = "(<operator>.minus,-100)" ]
"1000248" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 320) = v4)" ]
"1000249" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 320))" ]
"1000250" [label = "(<operator>.cast,(_DWORD *)(v3 + 320))" ]
"1000251" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000252" [label = "(<operator>.addition,v3 + 320)" ]
"1000256" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 324) = v4)" ]
"1000257" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 324))" ]
"1000258" [label = "(<operator>.cast,(_DWORD *)(v3 + 324))" ]
"1000259" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000260" [label = "(<operator>.addition,v3 + 324)" ]
"1000264" [label = "(<operator>.assignment,*(_WORD *)(v3 + 52) = *(_WORD *)(a1[18] + 4))" ]
"1000265" [label = "(<operator>.indirection,*(_WORD *)(v3 + 52))" ]
"1000266" [label = "(<operator>.cast,(_WORD *)(v3 + 52))" ]
"1000267" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000268" [label = "(<operator>.addition,v3 + 52)" ]
"1000271" [label = "(<operator>.indirection,*(_WORD *)(a1[18] + 4))" ]
"1000272" [label = "(<operator>.cast,(_WORD *)(a1[18] + 4))" ]
"1000273" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000274" [label = "(<operator>.addition,a1[18] + 4)" ]
"1000275" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000279" [label = "(tftp_set_timeouts,tftp_set_timeouts(v3))" ]
"1000282" [label = "(<operator>.equals,(*((_BYTE *)a1 + 583) & 2) == 0)" ]
"1000283" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000284" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000285" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000286" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000287" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000294" [label = "(bind,bind(*(_DWORD *)(v3 + 20), (const struct sockaddr *)(v3 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000295" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000296" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000297" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000298" [label = "(<operator>.addition,v3 + 20)" ]
"1000301" [label = "(<operator>.cast,(const struct sockaddr *)(v3 + 52))" ]
"1000302" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000303" [label = "(<operator>.addition,v3 + 52)" ]
"1000306" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000307" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000308" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000309" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000310" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000315" [label = "(<operator>.assignment,v9 = *a1)" ]
"1000317" [label = "(<operator>.indirection,*a1)" ]
"1000319" [label = "(<operator>.assignment,v10 = __errno_location())" ]
"1000321" [label = "(__errno_location,__errno_location())" ]
"1000322" [label = "(<operator>.assignment,v11 = Curl_strerror(*v10, buf, 128))" ]
"1000324" [label = "(Curl_strerror,Curl_strerror(*v10, buf, 128))" ]
"1000325" [label = "(<operator>.indirection,*v10)" ]
"1000329" [label = "(Curl_failf,Curl_failf(v9, \"bind() failed; %s\", v11))" ]
"1000333" [label = "(RETURN,return 7;,return 7;)" ]
"1000335" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000336" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000337" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000338" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000339" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000343" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000344" [label = "(<operator>.indirection,*a1)" ]
"1000346" [label = "(<operator>.assignment,result = 0)" ]
"1000349" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000350" [label = "(<operator>.indirection,*a2)" ]
"1000353" [label = "(RETURN,return result;,return result;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000355" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000130" -> "1000136" 
  "1000131" -> "1000130" 
  "1000136" -> "1000138" 
  "1000136" -> "1000140" 
  "1000138" -> "1000355" 
  "1000140" -> "1000147" 
  "1000143" -> "1000155" 
  "1000143" -> "1000198" 
  "1000145" -> "1000143" 
  "1000146" -> "1000145" 
  "1000147" -> "1000149" 
  "1000148" -> "1000146" 
  "1000149" -> "1000148" 
  "1000155" -> "1000161" 
  "1000159" -> "1000172" 
  "1000159" -> "1000166" 
  "1000160" -> "1000159" 
  "1000161" -> "1000162" 
  "1000162" -> "1000160" 
  "1000166" -> "1000355" 
  "1000169" -> "1000180" 
  "1000169" -> "1000212" 
  "1000170" -> "1000169" 
  "1000171" -> "1000170" 
  "1000172" -> "1000173" 
  "1000173" -> "1000171" 
  "1000180" -> "1000186" 
  "1000183" -> "1000212" 
  "1000183" -> "1000194" 
  "1000184" -> "1000183" 
  "1000185" -> "1000184" 
  "1000186" -> "1000187" 
  "1000187" -> "1000185" 
  "1000194" -> "1000355" 
  "1000198" -> "1000205" 
  "1000202" -> "1000180" 
  "1000202" -> "1000212" 
  "1000203" -> "1000202" 
  "1000204" -> "1000203" 
  "1000205" -> "1000206" 
  "1000206" -> "1000204" 
  "1000212" -> "1000218" 
  "1000215" -> "1000226" 
  "1000216" -> "1000215" 
  "1000217" -> "1000216" 
  "1000218" -> "1000219" 
  "1000219" -> "1000217" 
  "1000223" -> "1000236" 
  "1000224" -> "1000230" 
  "1000225" -> "1000224" 
  "1000226" -> "1000227" 
  "1000227" -> "1000225" 
  "1000230" -> "1000223" 
  "1000233" -> "1000242" 
  "1000234" -> "1000233" 
  "1000235" -> "1000234" 
  "1000236" -> "1000235" 
  "1000239" -> "1000251" 
  "1000240" -> "1000246" 
  "1000241" -> "1000240" 
  "1000242" -> "1000243" 
  "1000243" -> "1000241" 
  "1000246" -> "1000239" 
  "1000248" -> "1000259" 
  "1000249" -> "1000248" 
  "1000250" -> "1000249" 
  "1000251" -> "1000252" 
  "1000252" -> "1000250" 
  "1000256" -> "1000267" 
  "1000257" -> "1000256" 
  "1000258" -> "1000257" 
  "1000259" -> "1000260" 
  "1000260" -> "1000258" 
  "1000264" -> "1000279" 
  "1000265" -> "1000273" 
  "1000266" -> "1000265" 
  "1000267" -> "1000268" 
  "1000268" -> "1000266" 
  "1000271" -> "1000264" 
  "1000272" -> "1000271" 
  "1000273" -> "1000275" 
  "1000274" -> "1000272" 
  "1000275" -> "1000274" 
  "1000279" -> "1000287" 
  "1000282" -> "1000297" 
  "1000282" -> "1000344" 
  "1000283" -> "1000282" 
  "1000284" -> "1000283" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000294" -> "1000339" 
  "1000294" -> "1000317" 
  "1000295" -> "1000302" 
  "1000296" -> "1000295" 
  "1000297" -> "1000298" 
  "1000298" -> "1000296" 
  "1000301" -> "1000308" 
  "1000302" -> "1000303" 
  "1000303" -> "1000301" 
  "1000306" -> "1000294" 
  "1000307" -> "1000306" 
  "1000308" -> "1000310" 
  "1000309" -> "1000307" 
  "1000310" -> "1000309" 
  "1000315" -> "1000321" 
  "1000317" -> "1000315" 
  "1000319" -> "1000325" 
  "1000321" -> "1000319" 
  "1000322" -> "1000329" 
  "1000324" -> "1000322" 
  "1000325" -> "1000324" 
  "1000329" -> "1000333" 
  "1000333" -> "1000355" 
  "1000335" -> "1000344" 
  "1000336" -> "1000335" 
  "1000337" -> "1000336" 
  "1000338" -> "1000337" 
  "1000339" -> "1000338" 
  "1000343" -> "1000346" 
  "1000344" -> "1000343" 
  "1000346" -> "1000350" 
  "1000349" -> "1000353" 
  "1000350" -> "1000349" 
  "1000353" -> "1000355" 
  "1000112" -> "1000131" 
}
