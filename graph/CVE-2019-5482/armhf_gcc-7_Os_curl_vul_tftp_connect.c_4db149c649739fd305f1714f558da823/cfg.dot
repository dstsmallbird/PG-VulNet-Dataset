digraph tftp_connect {  
"1000127" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000129" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000132" [label = "(<operator>.assignment,v5 = v4)" ]
"1000135" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000136" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000141" [label = "(<operator>.logicalNot,!v4)" ]
"1000143" [label = "(RETURN,return 27;,return 27;)" ]
"1000145" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000148" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000150" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000151" [label = "(<operator>.indirection,*a1)" ]
"1000158" [label = "(<operator>.greaterThan,(unsigned int)(v7 - 8) > 0xFFB0)" ]
"1000159" [label = "(<operator>.cast,(unsigned int)(v7 - 8))" ]
"1000160" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000161" [label = "(<operator>.subtraction,v7 - 8)" ]
"1000165" [label = "(RETURN,return 71;,return 71;)" ]
"1000169" [label = "(<operator>.assignment,v7 = 512)" ]
"1000173" [label = "(<operator>.logicalNot,!*(_DWORD *)(v4 + 328))" ]
"1000174" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000175" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000176" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000177" [label = "(<operator>.addition,v4 + 328)" ]
"1000181" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v7 + 4))" ]
"1000183" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000185" [label = "(<operator>.addition,v7 + 4)" ]
"1000188" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v9)" ]
"1000189" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000190" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000191" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000192" [label = "(<operator>.addition,v5 + 328)" ]
"1000197" [label = "(<operator>.logicalNot,!v9)" ]
"1000199" [label = "(RETURN,return 27;,return 27;)" ]
"1000202" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000203" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000204" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000205" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000206" [label = "(<operator>.addition,v5 + 332)" ]
"1000210" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v7 + 4))" ]
"1000212" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000214" [label = "(<operator>.addition,v7 + 4)" ]
"1000217" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v10)" ]
"1000218" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000219" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000220" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000221" [label = "(<operator>.addition,v5 + 332)" ]
"1000226" [label = "(<operator>.logicalNot,!v10)" ]
"1000228" [label = "(RETURN,return 27;,return 27;)" ]
"1000230" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000233" [label = "(<operator>.assignment,v8 = a1[105])" ]
"1000235" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000238" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000239" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000240" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000241" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000242" [label = "(<operator>.addition,v5 + 16)" ]
"1000246" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = v7)" ]
"1000247" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000248" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000249" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000250" [label = "(<operator>.addition,v5 + 320)" ]
"1000254" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v7)" ]
"1000255" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000256" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000257" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000258" [label = "(<operator>.addition,v5 + 324)" ]
"1000262" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = v8)" ]
"1000263" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000264" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000265" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000266" [label = "(<operator>.addition,v5 + 20)" ]
"1000270" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000271" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000272" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000273" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000276" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000277" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000278" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000279" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000280" [label = "(<operator>.addition,v5 + 8)" ]
"1000283" [label = "(<operator>.minus,-100)" ]
"1000285" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000286" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000287" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000288" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000289" [label = "(<operator>.addition,v5 + 52)" ]
"1000292" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000293" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000294" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000295" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000296" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000300" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000303" [label = "(<operator>.notEquals,(*((_BYTE *)a1 + 591) & 2) != 0)" ]
"1000304" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000305" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000306" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000307" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000308" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000315" [label = "(<operator>.logicalNot,!bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000316" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000317" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000318" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000319" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000320" [label = "(<operator>.addition,v5 + 20)" ]
"1000323" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000324" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000325" [label = "(<operator>.addition,v5 + 52)" ]
"1000328" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000329" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000330" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000331" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000332" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000337" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 591) |= 2u)" ]
"1000338" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000339" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000340" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000341" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000346" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000347" [label = "(<operator>.indirection,*a1)" ]
"1000349" [label = "(<operator>.assignment,result = 0)" ]
"1000352" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000353" [label = "(<operator>.indirection,*a2)" ]
"1000356" [label = "(RETURN,return result;,return result;)" ]
"1000358" [label = "(<operator>.assignment,v11 = _errno_location())" ]
"1000360" [label = "(_errno_location,_errno_location())" ]
"1000361" [label = "(<operator>.assignment,v12 = *a1)" ]
"1000363" [label = "(<operator>.indirection,*a1)" ]
"1000365" [label = "(<operator>.assignment,v13 = (const char *)Curl_strerror(*v11, v14, 128))" ]
"1000367" [label = "(<operator>.cast,(const char *)Curl_strerror(*v11, v14, 128))" ]
"1000368" [label = "(UNKNOWN,const char *,const char *)" ]
"1000369" [label = "(Curl_strerror,Curl_strerror(*v11, v14, 128))" ]
"1000370" [label = "(<operator>.indirection,*v11)" ]
"1000374" [label = "(Curl_failf,Curl_failf(v12, \"bind() failed; %s\", v13))" ]
"1000378" [label = "(RETURN,return 7;,return 7;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000380" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000127" -> "1000132" 
  "1000129" -> "1000127" 
  "1000132" -> "1000136" 
  "1000135" -> "1000141" 
  "1000136" -> "1000135" 
  "1000141" -> "1000143" 
  "1000141" -> "1000149" 
  "1000143" -> "1000380" 
  "1000145" -> "1000160" 
  "1000145" -> "1000169" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000149" -> "1000151" 
  "1000150" -> "1000148" 
  "1000151" -> "1000150" 
  "1000158" -> "1000176" 
  "1000158" -> "1000165" 
  "1000159" -> "1000158" 
  "1000160" -> "1000161" 
  "1000161" -> "1000159" 
  "1000165" -> "1000380" 
  "1000169" -> "1000176" 
  "1000173" -> "1000205" 
  "1000173" -> "1000185" 
  "1000174" -> "1000173" 
  "1000175" -> "1000174" 
  "1000176" -> "1000177" 
  "1000177" -> "1000175" 
  "1000181" -> "1000191" 
  "1000183" -> "1000181" 
  "1000185" -> "1000183" 
  "1000188" -> "1000197" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000191" -> "1000192" 
  "1000192" -> "1000190" 
  "1000197" -> "1000205" 
  "1000197" -> "1000199" 
  "1000199" -> "1000380" 
  "1000202" -> "1000214" 
  "1000202" -> "1000230" 
  "1000203" -> "1000202" 
  "1000204" -> "1000203" 
  "1000205" -> "1000206" 
  "1000206" -> "1000204" 
  "1000210" -> "1000220" 
  "1000212" -> "1000210" 
  "1000214" -> "1000212" 
  "1000217" -> "1000226" 
  "1000218" -> "1000217" 
  "1000219" -> "1000218" 
  "1000220" -> "1000221" 
  "1000221" -> "1000219" 
  "1000226" -> "1000228" 
  "1000226" -> "1000230" 
  "1000228" -> "1000380" 
  "1000230" -> "1000235" 
  "1000233" -> "1000241" 
  "1000235" -> "1000233" 
  "1000238" -> "1000249" 
  "1000239" -> "1000238" 
  "1000240" -> "1000239" 
  "1000241" -> "1000242" 
  "1000242" -> "1000240" 
  "1000246" -> "1000257" 
  "1000247" -> "1000246" 
  "1000248" -> "1000247" 
  "1000249" -> "1000250" 
  "1000250" -> "1000248" 
  "1000254" -> "1000265" 
  "1000255" -> "1000254" 
  "1000256" -> "1000255" 
  "1000257" -> "1000258" 
  "1000258" -> "1000256" 
  "1000262" -> "1000273" 
  "1000263" -> "1000262" 
  "1000264" -> "1000263" 
  "1000265" -> "1000266" 
  "1000266" -> "1000264" 
  "1000270" -> "1000279" 
  "1000271" -> "1000270" 
  "1000272" -> "1000271" 
  "1000273" -> "1000272" 
  "1000276" -> "1000288" 
  "1000277" -> "1000283" 
  "1000278" -> "1000277" 
  "1000279" -> "1000280" 
  "1000280" -> "1000278" 
  "1000283" -> "1000276" 
  "1000285" -> "1000300" 
  "1000286" -> "1000294" 
  "1000287" -> "1000286" 
  "1000288" -> "1000289" 
  "1000289" -> "1000287" 
  "1000292" -> "1000285" 
  "1000293" -> "1000292" 
  "1000294" -> "1000296" 
  "1000295" -> "1000293" 
  "1000296" -> "1000295" 
  "1000300" -> "1000308" 
  "1000303" -> "1000319" 
  "1000303" -> "1000347" 
  "1000304" -> "1000303" 
  "1000305" -> "1000304" 
  "1000306" -> "1000305" 
  "1000307" -> "1000306" 
  "1000308" -> "1000307" 
  "1000315" -> "1000341" 
  "1000315" -> "1000360" 
  "1000316" -> "1000315" 
  "1000317" -> "1000324" 
  "1000318" -> "1000317" 
  "1000319" -> "1000320" 
  "1000320" -> "1000318" 
  "1000323" -> "1000330" 
  "1000324" -> "1000325" 
  "1000325" -> "1000323" 
  "1000328" -> "1000316" 
  "1000329" -> "1000328" 
  "1000330" -> "1000332" 
  "1000331" -> "1000329" 
  "1000332" -> "1000331" 
  "1000337" -> "1000347" 
  "1000338" -> "1000337" 
  "1000339" -> "1000338" 
  "1000340" -> "1000339" 
  "1000341" -> "1000340" 
  "1000346" -> "1000349" 
  "1000347" -> "1000346" 
  "1000349" -> "1000353" 
  "1000352" -> "1000356" 
  "1000353" -> "1000352" 
  "1000356" -> "1000380" 
  "1000358" -> "1000363" 
  "1000360" -> "1000358" 
  "1000361" -> "1000368" 
  "1000363" -> "1000361" 
  "1000365" -> "1000374" 
  "1000367" -> "1000365" 
  "1000368" -> "1000370" 
  "1000369" -> "1000367" 
  "1000370" -> "1000369" 
  "1000374" -> "1000378" 
  "1000378" -> "1000380" 
  "1000112" -> "1000129" 
}
