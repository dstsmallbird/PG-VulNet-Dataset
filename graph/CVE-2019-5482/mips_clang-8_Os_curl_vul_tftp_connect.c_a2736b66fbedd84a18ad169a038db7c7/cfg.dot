digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000140" [label = "(<operator>.logicalNot,!v4)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v5 = *(_DWORD *)(*a1 + 1576))" ]
"1000146" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000148" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000149" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000150" [label = "(<operator>.indirection,*a1)" ]
"1000153" [label = "(<operator>.assignment,v6 = v4)" ]
"1000159" [label = "(<operator>.assignment,result = 71)" ]
"1000163" [label = "(<operator>.greaterThan,(unsigned int)(v5 - 8) > 0xFFB0)" ]
"1000164" [label = "(<operator>.cast,(unsigned int)(v5 - 8))" ]
"1000165" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000166" [label = "(<operator>.subtraction,v5 - 8)" ]
"1000170" [label = "(RETURN,return result;,return result;)" ]
"1000174" [label = "(<operator>.assignment,v5 = 512)" ]
"1000178" [label = "(<operator>.logicalNot,!*(_DWORD *)(v6 + 328))" ]
"1000179" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000180" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000181" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000182" [label = "(<operator>.addition,v6 + 328)" ]
"1000186" [label = "(<operator>.assignment,v8 = Curl_ccalloc(1, v5 + 4))" ]
"1000188" [label = "(Curl_ccalloc,Curl_ccalloc(1, v5 + 4))" ]
"1000190" [label = "(<operator>.addition,v5 + 4)" ]
"1000193" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v8)" ]
"1000194" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000195" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000196" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000197" [label = "(<operator>.addition,v6 + 328)" ]
"1000202" [label = "(<operator>.logicalNot,!v8)" ]
"1000204" [label = "(RETURN,return 27;,return 27;)" ]
"1000207" [label = "(<operator>.logicalOr,*(_DWORD *)(v6 + 332)\n    || (v9 = Curl_ccalloc(1, v5 + 4), *(_DWORD *)(v6 + 332) = v9, v10 = v9 == 0, result = 27, !v10))" ]
"1000208" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000209" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000210" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000211" [label = "(<operator>.addition,v6 + 332)" ]
"1000215" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v5 + 4))" ]
"1000217" [label = "(Curl_ccalloc,Curl_ccalloc(1, v5 + 4))" ]
"1000219" [label = "(<operator>.addition,v5 + 4)" ]
"1000223" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 332) = v9)" ]
"1000224" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000225" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000226" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000227" [label = "(<operator>.addition,v6 + 332)" ]
"1000232" [label = "(<operator>.assignment,v10 = v9 == 0)" ]
"1000234" [label = "(<operator>.equals,v9 == 0)" ]
"1000238" [label = "(<operator>.assignment,result = 27)" ]
"1000241" [label = "(<operator>.logicalNot,!v10)" ]
"1000244" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000247" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000248" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000249" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000250" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000251" [label = "(<operator>.addition,v6 + 16)" ]
"1000255" [label = "(<operator>.assignment,v11 = a1[105])" ]
"1000257" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000260" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v5)" ]
"1000261" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000262" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000263" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000264" [label = "(<operator>.addition,v6 + 324)" ]
"1000268" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = v5)" ]
"1000269" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000270" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000271" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000272" [label = "(<operator>.addition,v6 + 320)" ]
"1000276" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000277" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000278" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000279" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000280" [label = "(<operator>.addition,v6 + 8)" ]
"1000283" [label = "(<operator>.minus,-100)" ]
"1000285" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = v11)" ]
"1000286" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000287" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000288" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000289" [label = "(<operator>.addition,v6 + 20)" ]
"1000293" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000294" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000295" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000296" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000299" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000300" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000301" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000302" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000303" [label = "(<operator>.addition,v6 + 52)" ]
"1000306" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000307" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000308" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000309" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000310" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000314" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000317" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 0x40) == 0)" ]
"1000318" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 0x40)" ]
"1000319" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000320" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000321" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000322" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000329" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000330" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000331" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000332" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000333" [label = "(<operator>.addition,v6 + 20)" ]
"1000336" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000337" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000338" [label = "(<operator>.addition,v6 + 52)" ]
"1000341" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000342" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000343" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000344" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000345" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000350" [label = "(<operator>.assignment,v12 = *a1)" ]
"1000352" [label = "(<operator>.indirection,*a1)" ]
"1000354" [label = "(<operator>.assignment,v13 = _errno_location())" ]
"1000356" [label = "(_errno_location,_errno_location())" ]
"1000357" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v13, v15, 128))" ]
"1000359" [label = "(<operator>.cast,(const char *)Curl_strerror(*v13, v15, 128))" ]
"1000360" [label = "(UNKNOWN,const char *,const char *)" ]
"1000361" [label = "(Curl_strerror,Curl_strerror(*v13, v15, 128))" ]
"1000362" [label = "(<operator>.indirection,*v13)" ]
"1000366" [label = "(Curl_failf,Curl_failf(v12, \"bind() failed; %s\", v14))" ]
"1000370" [label = "(RETURN,return 7;,return 7;)" ]
"1000372" [label = "(<operators>.assignmentOr,a1[147] |= 0x40u)" ]
"1000373" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000377" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000378" [label = "(<operator>.indirection,*a1)" ]
"1000380" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000381" [label = "(<operator>.indirection,*a2)" ]
"1000384" [label = "(<operator>.assignment,result = 0)" ]
"1000387" [label = "(RETURN,return result;,return result;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000389" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000148" 
  "1000142" -> "1000389" 
  "1000144" -> "1000153" 
  "1000146" -> "1000144" 
  "1000147" -> "1000146" 
  "1000148" -> "1000150" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000153" -> "1000159" 
  "1000153" -> "1000174" 
  "1000159" -> "1000165" 
  "1000163" -> "1000181" 
  "1000163" -> "1000170" 
  "1000164" -> "1000163" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000170" -> "1000389" 
  "1000174" -> "1000181" 
  "1000178" -> "1000210" 
  "1000178" -> "1000190" 
  "1000179" -> "1000178" 
  "1000180" -> "1000179" 
  "1000181" -> "1000182" 
  "1000182" -> "1000180" 
  "1000186" -> "1000196" 
  "1000188" -> "1000186" 
  "1000190" -> "1000188" 
  "1000193" -> "1000202" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000196" -> "1000197" 
  "1000197" -> "1000195" 
  "1000202" -> "1000210" 
  "1000202" -> "1000204" 
  "1000204" -> "1000389" 
  "1000207" -> "1000244" 
  "1000207" -> "1000387" 
  "1000208" -> "1000207" 
  "1000208" -> "1000219" 
  "1000209" -> "1000208" 
  "1000210" -> "1000211" 
  "1000211" -> "1000209" 
  "1000215" -> "1000226" 
  "1000217" -> "1000215" 
  "1000219" -> "1000217" 
  "1000223" -> "1000234" 
  "1000224" -> "1000223" 
  "1000225" -> "1000224" 
  "1000226" -> "1000227" 
  "1000227" -> "1000225" 
  "1000232" -> "1000238" 
  "1000234" -> "1000232" 
  "1000238" -> "1000241" 
  "1000241" -> "1000207" 
  "1000244" -> "1000250" 
  "1000247" -> "1000257" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000250" -> "1000251" 
  "1000251" -> "1000249" 
  "1000255" -> "1000263" 
  "1000257" -> "1000255" 
  "1000260" -> "1000271" 
  "1000261" -> "1000260" 
  "1000262" -> "1000261" 
  "1000263" -> "1000264" 
  "1000264" -> "1000262" 
  "1000268" -> "1000279" 
  "1000269" -> "1000268" 
  "1000270" -> "1000269" 
  "1000271" -> "1000272" 
  "1000272" -> "1000270" 
  "1000276" -> "1000288" 
  "1000277" -> "1000283" 
  "1000278" -> "1000277" 
  "1000279" -> "1000280" 
  "1000280" -> "1000278" 
  "1000283" -> "1000276" 
  "1000285" -> "1000296" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000288" -> "1000289" 
  "1000289" -> "1000287" 
  "1000293" -> "1000302" 
  "1000294" -> "1000293" 
  "1000295" -> "1000294" 
  "1000296" -> "1000295" 
  "1000299" -> "1000314" 
  "1000300" -> "1000308" 
  "1000301" -> "1000300" 
  "1000302" -> "1000303" 
  "1000303" -> "1000301" 
  "1000306" -> "1000299" 
  "1000307" -> "1000306" 
  "1000308" -> "1000310" 
  "1000309" -> "1000307" 
  "1000310" -> "1000309" 
  "1000314" -> "1000322" 
  "1000317" -> "1000332" 
  "1000317" -> "1000378" 
  "1000318" -> "1000317" 
  "1000319" -> "1000318" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000322" -> "1000321" 
  "1000329" -> "1000352" 
  "1000329" -> "1000373" 
  "1000330" -> "1000337" 
  "1000331" -> "1000330" 
  "1000332" -> "1000333" 
  "1000333" -> "1000331" 
  "1000336" -> "1000343" 
  "1000337" -> "1000338" 
  "1000338" -> "1000336" 
  "1000341" -> "1000329" 
  "1000342" -> "1000341" 
  "1000343" -> "1000345" 
  "1000344" -> "1000342" 
  "1000345" -> "1000344" 
  "1000350" -> "1000356" 
  "1000352" -> "1000350" 
  "1000354" -> "1000360" 
  "1000356" -> "1000354" 
  "1000357" -> "1000366" 
  "1000359" -> "1000357" 
  "1000360" -> "1000362" 
  "1000361" -> "1000359" 
  "1000362" -> "1000361" 
  "1000366" -> "1000370" 
  "1000370" -> "1000389" 
  "1000372" -> "1000378" 
  "1000373" -> "1000372" 
  "1000377" -> "1000381" 
  "1000378" -> "1000377" 
  "1000380" -> "1000384" 
  "1000381" -> "1000380" 
  "1000384" -> "1000387" 
  "1000387" -> "1000389" 
  "1000113" -> "1000131" 
}
