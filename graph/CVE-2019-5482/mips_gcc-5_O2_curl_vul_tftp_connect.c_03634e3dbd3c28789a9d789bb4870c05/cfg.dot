digraph tftp_connect {  
"1000131" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000133" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000136" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000137" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000142" [label = "(<operator>.logicalNot,!v4)" ]
"1000144" [label = "(RETURN,return 27;,return 27;)" ]
"1000146" [label = "(<operator>.assignment,v5 = v4)" ]
"1000149" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000152" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000153" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000154" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000155" [label = "(<operator>.indirection,*a1)" ]
"1000161" [label = "(<operator>.assignment,result = 71)" ]
"1000165" [label = "(<operator>.greaterEqualsThan,(unsigned int)(v6 - 8) >= 0xFFB1)" ]
"1000166" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000167" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000168" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000172" [label = "(RETURN,return result;,return result;)" ]
"1000176" [label = "(<operator>.assignment,v6 = 512)" ]
"1000180" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 328))" ]
"1000181" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000182" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000183" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000184" [label = "(<operator>.addition,v5 + 328)" ]
"1000188" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1, v6 + 4))" ]
"1000190" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000192" [label = "(<operator>.addition,v6 + 4)" ]
"1000195" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v11)" ]
"1000196" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000197" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000198" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000199" [label = "(<operator>.addition,v5 + 328)" ]
"1000204" [label = "(<operator>.logicalNot,!v11)" ]
"1000206" [label = "(RETURN,return 27;,return 27;)" ]
"1000209" [label = "(<operator>.logicalOr,*(_DWORD *)(v5 + 332) || (v15 = Curl_ccalloc(1, v6 + 4), (*(_DWORD *)(v5 + 332) = v15) != 0))" ]
"1000210" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000211" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000212" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000213" [label = "(<operator>.addition,v5 + 332)" ]
"1000217" [label = "(<operator>.assignment,v15 = Curl_ccalloc(1, v6 + 4))" ]
"1000219" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000221" [label = "(<operator>.addition,v6 + 4)" ]
"1000224" [label = "(<operator>.notEquals,(*(_DWORD *)(v5 + 332) = v15) != 0)" ]
"1000225" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v15)" ]
"1000226" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000227" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000228" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000229" [label = "(<operator>.addition,v5 + 332)" ]
"1000235" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000238" [label = "(<operator>.assignment,v7 = a1[20])" ]
"1000240" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000243" [label = "(<operator>.assignment,v8 = a1[105])" ]
"1000245" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000248" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000249" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000250" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000251" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000252" [label = "(<operator>.addition,v5 + 16)" ]
"1000256" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000257" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000258" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000259" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000262" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = v6)" ]
"1000263" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000264" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000265" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000266" [label = "(<operator>.addition,v5 + 320)" ]
"1000270" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = v8)" ]
"1000271" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000272" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000273" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000274" [label = "(<operator>.addition,v5 + 20)" ]
"1000278" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v6)" ]
"1000279" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000280" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000281" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000282" [label = "(<operator>.addition,v5 + 324)" ]
"1000286" [label = "(<operator>.assignment,v9 = *(_DWORD *)(v7 + 4))" ]
"1000288" [label = "(<operator>.indirection,*(_DWORD *)(v7 + 4))" ]
"1000289" [label = "(<operator>.cast,(_DWORD *)(v7 + 4))" ]
"1000290" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000291" [label = "(<operator>.addition,v7 + 4)" ]
"1000294" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000295" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000296" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000297" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000298" [label = "(<operator>.addition,v5 + 8)" ]
"1000301" [label = "(<operator>.minus,-100)" ]
"1000303" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = v9)" ]
"1000304" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000305" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000306" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000307" [label = "(<operator>.addition,v5 + 52)" ]
"1000311" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000314" [label = "(<operator>.equals,(a1[147] & 0x40) == 0)" ]
"1000315" [label = "(<operator>.and,a1[147] & 0x40)" ]
"1000316" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000323" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000324" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000325" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000326" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000327" [label = "(<operator>.addition,v5 + 20)" ]
"1000330" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000331" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000332" [label = "(<operator>.addition,v5 + 52)" ]
"1000335" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000336" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000337" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000338" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000339" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000344" [label = "(<operator>.assignment,v13 = *a1)" ]
"1000346" [label = "(<operator>.indirection,*a1)" ]
"1000348" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000350" [label = "(_errno_location,_errno_location())" ]
"1000351" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v12, v16, 128))" ]
"1000353" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v16, 128))" ]
"1000354" [label = "(UNKNOWN,const char *,const char *)" ]
"1000355" [label = "(Curl_strerror,Curl_strerror(*v12, v16, 128))" ]
"1000356" [label = "(<operator>.indirection,*v12)" ]
"1000360" [label = "(Curl_failf,Curl_failf(v13, \"bind() failed; %s\", v14))" ]
"1000364" [label = "(RETURN,return 7;,return 7;)" ]
"1000366" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000367" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000370" [label = "(<operator>.or,a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000371" [label = "(<operator>.and,a1[147] & 0xFFFFFFBF)" ]
"1000372" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000377" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000378" [label = "(<operator>.indirection,*a1)" ]
"1000380" [label = "(<operator>.assignment,result = 0)" ]
"1000383" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000384" [label = "(<operator>.indirection,*a2)" ]
"1000387" [label = "(RETURN,return result;,return result;)" ]
"1000389" [label = "(RETURN,return 27;,return 27;)" ]
"1000114" [label = "(METHOD,tftp_connect)" ]
"1000391" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000131" -> "1000137" 
  "1000133" -> "1000131" 
  "1000136" -> "1000142" 
  "1000137" -> "1000136" 
  "1000142" -> "1000144" 
  "1000142" -> "1000146" 
  "1000144" -> "1000391" 
  "1000146" -> "1000153" 
  "1000149" -> "1000161" 
  "1000149" -> "1000176" 
  "1000151" -> "1000149" 
  "1000152" -> "1000151" 
  "1000153" -> "1000155" 
  "1000154" -> "1000152" 
  "1000155" -> "1000154" 
  "1000161" -> "1000167" 
  "1000165" -> "1000183" 
  "1000165" -> "1000172" 
  "1000166" -> "1000165" 
  "1000167" -> "1000168" 
  "1000168" -> "1000166" 
  "1000172" -> "1000391" 
  "1000176" -> "1000183" 
  "1000180" -> "1000212" 
  "1000180" -> "1000192" 
  "1000181" -> "1000180" 
  "1000182" -> "1000181" 
  "1000183" -> "1000184" 
  "1000184" -> "1000182" 
  "1000188" -> "1000198" 
  "1000190" -> "1000188" 
  "1000192" -> "1000190" 
  "1000195" -> "1000204" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000198" -> "1000199" 
  "1000199" -> "1000197" 
  "1000204" -> "1000212" 
  "1000204" -> "1000206" 
  "1000206" -> "1000391" 
  "1000209" -> "1000235" 
  "1000209" -> "1000389" 
  "1000210" -> "1000209" 
  "1000210" -> "1000221" 
  "1000211" -> "1000210" 
  "1000212" -> "1000213" 
  "1000213" -> "1000211" 
  "1000217" -> "1000228" 
  "1000219" -> "1000217" 
  "1000221" -> "1000219" 
  "1000224" -> "1000209" 
  "1000225" -> "1000224" 
  "1000226" -> "1000225" 
  "1000227" -> "1000226" 
  "1000228" -> "1000229" 
  "1000229" -> "1000227" 
  "1000235" -> "1000240" 
  "1000238" -> "1000245" 
  "1000240" -> "1000238" 
  "1000243" -> "1000251" 
  "1000245" -> "1000243" 
  "1000248" -> "1000259" 
  "1000249" -> "1000248" 
  "1000250" -> "1000249" 
  "1000251" -> "1000252" 
  "1000252" -> "1000250" 
  "1000256" -> "1000265" 
  "1000257" -> "1000256" 
  "1000258" -> "1000257" 
  "1000259" -> "1000258" 
  "1000262" -> "1000273" 
  "1000263" -> "1000262" 
  "1000264" -> "1000263" 
  "1000265" -> "1000266" 
  "1000266" -> "1000264" 
  "1000270" -> "1000281" 
  "1000271" -> "1000270" 
  "1000272" -> "1000271" 
  "1000273" -> "1000274" 
  "1000274" -> "1000272" 
  "1000278" -> "1000290" 
  "1000279" -> "1000278" 
  "1000280" -> "1000279" 
  "1000281" -> "1000282" 
  "1000282" -> "1000280" 
  "1000286" -> "1000297" 
  "1000288" -> "1000286" 
  "1000289" -> "1000288" 
  "1000290" -> "1000291" 
  "1000291" -> "1000289" 
  "1000294" -> "1000306" 
  "1000295" -> "1000301" 
  "1000296" -> "1000295" 
  "1000297" -> "1000298" 
  "1000298" -> "1000296" 
  "1000301" -> "1000294" 
  "1000303" -> "1000311" 
  "1000304" -> "1000303" 
  "1000305" -> "1000304" 
  "1000306" -> "1000307" 
  "1000307" -> "1000305" 
  "1000311" -> "1000316" 
  "1000314" -> "1000326" 
  "1000314" -> "1000378" 
  "1000315" -> "1000314" 
  "1000316" -> "1000315" 
  "1000323" -> "1000346" 
  "1000323" -> "1000367" 
  "1000324" -> "1000331" 
  "1000325" -> "1000324" 
  "1000326" -> "1000327" 
  "1000327" -> "1000325" 
  "1000330" -> "1000337" 
  "1000331" -> "1000332" 
  "1000332" -> "1000330" 
  "1000335" -> "1000323" 
  "1000336" -> "1000335" 
  "1000337" -> "1000339" 
  "1000338" -> "1000336" 
  "1000339" -> "1000338" 
  "1000344" -> "1000350" 
  "1000346" -> "1000344" 
  "1000348" -> "1000354" 
  "1000350" -> "1000348" 
  "1000351" -> "1000360" 
  "1000353" -> "1000351" 
  "1000354" -> "1000356" 
  "1000355" -> "1000353" 
  "1000356" -> "1000355" 
  "1000360" -> "1000364" 
  "1000364" -> "1000391" 
  "1000366" -> "1000378" 
  "1000367" -> "1000372" 
  "1000370" -> "1000366" 
  "1000371" -> "1000370" 
  "1000372" -> "1000371" 
  "1000377" -> "1000380" 
  "1000378" -> "1000377" 
  "1000380" -> "1000384" 
  "1000383" -> "1000387" 
  "1000384" -> "1000383" 
  "1000387" -> "1000391" 
  "1000389" -> "1000391" 
  "1000114" -> "1000133" 
}
