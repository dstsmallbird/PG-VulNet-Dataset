digraph tftp_connect {  
"1000125" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000127" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000130" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000131" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000136" [label = "(<operator>.logicalNot,!v4)" ]
"1000138" [label = "(RETURN,return 27;,return 27;)" ]
"1000140" [label = "(<operator>.assignment,v5 = v4)" ]
"1000143" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000145" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000146" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000148" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000149" [label = "(<operator>.indirection,*a1)" ]
"1000153" [label = "(<operator>.logicalNot,!v6)" ]
"1000156" [label = "(<operator>.assignment,v6 = 512)" ]
"1000160" [label = "(<operator>.assignment,result = 71)" ]
"1000164" [label = "(<operator>.lessThan,(unsigned int)(v6 - 8) < 0xFFB1)" ]
"1000165" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000166" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000167" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000174" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 328))" ]
"1000175" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000176" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000177" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000178" [label = "(<operator>.addition,v5 + 328)" ]
"1000182" [label = "(<operator>.assignment,v8 = Curl_ccalloc(1, v6 + 4))" ]
"1000184" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000186" [label = "(<operator>.addition,v6 + 4)" ]
"1000189" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v8)" ]
"1000190" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000191" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000192" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000193" [label = "(<operator>.addition,v5 + 328)" ]
"1000198" [label = "(<operator>.logicalNot,!v8)" ]
"1000200" [label = "(RETURN,return 27;,return 27;)" ]
"1000203" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000204" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000205" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000206" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000207" [label = "(<operator>.addition,v5 + 332)" ]
"1000211" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v6 + 4))" ]
"1000213" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000215" [label = "(<operator>.addition,v6 + 4)" ]
"1000218" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v9)" ]
"1000219" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000220" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000221" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000222" [label = "(<operator>.addition,v5 + 332)" ]
"1000227" [label = "(<operator>.logicalNot,!v9)" ]
"1000229" [label = "(RETURN,return 27;,return 27;)" ]
"1000231" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000234" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000235" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000236" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000237" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000238" [label = "(<operator>.addition,v5 + 16)" ]
"1000242" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = a1[105])" ]
"1000243" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000244" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000245" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000246" [label = "(<operator>.addition,v5 + 20)" ]
"1000249" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000252" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000253" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000254" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000255" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000258" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000259" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000260" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000261" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000262" [label = "(<operator>.addition,v5 + 8)" ]
"1000265" [label = "(<operator>.minus,-100)" ]
"1000267" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = v6)" ]
"1000268" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000269" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000270" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000271" [label = "(<operator>.addition,v5 + 320)" ]
"1000275" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v6)" ]
"1000276" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000277" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000278" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000279" [label = "(<operator>.addition,v5 + 324)" ]
"1000283" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000284" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000285" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000286" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000287" [label = "(<operator>.addition,v5 + 52)" ]
"1000290" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000291" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000292" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000293" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000294" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000298" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000301" [label = "(<operator>.equals,(a1[147] & 0x40) == 0)" ]
"1000302" [label = "(<operator>.and,a1[147] & 0x40)" ]
"1000303" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000310" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000311" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000312" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000313" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000314" [label = "(<operator>.addition,v5 + 20)" ]
"1000317" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000318" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000319" [label = "(<operator>.addition,v5 + 52)" ]
"1000322" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000323" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000324" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000325" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000326" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000331" [label = "(<operator>.assignment,v10 = *a1)" ]
"1000333" [label = "(<operator>.indirection,*a1)" ]
"1000335" [label = "(<operator>.assignment,v11 = _errno_location())" ]
"1000337" [label = "(_errno_location,_errno_location())" ]
"1000338" [label = "(<operator>.assignment,v12 = (const char *)Curl_strerror(*v11, v13, 128))" ]
"1000340" [label = "(<operator>.cast,(const char *)Curl_strerror(*v11, v13, 128))" ]
"1000341" [label = "(UNKNOWN,const char *,const char *)" ]
"1000342" [label = "(Curl_strerror,Curl_strerror(*v11, v13, 128))" ]
"1000343" [label = "(<operator>.indirection,*v11)" ]
"1000347" [label = "(Curl_failf,Curl_failf(v10, \"bind() failed; %s\", v12))" ]
"1000351" [label = "(RETURN,return 7;,return 7;)" ]
"1000353" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000354" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000357" [label = "(<operator>.or,a1[147] & 0xFFFFFFBF | 0x40)" ]
"1000358" [label = "(<operator>.and,a1[147] & 0xFFFFFFBF)" ]
"1000359" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000364" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000365" [label = "(<operator>.indirection,*a1)" ]
"1000367" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000368" [label = "(<operator>.indirection,*a2)" ]
"1000371" [label = "(<operator>.assignment,result = 0)" ]
"1000374" [label = "(RETURN,return result;,return result;)" ]
"1000111" [label = "(METHOD,tftp_connect)" ]
"1000376" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000125" -> "1000131" 
  "1000127" -> "1000125" 
  "1000130" -> "1000136" 
  "1000131" -> "1000130" 
  "1000136" -> "1000138" 
  "1000136" -> "1000140" 
  "1000138" -> "1000376" 
  "1000140" -> "1000147" 
  "1000143" -> "1000153" 
  "1000145" -> "1000143" 
  "1000146" -> "1000145" 
  "1000147" -> "1000149" 
  "1000148" -> "1000146" 
  "1000149" -> "1000148" 
  "1000153" -> "1000156" 
  "1000153" -> "1000160" 
  "1000156" -> "1000177" 
  "1000160" -> "1000166" 
  "1000164" -> "1000177" 
  "1000164" -> "1000374" 
  "1000165" -> "1000164" 
  "1000166" -> "1000167" 
  "1000167" -> "1000165" 
  "1000174" -> "1000206" 
  "1000174" -> "1000186" 
  "1000175" -> "1000174" 
  "1000176" -> "1000175" 
  "1000177" -> "1000178" 
  "1000178" -> "1000176" 
  "1000182" -> "1000192" 
  "1000184" -> "1000182" 
  "1000186" -> "1000184" 
  "1000189" -> "1000198" 
  "1000190" -> "1000189" 
  "1000191" -> "1000190" 
  "1000192" -> "1000193" 
  "1000193" -> "1000191" 
  "1000198" -> "1000206" 
  "1000198" -> "1000200" 
  "1000200" -> "1000376" 
  "1000203" -> "1000215" 
  "1000203" -> "1000231" 
  "1000204" -> "1000203" 
  "1000205" -> "1000204" 
  "1000206" -> "1000207" 
  "1000207" -> "1000205" 
  "1000211" -> "1000221" 
  "1000213" -> "1000211" 
  "1000215" -> "1000213" 
  "1000218" -> "1000227" 
  "1000219" -> "1000218" 
  "1000220" -> "1000219" 
  "1000221" -> "1000222" 
  "1000222" -> "1000220" 
  "1000227" -> "1000229" 
  "1000227" -> "1000231" 
  "1000229" -> "1000376" 
  "1000231" -> "1000237" 
  "1000234" -> "1000245" 
  "1000235" -> "1000234" 
  "1000236" -> "1000235" 
  "1000237" -> "1000238" 
  "1000238" -> "1000236" 
  "1000242" -> "1000255" 
  "1000243" -> "1000249" 
  "1000244" -> "1000243" 
  "1000245" -> "1000246" 
  "1000246" -> "1000244" 
  "1000249" -> "1000242" 
  "1000252" -> "1000261" 
  "1000253" -> "1000252" 
  "1000254" -> "1000253" 
  "1000255" -> "1000254" 
  "1000258" -> "1000270" 
  "1000259" -> "1000265" 
  "1000260" -> "1000259" 
  "1000261" -> "1000262" 
  "1000262" -> "1000260" 
  "1000265" -> "1000258" 
  "1000267" -> "1000278" 
  "1000268" -> "1000267" 
  "1000269" -> "1000268" 
  "1000270" -> "1000271" 
  "1000271" -> "1000269" 
  "1000275" -> "1000286" 
  "1000276" -> "1000275" 
  "1000277" -> "1000276" 
  "1000278" -> "1000279" 
  "1000279" -> "1000277" 
  "1000283" -> "1000298" 
  "1000284" -> "1000292" 
  "1000285" -> "1000284" 
  "1000286" -> "1000287" 
  "1000287" -> "1000285" 
  "1000290" -> "1000283" 
  "1000291" -> "1000290" 
  "1000292" -> "1000294" 
  "1000293" -> "1000291" 
  "1000294" -> "1000293" 
  "1000298" -> "1000303" 
  "1000301" -> "1000313" 
  "1000301" -> "1000365" 
  "1000302" -> "1000301" 
  "1000303" -> "1000302" 
  "1000310" -> "1000333" 
  "1000310" -> "1000354" 
  "1000311" -> "1000318" 
  "1000312" -> "1000311" 
  "1000313" -> "1000314" 
  "1000314" -> "1000312" 
  "1000317" -> "1000324" 
  "1000318" -> "1000319" 
  "1000319" -> "1000317" 
  "1000322" -> "1000310" 
  "1000323" -> "1000322" 
  "1000324" -> "1000326" 
  "1000325" -> "1000323" 
  "1000326" -> "1000325" 
  "1000331" -> "1000337" 
  "1000333" -> "1000331" 
  "1000335" -> "1000341" 
  "1000337" -> "1000335" 
  "1000338" -> "1000347" 
  "1000340" -> "1000338" 
  "1000341" -> "1000343" 
  "1000342" -> "1000340" 
  "1000343" -> "1000342" 
  "1000347" -> "1000351" 
  "1000351" -> "1000376" 
  "1000353" -> "1000365" 
  "1000354" -> "1000359" 
  "1000357" -> "1000353" 
  "1000358" -> "1000357" 
  "1000359" -> "1000358" 
  "1000364" -> "1000368" 
  "1000365" -> "1000364" 
  "1000367" -> "1000371" 
  "1000368" -> "1000367" 
  "1000371" -> "1000374" 
  "1000374" -> "1000376" 
  "1000111" -> "1000127" 
}
