digraph tftp_connect {  
"1000136" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000137" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000142" [label = "(<operator>.logicalNot,!v2)" ]
"1000144" [label = "(RETURN,return 27;,return 27;)" ]
"1000146" [label = "(<operator>.assignment,v3 = v2)" ]
"1000149" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000151" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000152" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000153" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000154" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000155" [label = "(<operator>.indirection,*a1)" ]
"1000161" [label = "(<operator>.assignment,result = 71)" ]
"1000165" [label = "(<operator>.greaterThan,(unsigned int)(v4 - 8) > 0xFFB0)" ]
"1000166" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000167" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000168" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000172" [label = "(RETURN,return result;,return result;)" ]
"1000174" [label = "(<operator>.assignment,v6 = 512)" ]
"1000178" [label = "(<operator>.greaterThan,v4 > 511)" ]
"1000181" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1568))" ]
"1000183" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000184" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000185" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000186" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000187" [label = "(<operator>.indirection,*a1)" ]
"1000190" [label = "(<operator>.assignment,v7 = v6 + 4)" ]
"1000192" [label = "(<operator>.addition,v6 + 4)" ]
"1000197" [label = "(<operator>.assignment,v7 = 516)" ]
"1000200" [label = "(<operator>.assignment,v4 = 512)" ]
"1000204" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 328))" ]
"1000205" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000206" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000207" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000208" [label = "(<operator>.addition,v3 + 328)" ]
"1000212" [label = "(<operator>.assignment,v14 = v7)" ]
"1000218" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 328) = v8)" ]
"1000219" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000220" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000221" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000222" [label = "(<operator>.addition,v3 + 328)" ]
"1000226" [label = "(<operator>.assignment,v9 = v8 == 0)" ]
"1000228" [label = "(<operator>.equals,v8 == 0)" ]
"1000231" [label = "(<operator>.assignment,v7 = v14)" ]
"1000236" [label = "(RETURN,return 27;,return 27;)" ]
"1000239" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000242" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 16) = a1)" ]
"1000243" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 16))" ]
"1000244" [label = "(<operator>.cast,(_DWORD *)(v3 + 16))" ]
"1000245" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000246" [label = "(<operator>.addition,v3 + 16)" ]
"1000250" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 20) = a1[103])" ]
"1000251" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000252" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000253" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000254" [label = "(<operator>.addition,v3 + 20)" ]
"1000257" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000260" [label = "(<operator>.assignment,*(_DWORD *)v3 = 0)" ]
"1000261" [label = "(<operator>.indirection,*(_DWORD *)v3)" ]
"1000262" [label = "(<operator>.cast,(_DWORD *)v3)" ]
"1000263" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000266" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 8) = -100)" ]
"1000267" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 8))" ]
"1000268" [label = "(<operator>.cast,(_DWORD *)(v3 + 8))" ]
"1000269" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000270" [label = "(<operator>.addition,v3 + 8)" ]
"1000273" [label = "(<operator>.minus,-100)" ]
"1000275" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 320) = 512)" ]
"1000276" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 320))" ]
"1000277" [label = "(<operator>.cast,(_DWORD *)(v3 + 320))" ]
"1000278" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000279" [label = "(<operator>.addition,v3 + 320)" ]
"1000283" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 324) = v4)" ]
"1000284" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 324))" ]
"1000285" [label = "(<operator>.cast,(_DWORD *)(v3 + 324))" ]
"1000286" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000287" [label = "(<operator>.addition,v3 + 324)" ]
"1000291" [label = "(<operator>.assignment,*(_WORD *)(v3 + 52) = *(_WORD *)(a1[18] + 4))" ]
"1000292" [label = "(<operator>.indirection,*(_WORD *)(v3 + 52))" ]
"1000293" [label = "(<operator>.cast,(_WORD *)(v3 + 52))" ]
"1000294" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000295" [label = "(<operator>.addition,v3 + 52)" ]
"1000298" [label = "(<operator>.indirection,*(_WORD *)(a1[18] + 4))" ]
"1000299" [label = "(<operator>.cast,(_WORD *)(a1[18] + 4))" ]
"1000300" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000301" [label = "(<operator>.addition,a1[18] + 4)" ]
"1000302" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000306" [label = "(tftp_set_timeouts,tftp_set_timeouts(v3))" ]
"1000309" [label = "(<operator>.equals,(*((_BYTE *)a1 + 583) & 2) == 0)" ]
"1000310" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000311" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000312" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000313" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000314" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000321" [label = "(bind,bind(*(_DWORD *)(v3 + 20), (const struct sockaddr *)(v3 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000322" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000323" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000324" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000325" [label = "(<operator>.addition,v3 + 20)" ]
"1000328" [label = "(<operator>.cast,(const struct sockaddr *)(v3 + 52))" ]
"1000329" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000330" [label = "(<operator>.addition,v3 + 52)" ]
"1000333" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000334" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000335" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000336" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000337" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000342" [label = "(<operator>.assignment,v11 = *a1)" ]
"1000344" [label = "(<operator>.indirection,*a1)" ]
"1000346" [label = "(<operator>.assignment,v12 = __errno_location())" ]
"1000348" [label = "(__errno_location,__errno_location())" ]
"1000349" [label = "(<operator>.assignment,v13 = Curl_strerror(*v12, buf, 128))" ]
"1000351" [label = "(Curl_strerror,Curl_strerror(*v12, buf, 128))" ]
"1000352" [label = "(<operator>.indirection,*v12)" ]
"1000356" [label = "(Curl_failf,Curl_failf(v11, \"bind() failed; %s\", v13))" ]
"1000360" [label = "(RETURN,return 7;,return 7;)" ]
"1000362" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000363" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000364" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000365" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000366" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000370" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000371" [label = "(<operator>.indirection,*a1)" ]
"1000373" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000374" [label = "(<operator>.indirection,*a2)" ]
"1000377" [label = "(<operator>.assignment,result = 0)" ]
"1000380" [label = "(RETURN,return result;,return result;)" ]
"1000115" [label = "(METHOD,tftp_connect)" ]
"1000382" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000136" -> "1000142" 
  "1000137" -> "1000136" 
  "1000142" -> "1000144" 
  "1000142" -> "1000146" 
  "1000144" -> "1000382" 
  "1000146" -> "1000153" 
  "1000149" -> "1000161" 
  "1000149" -> "1000197" 
  "1000151" -> "1000149" 
  "1000152" -> "1000151" 
  "1000153" -> "1000155" 
  "1000154" -> "1000152" 
  "1000155" -> "1000154" 
  "1000161" -> "1000167" 
  "1000165" -> "1000172" 
  "1000165" -> "1000174" 
  "1000166" -> "1000165" 
  "1000167" -> "1000168" 
  "1000168" -> "1000166" 
  "1000172" -> "1000382" 
  "1000174" -> "1000178" 
  "1000178" -> "1000185" 
  "1000178" -> "1000192" 
  "1000181" -> "1000192" 
  "1000183" -> "1000181" 
  "1000184" -> "1000183" 
  "1000185" -> "1000187" 
  "1000186" -> "1000184" 
  "1000187" -> "1000186" 
  "1000190" -> "1000207" 
  "1000192" -> "1000190" 
  "1000197" -> "1000200" 
  "1000200" -> "1000207" 
  "1000204" -> "1000212" 
  "1000204" -> "1000239" 
  "1000205" -> "1000204" 
  "1000206" -> "1000205" 
  "1000207" -> "1000208" 
  "1000208" -> "1000206" 
  "1000212" -> "1000221" 
  "1000218" -> "1000228" 
  "1000219" -> "1000218" 
  "1000220" -> "1000219" 
  "1000221" -> "1000222" 
  "1000222" -> "1000220" 
  "1000226" -> "1000231" 
  "1000228" -> "1000226" 
  "1000231" -> "1000236" 
  "1000231" -> "1000239" 
  "1000236" -> "1000382" 
  "1000239" -> "1000245" 
  "1000242" -> "1000253" 
  "1000243" -> "1000242" 
  "1000244" -> "1000243" 
  "1000245" -> "1000246" 
  "1000246" -> "1000244" 
  "1000250" -> "1000263" 
  "1000251" -> "1000257" 
  "1000252" -> "1000251" 
  "1000253" -> "1000254" 
  "1000254" -> "1000252" 
  "1000257" -> "1000250" 
  "1000260" -> "1000269" 
  "1000261" -> "1000260" 
  "1000262" -> "1000261" 
  "1000263" -> "1000262" 
  "1000266" -> "1000278" 
  "1000267" -> "1000273" 
  "1000268" -> "1000267" 
  "1000269" -> "1000270" 
  "1000270" -> "1000268" 
  "1000273" -> "1000266" 
  "1000275" -> "1000286" 
  "1000276" -> "1000275" 
  "1000277" -> "1000276" 
  "1000278" -> "1000279" 
  "1000279" -> "1000277" 
  "1000283" -> "1000294" 
  "1000284" -> "1000283" 
  "1000285" -> "1000284" 
  "1000286" -> "1000287" 
  "1000287" -> "1000285" 
  "1000291" -> "1000306" 
  "1000292" -> "1000300" 
  "1000293" -> "1000292" 
  "1000294" -> "1000295" 
  "1000295" -> "1000293" 
  "1000298" -> "1000291" 
  "1000299" -> "1000298" 
  "1000300" -> "1000302" 
  "1000301" -> "1000299" 
  "1000302" -> "1000301" 
  "1000306" -> "1000314" 
  "1000309" -> "1000324" 
  "1000309" -> "1000371" 
  "1000310" -> "1000309" 
  "1000311" -> "1000310" 
  "1000312" -> "1000311" 
  "1000313" -> "1000312" 
  "1000314" -> "1000313" 
  "1000321" -> "1000366" 
  "1000321" -> "1000344" 
  "1000322" -> "1000329" 
  "1000323" -> "1000322" 
  "1000324" -> "1000325" 
  "1000325" -> "1000323" 
  "1000328" -> "1000335" 
  "1000329" -> "1000330" 
  "1000330" -> "1000328" 
  "1000333" -> "1000321" 
  "1000334" -> "1000333" 
  "1000335" -> "1000337" 
  "1000336" -> "1000334" 
  "1000337" -> "1000336" 
  "1000342" -> "1000348" 
  "1000344" -> "1000342" 
  "1000346" -> "1000352" 
  "1000348" -> "1000346" 
  "1000349" -> "1000356" 
  "1000351" -> "1000349" 
  "1000352" -> "1000351" 
  "1000356" -> "1000360" 
  "1000360" -> "1000382" 
  "1000362" -> "1000371" 
  "1000363" -> "1000362" 
  "1000364" -> "1000363" 
  "1000365" -> "1000364" 
  "1000366" -> "1000365" 
  "1000370" -> "1000374" 
  "1000371" -> "1000370" 
  "1000373" -> "1000377" 
  "1000374" -> "1000373" 
  "1000377" -> "1000380" 
  "1000380" -> "1000382" 
  "1000115" -> "1000137" 
}
