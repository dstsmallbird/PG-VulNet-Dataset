digraph tftp_connect {  
"1000135" [label = "(<operator>.assignment,v16 = __readgsdword(0x14u))" ]
"1000137" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000139" [label = "(<operator>.assignment,v2 = Curl_ccalloc(1, 336))" ]
"1000141" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000144" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000145" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000150" [label = "(<operator>.logicalNot,!v2)" ]
"1000152" [label = "(RETURN,return 27;,return 27;)" ]
"1000154" [label = "(<operator>.assignment,v3 = v2)" ]
"1000157" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000159" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000160" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000161" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000162" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000163" [label = "(<operator>.indirection,*a1)" ]
"1000169" [label = "(<operator>.assignment,result = 71)" ]
"1000173" [label = "(<operator>.greaterThan,(unsigned int)(v4 - 8) > 0xFFB0)" ]
"1000174" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000175" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000176" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000180" [label = "(RETURN,return result;,return result;)" ]
"1000184" [label = "(<operator>.assignment,v4 = 512)" ]
"1000188" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 328))" ]
"1000189" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000190" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000191" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000192" [label = "(<operator>.addition,v3 + 328)" ]
"1000196" [label = "(<operator>.assignment,v13 = v4)" ]
"1000199" [label = "(<operator>.assignment,v8 = Curl_ccalloc(1, v4 + 4))" ]
"1000201" [label = "(Curl_ccalloc,Curl_ccalloc(1, v4 + 4))" ]
"1000203" [label = "(<operator>.addition,v4 + 4)" ]
"1000206" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 328) = v8)" ]
"1000207" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 328))" ]
"1000208" [label = "(<operator>.cast,(_DWORD *)(v3 + 328))" ]
"1000209" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000210" [label = "(<operator>.addition,v3 + 328)" ]
"1000214" [label = "(<operator>.assignment,v4 = v13)" ]
"1000218" [label = "(<operator>.logicalNot,!v8)" ]
"1000220" [label = "(RETURN,return 27;,return 27;)" ]
"1000223" [label = "(<operator>.logicalNot,!*(_DWORD *)(v3 + 332))" ]
"1000224" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 332))" ]
"1000225" [label = "(<operator>.cast,(_DWORD *)(v3 + 332))" ]
"1000226" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000227" [label = "(<operator>.addition,v3 + 332)" ]
"1000231" [label = "(<operator>.assignment,v14 = v4)" ]
"1000234" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1, v4 + 4))" ]
"1000236" [label = "(Curl_ccalloc,Curl_ccalloc(1, v4 + 4))" ]
"1000238" [label = "(<operator>.addition,v4 + 4)" ]
"1000241" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 332) = v11)" ]
"1000242" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 332))" ]
"1000243" [label = "(<operator>.cast,(_DWORD *)(v3 + 332))" ]
"1000244" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000245" [label = "(<operator>.addition,v3 + 332)" ]
"1000249" [label = "(<operator>.assignment,v4 = v14)" ]
"1000253" [label = "(<operator>.logicalNot,!v11)" ]
"1000255" [label = "(RETURN,return 27;,return 27;)" ]
"1000257" [label = "(<operator>.assignment,v12 = v4)" ]
"1000260" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000263" [label = "(<operator>.assignment,v5 = a1[103])" ]
"1000265" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000268" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 16) = a1)" ]
"1000269" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 16))" ]
"1000270" [label = "(<operator>.cast,(_DWORD *)(v3 + 16))" ]
"1000271" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000272" [label = "(<operator>.addition,v3 + 16)" ]
"1000276" [label = "(<operator>.assignment,*(_DWORD *)v3 = 0)" ]
"1000277" [label = "(<operator>.indirection,*(_DWORD *)v3)" ]
"1000278" [label = "(<operator>.cast,(_DWORD *)v3)" ]
"1000279" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000282" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 8) = -100)" ]
"1000283" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 8))" ]
"1000284" [label = "(<operator>.cast,(_DWORD *)(v3 + 8))" ]
"1000285" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000286" [label = "(<operator>.addition,v3 + 8)" ]
"1000289" [label = "(<operator>.minus,-100)" ]
"1000291" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 20) = v5)" ]
"1000292" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000293" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000294" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000295" [label = "(<operator>.addition,v3 + 20)" ]
"1000299" [label = "(<operator>.assignment,v6 = a1[18])" ]
"1000301" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000304" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 320) = v12)" ]
"1000305" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 320))" ]
"1000306" [label = "(<operator>.cast,(_DWORD *)(v3 + 320))" ]
"1000307" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000308" [label = "(<operator>.addition,v3 + 320)" ]
"1000312" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 324) = v12)" ]
"1000313" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 324))" ]
"1000314" [label = "(<operator>.cast,(_DWORD *)(v3 + 324))" ]
"1000315" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000316" [label = "(<operator>.addition,v3 + 324)" ]
"1000320" [label = "(<operator>.assignment,*(_WORD *)(v3 + 52) = *(_DWORD *)(v6 + 4))" ]
"1000321" [label = "(<operator>.indirection,*(_WORD *)(v3 + 52))" ]
"1000322" [label = "(<operator>.cast,(_WORD *)(v3 + 52))" ]
"1000323" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000324" [label = "(<operator>.addition,v3 + 52)" ]
"1000327" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 4))" ]
"1000328" [label = "(<operator>.cast,(_DWORD *)(v6 + 4))" ]
"1000329" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000330" [label = "(<operator>.addition,v6 + 4)" ]
"1000333" [label = "(tftp_set_timeouts,tftp_set_timeouts())" ]
"1000335" [label = "(<operator>.notEquals,(*((_BYTE *)a1 + 583) & 2) != 0)" ]
"1000336" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000337" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000338" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000339" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000340" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000347" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000348" [label = "(<operator>.indirection,*a1)" ]
"1000350" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000351" [label = "(<operator>.indirection,*a2)" ]
"1000354" [label = "(RETURN,return 0;,return 0;)" ]
"1000357" [label = "(<operator>.logicalNot,!bind(*(_DWORD *)(v3 + 20), (const struct sockaddr *)(v3 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000358" [label = "(bind,bind(*(_DWORD *)(v3 + 20), (const struct sockaddr *)(v3 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000359" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 20))" ]
"1000360" [label = "(<operator>.cast,(_DWORD *)(v3 + 20))" ]
"1000361" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000362" [label = "(<operator>.addition,v3 + 20)" ]
"1000365" [label = "(<operator>.cast,(const struct sockaddr *)(v3 + 52))" ]
"1000366" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000367" [label = "(<operator>.addition,v3 + 52)" ]
"1000370" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000371" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000372" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000373" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000374" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000379" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000380" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000381" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000382" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000383" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000388" [label = "(<operator>.assignment,v9 = __errno_location())" ]
"1000390" [label = "(__errno_location,__errno_location())" ]
"1000391" [label = "(<operator>.assignment,v10 = Curl_strerror(*v9, buf, 128))" ]
"1000393" [label = "(Curl_strerror,Curl_strerror(*v9, buf, 128))" ]
"1000394" [label = "(<operator>.indirection,*v9)" ]
"1000398" [label = "(Curl_failf,Curl_failf(*a1, \"bind() failed; %s\", v10))" ]
"1000399" [label = "(<operator>.indirection,*a1)" ]
"1000403" [label = "(RETURN,return 7;,return 7;)" ]
"1000116" [label = "(METHOD,tftp_connect)" ]
"1000405" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000135" -> "1000141" 
  "1000137" -> "1000135" 
  "1000139" -> "1000145" 
  "1000141" -> "1000139" 
  "1000144" -> "1000150" 
  "1000145" -> "1000144" 
  "1000150" -> "1000152" 
  "1000150" -> "1000154" 
  "1000152" -> "1000405" 
  "1000154" -> "1000161" 
  "1000157" -> "1000169" 
  "1000157" -> "1000184" 
  "1000159" -> "1000157" 
  "1000160" -> "1000159" 
  "1000161" -> "1000163" 
  "1000162" -> "1000160" 
  "1000163" -> "1000162" 
  "1000169" -> "1000175" 
  "1000173" -> "1000191" 
  "1000173" -> "1000180" 
  "1000174" -> "1000173" 
  "1000175" -> "1000176" 
  "1000176" -> "1000174" 
  "1000180" -> "1000405" 
  "1000184" -> "1000191" 
  "1000188" -> "1000226" 
  "1000188" -> "1000196" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000191" -> "1000192" 
  "1000192" -> "1000190" 
  "1000196" -> "1000203" 
  "1000199" -> "1000209" 
  "1000201" -> "1000199" 
  "1000203" -> "1000201" 
  "1000206" -> "1000214" 
  "1000207" -> "1000206" 
  "1000208" -> "1000207" 
  "1000209" -> "1000210" 
  "1000210" -> "1000208" 
  "1000214" -> "1000218" 
  "1000218" -> "1000226" 
  "1000218" -> "1000220" 
  "1000220" -> "1000405" 
  "1000223" -> "1000231" 
  "1000223" -> "1000257" 
  "1000224" -> "1000223" 
  "1000225" -> "1000224" 
  "1000226" -> "1000227" 
  "1000227" -> "1000225" 
  "1000231" -> "1000238" 
  "1000234" -> "1000244" 
  "1000236" -> "1000234" 
  "1000238" -> "1000236" 
  "1000241" -> "1000249" 
  "1000242" -> "1000241" 
  "1000243" -> "1000242" 
  "1000244" -> "1000245" 
  "1000245" -> "1000243" 
  "1000249" -> "1000253" 
  "1000253" -> "1000255" 
  "1000253" -> "1000257" 
  "1000255" -> "1000405" 
  "1000257" -> "1000260" 
  "1000260" -> "1000265" 
  "1000263" -> "1000271" 
  "1000265" -> "1000263" 
  "1000268" -> "1000279" 
  "1000269" -> "1000268" 
  "1000270" -> "1000269" 
  "1000271" -> "1000272" 
  "1000272" -> "1000270" 
  "1000276" -> "1000285" 
  "1000277" -> "1000276" 
  "1000278" -> "1000277" 
  "1000279" -> "1000278" 
  "1000282" -> "1000294" 
  "1000283" -> "1000289" 
  "1000284" -> "1000283" 
  "1000285" -> "1000286" 
  "1000286" -> "1000284" 
  "1000289" -> "1000282" 
  "1000291" -> "1000301" 
  "1000292" -> "1000291" 
  "1000293" -> "1000292" 
  "1000294" -> "1000295" 
  "1000295" -> "1000293" 
  "1000299" -> "1000307" 
  "1000301" -> "1000299" 
  "1000304" -> "1000315" 
  "1000305" -> "1000304" 
  "1000306" -> "1000305" 
  "1000307" -> "1000308" 
  "1000308" -> "1000306" 
  "1000312" -> "1000323" 
  "1000313" -> "1000312" 
  "1000314" -> "1000313" 
  "1000315" -> "1000316" 
  "1000316" -> "1000314" 
  "1000320" -> "1000333" 
  "1000321" -> "1000329" 
  "1000322" -> "1000321" 
  "1000323" -> "1000324" 
  "1000324" -> "1000322" 
  "1000327" -> "1000320" 
  "1000328" -> "1000327" 
  "1000329" -> "1000330" 
  "1000330" -> "1000328" 
  "1000333" -> "1000340" 
  "1000335" -> "1000361" 
  "1000335" -> "1000348" 
  "1000336" -> "1000335" 
  "1000337" -> "1000336" 
  "1000338" -> "1000337" 
  "1000339" -> "1000338" 
  "1000340" -> "1000339" 
  "1000347" -> "1000351" 
  "1000348" -> "1000347" 
  "1000350" -> "1000354" 
  "1000351" -> "1000350" 
  "1000354" -> "1000405" 
  "1000357" -> "1000383" 
  "1000357" -> "1000390" 
  "1000358" -> "1000357" 
  "1000359" -> "1000366" 
  "1000360" -> "1000359" 
  "1000361" -> "1000362" 
  "1000362" -> "1000360" 
  "1000365" -> "1000372" 
  "1000366" -> "1000367" 
  "1000367" -> "1000365" 
  "1000370" -> "1000358" 
  "1000371" -> "1000370" 
  "1000372" -> "1000374" 
  "1000373" -> "1000371" 
  "1000374" -> "1000373" 
  "1000379" -> "1000348" 
  "1000380" -> "1000379" 
  "1000381" -> "1000380" 
  "1000382" -> "1000381" 
  "1000383" -> "1000382" 
  "1000388" -> "1000394" 
  "1000390" -> "1000388" 
  "1000391" -> "1000399" 
  "1000393" -> "1000391" 
  "1000394" -> "1000393" 
  "1000398" -> "1000403" 
  "1000399" -> "1000398" 
  "1000403" -> "1000405" 
  "1000116" -> "1000137" 
}
