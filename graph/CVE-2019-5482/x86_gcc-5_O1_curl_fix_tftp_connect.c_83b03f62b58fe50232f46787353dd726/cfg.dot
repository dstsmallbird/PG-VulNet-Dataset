digraph tftp_connect {  
"1000127" [label = "(<operator>.assignment,v12 = __readgsdword(0x14u))" ]
"1000129" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000131" [label = "(<operator>.assignment,v2 = Curl_ccalloc(1, 336))" ]
"1000133" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000136" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000137" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000141" [label = "(<operator>.assignment,result = 27)" ]
"1000147" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000159" [label = "(<operator>.assignment,result = 71)" ]
"1000163" [label = "(<operator>.greaterThan,(unsigned int)(v4 - 8) > 0xFFB0)" ]
"1000164" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000165" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000166" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000170" [label = "(RETURN,return result;,return result;)" ]
"1000172" [label = "(<operator>.assignment,v5 = 512)" ]
"1000176" [label = "(<operator>.greaterThan,v4 > 511)" ]
"1000179" [label = "(<operator>.assignment,v5 = *(_DWORD *)(*a1 + 1568))" ]
"1000181" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000182" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000183" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000184" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000185" [label = "(<operator>.indirection,*a1)" ]
"1000188" [label = "(<operator>.assignment,v10 = v5)" ]
"1000193" [label = "(<operator>.assignment,v4 = 512)" ]
"1000196" [label = "(<operator>.assignment,v10 = 512)" ]
"1000200" [label = "(<operator>.logicalOr,*(_DWORD *)(v2 + 328) || (v6 = Curl_ccalloc(1, v10 + 4), *(_DWORD *)(v2 + 328) = v6, result = 27, v6))" ]
"1000201" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000202" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000203" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000204" [label = "(<operator>.addition,v2 + 328)" ]
"1000208" [label = "(<operator>.assignment,v6 = Curl_ccalloc(1, v10 + 4))" ]
"1000210" [label = "(Curl_ccalloc,Curl_ccalloc(1, v10 + 4))" ]
"1000212" [label = "(<operator>.addition,v10 + 4)" ]
"1000216" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 328) = v6)" ]
"1000217" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000218" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000219" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000220" [label = "(<operator>.addition,v2 + 328)" ]
"1000225" [label = "(<operator>.assignment,result = 27)" ]
"1000231" [label = "(<operator>.logicalOr,*(_DWORD *)(v2 + 332) || (v7 = Curl_ccalloc(1, v10 + 4), *(_DWORD *)(v2 + 332) = v7, result = 27, v7))" ]
"1000232" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 332))" ]
"1000233" [label = "(<operator>.cast,(_DWORD *)(v2 + 332))" ]
"1000234" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000235" [label = "(<operator>.addition,v2 + 332)" ]
"1000239" [label = "(<operator>.assignment,v7 = Curl_ccalloc(1, v10 + 4))" ]
"1000241" [label = "(Curl_ccalloc,Curl_ccalloc(1, v10 + 4))" ]
"1000243" [label = "(<operator>.addition,v10 + 4)" ]
"1000247" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 332) = v7)" ]
"1000248" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 332))" ]
"1000249" [label = "(<operator>.cast,(_DWORD *)(v2 + 332))" ]
"1000250" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000251" [label = "(<operator>.addition,v2 + 332)" ]
"1000256" [label = "(<operator>.assignment,result = 27)" ]
"1000261" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000264" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 16) = a1)" ]
"1000265" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 16))" ]
"1000266" [label = "(<operator>.cast,(_DWORD *)(v2 + 16))" ]
"1000267" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000268" [label = "(<operator>.addition,v2 + 16)" ]
"1000272" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 20) = a1[103])" ]
"1000273" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 20))" ]
"1000274" [label = "(<operator>.cast,(_DWORD *)(v2 + 20))" ]
"1000275" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000276" [label = "(<operator>.addition,v2 + 20)" ]
"1000279" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000282" [label = "(<operator>.assignment,*(_DWORD *)v2 = 0)" ]
"1000283" [label = "(<operator>.indirection,*(_DWORD *)v2)" ]
"1000284" [label = "(<operator>.cast,(_DWORD *)v2)" ]
"1000285" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000288" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 8) = -100)" ]
"1000289" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 8))" ]
"1000290" [label = "(<operator>.cast,(_DWORD *)(v2 + 8))" ]
"1000291" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000292" [label = "(<operator>.addition,v2 + 8)" ]
"1000295" [label = "(<operator>.minus,-100)" ]
"1000297" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 320) = 512)" ]
"1000298" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 320))" ]
"1000299" [label = "(<operator>.cast,(_DWORD *)(v2 + 320))" ]
"1000300" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000301" [label = "(<operator>.addition,v2 + 320)" ]
"1000305" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 324) = v4)" ]
"1000306" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 324))" ]
"1000307" [label = "(<operator>.cast,(_DWORD *)(v2 + 324))" ]
"1000308" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000309" [label = "(<operator>.addition,v2 + 324)" ]
"1000313" [label = "(<operator>.assignment,*(_WORD *)(v2 + 52) = *(_DWORD *)(a1[18] + 4))" ]
"1000314" [label = "(<operator>.indirection,*(_WORD *)(v2 + 52))" ]
"1000315" [label = "(<operator>.cast,(_WORD *)(v2 + 52))" ]
"1000316" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000317" [label = "(<operator>.addition,v2 + 52)" ]
"1000320" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 4))" ]
"1000321" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 4))" ]
"1000322" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000323" [label = "(<operator>.addition,a1[18] + 4)" ]
"1000324" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000328" [label = "(tftp_set_timeouts,tftp_set_timeouts())" ]
"1000330" [label = "(<operator>.equals,(*((_BYTE *)a1 + 583) & 2) == 0)" ]
"1000331" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000332" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000333" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000334" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000335" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000342" [label = "(bind,bind(*(_DWORD *)(v2 + 20), (const struct sockaddr *)(v2 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000343" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 20))" ]
"1000344" [label = "(<operator>.cast,(_DWORD *)(v2 + 20))" ]
"1000345" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000346" [label = "(<operator>.addition,v2 + 20)" ]
"1000349" [label = "(<operator>.cast,(const struct sockaddr *)(v2 + 52))" ]
"1000350" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000351" [label = "(<operator>.addition,v2 + 52)" ]
"1000354" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000355" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000356" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000357" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000358" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000363" [label = "(<operator>.assignment,v8 = __errno_location())" ]
"1000365" [label = "(__errno_location,__errno_location())" ]
"1000366" [label = "(<operator>.assignment,v9 = Curl_strerror(*v8, buf, 128))" ]
"1000368" [label = "(Curl_strerror,Curl_strerror(*v8, buf, 128))" ]
"1000369" [label = "(<operator>.indirection,*v8)" ]
"1000373" [label = "(Curl_failf,Curl_failf(*a1, \"bind() failed; %s\", v9))" ]
"1000374" [label = "(<operator>.indirection,*a1)" ]
"1000378" [label = "(RETURN,return 7;,return 7;)" ]
"1000380" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000381" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000382" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000383" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000384" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000388" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000389" [label = "(<operator>.indirection,*a1)" ]
"1000391" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000392" [label = "(<operator>.indirection,*a2)" ]
"1000395" [label = "(<operator>.assignment,result = 0)" ]
"1000398" [label = "(RETURN,return result;,return result;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000400" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000127" -> "1000133" 
  "1000129" -> "1000127" 
  "1000131" -> "1000137" 
  "1000133" -> "1000131" 
  "1000136" -> "1000141" 
  "1000137" -> "1000136" 
  "1000141" -> "1000151" 
  "1000141" -> "1000398" 
  "1000147" -> "1000159" 
  "1000147" -> "1000193" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000159" -> "1000165" 
  "1000163" -> "1000170" 
  "1000163" -> "1000172" 
  "1000164" -> "1000163" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000170" -> "1000400" 
  "1000172" -> "1000176" 
  "1000176" -> "1000183" 
  "1000176" -> "1000188" 
  "1000179" -> "1000188" 
  "1000181" -> "1000179" 
  "1000182" -> "1000181" 
  "1000183" -> "1000185" 
  "1000184" -> "1000182" 
  "1000185" -> "1000184" 
  "1000188" -> "1000203" 
  "1000193" -> "1000196" 
  "1000196" -> "1000203" 
  "1000200" -> "1000234" 
  "1000200" -> "1000398" 
  "1000201" -> "1000200" 
  "1000201" -> "1000212" 
  "1000202" -> "1000201" 
  "1000203" -> "1000204" 
  "1000204" -> "1000202" 
  "1000208" -> "1000219" 
  "1000210" -> "1000208" 
  "1000212" -> "1000210" 
  "1000216" -> "1000225" 
  "1000217" -> "1000216" 
  "1000218" -> "1000217" 
  "1000219" -> "1000220" 
  "1000220" -> "1000218" 
  "1000225" -> "1000200" 
  "1000231" -> "1000261" 
  "1000231" -> "1000398" 
  "1000232" -> "1000231" 
  "1000232" -> "1000243" 
  "1000233" -> "1000232" 
  "1000234" -> "1000235" 
  "1000235" -> "1000233" 
  "1000239" -> "1000250" 
  "1000241" -> "1000239" 
  "1000243" -> "1000241" 
  "1000247" -> "1000256" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000250" -> "1000251" 
  "1000251" -> "1000249" 
  "1000256" -> "1000231" 
  "1000261" -> "1000267" 
  "1000264" -> "1000275" 
  "1000265" -> "1000264" 
  "1000266" -> "1000265" 
  "1000267" -> "1000268" 
  "1000268" -> "1000266" 
  "1000272" -> "1000285" 
  "1000273" -> "1000279" 
  "1000274" -> "1000273" 
  "1000275" -> "1000276" 
  "1000276" -> "1000274" 
  "1000279" -> "1000272" 
  "1000282" -> "1000291" 
  "1000283" -> "1000282" 
  "1000284" -> "1000283" 
  "1000285" -> "1000284" 
  "1000288" -> "1000300" 
  "1000289" -> "1000295" 
  "1000290" -> "1000289" 
  "1000291" -> "1000292" 
  "1000292" -> "1000290" 
  "1000295" -> "1000288" 
  "1000297" -> "1000308" 
  "1000298" -> "1000297" 
  "1000299" -> "1000298" 
  "1000300" -> "1000301" 
  "1000301" -> "1000299" 
  "1000305" -> "1000316" 
  "1000306" -> "1000305" 
  "1000307" -> "1000306" 
  "1000308" -> "1000309" 
  "1000309" -> "1000307" 
  "1000313" -> "1000328" 
  "1000314" -> "1000322" 
  "1000315" -> "1000314" 
  "1000316" -> "1000317" 
  "1000317" -> "1000315" 
  "1000320" -> "1000313" 
  "1000321" -> "1000320" 
  "1000322" -> "1000324" 
  "1000323" -> "1000321" 
  "1000324" -> "1000323" 
  "1000328" -> "1000335" 
  "1000330" -> "1000345" 
  "1000330" -> "1000389" 
  "1000331" -> "1000330" 
  "1000332" -> "1000331" 
  "1000333" -> "1000332" 
  "1000334" -> "1000333" 
  "1000335" -> "1000334" 
  "1000342" -> "1000384" 
  "1000342" -> "1000365" 
  "1000343" -> "1000350" 
  "1000344" -> "1000343" 
  "1000345" -> "1000346" 
  "1000346" -> "1000344" 
  "1000349" -> "1000356" 
  "1000350" -> "1000351" 
  "1000351" -> "1000349" 
  "1000354" -> "1000342" 
  "1000355" -> "1000354" 
  "1000356" -> "1000358" 
  "1000357" -> "1000355" 
  "1000358" -> "1000357" 
  "1000363" -> "1000369" 
  "1000365" -> "1000363" 
  "1000366" -> "1000374" 
  "1000368" -> "1000366" 
  "1000369" -> "1000368" 
  "1000373" -> "1000378" 
  "1000374" -> "1000373" 
  "1000378" -> "1000400" 
  "1000380" -> "1000389" 
  "1000381" -> "1000380" 
  "1000382" -> "1000381" 
  "1000383" -> "1000382" 
  "1000384" -> "1000383" 
  "1000388" -> "1000392" 
  "1000389" -> "1000388" 
  "1000391" -> "1000395" 
  "1000392" -> "1000391" 
  "1000395" -> "1000398" 
  "1000398" -> "1000400" 
  "1000112" -> "1000129" 
}
