digraph tftp_connect {  
"1000127" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000129" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000132" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000133" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000138" [label = "(<operator>.logicalNot,!v4)" ]
"1000140" [label = "(RETURN,return 27;,return 27;)" ]
"1000142" [label = "(<operator>.assignment,v5 = *(_DWORD *)(*a1 + 1576))" ]
"1000144" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000145" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000146" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000147" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000148" [label = "(<operator>.indirection,*a1)" ]
"1000151" [label = "(<operator>.assignment,v6 = v4)" ]
"1000157" [label = "(<operator>.assignment,result = 71)" ]
"1000161" [label = "(<operator>.greaterThan,(unsigned int)(v5 - 8) > 0xFFB0)" ]
"1000162" [label = "(<operator>.cast,(unsigned int)(v5 - 8))" ]
"1000163" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000164" [label = "(<operator>.subtraction,v5 - 8)" ]
"1000168" [label = "(RETURN,return result;,return result;)" ]
"1000172" [label = "(<operator>.assignment,v5 = 512)" ]
"1000176" [label = "(<operator>.logicalNot,!*(_DWORD *)(v6 + 328))" ]
"1000177" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000178" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000179" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000180" [label = "(<operator>.addition,v6 + 328)" ]
"1000184" [label = "(<operator>.assignment,v8 = Curl_ccalloc(1, v5 + 4))" ]
"1000186" [label = "(Curl_ccalloc,Curl_ccalloc(1, v5 + 4))" ]
"1000188" [label = "(<operator>.addition,v5 + 4)" ]
"1000191" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v8)" ]
"1000192" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000193" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000194" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000195" [label = "(<operator>.addition,v6 + 328)" ]
"1000200" [label = "(<operator>.logicalNot,!v8)" ]
"1000202" [label = "(RETURN,return 27;,return 27;)" ]
"1000205" [label = "(<operator>.logicalOr,*(_DWORD *)(v6 + 332)\n    || (v9 = Curl_ccalloc(1, v5 + 4), *(_DWORD *)(v6 + 332) = v9, v10 = v9 == 0, result = 27, !v10))" ]
"1000206" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000207" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000208" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000209" [label = "(<operator>.addition,v6 + 332)" ]
"1000213" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v5 + 4))" ]
"1000215" [label = "(Curl_ccalloc,Curl_ccalloc(1, v5 + 4))" ]
"1000217" [label = "(<operator>.addition,v5 + 4)" ]
"1000221" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 332) = v9)" ]
"1000222" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000223" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000224" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000225" [label = "(<operator>.addition,v6 + 332)" ]
"1000230" [label = "(<operator>.assignment,v10 = v9 == 0)" ]
"1000232" [label = "(<operator>.equals,v9 == 0)" ]
"1000236" [label = "(<operator>.assignment,result = 27)" ]
"1000239" [label = "(<operator>.logicalNot,!v10)" ]
"1000242" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000245" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000246" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000247" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000248" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000249" [label = "(<operator>.addition,v6 + 16)" ]
"1000253" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = a1[105])" ]
"1000254" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000255" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000256" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000257" [label = "(<operator>.addition,v6 + 20)" ]
"1000260" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000263" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000264" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000265" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000266" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000267" [label = "(<operator>.addition,v6 + 8)" ]
"1000270" [label = "(<operator>.minus,-100)" ]
"1000272" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = v5)" ]
"1000273" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000274" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000275" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000276" [label = "(<operator>.addition,v6 + 320)" ]
"1000280" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v5)" ]
"1000281" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000282" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000283" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000284" [label = "(<operator>.addition,v6 + 324)" ]
"1000288" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000289" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000290" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000291" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000294" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000295" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000296" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000297" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000298" [label = "(<operator>.addition,v6 + 52)" ]
"1000301" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000302" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000303" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000304" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000305" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000309" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000312" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 2) == 0)" ]
"1000313" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000314" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000315" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000316" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000317" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000324" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000325" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000326" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000327" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000328" [label = "(<operator>.addition,v6 + 20)" ]
"1000331" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000332" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000333" [label = "(<operator>.addition,v6 + 52)" ]
"1000336" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000337" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000338" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000339" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000340" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000345" [label = "(<operator>.assignment,v11 = *a1)" ]
"1000347" [label = "(<operator>.indirection,*a1)" ]
"1000349" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000351" [label = "(_errno_location,_errno_location())" ]
"1000352" [label = "(<operator>.assignment,v13 = (const char *)Curl_strerror(*v12, v14, 128))" ]
"1000354" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v14, 128))" ]
"1000355" [label = "(UNKNOWN,const char *,const char *)" ]
"1000356" [label = "(Curl_strerror,Curl_strerror(*v12, v14, 128))" ]
"1000357" [label = "(<operator>.indirection,*v12)" ]
"1000361" [label = "(Curl_failf,Curl_failf(v11, \"bind() failed; %s\", v13))" ]
"1000365" [label = "(RETURN,return 7;,return 7;)" ]
"1000367" [label = "(<operators>.assignmentOr,a1[147] |= 0x2000000u)" ]
"1000368" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000372" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000373" [label = "(<operator>.indirection,*a1)" ]
"1000375" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000376" [label = "(<operator>.indirection,*a2)" ]
"1000379" [label = "(<operator>.assignment,result = 0)" ]
"1000382" [label = "(RETURN,return result;,return result;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000384" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000127" -> "1000133" 
  "1000129" -> "1000127" 
  "1000132" -> "1000138" 
  "1000133" -> "1000132" 
  "1000138" -> "1000140" 
  "1000138" -> "1000146" 
  "1000140" -> "1000384" 
  "1000142" -> "1000151" 
  "1000144" -> "1000142" 
  "1000145" -> "1000144" 
  "1000146" -> "1000148" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000151" -> "1000157" 
  "1000151" -> "1000172" 
  "1000157" -> "1000163" 
  "1000161" -> "1000179" 
  "1000161" -> "1000168" 
  "1000162" -> "1000161" 
  "1000163" -> "1000164" 
  "1000164" -> "1000162" 
  "1000168" -> "1000384" 
  "1000172" -> "1000179" 
  "1000176" -> "1000208" 
  "1000176" -> "1000188" 
  "1000177" -> "1000176" 
  "1000178" -> "1000177" 
  "1000179" -> "1000180" 
  "1000180" -> "1000178" 
  "1000184" -> "1000194" 
  "1000186" -> "1000184" 
  "1000188" -> "1000186" 
  "1000191" -> "1000200" 
  "1000192" -> "1000191" 
  "1000193" -> "1000192" 
  "1000194" -> "1000195" 
  "1000195" -> "1000193" 
  "1000200" -> "1000208" 
  "1000200" -> "1000202" 
  "1000202" -> "1000384" 
  "1000205" -> "1000242" 
  "1000205" -> "1000382" 
  "1000206" -> "1000205" 
  "1000206" -> "1000217" 
  "1000207" -> "1000206" 
  "1000208" -> "1000209" 
  "1000209" -> "1000207" 
  "1000213" -> "1000224" 
  "1000215" -> "1000213" 
  "1000217" -> "1000215" 
  "1000221" -> "1000232" 
  "1000222" -> "1000221" 
  "1000223" -> "1000222" 
  "1000224" -> "1000225" 
  "1000225" -> "1000223" 
  "1000230" -> "1000236" 
  "1000232" -> "1000230" 
  "1000236" -> "1000239" 
  "1000239" -> "1000205" 
  "1000242" -> "1000248" 
  "1000245" -> "1000256" 
  "1000246" -> "1000245" 
  "1000247" -> "1000246" 
  "1000248" -> "1000249" 
  "1000249" -> "1000247" 
  "1000253" -> "1000266" 
  "1000254" -> "1000260" 
  "1000255" -> "1000254" 
  "1000256" -> "1000257" 
  "1000257" -> "1000255" 
  "1000260" -> "1000253" 
  "1000263" -> "1000275" 
  "1000264" -> "1000270" 
  "1000265" -> "1000264" 
  "1000266" -> "1000267" 
  "1000267" -> "1000265" 
  "1000270" -> "1000263" 
  "1000272" -> "1000283" 
  "1000273" -> "1000272" 
  "1000274" -> "1000273" 
  "1000275" -> "1000276" 
  "1000276" -> "1000274" 
  "1000280" -> "1000291" 
  "1000281" -> "1000280" 
  "1000282" -> "1000281" 
  "1000283" -> "1000284" 
  "1000284" -> "1000282" 
  "1000288" -> "1000297" 
  "1000289" -> "1000288" 
  "1000290" -> "1000289" 
  "1000291" -> "1000290" 
  "1000294" -> "1000309" 
  "1000295" -> "1000303" 
  "1000296" -> "1000295" 
  "1000297" -> "1000298" 
  "1000298" -> "1000296" 
  "1000301" -> "1000294" 
  "1000302" -> "1000301" 
  "1000303" -> "1000305" 
  "1000304" -> "1000302" 
  "1000305" -> "1000304" 
  "1000309" -> "1000317" 
  "1000312" -> "1000327" 
  "1000312" -> "1000373" 
  "1000313" -> "1000312" 
  "1000314" -> "1000313" 
  "1000315" -> "1000314" 
  "1000316" -> "1000315" 
  "1000317" -> "1000316" 
  "1000324" -> "1000347" 
  "1000324" -> "1000368" 
  "1000325" -> "1000332" 
  "1000326" -> "1000325" 
  "1000327" -> "1000328" 
  "1000328" -> "1000326" 
  "1000331" -> "1000338" 
  "1000332" -> "1000333" 
  "1000333" -> "1000331" 
  "1000336" -> "1000324" 
  "1000337" -> "1000336" 
  "1000338" -> "1000340" 
  "1000339" -> "1000337" 
  "1000340" -> "1000339" 
  "1000345" -> "1000351" 
  "1000347" -> "1000345" 
  "1000349" -> "1000355" 
  "1000351" -> "1000349" 
  "1000352" -> "1000361" 
  "1000354" -> "1000352" 
  "1000355" -> "1000357" 
  "1000356" -> "1000354" 
  "1000357" -> "1000356" 
  "1000361" -> "1000365" 
  "1000365" -> "1000384" 
  "1000367" -> "1000373" 
  "1000368" -> "1000367" 
  "1000372" -> "1000376" 
  "1000373" -> "1000372" 
  "1000375" -> "1000379" 
  "1000376" -> "1000375" 
  "1000379" -> "1000382" 
  "1000382" -> "1000384" 
  "1000112" -> "1000129" 
}
