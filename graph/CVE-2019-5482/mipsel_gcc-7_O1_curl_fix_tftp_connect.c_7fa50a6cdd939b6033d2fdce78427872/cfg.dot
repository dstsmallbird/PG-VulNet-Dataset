digraph tftp_connect {  
"1000127" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000129" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000132" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000133" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000138" [label = "(<operator>.logicalNot,!v4)" ]
"1000140" [label = "(RETURN,return 27;,return 27;)" ]
"1000142" [label = "(<operator>.assignment,v5 = v4)" ]
"1000145" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000148" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000150" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000151" [label = "(<operator>.indirection,*a1)" ]
"1000158" [label = "(<operator>.greaterEqualsThan,(unsigned int)(v6 - 8) >= 0xFFB1)" ]
"1000159" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000160" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000161" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000165" [label = "(RETURN,return 71;,return 71;)" ]
"1000167" [label = "(<operator>.assignment,v7 = 512)" ]
"1000171" [label = "(<operator>.greaterEqualsThan,v6 >= 512)" ]
"1000174" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000176" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000177" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000178" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000179" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000180" [label = "(<operator>.indirection,*a1)" ]
"1000183" [label = "(<operator>.assignment,v8 = v7)" ]
"1000188" [label = "(<operator>.assignment,v6 = 512)" ]
"1000191" [label = "(<operator>.assignment,v8 = 512)" ]
"1000195" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 328))" ]
"1000196" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000197" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000198" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000199" [label = "(<operator>.addition,v5 + 328)" ]
"1000203" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v8 + 4))" ]
"1000205" [label = "(Curl_ccalloc,Curl_ccalloc(1, v8 + 4))" ]
"1000207" [label = "(<operator>.addition,v8 + 4)" ]
"1000210" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v9)" ]
"1000211" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000212" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000213" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000214" [label = "(<operator>.addition,v5 + 328)" ]
"1000219" [label = "(<operator>.logicalNot,!v9)" ]
"1000221" [label = "(RETURN,return 27;,return 27;)" ]
"1000224" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000225" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000226" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000227" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000228" [label = "(<operator>.addition,v5 + 332)" ]
"1000232" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v8 + 4))" ]
"1000234" [label = "(Curl_ccalloc,Curl_ccalloc(1, v8 + 4))" ]
"1000236" [label = "(<operator>.addition,v8 + 4)" ]
"1000239" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v10)" ]
"1000240" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000241" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000242" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000243" [label = "(<operator>.addition,v5 + 332)" ]
"1000248" [label = "(<operator>.logicalNot,!v10)" ]
"1000250" [label = "(RETURN,return 27;,return 27;)" ]
"1000252" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000255" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000256" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000257" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000258" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000259" [label = "(<operator>.addition,v5 + 16)" ]
"1000263" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = a1[105])" ]
"1000264" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000265" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000266" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000267" [label = "(<operator>.addition,v5 + 20)" ]
"1000270" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000273" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000274" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000275" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000276" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000279" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000280" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000281" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000282" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000283" [label = "(<operator>.addition,v5 + 8)" ]
"1000286" [label = "(<operator>.minus,-100)" ]
"1000288" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = 512)" ]
"1000289" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000290" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000291" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000292" [label = "(<operator>.addition,v5 + 320)" ]
"1000296" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v6)" ]
"1000297" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000298" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000299" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000300" [label = "(<operator>.addition,v5 + 324)" ]
"1000304" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000305" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000306" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000307" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000308" [label = "(<operator>.addition,v5 + 52)" ]
"1000311" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000312" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000313" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000314" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000315" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000319" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000322" [label = "(<operator>.notEquals,((a1[147] >> 25) & 1) != 0)" ]
"1000323" [label = "(<operator>.and,(a1[147] >> 25) & 1)" ]
"1000324" [label = "(<operator>.arithmeticShiftRight,a1[147] >> 25)" ]
"1000325" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000333" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000334" [label = "(<operator>.indirection,*a1)" ]
"1000336" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000337" [label = "(<operator>.indirection,*a2)" ]
"1000340" [label = "(RETURN,return 0;,return 0;)" ]
"1000343" [label = "(<operator>.logicalNot,!bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000344" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000345" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000346" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000347" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000348" [label = "(<operator>.addition,v5 + 20)" ]
"1000351" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000352" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000353" [label = "(<operator>.addition,v5 + 52)" ]
"1000356" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000357" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000358" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000359" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000360" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000365" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFDFFFFFF | 0x2000000)" ]
"1000366" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000369" [label = "(<operator>.or,a1[147] & 0xFDFFFFFF | 0x2000000)" ]
"1000370" [label = "(<operator>.and,a1[147] & 0xFDFFFFFF)" ]
"1000371" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000377" [label = "(<operator>.assignment,v12 = *a1)" ]
"1000379" [label = "(<operator>.indirection,*a1)" ]
"1000381" [label = "(<operator>.assignment,v13 = _errno_location())" ]
"1000383" [label = "(_errno_location,_errno_location())" ]
"1000384" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v13, v15, 128))" ]
"1000386" [label = "(<operator>.cast,(const char *)Curl_strerror(*v13, v15, 128))" ]
"1000387" [label = "(UNKNOWN,const char *,const char *)" ]
"1000388" [label = "(Curl_strerror,Curl_strerror(*v13, v15, 128))" ]
"1000389" [label = "(<operator>.indirection,*v13)" ]
"1000393" [label = "(Curl_failf,Curl_failf(v12, \"bind() failed; %s\", v14))" ]
"1000397" [label = "(RETURN,return 7;,return 7;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000399" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000127" -> "1000133" 
  "1000129" -> "1000127" 
  "1000132" -> "1000138" 
  "1000133" -> "1000132" 
  "1000138" -> "1000140" 
  "1000138" -> "1000142" 
  "1000140" -> "1000399" 
  "1000142" -> "1000149" 
  "1000145" -> "1000160" 
  "1000145" -> "1000188" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000149" -> "1000151" 
  "1000150" -> "1000148" 
  "1000151" -> "1000150" 
  "1000158" -> "1000165" 
  "1000158" -> "1000167" 
  "1000159" -> "1000158" 
  "1000160" -> "1000161" 
  "1000161" -> "1000159" 
  "1000165" -> "1000399" 
  "1000167" -> "1000171" 
  "1000171" -> "1000178" 
  "1000171" -> "1000183" 
  "1000174" -> "1000183" 
  "1000176" -> "1000174" 
  "1000177" -> "1000176" 
  "1000178" -> "1000180" 
  "1000179" -> "1000177" 
  "1000180" -> "1000179" 
  "1000183" -> "1000198" 
  "1000188" -> "1000191" 
  "1000191" -> "1000198" 
  "1000195" -> "1000227" 
  "1000195" -> "1000207" 
  "1000196" -> "1000195" 
  "1000197" -> "1000196" 
  "1000198" -> "1000199" 
  "1000199" -> "1000197" 
  "1000203" -> "1000213" 
  "1000205" -> "1000203" 
  "1000207" -> "1000205" 
  "1000210" -> "1000219" 
  "1000211" -> "1000210" 
  "1000212" -> "1000211" 
  "1000213" -> "1000214" 
  "1000214" -> "1000212" 
  "1000219" -> "1000227" 
  "1000219" -> "1000221" 
  "1000221" -> "1000399" 
  "1000224" -> "1000236" 
  "1000224" -> "1000252" 
  "1000225" -> "1000224" 
  "1000226" -> "1000225" 
  "1000227" -> "1000228" 
  "1000228" -> "1000226" 
  "1000232" -> "1000242" 
  "1000234" -> "1000232" 
  "1000236" -> "1000234" 
  "1000239" -> "1000248" 
  "1000240" -> "1000239" 
  "1000241" -> "1000240" 
  "1000242" -> "1000243" 
  "1000243" -> "1000241" 
  "1000248" -> "1000250" 
  "1000248" -> "1000252" 
  "1000250" -> "1000399" 
  "1000252" -> "1000258" 
  "1000255" -> "1000266" 
  "1000256" -> "1000255" 
  "1000257" -> "1000256" 
  "1000258" -> "1000259" 
  "1000259" -> "1000257" 
  "1000263" -> "1000276" 
  "1000264" -> "1000270" 
  "1000265" -> "1000264" 
  "1000266" -> "1000267" 
  "1000267" -> "1000265" 
  "1000270" -> "1000263" 
  "1000273" -> "1000282" 
  "1000274" -> "1000273" 
  "1000275" -> "1000274" 
  "1000276" -> "1000275" 
  "1000279" -> "1000291" 
  "1000280" -> "1000286" 
  "1000281" -> "1000280" 
  "1000282" -> "1000283" 
  "1000283" -> "1000281" 
  "1000286" -> "1000279" 
  "1000288" -> "1000299" 
  "1000289" -> "1000288" 
  "1000290" -> "1000289" 
  "1000291" -> "1000292" 
  "1000292" -> "1000290" 
  "1000296" -> "1000307" 
  "1000297" -> "1000296" 
  "1000298" -> "1000297" 
  "1000299" -> "1000300" 
  "1000300" -> "1000298" 
  "1000304" -> "1000319" 
  "1000305" -> "1000313" 
  "1000306" -> "1000305" 
  "1000307" -> "1000308" 
  "1000308" -> "1000306" 
  "1000311" -> "1000304" 
  "1000312" -> "1000311" 
  "1000313" -> "1000315" 
  "1000314" -> "1000312" 
  "1000315" -> "1000314" 
  "1000319" -> "1000325" 
  "1000322" -> "1000347" 
  "1000322" -> "1000334" 
  "1000323" -> "1000322" 
  "1000324" -> "1000323" 
  "1000325" -> "1000324" 
  "1000333" -> "1000337" 
  "1000334" -> "1000333" 
  "1000336" -> "1000340" 
  "1000337" -> "1000336" 
  "1000340" -> "1000399" 
  "1000343" -> "1000366" 
  "1000343" -> "1000379" 
  "1000344" -> "1000343" 
  "1000345" -> "1000352" 
  "1000346" -> "1000345" 
  "1000347" -> "1000348" 
  "1000348" -> "1000346" 
  "1000351" -> "1000358" 
  "1000352" -> "1000353" 
  "1000353" -> "1000351" 
  "1000356" -> "1000344" 
  "1000357" -> "1000356" 
  "1000358" -> "1000360" 
  "1000359" -> "1000357" 
  "1000360" -> "1000359" 
  "1000365" -> "1000334" 
  "1000366" -> "1000371" 
  "1000369" -> "1000365" 
  "1000370" -> "1000369" 
  "1000371" -> "1000370" 
  "1000377" -> "1000383" 
  "1000379" -> "1000377" 
  "1000381" -> "1000387" 
  "1000383" -> "1000381" 
  "1000384" -> "1000393" 
  "1000386" -> "1000384" 
  "1000387" -> "1000389" 
  "1000388" -> "1000386" 
  "1000389" -> "1000388" 
  "1000393" -> "1000397" 
  "1000397" -> "1000399" 
  "1000112" -> "1000129" 
}
