digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000140" [label = "(<operator>.logicalNot,!v4)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v5 = v4)" ]
"1000147" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000160" [label = "(<operator>.greaterThan,v6 - 8 > (unsigned int)&off_FFB0)" ]
"1000161" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000164" [label = "(<operator>.cast,(unsigned int)&off_FFB0)" ]
"1000165" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000166" [label = "(<operator>.addressOf,&off_FFB0)" ]
"1000168" [label = "(RETURN,return 71;,return 71;)" ]
"1000172" [label = "(<operator>.assignment,v6 = 512)" ]
"1000176" [label = "(<operator>.logicalNot,!*(_DWORD *)(v4 + 328))" ]
"1000177" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000178" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000179" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000180" [label = "(<operator>.addition,v4 + 328)" ]
"1000184" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v6 + 4))" ]
"1000186" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000188" [label = "(<operator>.addition,v6 + 4)" ]
"1000191" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v10)" ]
"1000192" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000193" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000194" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000195" [label = "(<operator>.addition,v5 + 328)" ]
"1000200" [label = "(<operator>.logicalNot,!v10)" ]
"1000202" [label = "(RETURN,return 27;,return 27;)" ]
"1000205" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000206" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000207" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000208" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000209" [label = "(<operator>.addition,v5 + 332)" ]
"1000213" [label = "(<operator>.assignment,v14 = Curl_ccalloc(1, v6 + 4))" ]
"1000215" [label = "(Curl_ccalloc,Curl_ccalloc(1, v6 + 4))" ]
"1000217" [label = "(<operator>.addition,v6 + 4)" ]
"1000220" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v14)" ]
"1000221" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000222" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000223" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000224" [label = "(<operator>.addition,v5 + 332)" ]
"1000229" [label = "(<operator>.logicalNot,!v14)" ]
"1000231" [label = "(RETURN,return 27;,return 27;)" ]
"1000233" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000236" [label = "(<operator>.assignment,v7 = a1[105])" ]
"1000238" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000241" [label = "(<operator>.assignment,v8 = *(_DWORD *)(a1[20] + 4))" ]
"1000243" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000244" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000245" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000246" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000247" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000251" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000252" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000253" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000254" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000255" [label = "(<operator>.addition,v5 + 8)" ]
"1000258" [label = "(<operator>.minus,-100)" ]
"1000260" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = v8)" ]
"1000261" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000262" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000263" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000264" [label = "(<operator>.addition,v5 + 52)" ]
"1000268" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000269" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000270" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000271" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000272" [label = "(<operator>.addition,v5 + 16)" ]
"1000276" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = v7)" ]
"1000277" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000278" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000279" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000280" [label = "(<operator>.addition,v5 + 20)" ]
"1000284" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = v6)" ]
"1000285" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000286" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000287" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000288" [label = "(<operator>.addition,v5 + 320)" ]
"1000292" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v6)" ]
"1000293" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000294" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000295" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000296" [label = "(<operator>.addition,v5 + 324)" ]
"1000300" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000301" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000302" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000303" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000306" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000309" [label = "(<operator>.notEquals,(*((_BYTE *)a1 + 591) & 2) != 0)" ]
"1000310" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000311" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000312" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000313" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000314" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000321" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000322" [label = "(<operator>.indirection,*a1)" ]
"1000324" [label = "(<operator>.assignment,result = 0)" ]
"1000327" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000328" [label = "(<operator>.indirection,*a2)" ]
"1000331" [label = "(RETURN,return result;,return result;)" ]
"1000334" [label = "(<operator>.logicalNot,!bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000335" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000336" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000337" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000338" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000339" [label = "(<operator>.addition,v5 + 20)" ]
"1000342" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000343" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000344" [label = "(<operator>.addition,v5 + 52)" ]
"1000347" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000348" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000349" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000350" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000351" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000356" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 591) |= 2u)" ]
"1000357" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000358" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000359" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000360" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000365" [label = "(<operator>.assignment,v11 = _errno_location())" ]
"1000367" [label = "(_errno_location,_errno_location())" ]
"1000368" [label = "(<operator>.assignment,v12 = *a1)" ]
"1000370" [label = "(<operator>.indirection,*a1)" ]
"1000372" [label = "(<operator>.assignment,v13 = (const char *)Curl_strerror(*v11, v15, 128))" ]
"1000374" [label = "(<operator>.cast,(const char *)Curl_strerror(*v11, v15, 128))" ]
"1000375" [label = "(UNKNOWN,const char *,const char *)" ]
"1000376" [label = "(Curl_strerror,Curl_strerror(*v11, v15, 128))" ]
"1000377" [label = "(<operator>.indirection,*v11)" ]
"1000381" [label = "(Curl_failf,Curl_failf(v12, \"bind() failed; %s\", v13))" ]
"1000385" [label = "(RETURN,return 7;,return 7;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000387" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000144" 
  "1000142" -> "1000387" 
  "1000144" -> "1000151" 
  "1000147" -> "1000161" 
  "1000147" -> "1000172" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000160" -> "1000179" 
  "1000160" -> "1000168" 
  "1000161" -> "1000165" 
  "1000164" -> "1000160" 
  "1000165" -> "1000166" 
  "1000166" -> "1000164" 
  "1000168" -> "1000387" 
  "1000172" -> "1000179" 
  "1000176" -> "1000208" 
  "1000176" -> "1000188" 
  "1000177" -> "1000176" 
  "1000178" -> "1000177" 
  "1000179" -> "1000180" 
  "1000180" -> "1000178" 
  "1000184" -> "1000194" 
  "1000186" -> "1000184" 
  "1000188" -> "1000186" 
  "1000191" -> "1000200" 
  "1000192" -> "1000191" 
  "1000193" -> "1000192" 
  "1000194" -> "1000195" 
  "1000195" -> "1000193" 
  "1000200" -> "1000208" 
  "1000200" -> "1000202" 
  "1000202" -> "1000387" 
  "1000205" -> "1000217" 
  "1000205" -> "1000233" 
  "1000206" -> "1000205" 
  "1000207" -> "1000206" 
  "1000208" -> "1000209" 
  "1000209" -> "1000207" 
  "1000213" -> "1000223" 
  "1000215" -> "1000213" 
  "1000217" -> "1000215" 
  "1000220" -> "1000229" 
  "1000221" -> "1000220" 
  "1000222" -> "1000221" 
  "1000223" -> "1000224" 
  "1000224" -> "1000222" 
  "1000229" -> "1000231" 
  "1000229" -> "1000233" 
  "1000231" -> "1000387" 
  "1000233" -> "1000238" 
  "1000236" -> "1000245" 
  "1000238" -> "1000236" 
  "1000241" -> "1000254" 
  "1000243" -> "1000241" 
  "1000244" -> "1000243" 
  "1000245" -> "1000247" 
  "1000246" -> "1000244" 
  "1000247" -> "1000246" 
  "1000251" -> "1000263" 
  "1000252" -> "1000258" 
  "1000253" -> "1000252" 
  "1000254" -> "1000255" 
  "1000255" -> "1000253" 
  "1000258" -> "1000251" 
  "1000260" -> "1000271" 
  "1000261" -> "1000260" 
  "1000262" -> "1000261" 
  "1000263" -> "1000264" 
  "1000264" -> "1000262" 
  "1000268" -> "1000279" 
  "1000269" -> "1000268" 
  "1000270" -> "1000269" 
  "1000271" -> "1000272" 
  "1000272" -> "1000270" 
  "1000276" -> "1000287" 
  "1000277" -> "1000276" 
  "1000278" -> "1000277" 
  "1000279" -> "1000280" 
  "1000280" -> "1000278" 
  "1000284" -> "1000295" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000287" -> "1000288" 
  "1000288" -> "1000286" 
  "1000292" -> "1000303" 
  "1000293" -> "1000292" 
  "1000294" -> "1000293" 
  "1000295" -> "1000296" 
  "1000296" -> "1000294" 
  "1000300" -> "1000306" 
  "1000301" -> "1000300" 
  "1000302" -> "1000301" 
  "1000303" -> "1000302" 
  "1000306" -> "1000314" 
  "1000309" -> "1000338" 
  "1000309" -> "1000322" 
  "1000310" -> "1000309" 
  "1000311" -> "1000310" 
  "1000312" -> "1000311" 
  "1000313" -> "1000312" 
  "1000314" -> "1000313" 
  "1000321" -> "1000324" 
  "1000322" -> "1000321" 
  "1000324" -> "1000328" 
  "1000327" -> "1000331" 
  "1000328" -> "1000327" 
  "1000331" -> "1000387" 
  "1000334" -> "1000360" 
  "1000334" -> "1000367" 
  "1000335" -> "1000334" 
  "1000336" -> "1000343" 
  "1000337" -> "1000336" 
  "1000338" -> "1000339" 
  "1000339" -> "1000337" 
  "1000342" -> "1000349" 
  "1000343" -> "1000344" 
  "1000344" -> "1000342" 
  "1000347" -> "1000335" 
  "1000348" -> "1000347" 
  "1000349" -> "1000351" 
  "1000350" -> "1000348" 
  "1000351" -> "1000350" 
  "1000356" -> "1000322" 
  "1000357" -> "1000356" 
  "1000358" -> "1000357" 
  "1000359" -> "1000358" 
  "1000360" -> "1000359" 
  "1000365" -> "1000370" 
  "1000367" -> "1000365" 
  "1000368" -> "1000375" 
  "1000370" -> "1000368" 
  "1000372" -> "1000381" 
  "1000374" -> "1000372" 
  "1000375" -> "1000377" 
  "1000376" -> "1000374" 
  "1000377" -> "1000376" 
  "1000381" -> "1000385" 
  "1000385" -> "1000387" 
  "1000113" -> "1000131" 
}
