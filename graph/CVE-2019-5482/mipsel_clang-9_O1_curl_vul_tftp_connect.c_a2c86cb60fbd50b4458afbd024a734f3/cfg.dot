digraph tftp_connect {  
"1000132" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000133" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000138" [label = "(<operator>.logicalNot,!v4)" ]
"1000140" [label = "(RETURN,return 27;,return 27;)" ]
"1000142" [label = "(<operator>.assignment,v5 = *(_DWORD *)(*a1 + 1576))" ]
"1000144" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000145" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000146" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000147" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000148" [label = "(<operator>.indirection,*a1)" ]
"1000151" [label = "(<operator>.assignment,v6 = v4)" ]
"1000157" [label = "(<operator>.assignment,result = 71)" ]
"1000161" [label = "(<operator>.greaterThan,(unsigned int)(v5 - 8) > 0xFFB0)" ]
"1000162" [label = "(<operator>.cast,(unsigned int)(v5 - 8))" ]
"1000163" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000164" [label = "(<operator>.subtraction,v5 - 8)" ]
"1000168" [label = "(RETURN,return result;,return result;)" ]
"1000171" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000172" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000173" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000174" [label = "(<operator>.addition,v6 + 328)" ]
"1000180" [label = "(<operator>.assignment,v5 = 512)" ]
"1000184" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000185" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000186" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000187" [label = "(<operator>.addition,v4 + 328)" ]
"1000193" [label = "(<operator>.addition,v5 + 4)" ]
"1000196" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v8)" ]
"1000197" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000198" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000199" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000200" [label = "(<operator>.addition,v6 + 328)" ]
"1000205" [label = "(<operator>.logicalNot,!v8)" ]
"1000207" [label = "(RETURN,return 27;,return 27;)" ]
"1000211" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000214" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000215" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000216" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000217" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000218" [label = "(<operator>.addition,v6 + 16)" ]
"1000222" [label = "(<operator>.assignment,v11 = a1[105])" ]
"1000224" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000227" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v5)" ]
"1000228" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000229" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000230" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000231" [label = "(<operator>.addition,v6 + 324)" ]
"1000235" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = v5)" ]
"1000236" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000237" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000238" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000239" [label = "(<operator>.addition,v6 + 320)" ]
"1000243" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000244" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000245" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000246" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000247" [label = "(<operator>.addition,v6 + 8)" ]
"1000250" [label = "(<operator>.minus,-100)" ]
"1000252" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = v11)" ]
"1000253" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000254" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000255" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000256" [label = "(<operator>.addition,v6 + 20)" ]
"1000260" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000261" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000262" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000263" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000266" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000267" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000268" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000269" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000270" [label = "(<operator>.addition,v6 + 52)" ]
"1000273" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000274" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000275" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000276" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000277" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000281" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000284" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 2) == 0)" ]
"1000285" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000286" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000287" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000288" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000289" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000296" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000297" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000298" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000299" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000300" [label = "(<operator>.addition,v6 + 20)" ]
"1000303" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000304" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000305" [label = "(<operator>.addition,v6 + 52)" ]
"1000308" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000309" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000310" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000311" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000312" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000317" [label = "(<operator>.assignment,v12 = *a1)" ]
"1000319" [label = "(<operator>.indirection,*a1)" ]
"1000321" [label = "(<operator>.assignment,v13 = _errno_location())" ]
"1000323" [label = "(_errno_location,_errno_location())" ]
"1000324" [label = "(<operator>.assignment,v14 = Curl_strerror(*v13, v15, 128))" ]
"1000326" [label = "(Curl_strerror,Curl_strerror(*v13, v15, 128))" ]
"1000327" [label = "(<operator>.indirection,*v13)" ]
"1000331" [label = "(Curl_failf,Curl_failf(v12, \"bind() failed; %s\", v14))" ]
"1000335" [label = "(RETURN,return 7;,return 7;)" ]
"1000337" [label = "(<operators>.assignmentOr,a1[147] |= 0x2000000u)" ]
"1000338" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000342" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000343" [label = "(<operator>.indirection,*a1)" ]
"1000345" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000346" [label = "(<operator>.indirection,*a2)" ]
"1000349" [label = "(<operator>.assignment,result = 0)" ]
"1000352" [label = "(RETURN,return result;,return result;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000354" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000132" -> "1000138" 
  "1000133" -> "1000132" 
  "1000138" -> "1000140" 
  "1000138" -> "1000146" 
  "1000140" -> "1000354" 
  "1000142" -> "1000151" 
  "1000144" -> "1000142" 
  "1000145" -> "1000144" 
  "1000146" -> "1000148" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000151" -> "1000157" 
  "1000151" -> "1000180" 
  "1000157" -> "1000163" 
  "1000161" -> "1000173" 
  "1000161" -> "1000168" 
  "1000162" -> "1000161" 
  "1000163" -> "1000164" 
  "1000164" -> "1000162" 
  "1000168" -> "1000354" 
  "1000171" -> "1000211" 
  "1000171" -> "1000193" 
  "1000172" -> "1000171" 
  "1000173" -> "1000174" 
  "1000174" -> "1000172" 
  "1000180" -> "1000186" 
  "1000184" -> "1000211" 
  "1000184" -> "1000193" 
  "1000185" -> "1000184" 
  "1000186" -> "1000187" 
  "1000187" -> "1000185" 
  "1000193" -> "1000199" 
  "1000196" -> "1000205" 
  "1000197" -> "1000196" 
  "1000198" -> "1000197" 
  "1000199" -> "1000200" 
  "1000200" -> "1000198" 
  "1000205" -> "1000207" 
  "1000205" -> "1000211" 
  "1000207" -> "1000354" 
  "1000211" -> "1000217" 
  "1000214" -> "1000224" 
  "1000215" -> "1000214" 
  "1000216" -> "1000215" 
  "1000217" -> "1000218" 
  "1000218" -> "1000216" 
  "1000222" -> "1000230" 
  "1000224" -> "1000222" 
  "1000227" -> "1000238" 
  "1000228" -> "1000227" 
  "1000229" -> "1000228" 
  "1000230" -> "1000231" 
  "1000231" -> "1000229" 
  "1000235" -> "1000246" 
  "1000236" -> "1000235" 
  "1000237" -> "1000236" 
  "1000238" -> "1000239" 
  "1000239" -> "1000237" 
  "1000243" -> "1000255" 
  "1000244" -> "1000250" 
  "1000245" -> "1000244" 
  "1000246" -> "1000247" 
  "1000247" -> "1000245" 
  "1000250" -> "1000243" 
  "1000252" -> "1000263" 
  "1000253" -> "1000252" 
  "1000254" -> "1000253" 
  "1000255" -> "1000256" 
  "1000256" -> "1000254" 
  "1000260" -> "1000269" 
  "1000261" -> "1000260" 
  "1000262" -> "1000261" 
  "1000263" -> "1000262" 
  "1000266" -> "1000281" 
  "1000267" -> "1000275" 
  "1000268" -> "1000267" 
  "1000269" -> "1000270" 
  "1000270" -> "1000268" 
  "1000273" -> "1000266" 
  "1000274" -> "1000273" 
  "1000275" -> "1000277" 
  "1000276" -> "1000274" 
  "1000277" -> "1000276" 
  "1000281" -> "1000289" 
  "1000284" -> "1000299" 
  "1000284" -> "1000343" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000288" -> "1000287" 
  "1000289" -> "1000288" 
  "1000296" -> "1000319" 
  "1000296" -> "1000338" 
  "1000297" -> "1000304" 
  "1000298" -> "1000297" 
  "1000299" -> "1000300" 
  "1000300" -> "1000298" 
  "1000303" -> "1000310" 
  "1000304" -> "1000305" 
  "1000305" -> "1000303" 
  "1000308" -> "1000296" 
  "1000309" -> "1000308" 
  "1000310" -> "1000312" 
  "1000311" -> "1000309" 
  "1000312" -> "1000311" 
  "1000317" -> "1000323" 
  "1000319" -> "1000317" 
  "1000321" -> "1000327" 
  "1000323" -> "1000321" 
  "1000324" -> "1000331" 
  "1000326" -> "1000324" 
  "1000327" -> "1000326" 
  "1000331" -> "1000335" 
  "1000335" -> "1000354" 
  "1000337" -> "1000343" 
  "1000338" -> "1000337" 
  "1000342" -> "1000346" 
  "1000343" -> "1000342" 
  "1000345" -> "1000349" 
  "1000346" -> "1000345" 
  "1000349" -> "1000352" 
  "1000352" -> "1000354" 
  "1000113" -> "1000133" 
}
