digraph tftp_connect {  
"1000131" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000133" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000136" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000137" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000142" [label = "(<operator>.logicalNot,!v4)" ]
"1000144" [label = "(RETURN,return 27;,return 27;)" ]
"1000146" [label = "(<operator>.assignment,v6 = v4)" ]
"1000149" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000152" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000153" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000154" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000155" [label = "(<operator>.indirection,*a1)" ]
"1000162" [label = "(<operator>.greaterThan,(unsigned int)(v7 - 8) > 0xFFB0)" ]
"1000163" [label = "(<operator>.cast,(unsigned int)(v7 - 8))" ]
"1000164" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000165" [label = "(<operator>.subtraction,v7 - 8)" ]
"1000169" [label = "(RETURN,return 71;,return 71;)" ]
"1000172" [label = "(<operator>.lessThan,v7 < 512)" ]
"1000176" [label = "(<operator>.assignment,v8 = 512)" ]
"1000182" [label = "(<operator>.assignment,v7 = 512)" ]
"1000185" [label = "(<operator>.assignment,v8 = v7)" ]
"1000190" [label = "(<operator>.logicalNot,!*(_DWORD *)(v4 + 328))" ]
"1000191" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000192" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000193" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000194" [label = "(<operator>.addition,v4 + 328)" ]
"1000198" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v8 + 4))" ]
"1000200" [label = "(Curl_ccalloc,Curl_ccalloc(1, v8 + 4))" ]
"1000202" [label = "(<operator>.addition,v8 + 4)" ]
"1000205" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v9)" ]
"1000206" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000207" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000208" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000209" [label = "(<operator>.addition,v6 + 328)" ]
"1000214" [label = "(<operator>.logicalNot,!v9)" ]
"1000216" [label = "(RETURN,return 27;,return 27;)" ]
"1000219" [label = "(<operator>.logicalNot,!*(_DWORD *)(v6 + 332))" ]
"1000220" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000221" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000222" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000223" [label = "(<operator>.addition,v6 + 332)" ]
"1000227" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v8 + 4))" ]
"1000229" [label = "(Curl_ccalloc,Curl_ccalloc(1, v8 + 4))" ]
"1000231" [label = "(<operator>.addition,v8 + 4)" ]
"1000234" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 332) = v10)" ]
"1000235" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000236" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000237" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000238" [label = "(<operator>.addition,v6 + 332)" ]
"1000243" [label = "(<operator>.logicalNot,!v10)" ]
"1000245" [label = "(RETURN,return 27;,return 27;)" ]
"1000247" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000250" [label = "(<operator>.assignment,v11 = a1[105])" ]
"1000252" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000255" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000256" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000257" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000258" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000259" [label = "(<operator>.addition,v6 + 16)" ]
"1000263" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = v11)" ]
"1000264" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000265" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000266" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000267" [label = "(<operator>.addition,v6 + 20)" ]
"1000271" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000272" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000273" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000274" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000277" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000278" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000279" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000280" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000281" [label = "(<operator>.addition,v6 + 8)" ]
"1000284" [label = "(<operator>.minus,-100)" ]
"1000286" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = 512)" ]
"1000287" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000288" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000289" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000290" [label = "(<operator>.addition,v6 + 320)" ]
"1000294" [label = "(<operator>.assignment,v12 = a1[20])" ]
"1000296" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000299" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v7)" ]
"1000300" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000301" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000302" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000303" [label = "(<operator>.addition,v6 + 324)" ]
"1000307" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(v12 + 4))" ]
"1000308" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000309" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000310" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000311" [label = "(<operator>.addition,v6 + 52)" ]
"1000314" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 4))" ]
"1000315" [label = "(<operator>.cast,(_DWORD *)(v12 + 4))" ]
"1000316" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000317" [label = "(<operator>.addition,v12 + 4)" ]
"1000320" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000323" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 2) == 0)" ]
"1000324" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000325" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000326" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000327" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000328" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000335" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000336" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000337" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000338" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000339" [label = "(<operator>.addition,v6 + 20)" ]
"1000342" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000343" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000344" [label = "(<operator>.addition,v6 + 52)" ]
"1000347" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000348" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000349" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000350" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000351" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000356" [label = "(<operator>.assignment,v13 = _errno_location())" ]
"1000358" [label = "(_errno_location,_errno_location())" ]
"1000359" [label = "(<operator>.assignment,v14 = *a1)" ]
"1000361" [label = "(<operator>.indirection,*a1)" ]
"1000363" [label = "(<operator>.assignment,v15 = (const char *)Curl_strerror(*v13, v16, 128))" ]
"1000365" [label = "(<operator>.cast,(const char *)Curl_strerror(*v13, v16, 128))" ]
"1000366" [label = "(UNKNOWN,const char *,const char *)" ]
"1000367" [label = "(Curl_strerror,Curl_strerror(*v13, v16, 128))" ]
"1000368" [label = "(<operator>.indirection,*v13)" ]
"1000372" [label = "(Curl_failf,Curl_failf(v14, \"bind() failed; %s\", v15))" ]
"1000376" [label = "(RETURN,return 7;,return 7;)" ]
"1000378" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 591) |= 2u)" ]
"1000379" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000380" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000381" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000382" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000386" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000387" [label = "(<operator>.indirection,*a1)" ]
"1000389" [label = "(<operator>.assignment,result = 0)" ]
"1000392" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000393" [label = "(<operator>.indirection,*a2)" ]
"1000396" [label = "(RETURN,return result;,return result;)" ]
"1000114" [label = "(METHOD,tftp_connect)" ]
"1000398" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000131" -> "1000137" 
  "1000133" -> "1000131" 
  "1000136" -> "1000142" 
  "1000137" -> "1000136" 
  "1000142" -> "1000144" 
  "1000142" -> "1000146" 
  "1000144" -> "1000398" 
  "1000146" -> "1000153" 
  "1000149" -> "1000164" 
  "1000149" -> "1000182" 
  "1000151" -> "1000149" 
  "1000152" -> "1000151" 
  "1000153" -> "1000155" 
  "1000154" -> "1000152" 
  "1000155" -> "1000154" 
  "1000162" -> "1000169" 
  "1000162" -> "1000172" 
  "1000163" -> "1000162" 
  "1000164" -> "1000165" 
  "1000165" -> "1000163" 
  "1000169" -> "1000398" 
  "1000172" -> "1000176" 
  "1000172" -> "1000185" 
  "1000176" -> "1000193" 
  "1000182" -> "1000185" 
  "1000185" -> "1000193" 
  "1000190" -> "1000222" 
  "1000190" -> "1000202" 
  "1000191" -> "1000190" 
  "1000192" -> "1000191" 
  "1000193" -> "1000194" 
  "1000194" -> "1000192" 
  "1000198" -> "1000208" 
  "1000200" -> "1000198" 
  "1000202" -> "1000200" 
  "1000205" -> "1000214" 
  "1000206" -> "1000205" 
  "1000207" -> "1000206" 
  "1000208" -> "1000209" 
  "1000209" -> "1000207" 
  "1000214" -> "1000222" 
  "1000214" -> "1000216" 
  "1000216" -> "1000398" 
  "1000219" -> "1000231" 
  "1000219" -> "1000247" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000222" -> "1000223" 
  "1000223" -> "1000221" 
  "1000227" -> "1000237" 
  "1000229" -> "1000227" 
  "1000231" -> "1000229" 
  "1000234" -> "1000243" 
  "1000235" -> "1000234" 
  "1000236" -> "1000235" 
  "1000237" -> "1000238" 
  "1000238" -> "1000236" 
  "1000243" -> "1000245" 
  "1000243" -> "1000247" 
  "1000245" -> "1000398" 
  "1000247" -> "1000252" 
  "1000250" -> "1000258" 
  "1000252" -> "1000250" 
  "1000255" -> "1000266" 
  "1000256" -> "1000255" 
  "1000257" -> "1000256" 
  "1000258" -> "1000259" 
  "1000259" -> "1000257" 
  "1000263" -> "1000274" 
  "1000264" -> "1000263" 
  "1000265" -> "1000264" 
  "1000266" -> "1000267" 
  "1000267" -> "1000265" 
  "1000271" -> "1000280" 
  "1000272" -> "1000271" 
  "1000273" -> "1000272" 
  "1000274" -> "1000273" 
  "1000277" -> "1000289" 
  "1000278" -> "1000284" 
  "1000279" -> "1000278" 
  "1000280" -> "1000281" 
  "1000281" -> "1000279" 
  "1000284" -> "1000277" 
  "1000286" -> "1000296" 
  "1000287" -> "1000286" 
  "1000288" -> "1000287" 
  "1000289" -> "1000290" 
  "1000290" -> "1000288" 
  "1000294" -> "1000302" 
  "1000296" -> "1000294" 
  "1000299" -> "1000310" 
  "1000300" -> "1000299" 
  "1000301" -> "1000300" 
  "1000302" -> "1000303" 
  "1000303" -> "1000301" 
  "1000307" -> "1000320" 
  "1000308" -> "1000316" 
  "1000309" -> "1000308" 
  "1000310" -> "1000311" 
  "1000311" -> "1000309" 
  "1000314" -> "1000307" 
  "1000315" -> "1000314" 
  "1000316" -> "1000317" 
  "1000317" -> "1000315" 
  "1000320" -> "1000328" 
  "1000323" -> "1000338" 
  "1000323" -> "1000387" 
  "1000324" -> "1000323" 
  "1000325" -> "1000324" 
  "1000326" -> "1000325" 
  "1000327" -> "1000326" 
  "1000328" -> "1000327" 
  "1000335" -> "1000382" 
  "1000335" -> "1000358" 
  "1000336" -> "1000343" 
  "1000337" -> "1000336" 
  "1000338" -> "1000339" 
  "1000339" -> "1000337" 
  "1000342" -> "1000349" 
  "1000343" -> "1000344" 
  "1000344" -> "1000342" 
  "1000347" -> "1000335" 
  "1000348" -> "1000347" 
  "1000349" -> "1000351" 
  "1000350" -> "1000348" 
  "1000351" -> "1000350" 
  "1000356" -> "1000361" 
  "1000358" -> "1000356" 
  "1000359" -> "1000366" 
  "1000361" -> "1000359" 
  "1000363" -> "1000372" 
  "1000365" -> "1000363" 
  "1000366" -> "1000368" 
  "1000367" -> "1000365" 
  "1000368" -> "1000367" 
  "1000372" -> "1000376" 
  "1000376" -> "1000398" 
  "1000378" -> "1000387" 
  "1000379" -> "1000378" 
  "1000380" -> "1000379" 
  "1000381" -> "1000380" 
  "1000382" -> "1000381" 
  "1000386" -> "1000389" 
  "1000387" -> "1000386" 
  "1000389" -> "1000393" 
  "1000392" -> "1000396" 
  "1000393" -> "1000392" 
  "1000396" -> "1000398" 
  "1000114" -> "1000133" 
}
