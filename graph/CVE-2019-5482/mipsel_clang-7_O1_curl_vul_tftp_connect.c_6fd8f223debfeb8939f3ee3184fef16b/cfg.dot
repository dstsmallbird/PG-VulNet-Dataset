digraph tftp_connect {  
"1000130" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000131" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000136" [label = "(<operator>.logicalNot,!v4)" ]
"1000138" [label = "(RETURN,return 27;,return 27;)" ]
"1000140" [label = "(<operator>.assignment,v5 = *(_DWORD *)(*a1 + 1576))" ]
"1000142" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000143" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000144" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000145" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000146" [label = "(<operator>.indirection,*a1)" ]
"1000149" [label = "(<operator>.assignment,v6 = v4)" ]
"1000155" [label = "(<operator>.assignment,result = 71)" ]
"1000159" [label = "(<operator>.greaterThan,(unsigned int)(v5 - 8) > 0xFFB0)" ]
"1000160" [label = "(<operator>.cast,(unsigned int)(v5 - 8))" ]
"1000161" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000162" [label = "(<operator>.subtraction,v5 - 8)" ]
"1000166" [label = "(RETURN,return result;,return result;)" ]
"1000169" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000170" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000171" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000172" [label = "(<operator>.addition,v6 + 328)" ]
"1000178" [label = "(<operator>.assignment,v5 = 512)" ]
"1000182" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000183" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000184" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000185" [label = "(<operator>.addition,v4 + 328)" ]
"1000191" [label = "(<operator>.addition,v5 + 4)" ]
"1000194" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v8)" ]
"1000195" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000196" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000197" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000198" [label = "(<operator>.addition,v6 + 328)" ]
"1000203" [label = "(<operator>.logicalNot,!v8)" ]
"1000205" [label = "(RETURN,return 27;,return 27;)" ]
"1000209" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000212" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000213" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000214" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000215" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000216" [label = "(<operator>.addition,v6 + 16)" ]
"1000220" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = a1[105])" ]
"1000221" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000222" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000223" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000224" [label = "(<operator>.addition,v6 + 20)" ]
"1000227" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000230" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000231" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000232" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000233" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000234" [label = "(<operator>.addition,v6 + 8)" ]
"1000237" [label = "(<operator>.minus,-100)" ]
"1000239" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = v5)" ]
"1000240" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000241" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000242" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000243" [label = "(<operator>.addition,v6 + 320)" ]
"1000247" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v5)" ]
"1000248" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000249" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000250" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000251" [label = "(<operator>.addition,v6 + 324)" ]
"1000255" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000256" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000257" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000258" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000261" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000262" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000263" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000264" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000265" [label = "(<operator>.addition,v6 + 52)" ]
"1000268" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000269" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000270" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000271" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000272" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000276" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000279" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 2) == 0)" ]
"1000280" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000281" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000282" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000283" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000284" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000291" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000292" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000293" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000294" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000295" [label = "(<operator>.addition,v6 + 20)" ]
"1000298" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000299" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000300" [label = "(<operator>.addition,v6 + 52)" ]
"1000303" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000304" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000305" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000306" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000307" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000312" [label = "(<operator>.assignment,v11 = *a1)" ]
"1000314" [label = "(<operator>.indirection,*a1)" ]
"1000316" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000318" [label = "(_errno_location,_errno_location())" ]
"1000319" [label = "(<operator>.assignment,v13 = Curl_strerror(*v12, v14, 128))" ]
"1000321" [label = "(Curl_strerror,Curl_strerror(*v12, v14, 128))" ]
"1000322" [label = "(<operator>.indirection,*v12)" ]
"1000326" [label = "(Curl_failf,Curl_failf(v11, \"bind() failed; %s\", v13))" ]
"1000330" [label = "(RETURN,return 7;,return 7;)" ]
"1000332" [label = "(<operators>.assignmentOr,a1[147] |= 0x2000000u)" ]
"1000333" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000337" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000338" [label = "(<operator>.indirection,*a1)" ]
"1000340" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000341" [label = "(<operator>.indirection,*a2)" ]
"1000344" [label = "(<operator>.assignment,result = 0)" ]
"1000347" [label = "(RETURN,return result;,return result;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000349" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000130" -> "1000136" 
  "1000131" -> "1000130" 
  "1000136" -> "1000138" 
  "1000136" -> "1000144" 
  "1000138" -> "1000349" 
  "1000140" -> "1000149" 
  "1000142" -> "1000140" 
  "1000143" -> "1000142" 
  "1000144" -> "1000146" 
  "1000145" -> "1000143" 
  "1000146" -> "1000145" 
  "1000149" -> "1000155" 
  "1000149" -> "1000178" 
  "1000155" -> "1000161" 
  "1000159" -> "1000171" 
  "1000159" -> "1000166" 
  "1000160" -> "1000159" 
  "1000161" -> "1000162" 
  "1000162" -> "1000160" 
  "1000166" -> "1000349" 
  "1000169" -> "1000209" 
  "1000169" -> "1000191" 
  "1000170" -> "1000169" 
  "1000171" -> "1000172" 
  "1000172" -> "1000170" 
  "1000178" -> "1000184" 
  "1000182" -> "1000209" 
  "1000182" -> "1000191" 
  "1000183" -> "1000182" 
  "1000184" -> "1000185" 
  "1000185" -> "1000183" 
  "1000191" -> "1000197" 
  "1000194" -> "1000203" 
  "1000195" -> "1000194" 
  "1000196" -> "1000195" 
  "1000197" -> "1000198" 
  "1000198" -> "1000196" 
  "1000203" -> "1000205" 
  "1000203" -> "1000209" 
  "1000205" -> "1000349" 
  "1000209" -> "1000215" 
  "1000212" -> "1000223" 
  "1000213" -> "1000212" 
  "1000214" -> "1000213" 
  "1000215" -> "1000216" 
  "1000216" -> "1000214" 
  "1000220" -> "1000233" 
  "1000221" -> "1000227" 
  "1000222" -> "1000221" 
  "1000223" -> "1000224" 
  "1000224" -> "1000222" 
  "1000227" -> "1000220" 
  "1000230" -> "1000242" 
  "1000231" -> "1000237" 
  "1000232" -> "1000231" 
  "1000233" -> "1000234" 
  "1000234" -> "1000232" 
  "1000237" -> "1000230" 
  "1000239" -> "1000250" 
  "1000240" -> "1000239" 
  "1000241" -> "1000240" 
  "1000242" -> "1000243" 
  "1000243" -> "1000241" 
  "1000247" -> "1000258" 
  "1000248" -> "1000247" 
  "1000249" -> "1000248" 
  "1000250" -> "1000251" 
  "1000251" -> "1000249" 
  "1000255" -> "1000264" 
  "1000256" -> "1000255" 
  "1000257" -> "1000256" 
  "1000258" -> "1000257" 
  "1000261" -> "1000276" 
  "1000262" -> "1000270" 
  "1000263" -> "1000262" 
  "1000264" -> "1000265" 
  "1000265" -> "1000263" 
  "1000268" -> "1000261" 
  "1000269" -> "1000268" 
  "1000270" -> "1000272" 
  "1000271" -> "1000269" 
  "1000272" -> "1000271" 
  "1000276" -> "1000284" 
  "1000279" -> "1000294" 
  "1000279" -> "1000338" 
  "1000280" -> "1000279" 
  "1000281" -> "1000280" 
  "1000282" -> "1000281" 
  "1000283" -> "1000282" 
  "1000284" -> "1000283" 
  "1000291" -> "1000314" 
  "1000291" -> "1000333" 
  "1000292" -> "1000299" 
  "1000293" -> "1000292" 
  "1000294" -> "1000295" 
  "1000295" -> "1000293" 
  "1000298" -> "1000305" 
  "1000299" -> "1000300" 
  "1000300" -> "1000298" 
  "1000303" -> "1000291" 
  "1000304" -> "1000303" 
  "1000305" -> "1000307" 
  "1000306" -> "1000304" 
  "1000307" -> "1000306" 
  "1000312" -> "1000318" 
  "1000314" -> "1000312" 
  "1000316" -> "1000322" 
  "1000318" -> "1000316" 
  "1000319" -> "1000326" 
  "1000321" -> "1000319" 
  "1000322" -> "1000321" 
  "1000326" -> "1000330" 
  "1000330" -> "1000349" 
  "1000332" -> "1000338" 
  "1000333" -> "1000332" 
  "1000337" -> "1000341" 
  "1000338" -> "1000337" 
  "1000340" -> "1000344" 
  "1000341" -> "1000340" 
  "1000344" -> "1000347" 
  "1000347" -> "1000349" 
  "1000112" -> "1000131" 
}
