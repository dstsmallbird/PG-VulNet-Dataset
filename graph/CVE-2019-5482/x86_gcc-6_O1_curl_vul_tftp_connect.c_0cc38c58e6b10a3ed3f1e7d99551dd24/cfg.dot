digraph tftp_connect {  
"1000125" [label = "(<operator>.assignment,v11 = __readgsdword(0x14u))" ]
"1000127" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000129" [label = "(<operator>.assignment,v2 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000139" [label = "(<operator>.assignment,result = 27)" ]
"1000145" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000147" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000148" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000149" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000150" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000151" [label = "(<operator>.indirection,*a1)" ]
"1000157" [label = "(<operator>.assignment,result = 71)" ]
"1000161" [label = "(<operator>.greaterThan,(unsigned int)(v4 - 8) > 0xFFB0)" ]
"1000162" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000163" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000164" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000168" [label = "(RETURN,return result;,return result;)" ]
"1000170" [label = "(<operator>.assignment,v9 = *(_DWORD *)(*a1 + 1568))" ]
"1000172" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000173" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000174" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000175" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000176" [label = "(<operator>.indirection,*a1)" ]
"1000181" [label = "(<operator>.assignment,v9 = 512)" ]
"1000185" [label = "(<operator>.logicalOr,*(_DWORD *)(v2 + 328) || (v5 = Curl_ccalloc(1, v9 + 4), *(_DWORD *)(v2 + 328) = v5, result = 27, v5))" ]
"1000186" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000187" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000188" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000189" [label = "(<operator>.addition,v2 + 328)" ]
"1000193" [label = "(<operator>.assignment,v5 = Curl_ccalloc(1, v9 + 4))" ]
"1000195" [label = "(Curl_ccalloc,Curl_ccalloc(1, v9 + 4))" ]
"1000197" [label = "(<operator>.addition,v9 + 4)" ]
"1000201" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 328) = v5)" ]
"1000202" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000203" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000204" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000205" [label = "(<operator>.addition,v2 + 328)" ]
"1000210" [label = "(<operator>.assignment,result = 27)" ]
"1000216" [label = "(<operator>.logicalOr,*(_DWORD *)(v2 + 332) || (v6 = Curl_ccalloc(1, v9 + 4), *(_DWORD *)(v2 + 332) = v6, result = 27, v6))" ]
"1000217" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 332))" ]
"1000218" [label = "(<operator>.cast,(_DWORD *)(v2 + 332))" ]
"1000219" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000220" [label = "(<operator>.addition,v2 + 332)" ]
"1000224" [label = "(<operator>.assignment,v6 = Curl_ccalloc(1, v9 + 4))" ]
"1000226" [label = "(Curl_ccalloc,Curl_ccalloc(1, v9 + 4))" ]
"1000228" [label = "(<operator>.addition,v9 + 4)" ]
"1000232" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 332) = v6)" ]
"1000233" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 332))" ]
"1000234" [label = "(<operator>.cast,(_DWORD *)(v2 + 332))" ]
"1000235" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000236" [label = "(<operator>.addition,v2 + 332)" ]
"1000241" [label = "(<operator>.assignment,result = 27)" ]
"1000246" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000249" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 16) = a1)" ]
"1000250" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 16))" ]
"1000251" [label = "(<operator>.cast,(_DWORD *)(v2 + 16))" ]
"1000252" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000253" [label = "(<operator>.addition,v2 + 16)" ]
"1000257" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 20) = a1[103])" ]
"1000258" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 20))" ]
"1000259" [label = "(<operator>.cast,(_DWORD *)(v2 + 20))" ]
"1000260" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000261" [label = "(<operator>.addition,v2 + 20)" ]
"1000264" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000267" [label = "(<operator>.assignment,*(_DWORD *)v2 = 0)" ]
"1000268" [label = "(<operator>.indirection,*(_DWORD *)v2)" ]
"1000269" [label = "(<operator>.cast,(_DWORD *)v2)" ]
"1000270" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000273" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 8) = -100)" ]
"1000274" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 8))" ]
"1000275" [label = "(<operator>.cast,(_DWORD *)(v2 + 8))" ]
"1000276" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000277" [label = "(<operator>.addition,v2 + 8)" ]
"1000280" [label = "(<operator>.minus,-100)" ]
"1000282" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 320) = v9)" ]
"1000283" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 320))" ]
"1000284" [label = "(<operator>.cast,(_DWORD *)(v2 + 320))" ]
"1000285" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000286" [label = "(<operator>.addition,v2 + 320)" ]
"1000290" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 324) = v9)" ]
"1000291" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 324))" ]
"1000292" [label = "(<operator>.cast,(_DWORD *)(v2 + 324))" ]
"1000293" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000294" [label = "(<operator>.addition,v2 + 324)" ]
"1000298" [label = "(<operator>.assignment,*(_WORD *)(v2 + 52) = *(_DWORD *)(a1[18] + 4))" ]
"1000299" [label = "(<operator>.indirection,*(_WORD *)(v2 + 52))" ]
"1000300" [label = "(<operator>.cast,(_WORD *)(v2 + 52))" ]
"1000301" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000302" [label = "(<operator>.addition,v2 + 52)" ]
"1000305" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 4))" ]
"1000306" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 4))" ]
"1000307" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000308" [label = "(<operator>.addition,a1[18] + 4)" ]
"1000309" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000313" [label = "(tftp_set_timeouts,tftp_set_timeouts())" ]
"1000315" [label = "(<operator>.equals,(*((_BYTE *)a1 + 583) & 2) == 0)" ]
"1000316" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000317" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000318" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000319" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000320" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000327" [label = "(bind,bind(*(_DWORD *)(v2 + 20), (const struct sockaddr *)(v2 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000328" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 20))" ]
"1000329" [label = "(<operator>.cast,(_DWORD *)(v2 + 20))" ]
"1000330" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000331" [label = "(<operator>.addition,v2 + 20)" ]
"1000334" [label = "(<operator>.cast,(const struct sockaddr *)(v2 + 52))" ]
"1000335" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000336" [label = "(<operator>.addition,v2 + 52)" ]
"1000339" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000340" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000341" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000342" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000343" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000348" [label = "(<operator>.assignment,v7 = __errno_location())" ]
"1000350" [label = "(__errno_location,__errno_location())" ]
"1000351" [label = "(<operator>.assignment,v8 = Curl_strerror(*v7, buf, 128))" ]
"1000353" [label = "(Curl_strerror,Curl_strerror(*v7, buf, 128))" ]
"1000354" [label = "(<operator>.indirection,*v7)" ]
"1000358" [label = "(Curl_failf,Curl_failf(*a1, \"bind() failed; %s\", v8))" ]
"1000359" [label = "(<operator>.indirection,*a1)" ]
"1000363" [label = "(RETURN,return 7;,return 7;)" ]
"1000365" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000366" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000367" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000368" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000369" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000373" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000374" [label = "(<operator>.indirection,*a1)" ]
"1000376" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000377" [label = "(<operator>.indirection,*a2)" ]
"1000380" [label = "(<operator>.assignment,result = 0)" ]
"1000383" [label = "(RETURN,return result;,return result;)" ]
"1000111" [label = "(METHOD,tftp_connect)" ]
"1000385" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000125" -> "1000131" 
  "1000127" -> "1000125" 
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000139" 
  "1000135" -> "1000134" 
  "1000139" -> "1000149" 
  "1000139" -> "1000383" 
  "1000145" -> "1000157" 
  "1000145" -> "1000181" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000149" -> "1000151" 
  "1000150" -> "1000148" 
  "1000151" -> "1000150" 
  "1000157" -> "1000163" 
  "1000161" -> "1000168" 
  "1000161" -> "1000174" 
  "1000162" -> "1000161" 
  "1000163" -> "1000164" 
  "1000164" -> "1000162" 
  "1000168" -> "1000385" 
  "1000170" -> "1000188" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000174" -> "1000176" 
  "1000175" -> "1000173" 
  "1000176" -> "1000175" 
  "1000181" -> "1000188" 
  "1000185" -> "1000219" 
  "1000185" -> "1000383" 
  "1000186" -> "1000185" 
  "1000186" -> "1000197" 
  "1000187" -> "1000186" 
  "1000188" -> "1000189" 
  "1000189" -> "1000187" 
  "1000193" -> "1000204" 
  "1000195" -> "1000193" 
  "1000197" -> "1000195" 
  "1000201" -> "1000210" 
  "1000202" -> "1000201" 
  "1000203" -> "1000202" 
  "1000204" -> "1000205" 
  "1000205" -> "1000203" 
  "1000210" -> "1000185" 
  "1000216" -> "1000246" 
  "1000216" -> "1000383" 
  "1000217" -> "1000216" 
  "1000217" -> "1000228" 
  "1000218" -> "1000217" 
  "1000219" -> "1000220" 
  "1000220" -> "1000218" 
  "1000224" -> "1000235" 
  "1000226" -> "1000224" 
  "1000228" -> "1000226" 
  "1000232" -> "1000241" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000235" -> "1000236" 
  "1000236" -> "1000234" 
  "1000241" -> "1000216" 
  "1000246" -> "1000252" 
  "1000249" -> "1000260" 
  "1000250" -> "1000249" 
  "1000251" -> "1000250" 
  "1000252" -> "1000253" 
  "1000253" -> "1000251" 
  "1000257" -> "1000270" 
  "1000258" -> "1000264" 
  "1000259" -> "1000258" 
  "1000260" -> "1000261" 
  "1000261" -> "1000259" 
  "1000264" -> "1000257" 
  "1000267" -> "1000276" 
  "1000268" -> "1000267" 
  "1000269" -> "1000268" 
  "1000270" -> "1000269" 
  "1000273" -> "1000285" 
  "1000274" -> "1000280" 
  "1000275" -> "1000274" 
  "1000276" -> "1000277" 
  "1000277" -> "1000275" 
  "1000280" -> "1000273" 
  "1000282" -> "1000293" 
  "1000283" -> "1000282" 
  "1000284" -> "1000283" 
  "1000285" -> "1000286" 
  "1000286" -> "1000284" 
  "1000290" -> "1000301" 
  "1000291" -> "1000290" 
  "1000292" -> "1000291" 
  "1000293" -> "1000294" 
  "1000294" -> "1000292" 
  "1000298" -> "1000313" 
  "1000299" -> "1000307" 
  "1000300" -> "1000299" 
  "1000301" -> "1000302" 
  "1000302" -> "1000300" 
  "1000305" -> "1000298" 
  "1000306" -> "1000305" 
  "1000307" -> "1000309" 
  "1000308" -> "1000306" 
  "1000309" -> "1000308" 
  "1000313" -> "1000320" 
  "1000315" -> "1000330" 
  "1000315" -> "1000374" 
  "1000316" -> "1000315" 
  "1000317" -> "1000316" 
  "1000318" -> "1000317" 
  "1000319" -> "1000318" 
  "1000320" -> "1000319" 
  "1000327" -> "1000369" 
  "1000327" -> "1000350" 
  "1000328" -> "1000335" 
  "1000329" -> "1000328" 
  "1000330" -> "1000331" 
  "1000331" -> "1000329" 
  "1000334" -> "1000341" 
  "1000335" -> "1000336" 
  "1000336" -> "1000334" 
  "1000339" -> "1000327" 
  "1000340" -> "1000339" 
  "1000341" -> "1000343" 
  "1000342" -> "1000340" 
  "1000343" -> "1000342" 
  "1000348" -> "1000354" 
  "1000350" -> "1000348" 
  "1000351" -> "1000359" 
  "1000353" -> "1000351" 
  "1000354" -> "1000353" 
  "1000358" -> "1000363" 
  "1000359" -> "1000358" 
  "1000363" -> "1000385" 
  "1000365" -> "1000374" 
  "1000366" -> "1000365" 
  "1000367" -> "1000366" 
  "1000368" -> "1000367" 
  "1000369" -> "1000368" 
  "1000373" -> "1000377" 
  "1000374" -> "1000373" 
  "1000376" -> "1000380" 
  "1000377" -> "1000376" 
  "1000380" -> "1000383" 
  "1000383" -> "1000385" 
  "1000111" -> "1000127" 
}
