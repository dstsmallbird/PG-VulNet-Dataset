digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,v5 = v4)" ]
"1000137" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000138" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000143" [label = "(<operator>.logicalNot,!v4)" ]
"1000145" [label = "(RETURN,return 27;,return 27;)" ]
"1000147" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000160" [label = "(<operator>.greaterThan,(unsigned int)(v7 - 8) > 0xFFB0)" ]
"1000161" [label = "(<operator>.cast,(unsigned int)(v7 - 8))" ]
"1000162" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000163" [label = "(<operator>.subtraction,v7 - 8)" ]
"1000167" [label = "(RETURN,return 71;,return 71;)" ]
"1000170" [label = "(<operator>.lessThan,v7 < 512)" ]
"1000174" [label = "(<operator>.assignment,v8 = 512)" ]
"1000180" [label = "(<operator>.assignment,v7 = 512)" ]
"1000183" [label = "(<operator>.assignment,v8 = v7)" ]
"1000188" [label = "(<operator>.logicalNot,!*(_DWORD *)(v4 + 328))" ]
"1000189" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000190" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000191" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000192" [label = "(<operator>.addition,v4 + 328)" ]
"1000196" [label = "(<operator>.assignment,v9 = Curl_ccalloc(1, v8 + 4))" ]
"1000198" [label = "(Curl_ccalloc,Curl_ccalloc(1, v8 + 4))" ]
"1000200" [label = "(<operator>.addition,v8 + 4)" ]
"1000203" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v9)" ]
"1000204" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000205" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000206" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000207" [label = "(<operator>.addition,v5 + 328)" ]
"1000212" [label = "(<operator>.logicalNot,!v9)" ]
"1000214" [label = "(RETURN,return 27;,return 27;)" ]
"1000217" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000218" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000219" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000220" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000221" [label = "(<operator>.addition,v5 + 332)" ]
"1000225" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1, v8 + 4))" ]
"1000227" [label = "(Curl_ccalloc,Curl_ccalloc(1, v8 + 4))" ]
"1000229" [label = "(<operator>.addition,v8 + 4)" ]
"1000232" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v10)" ]
"1000233" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000234" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000235" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000236" [label = "(<operator>.addition,v5 + 332)" ]
"1000241" [label = "(<operator>.logicalNot,!v10)" ]
"1000243" [label = "(RETURN,return 27;,return 27;)" ]
"1000245" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000248" [label = "(<operator>.assignment,v11 = a1[105])" ]
"1000250" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000253" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000254" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000255" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000256" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000257" [label = "(<operator>.addition,v5 + 16)" ]
"1000261" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v7)" ]
"1000262" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000263" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000264" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000265" [label = "(<operator>.addition,v5 + 324)" ]
"1000269" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = v11)" ]
"1000270" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000271" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000272" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000273" [label = "(<operator>.addition,v5 + 20)" ]
"1000277" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000278" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000279" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000280" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000283" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000284" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000285" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000286" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000287" [label = "(<operator>.addition,v5 + 8)" ]
"1000290" [label = "(<operator>.minus,-100)" ]
"1000292" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = 512)" ]
"1000293" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000294" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000295" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000296" [label = "(<operator>.addition,v5 + 320)" ]
"1000300" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000301" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000302" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000303" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000304" [label = "(<operator>.addition,v5 + 52)" ]
"1000307" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000308" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000309" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000310" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000311" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000315" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000318" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 2) == 0)" ]
"1000319" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000320" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000321" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000322" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000323" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000330" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000331" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000332" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000333" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000334" [label = "(<operator>.addition,v5 + 20)" ]
"1000337" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000338" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000339" [label = "(<operator>.addition,v5 + 52)" ]
"1000342" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000343" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000344" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000345" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000346" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000351" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000353" [label = "(_errno_location,_errno_location())" ]
"1000354" [label = "(<operator>.assignment,v13 = *a1)" ]
"1000356" [label = "(<operator>.indirection,*a1)" ]
"1000358" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v12, v15, 128))" ]
"1000360" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v15, 128))" ]
"1000361" [label = "(UNKNOWN,const char *,const char *)" ]
"1000362" [label = "(Curl_strerror,Curl_strerror(*v12, v15, 128))" ]
"1000363" [label = "(<operator>.indirection,*v12)" ]
"1000367" [label = "(Curl_failf,Curl_failf(v13, \"bind() failed; %s\", v14))" ]
"1000371" [label = "(RETURN,return 7;,return 7;)" ]
"1000373" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 591) |= 2u)" ]
"1000374" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000375" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000376" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000377" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000381" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000382" [label = "(<operator>.indirection,*a1)" ]
"1000384" [label = "(<operator>.assignment,result = 0)" ]
"1000387" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000388" [label = "(<operator>.indirection,*a2)" ]
"1000391" [label = "(RETURN,return result;,return result;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000393" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000134" 
  "1000131" -> "1000129" 
  "1000134" -> "1000138" 
  "1000137" -> "1000143" 
  "1000138" -> "1000137" 
  "1000143" -> "1000145" 
  "1000143" -> "1000151" 
  "1000145" -> "1000393" 
  "1000147" -> "1000162" 
  "1000147" -> "1000180" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000160" -> "1000167" 
  "1000160" -> "1000170" 
  "1000161" -> "1000160" 
  "1000162" -> "1000163" 
  "1000163" -> "1000161" 
  "1000167" -> "1000393" 
  "1000170" -> "1000174" 
  "1000170" -> "1000183" 
  "1000174" -> "1000191" 
  "1000180" -> "1000183" 
  "1000183" -> "1000191" 
  "1000188" -> "1000220" 
  "1000188" -> "1000200" 
  "1000189" -> "1000188" 
  "1000190" -> "1000189" 
  "1000191" -> "1000192" 
  "1000192" -> "1000190" 
  "1000196" -> "1000206" 
  "1000198" -> "1000196" 
  "1000200" -> "1000198" 
  "1000203" -> "1000212" 
  "1000204" -> "1000203" 
  "1000205" -> "1000204" 
  "1000206" -> "1000207" 
  "1000207" -> "1000205" 
  "1000212" -> "1000220" 
  "1000212" -> "1000214" 
  "1000214" -> "1000393" 
  "1000217" -> "1000229" 
  "1000217" -> "1000245" 
  "1000218" -> "1000217" 
  "1000219" -> "1000218" 
  "1000220" -> "1000221" 
  "1000221" -> "1000219" 
  "1000225" -> "1000235" 
  "1000227" -> "1000225" 
  "1000229" -> "1000227" 
  "1000232" -> "1000241" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000235" -> "1000236" 
  "1000236" -> "1000234" 
  "1000241" -> "1000243" 
  "1000241" -> "1000245" 
  "1000243" -> "1000393" 
  "1000245" -> "1000250" 
  "1000248" -> "1000256" 
  "1000250" -> "1000248" 
  "1000253" -> "1000264" 
  "1000254" -> "1000253" 
  "1000255" -> "1000254" 
  "1000256" -> "1000257" 
  "1000257" -> "1000255" 
  "1000261" -> "1000272" 
  "1000262" -> "1000261" 
  "1000263" -> "1000262" 
  "1000264" -> "1000265" 
  "1000265" -> "1000263" 
  "1000269" -> "1000280" 
  "1000270" -> "1000269" 
  "1000271" -> "1000270" 
  "1000272" -> "1000273" 
  "1000273" -> "1000271" 
  "1000277" -> "1000286" 
  "1000278" -> "1000277" 
  "1000279" -> "1000278" 
  "1000280" -> "1000279" 
  "1000283" -> "1000295" 
  "1000284" -> "1000290" 
  "1000285" -> "1000284" 
  "1000286" -> "1000287" 
  "1000287" -> "1000285" 
  "1000290" -> "1000283" 
  "1000292" -> "1000303" 
  "1000293" -> "1000292" 
  "1000294" -> "1000293" 
  "1000295" -> "1000296" 
  "1000296" -> "1000294" 
  "1000300" -> "1000315" 
  "1000301" -> "1000309" 
  "1000302" -> "1000301" 
  "1000303" -> "1000304" 
  "1000304" -> "1000302" 
  "1000307" -> "1000300" 
  "1000308" -> "1000307" 
  "1000309" -> "1000311" 
  "1000310" -> "1000308" 
  "1000311" -> "1000310" 
  "1000315" -> "1000323" 
  "1000318" -> "1000333" 
  "1000318" -> "1000382" 
  "1000319" -> "1000318" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000330" -> "1000377" 
  "1000330" -> "1000353" 
  "1000331" -> "1000338" 
  "1000332" -> "1000331" 
  "1000333" -> "1000334" 
  "1000334" -> "1000332" 
  "1000337" -> "1000344" 
  "1000338" -> "1000339" 
  "1000339" -> "1000337" 
  "1000342" -> "1000330" 
  "1000343" -> "1000342" 
  "1000344" -> "1000346" 
  "1000345" -> "1000343" 
  "1000346" -> "1000345" 
  "1000351" -> "1000356" 
  "1000353" -> "1000351" 
  "1000354" -> "1000361" 
  "1000356" -> "1000354" 
  "1000358" -> "1000367" 
  "1000360" -> "1000358" 
  "1000361" -> "1000363" 
  "1000362" -> "1000360" 
  "1000363" -> "1000362" 
  "1000367" -> "1000371" 
  "1000371" -> "1000393" 
  "1000373" -> "1000382" 
  "1000374" -> "1000373" 
  "1000375" -> "1000374" 
  "1000376" -> "1000375" 
  "1000377" -> "1000376" 
  "1000381" -> "1000384" 
  "1000382" -> "1000381" 
  "1000384" -> "1000388" 
  "1000387" -> "1000391" 
  "1000388" -> "1000387" 
  "1000391" -> "1000393" 
  "1000113" -> "1000131" 
}
