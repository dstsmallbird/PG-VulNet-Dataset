digraph tftp_connect {  
"1000127" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000129" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000132" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000133" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000138" [label = "(<operator>.logicalNot,!v4)" ]
"1000140" [label = "(RETURN,return 27;,return 27;)" ]
"1000142" [label = "(<operator>.assignment,v5 = v4)" ]
"1000145" [label = "(<operator>.assignment,v6 = *(_DWORD *)(*a1 + 1576))" ]
"1000147" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000148" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000150" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000151" [label = "(<operator>.indirection,*a1)" ]
"1000158" [label = "(<operator>.greaterThan,(unsigned int)(v6 - 8) > 0xFFB0)" ]
"1000159" [label = "(<operator>.cast,(unsigned int)(v6 - 8))" ]
"1000160" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000161" [label = "(<operator>.subtraction,v6 - 8)" ]
"1000165" [label = "(RETURN,return 71;,return 71;)" ]
"1000167" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000169" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000170" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000171" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000172" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000173" [label = "(<operator>.indirection,*a1)" ]
"1000178" [label = "(<operator>.assignment,v7 = 512)" ]
"1000181" [label = "(<operator>.assignment,v9 = v7)" ]
"1000185" [label = "(<operator>.lessThan,v7 < 512)" ]
"1000188" [label = "(<operator>.assignment,v9 = 512)" ]
"1000192" [label = "(<operator>.logicalNot,!*(_DWORD *)(v4 + 328))" ]
"1000193" [label = "(<operator>.indirection,*(_DWORD *)(v4 + 328))" ]
"1000194" [label = "(<operator>.cast,(_DWORD *)(v4 + 328))" ]
"1000195" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000196" [label = "(<operator>.addition,v4 + 328)" ]
"1000200" [label = "(<operator>.assignment,v10 = Curl_ccalloc(1u, v9 + 4))" ]
"1000202" [label = "(Curl_ccalloc,Curl_ccalloc(1u, v9 + 4))" ]
"1000204" [label = "(<operator>.addition,v9 + 4)" ]
"1000207" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 328) = v10)" ]
"1000208" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 328))" ]
"1000209" [label = "(<operator>.cast,(_DWORD *)(v5 + 328))" ]
"1000210" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000211" [label = "(<operator>.addition,v5 + 328)" ]
"1000216" [label = "(<operator>.logicalNot,!v10)" ]
"1000218" [label = "(RETURN,return 27;,return 27;)" ]
"1000221" [label = "(<operator>.logicalNot,!*(_DWORD *)(v5 + 332))" ]
"1000222" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000223" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000224" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000225" [label = "(<operator>.addition,v5 + 332)" ]
"1000229" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1u, v9 + 4))" ]
"1000231" [label = "(Curl_ccalloc,Curl_ccalloc(1u, v9 + 4))" ]
"1000233" [label = "(<operator>.addition,v9 + 4)" ]
"1000236" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 332) = v11)" ]
"1000237" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 332))" ]
"1000238" [label = "(<operator>.cast,(_DWORD *)(v5 + 332))" ]
"1000239" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000240" [label = "(<operator>.addition,v5 + 332)" ]
"1000245" [label = "(<operator>.logicalNot,!v11)" ]
"1000247" [label = "(RETURN,return 27;,return 27;)" ]
"1000249" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000252" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 16) = a1)" ]
"1000253" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 16))" ]
"1000254" [label = "(<operator>.cast,(_DWORD *)(v5 + 16))" ]
"1000255" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000256" [label = "(<operator>.addition,v5 + 16)" ]
"1000260" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 20) = a1[105])" ]
"1000261" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000262" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000263" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000264" [label = "(<operator>.addition,v5 + 20)" ]
"1000267" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000270" [label = "(<operator>.assignment,*(_DWORD *)v5 = 0)" ]
"1000271" [label = "(<operator>.indirection,*(_DWORD *)v5)" ]
"1000272" [label = "(<operator>.cast,(_DWORD *)v5)" ]
"1000273" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000276" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 8) = -100)" ]
"1000277" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 8))" ]
"1000278" [label = "(<operator>.cast,(_DWORD *)(v5 + 8))" ]
"1000279" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000280" [label = "(<operator>.addition,v5 + 8)" ]
"1000283" [label = "(<operator>.minus,-100)" ]
"1000285" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 320) = 512)" ]
"1000286" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 320))" ]
"1000287" [label = "(<operator>.cast,(_DWORD *)(v5 + 320))" ]
"1000288" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000289" [label = "(<operator>.addition,v5 + 320)" ]
"1000293" [label = "(<operator>.assignment,*(_DWORD *)(v5 + 324) = v7)" ]
"1000294" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 324))" ]
"1000295" [label = "(<operator>.cast,(_DWORD *)(v5 + 324))" ]
"1000296" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000297" [label = "(<operator>.addition,v5 + 324)" ]
"1000301" [label = "(<operator>.assignment,*(_WORD *)(v5 + 52) = *(_DWORD *)(a1[20] + 4))" ]
"1000302" [label = "(<operator>.indirection,*(_WORD *)(v5 + 52))" ]
"1000303" [label = "(<operator>.cast,(_WORD *)(v5 + 52))" ]
"1000304" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000305" [label = "(<operator>.addition,v5 + 52)" ]
"1000308" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 4))" ]
"1000309" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 4))" ]
"1000310" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000311" [label = "(<operator>.addition,a1[20] + 4)" ]
"1000312" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000316" [label = "(tftp_set_timeouts,tftp_set_timeouts(v5))" ]
"1000319" [label = "(<operator>.equals,(*((_BYTE *)a1 + 591) & 2) == 0)" ]
"1000320" [label = "(<operator>.and,*((_BYTE *)a1 + 591) & 2)" ]
"1000321" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000322" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000323" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000324" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000331" [label = "(bind,bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000332" [label = "(<operator>.indirection,*(_DWORD *)(v5 + 20))" ]
"1000333" [label = "(<operator>.cast,(_DWORD *)(v5 + 20))" ]
"1000334" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000335" [label = "(<operator>.addition,v5 + 20)" ]
"1000338" [label = "(<operator>.cast,(const struct sockaddr *)(v5 + 52))" ]
"1000339" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000340" [label = "(<operator>.addition,v5 + 52)" ]
"1000343" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000344" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000345" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000346" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000347" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000352" [label = "(<operator>.assignment,v12 = *a1)" ]
"1000354" [label = "(<operator>.indirection,*a1)" ]
"1000356" [label = "(<operator>.assignment,v13 = _errno_location())" ]
"1000358" [label = "(_errno_location,_errno_location())" ]
"1000359" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v13, v15, 128))" ]
"1000361" [label = "(<operator>.cast,(const char *)Curl_strerror(*v13, v15, 128))" ]
"1000362" [label = "(UNKNOWN,const char *,const char *)" ]
"1000363" [label = "(Curl_strerror,Curl_strerror(*v13, v15, 128))" ]
"1000364" [label = "(<operator>.indirection,*v13)" ]
"1000368" [label = "(Curl_failf,Curl_failf(v12, \"bind() failed; %s\", v14))" ]
"1000372" [label = "(RETURN,return 7;,return 7;)" ]
"1000374" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 591) |= 2u)" ]
"1000375" [label = "(<operator>.indirection,*((_BYTE *)a1 + 591))" ]
"1000376" [label = "(<operator>.addition,(_BYTE *)a1 + 591)" ]
"1000377" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000378" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000382" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000383" [label = "(<operator>.indirection,*a1)" ]
"1000385" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000386" [label = "(<operator>.indirection,*a2)" ]
"1000389" [label = "(RETURN,return 0;,return 0;)" ]
"1000112" [label = "(METHOD,tftp_connect)" ]
"1000391" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000127" -> "1000133" 
  "1000129" -> "1000127" 
  "1000132" -> "1000138" 
  "1000133" -> "1000132" 
  "1000138" -> "1000140" 
  "1000138" -> "1000142" 
  "1000140" -> "1000391" 
  "1000142" -> "1000149" 
  "1000145" -> "1000160" 
  "1000145" -> "1000178" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000149" -> "1000151" 
  "1000150" -> "1000148" 
  "1000151" -> "1000150" 
  "1000158" -> "1000165" 
  "1000158" -> "1000171" 
  "1000159" -> "1000158" 
  "1000160" -> "1000161" 
  "1000161" -> "1000159" 
  "1000165" -> "1000391" 
  "1000167" -> "1000181" 
  "1000169" -> "1000167" 
  "1000170" -> "1000169" 
  "1000171" -> "1000173" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000178" -> "1000181" 
  "1000181" -> "1000185" 
  "1000185" -> "1000195" 
  "1000185" -> "1000188" 
  "1000188" -> "1000195" 
  "1000192" -> "1000224" 
  "1000192" -> "1000204" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000195" -> "1000196" 
  "1000196" -> "1000194" 
  "1000200" -> "1000210" 
  "1000202" -> "1000200" 
  "1000204" -> "1000202" 
  "1000207" -> "1000216" 
  "1000208" -> "1000207" 
  "1000209" -> "1000208" 
  "1000210" -> "1000211" 
  "1000211" -> "1000209" 
  "1000216" -> "1000224" 
  "1000216" -> "1000218" 
  "1000218" -> "1000391" 
  "1000221" -> "1000233" 
  "1000221" -> "1000249" 
  "1000222" -> "1000221" 
  "1000223" -> "1000222" 
  "1000224" -> "1000225" 
  "1000225" -> "1000223" 
  "1000229" -> "1000239" 
  "1000231" -> "1000229" 
  "1000233" -> "1000231" 
  "1000236" -> "1000245" 
  "1000237" -> "1000236" 
  "1000238" -> "1000237" 
  "1000239" -> "1000240" 
  "1000240" -> "1000238" 
  "1000245" -> "1000247" 
  "1000245" -> "1000249" 
  "1000247" -> "1000391" 
  "1000249" -> "1000255" 
  "1000252" -> "1000263" 
  "1000253" -> "1000252" 
  "1000254" -> "1000253" 
  "1000255" -> "1000256" 
  "1000256" -> "1000254" 
  "1000260" -> "1000273" 
  "1000261" -> "1000267" 
  "1000262" -> "1000261" 
  "1000263" -> "1000264" 
  "1000264" -> "1000262" 
  "1000267" -> "1000260" 
  "1000270" -> "1000279" 
  "1000271" -> "1000270" 
  "1000272" -> "1000271" 
  "1000273" -> "1000272" 
  "1000276" -> "1000288" 
  "1000277" -> "1000283" 
  "1000278" -> "1000277" 
  "1000279" -> "1000280" 
  "1000280" -> "1000278" 
  "1000283" -> "1000276" 
  "1000285" -> "1000296" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000288" -> "1000289" 
  "1000289" -> "1000287" 
  "1000293" -> "1000304" 
  "1000294" -> "1000293" 
  "1000295" -> "1000294" 
  "1000296" -> "1000297" 
  "1000297" -> "1000295" 
  "1000301" -> "1000316" 
  "1000302" -> "1000310" 
  "1000303" -> "1000302" 
  "1000304" -> "1000305" 
  "1000305" -> "1000303" 
  "1000308" -> "1000301" 
  "1000309" -> "1000308" 
  "1000310" -> "1000312" 
  "1000311" -> "1000309" 
  "1000312" -> "1000311" 
  "1000316" -> "1000324" 
  "1000319" -> "1000334" 
  "1000319" -> "1000383" 
  "1000320" -> "1000319" 
  "1000321" -> "1000320" 
  "1000322" -> "1000321" 
  "1000323" -> "1000322" 
  "1000324" -> "1000323" 
  "1000331" -> "1000378" 
  "1000331" -> "1000354" 
  "1000332" -> "1000339" 
  "1000333" -> "1000332" 
  "1000334" -> "1000335" 
  "1000335" -> "1000333" 
  "1000338" -> "1000345" 
  "1000339" -> "1000340" 
  "1000340" -> "1000338" 
  "1000343" -> "1000331" 
  "1000344" -> "1000343" 
  "1000345" -> "1000347" 
  "1000346" -> "1000344" 
  "1000347" -> "1000346" 
  "1000352" -> "1000358" 
  "1000354" -> "1000352" 
  "1000356" -> "1000362" 
  "1000358" -> "1000356" 
  "1000359" -> "1000368" 
  "1000361" -> "1000359" 
  "1000362" -> "1000364" 
  "1000363" -> "1000361" 
  "1000364" -> "1000363" 
  "1000368" -> "1000372" 
  "1000372" -> "1000391" 
  "1000374" -> "1000383" 
  "1000375" -> "1000374" 
  "1000376" -> "1000375" 
  "1000377" -> "1000376" 
  "1000378" -> "1000377" 
  "1000382" -> "1000386" 
  "1000383" -> "1000382" 
  "1000385" -> "1000389" 
  "1000386" -> "1000385" 
  "1000389" -> "1000391" 
  "1000112" -> "1000129" 
}
