digraph tftp_connect {  
"1000133" [label = "(<operator>.assignment,v16 = __readfsqword(0x28u))" ]
"1000135" [label = "(__readfsqword,__readfsqword(0x28u))" ]
"1000137" [label = "(<operator>.assignment,a1[167] = v3)" ]
"1000138" [label = "(<operator>.indirectIndexAccess,a1[167])" ]
"1000151" [label = "(<operator>.greaterThan,(unsigned int)(v5 - 8) > 0xFFB0)" ]
"1000152" [label = "(<operator>.cast,(unsigned int)(v5 - 8))" ]
"1000153" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000154" [label = "(<operator>.subtraction,v5 - 8)" ]
"1000158" [label = "(RETURN,return result;,return result;)" ]
"1000162" [label = "(<operator>.assignment,v6 = 512)" ]
"1000165" [label = "(<operator>.assignment,v7 = 512)" ]
"1000169" [label = "(<operator>.greaterEqualsThan,v6 >= 512)" ]
"1000172" [label = "(<operator>.assignment,v7 = v6)" ]
"1000177" [label = "(<operator>.assignment,*(_QWORD *)(v3 + 16) = a1)" ]
"1000178" [label = "(<operator>.indirection,*(_QWORD *)(v3 + 16))" ]
"1000179" [label = "(<operator>.cast,(_QWORD *)(v3 + 16))" ]
"1000180" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000181" [label = "(<operator>.addition,v3 + 16)" ]
"1000185" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 24) = *((_DWORD *)a1 + 156))" ]
"1000186" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 24))" ]
"1000187" [label = "(<operator>.cast,(_DWORD *)(v3 + 24))" ]
"1000188" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000189" [label = "(<operator>.addition,v3 + 24)" ]
"1000192" [label = "(<operator>.indirection,*((_DWORD *)a1 + 156))" ]
"1000193" [label = "(<operator>.addition,(_DWORD *)a1 + 156)" ]
"1000194" [label = "(<operator>.cast,(_DWORD *)a1)" ]
"1000195" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000198" [label = "(<operator>.assignment,*(_DWORD *)v3 = 0)" ]
"1000199" [label = "(<operator>.indirection,*(_DWORD *)v3)" ]
"1000200" [label = "(<operator>.cast,(_DWORD *)v3)" ]
"1000201" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000204" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 8) = -100)" ]
"1000205" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 8))" ]
"1000206" [label = "(<operator>.cast,(_DWORD *)(v3 + 8))" ]
"1000207" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000208" [label = "(<operator>.addition,v3 + 8)" ]
"1000211" [label = "(<operator>.minus,-100)" ]
"1000213" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 340) = 512)" ]
"1000214" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 340))" ]
"1000215" [label = "(<operator>.cast,(_DWORD *)(v3 + 340))" ]
"1000216" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000217" [label = "(<operator>.addition,v3 + 340)" ]
"1000221" [label = "(<operator>.assignment,*(_DWORD *)(v3 + 344) = v6)" ]
"1000222" [label = "(<operator>.indirection,*(_DWORD *)(v3 + 344))" ]
"1000223" [label = "(<operator>.cast,(_DWORD *)(v3 + 344))" ]
"1000224" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000225" [label = "(<operator>.addition,v3 + 344)" ]
"1000229" [label = "(tftp_set_timeouts,tftp_set_timeouts(v3))" ]
"1000232" [label = "(<operator>.equals,(*((_BYTE *)a1 + 951) & 2) == 0)" ]
"1000233" [label = "(<operator>.and,*((_BYTE *)a1 + 951) & 2)" ]
"1000234" [label = "(<operator>.indirection,*((_BYTE *)a1 + 951))" ]
"1000235" [label = "(<operator>.addition,(_BYTE *)a1 + 951)" ]
"1000236" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000237" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000244" [label = "(<operator>.assignment,v10 = __errno_location())" ]
"1000246" [label = "(__errno_location,__errno_location())" ]
"1000247" [label = "(Curl_failf,Curl_failf(*a1, (unsigned int)\"bind() failed; %s\", v11, v12, v13, v14, v15[0]))" ]
"1000248" [label = "(<operator>.indirection,*a1)" ]
"1000250" [label = "(<operator>.cast,(unsigned int)\"bind() failed; %s\")" ]
"1000251" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000257" [label = "(<operator>.indirectIndexAccess,v15[0])" ]
"1000261" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 951) |= 2u)" ]
"1000262" [label = "(<operator>.indirection,*((_BYTE *)a1 + 951))" ]
"1000263" [label = "(<operator>.addition,(_BYTE *)a1 + 951)" ]
"1000264" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000265" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000269" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000270" [label = "(<operator>.indirection,*a1)" ]
"1000272" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000273" [label = "(<operator>.indirection,*a2)" ]
"1000277" [label = "(RETURN,return result;,return result;)" ]
"1000115" [label = "(METHOD,tftp_connect)" ]
"1000279" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000133" -> "1000138" 
  "1000135" -> "1000133" 
  "1000137" -> "1000153" 
  "1000137" -> "1000162" 
  "1000137" -> "1000277" 
  "1000138" -> "1000137" 
  "1000151" -> "1000158" 
  "1000151" -> "1000165" 
  "1000152" -> "1000151" 
  "1000153" -> "1000154" 
  "1000154" -> "1000152" 
  "1000158" -> "1000279" 
  "1000162" -> "1000165" 
  "1000165" -> "1000169" 
  "1000169" -> "1000180" 
  "1000169" -> "1000172" 
  "1000172" -> "1000180" 
  "1000177" -> "1000188" 
  "1000178" -> "1000177" 
  "1000179" -> "1000178" 
  "1000180" -> "1000181" 
  "1000181" -> "1000179" 
  "1000185" -> "1000201" 
  "1000186" -> "1000195" 
  "1000187" -> "1000186" 
  "1000188" -> "1000189" 
  "1000189" -> "1000187" 
  "1000192" -> "1000185" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000198" -> "1000207" 
  "1000199" -> "1000198" 
  "1000200" -> "1000199" 
  "1000201" -> "1000200" 
  "1000204" -> "1000216" 
  "1000205" -> "1000211" 
  "1000206" -> "1000205" 
  "1000207" -> "1000208" 
  "1000208" -> "1000206" 
  "1000211" -> "1000204" 
  "1000213" -> "1000224" 
  "1000214" -> "1000213" 
  "1000215" -> "1000214" 
  "1000216" -> "1000217" 
  "1000217" -> "1000215" 
  "1000221" -> "1000229" 
  "1000222" -> "1000221" 
  "1000223" -> "1000222" 
  "1000224" -> "1000225" 
  "1000225" -> "1000223" 
  "1000229" -> "1000237" 
  "1000232" -> "1000246" 
  "1000232" -> "1000270" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000235" -> "1000234" 
  "1000236" -> "1000235" 
  "1000237" -> "1000236" 
  "1000244" -> "1000248" 
  "1000246" -> "1000244" 
  "1000247" -> "1000265" 
  "1000248" -> "1000251" 
  "1000250" -> "1000257" 
  "1000251" -> "1000250" 
  "1000257" -> "1000247" 
  "1000261" -> "1000270" 
  "1000262" -> "1000261" 
  "1000263" -> "1000262" 
  "1000264" -> "1000263" 
  "1000265" -> "1000264" 
  "1000269" -> "1000273" 
  "1000270" -> "1000269" 
  "1000272" -> "1000277" 
  "1000273" -> "1000272" 
  "1000277" -> "1000279" 
  "1000115" -> "1000135" 
}
