digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v13 = __readgsdword(0x14u))" ]
"1000131" [label = "(__readgsdword,__readgsdword(0x14u))" ]
"1000133" [label = "(<operator>.assignment,v2 = Curl_ccalloc(1, 336))" ]
"1000135" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000138" [label = "(<operator>.assignment,a1[185] = v2)" ]
"1000139" [label = "(<operator>.indirectIndexAccess,a1[185])" ]
"1000143" [label = "(<operator>.assignment,result = 27)" ]
"1000149" [label = "(<operator>.assignment,v4 = *(_DWORD *)(*a1 + 1568))" ]
"1000151" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000152" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000153" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000154" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000155" [label = "(<operator>.indirection,*a1)" ]
"1000161" [label = "(<operator>.assignment,result = 71)" ]
"1000165" [label = "(<operator>.greaterThan,(unsigned int)(v4 - 8) > 0xFFB0)" ]
"1000166" [label = "(<operator>.cast,(unsigned int)(v4 - 8))" ]
"1000167" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000168" [label = "(<operator>.subtraction,v4 - 8)" ]
"1000172" [label = "(RETURN,return result;,return result;)" ]
"1000174" [label = "(<operator>.assignment,v10 = *(_DWORD *)(*a1 + 1568))" ]
"1000176" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1568))" ]
"1000177" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1568))" ]
"1000178" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000179" [label = "(<operator>.addition,*a1 + 1568)" ]
"1000180" [label = "(<operator>.indirection,*a1)" ]
"1000185" [label = "(<operator>.assignment,v10 = 512)" ]
"1000188" [label = "(<operator>.assignment,v5 = 512)" ]
"1000192" [label = "(<operator>.greaterEqualsThan,v10 >= 512)" ]
"1000195" [label = "(<operator>.assignment,v5 = v10)" ]
"1000198" [label = "(<operator>.assignment,v11 = v5)" ]
"1000202" [label = "(<operator>.logicalOr,*(_DWORD *)(v2 + 328) || (v6 = Curl_ccalloc(1, v5 + 4), *(_DWORD *)(v2 + 328) = v6, result = 27, v6))" ]
"1000203" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000204" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000205" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000206" [label = "(<operator>.addition,v2 + 328)" ]
"1000210" [label = "(<operator>.assignment,v6 = Curl_ccalloc(1, v5 + 4))" ]
"1000212" [label = "(Curl_ccalloc,Curl_ccalloc(1, v5 + 4))" ]
"1000214" [label = "(<operator>.addition,v5 + 4)" ]
"1000218" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 328) = v6)" ]
"1000219" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 328))" ]
"1000220" [label = "(<operator>.cast,(_DWORD *)(v2 + 328))" ]
"1000221" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000222" [label = "(<operator>.addition,v2 + 328)" ]
"1000227" [label = "(<operator>.assignment,result = 27)" ]
"1000233" [label = "(<operator>.logicalOr,*(_DWORD *)(v2 + 332) || (v7 = Curl_ccalloc(1, v11 + 4), *(_DWORD *)(v2 + 332) = v7, result = 27, v7))" ]
"1000234" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 332))" ]
"1000235" [label = "(<operator>.cast,(_DWORD *)(v2 + 332))" ]
"1000236" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000237" [label = "(<operator>.addition,v2 + 332)" ]
"1000241" [label = "(<operator>.assignment,v7 = Curl_ccalloc(1, v11 + 4))" ]
"1000243" [label = "(Curl_ccalloc,Curl_ccalloc(1, v11 + 4))" ]
"1000245" [label = "(<operator>.addition,v11 + 4)" ]
"1000249" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 332) = v7)" ]
"1000250" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 332))" ]
"1000251" [label = "(<operator>.cast,(_DWORD *)(v2 + 332))" ]
"1000252" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000253" [label = "(<operator>.addition,v2 + 332)" ]
"1000258" [label = "(<operator>.assignment,result = 27)" ]
"1000263" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000266" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 16) = a1)" ]
"1000267" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 16))" ]
"1000268" [label = "(<operator>.cast,(_DWORD *)(v2 + 16))" ]
"1000269" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000270" [label = "(<operator>.addition,v2 + 16)" ]
"1000274" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 20) = a1[103])" ]
"1000275" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 20))" ]
"1000276" [label = "(<operator>.cast,(_DWORD *)(v2 + 20))" ]
"1000277" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000278" [label = "(<operator>.addition,v2 + 20)" ]
"1000281" [label = "(<operator>.indirectIndexAccess,a1[103])" ]
"1000284" [label = "(<operator>.assignment,*(_DWORD *)v2 = 0)" ]
"1000285" [label = "(<operator>.indirection,*(_DWORD *)v2)" ]
"1000286" [label = "(<operator>.cast,(_DWORD *)v2)" ]
"1000287" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000290" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 8) = -100)" ]
"1000291" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 8))" ]
"1000292" [label = "(<operator>.cast,(_DWORD *)(v2 + 8))" ]
"1000293" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000294" [label = "(<operator>.addition,v2 + 8)" ]
"1000297" [label = "(<operator>.minus,-100)" ]
"1000299" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 320) = 512)" ]
"1000300" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 320))" ]
"1000301" [label = "(<operator>.cast,(_DWORD *)(v2 + 320))" ]
"1000302" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000303" [label = "(<operator>.addition,v2 + 320)" ]
"1000307" [label = "(<operator>.assignment,*(_DWORD *)(v2 + 324) = v10)" ]
"1000308" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 324))" ]
"1000309" [label = "(<operator>.cast,(_DWORD *)(v2 + 324))" ]
"1000310" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000311" [label = "(<operator>.addition,v2 + 324)" ]
"1000315" [label = "(<operator>.assignment,*(_WORD *)(v2 + 52) = *(_DWORD *)(a1[18] + 4))" ]
"1000316" [label = "(<operator>.indirection,*(_WORD *)(v2 + 52))" ]
"1000317" [label = "(<operator>.cast,(_WORD *)(v2 + 52))" ]
"1000318" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000319" [label = "(<operator>.addition,v2 + 52)" ]
"1000322" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 4))" ]
"1000323" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 4))" ]
"1000324" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000325" [label = "(<operator>.addition,a1[18] + 4)" ]
"1000326" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000330" [label = "(tftp_set_timeouts,tftp_set_timeouts())" ]
"1000332" [label = "(<operator>.equals,(*((_BYTE *)a1 + 583) & 2) == 0)" ]
"1000333" [label = "(<operator>.and,*((_BYTE *)a1 + 583) & 2)" ]
"1000334" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000335" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000336" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000337" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000344" [label = "(bind,bind(*(_DWORD *)(v2 + 20), (const struct sockaddr *)(v2 + 52), *(_DWORD *)(a1[18] + 16)))" ]
"1000345" [label = "(<operator>.indirection,*(_DWORD *)(v2 + 20))" ]
"1000346" [label = "(<operator>.cast,(_DWORD *)(v2 + 20))" ]
"1000347" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000348" [label = "(<operator>.addition,v2 + 20)" ]
"1000351" [label = "(<operator>.cast,(const struct sockaddr *)(v2 + 52))" ]
"1000352" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000353" [label = "(<operator>.addition,v2 + 52)" ]
"1000356" [label = "(<operator>.indirection,*(_DWORD *)(a1[18] + 16))" ]
"1000357" [label = "(<operator>.cast,(_DWORD *)(a1[18] + 16))" ]
"1000358" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000359" [label = "(<operator>.addition,a1[18] + 16)" ]
"1000360" [label = "(<operator>.indirectIndexAccess,a1[18])" ]
"1000365" [label = "(<operator>.assignment,v8 = __errno_location())" ]
"1000367" [label = "(__errno_location,__errno_location())" ]
"1000368" [label = "(<operator>.assignment,v9 = Curl_strerror(*v8, buf, 128))" ]
"1000370" [label = "(Curl_strerror,Curl_strerror(*v8, buf, 128))" ]
"1000371" [label = "(<operator>.indirection,*v8)" ]
"1000375" [label = "(Curl_failf,Curl_failf(*a1, \"bind() failed; %s\", v9))" ]
"1000376" [label = "(<operator>.indirection,*a1)" ]
"1000380" [label = "(RETURN,return 7;,return 7;)" ]
"1000382" [label = "(<operators>.assignmentOr,*((_BYTE *)a1 + 583) |= 2u)" ]
"1000383" [label = "(<operator>.indirection,*((_BYTE *)a1 + 583))" ]
"1000384" [label = "(<operator>.addition,(_BYTE *)a1 + 583)" ]
"1000385" [label = "(<operator>.cast,(_BYTE *)a1)" ]
"1000386" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000390" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000391" [label = "(<operator>.indirection,*a1)" ]
"1000393" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000394" [label = "(<operator>.indirection,*a2)" ]
"1000397" [label = "(<operator>.assignment,result = 0)" ]
"1000400" [label = "(RETURN,return result;,return result;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000402" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000133" -> "1000139" 
  "1000135" -> "1000133" 
  "1000138" -> "1000143" 
  "1000139" -> "1000138" 
  "1000143" -> "1000153" 
  "1000143" -> "1000400" 
  "1000149" -> "1000161" 
  "1000149" -> "1000185" 
  "1000151" -> "1000149" 
  "1000152" -> "1000151" 
  "1000153" -> "1000155" 
  "1000154" -> "1000152" 
  "1000155" -> "1000154" 
  "1000161" -> "1000167" 
  "1000165" -> "1000172" 
  "1000165" -> "1000178" 
  "1000166" -> "1000165" 
  "1000167" -> "1000168" 
  "1000168" -> "1000166" 
  "1000172" -> "1000402" 
  "1000174" -> "1000188" 
  "1000176" -> "1000174" 
  "1000177" -> "1000176" 
  "1000178" -> "1000180" 
  "1000179" -> "1000177" 
  "1000180" -> "1000179" 
  "1000185" -> "1000188" 
  "1000188" -> "1000192" 
  "1000192" -> "1000195" 
  "1000192" -> "1000198" 
  "1000195" -> "1000198" 
  "1000198" -> "1000205" 
  "1000202" -> "1000236" 
  "1000202" -> "1000400" 
  "1000203" -> "1000202" 
  "1000203" -> "1000214" 
  "1000204" -> "1000203" 
  "1000205" -> "1000206" 
  "1000206" -> "1000204" 
  "1000210" -> "1000221" 
  "1000212" -> "1000210" 
  "1000214" -> "1000212" 
  "1000218" -> "1000227" 
  "1000219" -> "1000218" 
  "1000220" -> "1000219" 
  "1000221" -> "1000222" 
  "1000222" -> "1000220" 
  "1000227" -> "1000202" 
  "1000233" -> "1000263" 
  "1000233" -> "1000400" 
  "1000234" -> "1000233" 
  "1000234" -> "1000245" 
  "1000235" -> "1000234" 
  "1000236" -> "1000237" 
  "1000237" -> "1000235" 
  "1000241" -> "1000252" 
  "1000243" -> "1000241" 
  "1000245" -> "1000243" 
  "1000249" -> "1000258" 
  "1000250" -> "1000249" 
  "1000251" -> "1000250" 
  "1000252" -> "1000253" 
  "1000253" -> "1000251" 
  "1000258" -> "1000233" 
  "1000263" -> "1000269" 
  "1000266" -> "1000277" 
  "1000267" -> "1000266" 
  "1000268" -> "1000267" 
  "1000269" -> "1000270" 
  "1000270" -> "1000268" 
  "1000274" -> "1000287" 
  "1000275" -> "1000281" 
  "1000276" -> "1000275" 
  "1000277" -> "1000278" 
  "1000278" -> "1000276" 
  "1000281" -> "1000274" 
  "1000284" -> "1000293" 
  "1000285" -> "1000284" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000290" -> "1000302" 
  "1000291" -> "1000297" 
  "1000292" -> "1000291" 
  "1000293" -> "1000294" 
  "1000294" -> "1000292" 
  "1000297" -> "1000290" 
  "1000299" -> "1000310" 
  "1000300" -> "1000299" 
  "1000301" -> "1000300" 
  "1000302" -> "1000303" 
  "1000303" -> "1000301" 
  "1000307" -> "1000318" 
  "1000308" -> "1000307" 
  "1000309" -> "1000308" 
  "1000310" -> "1000311" 
  "1000311" -> "1000309" 
  "1000315" -> "1000330" 
  "1000316" -> "1000324" 
  "1000317" -> "1000316" 
  "1000318" -> "1000319" 
  "1000319" -> "1000317" 
  "1000322" -> "1000315" 
  "1000323" -> "1000322" 
  "1000324" -> "1000326" 
  "1000325" -> "1000323" 
  "1000326" -> "1000325" 
  "1000330" -> "1000337" 
  "1000332" -> "1000347" 
  "1000332" -> "1000391" 
  "1000333" -> "1000332" 
  "1000334" -> "1000333" 
  "1000335" -> "1000334" 
  "1000336" -> "1000335" 
  "1000337" -> "1000336" 
  "1000344" -> "1000386" 
  "1000344" -> "1000367" 
  "1000345" -> "1000352" 
  "1000346" -> "1000345" 
  "1000347" -> "1000348" 
  "1000348" -> "1000346" 
  "1000351" -> "1000358" 
  "1000352" -> "1000353" 
  "1000353" -> "1000351" 
  "1000356" -> "1000344" 
  "1000357" -> "1000356" 
  "1000358" -> "1000360" 
  "1000359" -> "1000357" 
  "1000360" -> "1000359" 
  "1000365" -> "1000371" 
  "1000367" -> "1000365" 
  "1000368" -> "1000376" 
  "1000370" -> "1000368" 
  "1000371" -> "1000370" 
  "1000375" -> "1000380" 
  "1000376" -> "1000375" 
  "1000380" -> "1000402" 
  "1000382" -> "1000391" 
  "1000383" -> "1000382" 
  "1000384" -> "1000383" 
  "1000385" -> "1000384" 
  "1000386" -> "1000385" 
  "1000390" -> "1000394" 
  "1000391" -> "1000390" 
  "1000393" -> "1000397" 
  "1000394" -> "1000393" 
  "1000397" -> "1000400" 
  "1000400" -> "1000402" 
  "1000113" -> "1000131" 
}
