digraph tftp_connect {  
"1000129" [label = "(<operator>.assignment,v4 = Curl_ccalloc(1, 336))" ]
"1000131" [label = "(Curl_ccalloc,Curl_ccalloc(1, 336))" ]
"1000134" [label = "(<operator>.assignment,a1[188] = v4)" ]
"1000135" [label = "(<operator>.indirectIndexAccess,a1[188])" ]
"1000140" [label = "(<operator>.logicalNot,!v4)" ]
"1000142" [label = "(RETURN,return 27;,return 27;)" ]
"1000144" [label = "(<operator>.assignment,v6 = v4)" ]
"1000147" [label = "(<operator>.assignment,v7 = *(_DWORD *)(*a1 + 1576))" ]
"1000149" [label = "(<operator>.indirection,*(_DWORD *)(*a1 + 1576))" ]
"1000150" [label = "(<operator>.cast,(_DWORD *)(*a1 + 1576))" ]
"1000151" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000152" [label = "(<operator>.addition,*a1 + 1576)" ]
"1000153" [label = "(<operator>.indirection,*a1)" ]
"1000157" [label = "(<operator>.logicalNot,!v7)" ]
"1000160" [label = "(<operator>.assignment,v7 = 512)" ]
"1000165" [label = "(<operator>.logicalNot,!*(_DWORD *)(v6 + 328))" ]
"1000166" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000167" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000168" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000169" [label = "(<operator>.addition,v6 + 328)" ]
"1000173" [label = "(<operator>.assignment,v11 = Curl_ccalloc(1, v7 + 4))" ]
"1000175" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000177" [label = "(<operator>.addition,v7 + 4)" ]
"1000180" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 328) = v11)" ]
"1000181" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 328))" ]
"1000182" [label = "(<operator>.cast,(_DWORD *)(v6 + 328))" ]
"1000183" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000184" [label = "(<operator>.addition,v6 + 328)" ]
"1000189" [label = "(<operator>.logicalNot,!v11)" ]
"1000191" [label = "(RETURN,return 27;,return 27;)" ]
"1000194" [label = "(<operator>.logicalOr,*(_DWORD *)(v6 + 332) || (v8 = Curl_ccalloc(1, v7 + 4), (*(_DWORD *)(v6 + 332) = v8) != 0))" ]
"1000195" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000196" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000197" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000198" [label = "(<operator>.addition,v6 + 332)" ]
"1000202" [label = "(<operator>.assignment,v8 = Curl_ccalloc(1, v7 + 4))" ]
"1000204" [label = "(Curl_ccalloc,Curl_ccalloc(1, v7 + 4))" ]
"1000206" [label = "(<operator>.addition,v7 + 4)" ]
"1000209" [label = "(<operator>.notEquals,(*(_DWORD *)(v6 + 332) = v8) != 0)" ]
"1000210" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 332) = v8)" ]
"1000211" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 332))" ]
"1000212" [label = "(<operator>.cast,(_DWORD *)(v6 + 332))" ]
"1000213" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000214" [label = "(<operator>.addition,v6 + 332)" ]
"1000220" [label = "(Curl_conncontrol,Curl_conncontrol(a1, 1))" ]
"1000223" [label = "(<operator>.assignment,v9 = a1[105])" ]
"1000225" [label = "(<operator>.indirectIndexAccess,a1[105])" ]
"1000228" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 16) = a1)" ]
"1000229" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 16))" ]
"1000230" [label = "(<operator>.cast,(_DWORD *)(v6 + 16))" ]
"1000231" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000232" [label = "(<operator>.addition,v6 + 16)" ]
"1000236" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 20) = v9)" ]
"1000237" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000238" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000239" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000240" [label = "(<operator>.addition,v6 + 20)" ]
"1000244" [label = "(<operator>.assignment,*(_DWORD *)v6 = 0)" ]
"1000245" [label = "(<operator>.indirection,*(_DWORD *)v6)" ]
"1000246" [label = "(<operator>.cast,(_DWORD *)v6)" ]
"1000247" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000250" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 8) = -100)" ]
"1000251" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 8))" ]
"1000252" [label = "(<operator>.cast,(_DWORD *)(v6 + 8))" ]
"1000253" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000254" [label = "(<operator>.addition,v6 + 8)" ]
"1000257" [label = "(<operator>.minus,-100)" ]
"1000259" [label = "(<operator>.assignment,v10 = a1[20])" ]
"1000261" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000264" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 320) = v7)" ]
"1000265" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 320))" ]
"1000266" [label = "(<operator>.cast,(_DWORD *)(v6 + 320))" ]
"1000267" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000268" [label = "(<operator>.addition,v6 + 320)" ]
"1000272" [label = "(<operator>.assignment,*(_DWORD *)(v6 + 324) = v7)" ]
"1000273" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 324))" ]
"1000274" [label = "(<operator>.cast,(_DWORD *)(v6 + 324))" ]
"1000275" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000276" [label = "(<operator>.addition,v6 + 324)" ]
"1000280" [label = "(<operator>.assignment,*(_WORD *)(v6 + 52) = *(_DWORD *)(v10 + 4))" ]
"1000281" [label = "(<operator>.indirection,*(_WORD *)(v6 + 52))" ]
"1000282" [label = "(<operator>.cast,(_WORD *)(v6 + 52))" ]
"1000283" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000284" [label = "(<operator>.addition,v6 + 52)" ]
"1000287" [label = "(<operator>.indirection,*(_DWORD *)(v10 + 4))" ]
"1000288" [label = "(<operator>.cast,(_DWORD *)(v10 + 4))" ]
"1000289" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000290" [label = "(<operator>.addition,v10 + 4)" ]
"1000293" [label = "(tftp_set_timeouts,tftp_set_timeouts(v6))" ]
"1000296" [label = "(<operator>.equals,((a1[147] >> 25) & 1) == 0)" ]
"1000297" [label = "(<operator>.and,(a1[147] >> 25) & 1)" ]
"1000298" [label = "(<operator>.arithmeticShiftRight,a1[147] >> 25)" ]
"1000299" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000307" [label = "(bind,bind(*(_DWORD *)(v6 + 20), (const struct sockaddr *)(v6 + 52), *(_DWORD *)(a1[20] + 16)))" ]
"1000308" [label = "(<operator>.indirection,*(_DWORD *)(v6 + 20))" ]
"1000309" [label = "(<operator>.cast,(_DWORD *)(v6 + 20))" ]
"1000310" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000311" [label = "(<operator>.addition,v6 + 20)" ]
"1000314" [label = "(<operator>.cast,(const struct sockaddr *)(v6 + 52))" ]
"1000315" [label = "(UNKNOWN,const struct sockaddr *,const struct sockaddr *)" ]
"1000316" [label = "(<operator>.addition,v6 + 52)" ]
"1000319" [label = "(<operator>.indirection,*(_DWORD *)(a1[20] + 16))" ]
"1000320" [label = "(<operator>.cast,(_DWORD *)(a1[20] + 16))" ]
"1000321" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000322" [label = "(<operator>.addition,a1[20] + 16)" ]
"1000323" [label = "(<operator>.indirectIndexAccess,a1[20])" ]
"1000328" [label = "(<operator>.assignment,v13 = *a1)" ]
"1000330" [label = "(<operator>.indirection,*a1)" ]
"1000332" [label = "(<operator>.assignment,v12 = _errno_location())" ]
"1000334" [label = "(_errno_location,_errno_location())" ]
"1000335" [label = "(<operator>.assignment,v14 = (const char *)Curl_strerror(*v12, v15, 128))" ]
"1000337" [label = "(<operator>.cast,(const char *)Curl_strerror(*v12, v15, 128))" ]
"1000338" [label = "(UNKNOWN,const char *,const char *)" ]
"1000339" [label = "(Curl_strerror,Curl_strerror(*v12, v15, 128))" ]
"1000340" [label = "(<operator>.indirection,*v12)" ]
"1000344" [label = "(Curl_failf,Curl_failf(v13, \"bind() failed; %s\", v14))" ]
"1000348" [label = "(RETURN,return 7;,return 7;)" ]
"1000350" [label = "(<operator>.assignment,a1[147] = a1[147] & 0xFDFFFFFF | 0x2000000)" ]
"1000351" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000354" [label = "(<operator>.or,a1[147] & 0xFDFFFFFF | 0x2000000)" ]
"1000355" [label = "(<operator>.and,a1[147] & 0xFDFFFFFF)" ]
"1000356" [label = "(<operator>.indirectIndexAccess,a1[147])" ]
"1000361" [label = "(Curl_pgrsStartNow,Curl_pgrsStartNow(*a1))" ]
"1000362" [label = "(<operator>.indirection,*a1)" ]
"1000364" [label = "(<operator>.assignment,*a2 = 1)" ]
"1000365" [label = "(<operator>.indirection,*a2)" ]
"1000368" [label = "(RETURN,return 0;,return 0;)" ]
"1000370" [label = "(RETURN,return 27;,return 27;)" ]
"1000372" [label = "(<operator>.assignment,result = 71)" ]
"1000376" [label = "(<operator>.lessThan,(unsigned int)(v7 - 8) < 0xFFB1)" ]
"1000377" [label = "(<operator>.cast,(unsigned int)(v7 - 8))" ]
"1000378" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000379" [label = "(<operator>.subtraction,v7 - 8)" ]
"1000384" [label = "(RETURN,return result;,return result;)" ]
"1000113" [label = "(METHOD,tftp_connect)" ]
"1000386" [label = "(METHOD_RETURN,int __fastcall)" ]
  "1000129" -> "1000135" 
  "1000131" -> "1000129" 
  "1000134" -> "1000140" 
  "1000135" -> "1000134" 
  "1000140" -> "1000142" 
  "1000140" -> "1000144" 
  "1000142" -> "1000386" 
  "1000144" -> "1000151" 
  "1000147" -> "1000157" 
  "1000149" -> "1000147" 
  "1000150" -> "1000149" 
  "1000151" -> "1000153" 
  "1000152" -> "1000150" 
  "1000153" -> "1000152" 
  "1000157" -> "1000160" 
  "1000157" -> "1000372" 
  "1000160" -> "1000168" 
  "1000165" -> "1000197" 
  "1000165" -> "1000177" 
  "1000166" -> "1000165" 
  "1000167" -> "1000166" 
  "1000168" -> "1000169" 
  "1000169" -> "1000167" 
  "1000173" -> "1000183" 
  "1000175" -> "1000173" 
  "1000177" -> "1000175" 
  "1000180" -> "1000189" 
  "1000181" -> "1000180" 
  "1000182" -> "1000181" 
  "1000183" -> "1000184" 
  "1000184" -> "1000182" 
  "1000189" -> "1000197" 
  "1000189" -> "1000191" 
  "1000191" -> "1000386" 
  "1000194" -> "1000220" 
  "1000194" -> "1000370" 
  "1000195" -> "1000194" 
  "1000195" -> "1000206" 
  "1000196" -> "1000195" 
  "1000197" -> "1000198" 
  "1000198" -> "1000196" 
  "1000202" -> "1000213" 
  "1000204" -> "1000202" 
  "1000206" -> "1000204" 
  "1000209" -> "1000194" 
  "1000210" -> "1000209" 
  "1000211" -> "1000210" 
  "1000212" -> "1000211" 
  "1000213" -> "1000214" 
  "1000214" -> "1000212" 
  "1000220" -> "1000225" 
  "1000223" -> "1000231" 
  "1000225" -> "1000223" 
  "1000228" -> "1000239" 
  "1000229" -> "1000228" 
  "1000230" -> "1000229" 
  "1000231" -> "1000232" 
  "1000232" -> "1000230" 
  "1000236" -> "1000247" 
  "1000237" -> "1000236" 
  "1000238" -> "1000237" 
  "1000239" -> "1000240" 
  "1000240" -> "1000238" 
  "1000244" -> "1000253" 
  "1000245" -> "1000244" 
  "1000246" -> "1000245" 
  "1000247" -> "1000246" 
  "1000250" -> "1000261" 
  "1000251" -> "1000257" 
  "1000252" -> "1000251" 
  "1000253" -> "1000254" 
  "1000254" -> "1000252" 
  "1000257" -> "1000250" 
  "1000259" -> "1000267" 
  "1000261" -> "1000259" 
  "1000264" -> "1000275" 
  "1000265" -> "1000264" 
  "1000266" -> "1000265" 
  "1000267" -> "1000268" 
  "1000268" -> "1000266" 
  "1000272" -> "1000283" 
  "1000273" -> "1000272" 
  "1000274" -> "1000273" 
  "1000275" -> "1000276" 
  "1000276" -> "1000274" 
  "1000280" -> "1000293" 
  "1000281" -> "1000289" 
  "1000282" -> "1000281" 
  "1000283" -> "1000284" 
  "1000284" -> "1000282" 
  "1000287" -> "1000280" 
  "1000288" -> "1000287" 
  "1000289" -> "1000290" 
  "1000290" -> "1000288" 
  "1000293" -> "1000299" 
  "1000296" -> "1000310" 
  "1000296" -> "1000362" 
  "1000297" -> "1000296" 
  "1000298" -> "1000297" 
  "1000299" -> "1000298" 
  "1000307" -> "1000330" 
  "1000307" -> "1000351" 
  "1000308" -> "1000315" 
  "1000309" -> "1000308" 
  "1000310" -> "1000311" 
  "1000311" -> "1000309" 
  "1000314" -> "1000321" 
  "1000315" -> "1000316" 
  "1000316" -> "1000314" 
  "1000319" -> "1000307" 
  "1000320" -> "1000319" 
  "1000321" -> "1000323" 
  "1000322" -> "1000320" 
  "1000323" -> "1000322" 
  "1000328" -> "1000334" 
  "1000330" -> "1000328" 
  "1000332" -> "1000338" 
  "1000334" -> "1000332" 
  "1000335" -> "1000344" 
  "1000337" -> "1000335" 
  "1000338" -> "1000340" 
  "1000339" -> "1000337" 
  "1000340" -> "1000339" 
  "1000344" -> "1000348" 
  "1000348" -> "1000386" 
  "1000350" -> "1000362" 
  "1000351" -> "1000356" 
  "1000354" -> "1000350" 
  "1000355" -> "1000354" 
  "1000356" -> "1000355" 
  "1000361" -> "1000365" 
  "1000362" -> "1000361" 
  "1000364" -> "1000368" 
  "1000365" -> "1000364" 
  "1000368" -> "1000386" 
  "1000370" -> "1000386" 
  "1000372" -> "1000378" 
  "1000376" -> "1000168" 
  "1000376" -> "1000384" 
  "1000377" -> "1000376" 
  "1000378" -> "1000379" 
  "1000379" -> "1000377" 
  "1000384" -> "1000386" 
  "1000113" -> "1000131" 
}
