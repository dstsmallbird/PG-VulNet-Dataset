digraph cache_insert {  
"1000146" [label = "(<operator>.assignment,v8 = a5)" ]
"1000150" [label = "(<operator>.notEquals,(a5 & 0x980) != 0)" ]
"1000151" [label = "(<operator>.and,a5 & 0x980)" ]
"1000156" [label = "(log_query,log_query(a5 | 0x10000, (int)a1, cp))" ]
"1000157" [label = "(<operator>.or,a5 | 0x10000)" ]
"1000160" [label = "(<operator>.cast,(int)a1)" ]
"1000161" [label = "(UNKNOWN,int,int)" ]
"1000164" [label = "(<operator>.assignment,v14 = *(_QWORD *)(dnsmasq_daemon + 456))" ]
"1000166" [label = "(<operator>.indirection,*(_QWORD *)(dnsmasq_daemon + 456))" ]
"1000167" [label = "(<operator>.cast,(_QWORD *)(dnsmasq_daemon + 456))" ]
"1000168" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000169" [label = "(<operator>.addition,dnsmasq_daemon + 456)" ]
"1000174" [label = "(<operator>.assignment,v15 = a4 > v14)" ]
"1000176" [label = "(<operator>.greaterThan,a4 > v14)" ]
"1000180" [label = "(<operator>.assignment,v15 = 0)" ]
"1000184" [label = "(<operator>.logicalNot,!v15)" ]
"1000186" [label = "(<operator>.assignment,v14 = a4)" ]
"1000189" [label = "(<operator>.assignment,a4 = *(_QWORD *)(dnsmasq_daemon + 448))" ]
"1000191" [label = "(<operator>.indirection,*(_QWORD *)(dnsmasq_daemon + 448))" ]
"1000192" [label = "(<operator>.cast,(_QWORD *)(dnsmasq_daemon + 448))" ]
"1000193" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000194" [label = "(<operator>.addition,dnsmasq_daemon + 448)" ]
"1000199" [label = "(<operator>.assignment,v16 = v14 >= a4)" ]
"1000201" [label = "(<operator>.greaterEqualsThan,v14 >= a4)" ]
"1000205" [label = "(<operator>.assignment,v16 = 1)" ]
"1000210" [label = "(<operator>.assignment,a4 = v14)" ]
"1000214" [label = "(<operator>.assignment,v11 = insert_error)" ]
"1000218" [label = "(<operator>.logicalNot,!insert_error)" ]
"1000221" [label = "(<operator>.assignment,v12 = cache_scan_free((int)a1, (int)cp, time1))" ]
"1000223" [label = "(cache_scan_free,cache_scan_free((int)a1, (int)cp, time1))" ]
"1000224" [label = "(<operator>.cast,(int)a1)" ]
"1000225" [label = "(UNKNOWN,int,int)" ]
"1000227" [label = "(<operator>.cast,(int)cp)" ]
"1000228" [label = "(UNKNOWN,int,int)" ]
"1000231" [label = "(<operator>.assignment,v10 = v12)" ]
"1000238" [label = "(<operator>.logicalAnd,(v8 & 0x180) != 0\n        && (v8 & 8) != 0\n        && ((v8 & 0x80) != 0 && (*(_WORD *)(v12 + 52) & 0x80) != 0 && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         || (v8 & 0x100) != 0\n         && (*(_WORD *)(v12 + 52) & 0x100) != 0\n         && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         && *(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)\n         && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3)))" ]
"1000239" [label = "(<operator>.notEquals,(v8 & 0x180) != 0)" ]
"1000240" [label = "(<operator>.and,v8 & 0x180)" ]
"1000244" [label = "(<operator>.logicalAnd,(v8 & 8) != 0\n        && ((v8 & 0x80) != 0 && (*(_WORD *)(v12 + 52) & 0x80) != 0 && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         || (v8 & 0x100) != 0\n         && (*(_WORD *)(v12 + 52) & 0x100) != 0\n         && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         && *(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)\n         && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3)))" ]
"1000245" [label = "(<operator>.notEquals,(v8 & 8) != 0)" ]
"1000246" [label = "(<operator>.and,v8 & 8)" ]
"1000250" [label = "(<operator>.logicalOr,(v8 & 0x80) != 0 && (*(_WORD *)(v12 + 52) & 0x80) != 0 && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         || (v8 & 0x100) != 0\n         && (*(_WORD *)(v12 + 52) & 0x100) != 0\n         && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         && *(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)\n         && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3))" ]
"1000251" [label = "(<operator>.logicalAnd,(v8 & 0x80) != 0 && (*(_WORD *)(v12 + 52) & 0x80) != 0 && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp)" ]
"1000252" [label = "(<operator>.notEquals,(v8 & 0x80) != 0)" ]
"1000253" [label = "(<operator>.and,v8 & 0x80)" ]
"1000257" [label = "(<operator>.logicalAnd,(*(_WORD *)(v12 + 52) & 0x80) != 0 && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp)" ]
"1000258" [label = "(<operator>.notEquals,(*(_WORD *)(v12 + 52) & 0x80) != 0)" ]
"1000259" [label = "(<operator>.and,*(_WORD *)(v12 + 52) & 0x80)" ]
"1000260" [label = "(<operator>.indirection,*(_WORD *)(v12 + 52))" ]
"1000261" [label = "(<operator>.cast,(_WORD *)(v12 + 52))" ]
"1000262" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000263" [label = "(<operator>.addition,v12 + 52)" ]
"1000268" [label = "(<operator>.equals,*(_DWORD *)(v12 + 24) == *(_DWORD *)cp)" ]
"1000269" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 24))" ]
"1000270" [label = "(<operator>.cast,(_DWORD *)(v12 + 24))" ]
"1000271" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000272" [label = "(<operator>.addition,v12 + 24)" ]
"1000275" [label = "(<operator>.indirection,*(_DWORD *)cp)" ]
"1000276" [label = "(<operator>.cast,(_DWORD *)cp)" ]
"1000277" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000279" [label = "(<operator>.logicalAnd,(v8 & 0x100) != 0\n         && (*(_WORD *)(v12 + 52) & 0x100) != 0\n         && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         && *(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)\n         && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3))" ]
"1000280" [label = "(<operator>.notEquals,(v8 & 0x100) != 0)" ]
"1000281" [label = "(<operator>.and,v8 & 0x100)" ]
"1000285" [label = "(<operator>.logicalAnd,(*(_WORD *)(v12 + 52) & 0x100) != 0\n         && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         && *(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)\n         && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3))" ]
"1000286" [label = "(<operator>.notEquals,(*(_WORD *)(v12 + 52) & 0x100) != 0)" ]
"1000287" [label = "(<operator>.and,*(_WORD *)(v12 + 52) & 0x100)" ]
"1000288" [label = "(<operator>.indirection,*(_WORD *)(v12 + 52))" ]
"1000289" [label = "(<operator>.cast,(_WORD *)(v12 + 52))" ]
"1000290" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000291" [label = "(<operator>.addition,v12 + 52)" ]
"1000296" [label = "(<operator>.logicalAnd,*(_DWORD *)(v12 + 24) == *(_DWORD *)cp\n         && *(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)\n         && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3))" ]
"1000297" [label = "(<operator>.equals,*(_DWORD *)(v12 + 24) == *(_DWORD *)cp)" ]
"1000298" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 24))" ]
"1000299" [label = "(<operator>.cast,(_DWORD *)(v12 + 24))" ]
"1000300" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000301" [label = "(<operator>.addition,v12 + 24)" ]
"1000304" [label = "(<operator>.indirection,*(_DWORD *)cp)" ]
"1000305" [label = "(<operator>.cast,(_DWORD *)cp)" ]
"1000306" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000308" [label = "(<operator>.logicalAnd,*(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)\n         && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3))" ]
"1000309" [label = "(<operator>.equals,*(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1))" ]
"1000310" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 28))" ]
"1000311" [label = "(<operator>.cast,(_DWORD *)(v12 + 28))" ]
"1000312" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000313" [label = "(<operator>.addition,v12 + 28)" ]
"1000316" [label = "(<operator>.indirection,*((_DWORD *)cp + 1))" ]
"1000317" [label = "(<operator>.addition,(_DWORD *)cp + 1)" ]
"1000318" [label = "(<operator>.cast,(_DWORD *)cp)" ]
"1000319" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000322" [label = "(<operator>.logicalAnd,*(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)\n         && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3))" ]
"1000323" [label = "(<operator>.equals,*(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2))" ]
"1000324" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 32))" ]
"1000325" [label = "(<operator>.cast,(_DWORD *)(v12 + 32))" ]
"1000326" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000327" [label = "(<operator>.addition,v12 + 32)" ]
"1000330" [label = "(<operator>.indirection,*((_DWORD *)cp + 2))" ]
"1000331" [label = "(<operator>.addition,(_DWORD *)cp + 2)" ]
"1000332" [label = "(<operator>.cast,(_DWORD *)cp)" ]
"1000333" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000336" [label = "(<operator>.equals,*(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3))" ]
"1000337" [label = "(<operator>.indirection,*(_DWORD *)(v12 + 36))" ]
"1000338" [label = "(<operator>.cast,(_DWORD *)(v12 + 36))" ]
"1000339" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000340" [label = "(<operator>.addition,v12 + 36)" ]
"1000343" [label = "(<operator>.indirection,*((_DWORD *)cp + 3))" ]
"1000344" [label = "(<operator>.addition,(_DWORD *)cp + 3)" ]
"1000345" [label = "(<operator>.cast,(_DWORD *)cp)" ]
"1000346" [label = "(UNKNOWN,_DWORD *,_DWORD *)" ]
"1000350" [label = "(RETURN,return v10;,return v10;)" ]
"1000354" [label = "(<operator>.assignment,v17 = v8 & 4)" ]
"1000356" [label = "(<operator>.and,v8 & 4)" ]
"1000362" [label = "(<operator>.assignment,v10 = cache_tail)" ]
"1000366" [label = "(<operator>.logicalNot,!cache_tail)" ]
"1000369" [label = "(<operator>.assignment,v18 = *(_WORD *)(cache_tail + 52))" ]
"1000371" [label = "(<operator>.indirection,*(_WORD *)(cache_tail + 52))" ]
"1000372" [label = "(<operator>.cast,(_WORD *)(cache_tail + 52))" ]
"1000373" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000374" [label = "(<operator>.addition,cache_tail + 52)" ]
"1000378" [label = "(<operator>.equals,(v18 & 0xC) == 0)" ]
"1000379" [label = "(<operator>.and,v18 & 0xC)" ]
"1000385" [label = "(<operator>.logicalAnd,a1 && strlen(a1) > 0x31)" ]
"1000387" [label = "(<operator>.greaterThan,strlen(a1) > 0x31)" ]
"1000388" [label = "(strlen,strlen(a1))" ]
"1000392" [label = "(<operator>.assignment,v21 = big_free)" ]
"1000398" [label = "(<operator>.assignment,big_free = *(_QWORD *)big_free)" ]
"1000400" [label = "(<operator>.indirection,*(_QWORD *)big_free)" ]
"1000401" [label = "(<operator>.cast,(_QWORD *)big_free)" ]
"1000402" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000407" [label = "(<operator>.logicalAnd,!bignames_left && (v8 & 0x5000) == 0)" ]
"1000408" [label = "(<operator>.logicalNot,!bignames_left)" ]
"1000410" [label = "(<operator>.equals,(v8 & 0x5000) == 0)" ]
"1000411" [label = "(<operator>.and,v8 & 0x5000)" ]
"1000417" [label = "(<operator>.logicalNot,!v21)" ]
"1000422" [label = "(<operator>.preDecrement,--bignames_left)" ]
"1000427" [label = "(<operator>.assignment,v22 = *(_QWORD **)(v10 + 8))" ]
"1000429" [label = "(<operator>.indirection,*(_QWORD **)(v10 + 8))" ]
"1000430" [label = "(<operator>.cast,(_QWORD **)(v10 + 8))" ]
"1000431" [label = "(UNKNOWN,_QWORD **,_QWORD **)" ]
"1000432" [label = "(<operator>.addition,v10 + 8)" ]
"1000438" [label = "(<operator>.assignment,*v22 = *(_QWORD *)v10)" ]
"1000439" [label = "(<operator>.indirection,*v22)" ]
"1000441" [label = "(<operator>.indirection,*(_QWORD *)v10)" ]
"1000442" [label = "(<operator>.cast,(_QWORD *)v10)" ]
"1000443" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000445" [label = "(<operator>.assignment,v23 = *(_QWORD *)v10)" ]
"1000447" [label = "(<operator>.indirection,*(_QWORD *)v10)" ]
"1000448" [label = "(<operator>.cast,(_QWORD *)v10)" ]
"1000449" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000453" [label = "(<operator>.assignment,v23 = *(_QWORD *)v10)" ]
"1000455" [label = "(<operator>.indirection,*(_QWORD *)v10)" ]
"1000456" [label = "(<operator>.cast,(_QWORD *)v10)" ]
"1000457" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000459" [label = "(<operator>.assignment,cache_head = *(_QWORD *)v10)" ]
"1000461" [label = "(<operator>.indirection,*(_QWORD *)v10)" ]
"1000462" [label = "(<operator>.cast,(_QWORD *)v10)" ]
"1000463" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000467" [label = "(<operator>.assignment,*(_QWORD *)(v23 + 8) = v22)" ]
"1000468" [label = "(<operator>.indirection,*(_QWORD *)(v23 + 8))" ]
"1000469" [label = "(<operator>.cast,(_QWORD *)(v23 + 8))" ]
"1000470" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000471" [label = "(<operator>.addition,v23 + 8)" ]
"1000476" [label = "(<operator>.assignment,cache_tail = (__int64)v22)" ]
"1000478" [label = "(<operator>.cast,(__int64)v22)" ]
"1000479" [label = "(UNKNOWN,__int64,__int64)" ]
"1000481" [label = "(<operator>.assignment,*(_WORD *)(v10 + 52) = v8)" ]
"1000482" [label = "(<operator>.indirection,*(_WORD *)(v10 + 52))" ]
"1000483" [label = "(<operator>.cast,(_WORD *)(v10 + 52))" ]
"1000484" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000485" [label = "(<operator>.addition,v10 + 52)" ]
"1000492" [label = "(<operators>.assignmentOr,v8 |= 0x200u)" ]
"1000495" [label = "(<operator>.assignment,*(_QWORD *)(v10 + 56) = v21)" ]
"1000496" [label = "(<operator>.indirection,*(_QWORD *)(v10 + 56))" ]
"1000497" [label = "(<operator>.cast,(_QWORD *)(v10 + 56))" ]
"1000498" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000499" [label = "(<operator>.addition,v10 + 56)" ]
"1000503" [label = "(<operator>.assignment,*(_WORD *)(v10 + 52) = v8)" ]
"1000504" [label = "(<operator>.indirection,*(_WORD *)(v10 + 52))" ]
"1000505" [label = "(<operator>.cast,(_WORD *)(v10 + 52))" ]
"1000506" [label = "(UNKNOWN,_WORD *,_WORD *)" ]
"1000507" [label = "(<operator>.addition,v10 + 52)" ]
"1000515" [label = "(<operator>.logicalOr,(v8 & 0x200) != 0 || (v24 = (char *)(v10 + 56), (v8 & 2) != 0))" ]
"1000516" [label = "(<operator>.notEquals,(v8 & 0x200) != 0)" ]
"1000517" [label = "(<operator>.and,v8 & 0x200)" ]
"1000522" [label = "(<operator>.assignment,v24 = (char *)(v10 + 56))" ]
"1000524" [label = "(<operator>.cast,(char *)(v10 + 56))" ]
"1000525" [label = "(UNKNOWN,char *,char *)" ]
"1000526" [label = "(<operator>.addition,v10 + 56)" ]
"1000529" [label = "(<operator>.notEquals,(v8 & 2) != 0)" ]
"1000530" [label = "(<operator>.and,v8 & 2)" ]
"1000534" [label = "(<operator>.assignment,v24 = *(char **)(v10 + 56))" ]
"1000536" [label = "(<operator>.indirection,*(char **)(v10 + 56))" ]
"1000537" [label = "(<operator>.cast,(char **)(v10 + 56))" ]
"1000538" [label = "(UNKNOWN,char **,char **)" ]
"1000539" [label = "(<operator>.addition,v10 + 56)" ]
"1000542" [label = "(strcpy,strcpy(v24, a1))" ]
"1000548" [label = "(<operator>.logicalOr,(v8 & 0x200) != 0 || (v26 = (_BYTE *)(v10 + 56), (v8 & 2) != 0))" ]
"1000549" [label = "(<operator>.notEquals,(v8 & 0x200) != 0)" ]
"1000550" [label = "(<operator>.and,v8 & 0x200)" ]
"1000555" [label = "(<operator>.assignment,v26 = (_BYTE *)(v10 + 56))" ]
"1000557" [label = "(<operator>.cast,(_BYTE *)(v10 + 56))" ]
"1000558" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000559" [label = "(<operator>.addition,v10 + 56)" ]
"1000562" [label = "(<operator>.notEquals,(v8 & 2) != 0)" ]
"1000563" [label = "(<operator>.and,v8 & 2)" ]
"1000567" [label = "(<operator>.assignment,v26 = *(_BYTE **)(v10 + 56))" ]
"1000569" [label = "(<operator>.indirection,*(_BYTE **)(v10 + 56))" ]
"1000570" [label = "(<operator>.cast,(_BYTE **)(v10 + 56))" ]
"1000571" [label = "(UNKNOWN,_BYTE **,_BYTE **)" ]
"1000572" [label = "(<operator>.addition,v10 + 56)" ]
"1000575" [label = "(<operator>.assignment,*v26 = 0)" ]
"1000576" [label = "(<operator>.indirection,*v26)" ]
"1000582" [label = "(<operator>.assignment,v25 = *((_QWORD *)cp + 1))" ]
"1000584" [label = "(<operator>.indirection,*((_QWORD *)cp + 1))" ]
"1000585" [label = "(<operator>.addition,(_QWORD *)cp + 1)" ]
"1000586" [label = "(<operator>.cast,(_QWORD *)cp)" ]
"1000587" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000590" [label = "(<operator>.assignment,*(_QWORD *)(v10 + 24) = *(_QWORD *)cp)" ]
"1000591" [label = "(<operator>.indirection,*(_QWORD *)(v10 + 24))" ]
"1000592" [label = "(<operator>.cast,(_QWORD *)(v10 + 24))" ]
"1000593" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000594" [label = "(<operator>.addition,v10 + 24)" ]
"1000597" [label = "(<operator>.indirection,*(_QWORD *)cp)" ]
"1000598" [label = "(<operator>.cast,(_QWORD *)cp)" ]
"1000599" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000601" [label = "(<operator>.assignment,*(_QWORD *)(v10 + 32) = v25)" ]
"1000602" [label = "(<operator>.indirection,*(_QWORD *)(v10 + 32))" ]
"1000603" [label = "(<operator>.cast,(_QWORD *)(v10 + 32))" ]
"1000604" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000605" [label = "(<operator>.addition,v10 + 32)" ]
"1000609" [label = "(<operator>.assignment,*(_QWORD *)(v10 + 40) = a4 + time1)" ]
"1000610" [label = "(<operator>.indirection,*(_QWORD *)(v10 + 40))" ]
"1000611" [label = "(<operator>.cast,(_QWORD *)(v10 + 40))" ]
"1000612" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000613" [label = "(<operator>.addition,v10 + 40)" ]
"1000616" [label = "(<operator>.addition,a4 + time1)" ]
"1000619" [label = "(<operator>.assignment,*(_QWORD *)v10 = new_chain)" ]
"1000620" [label = "(<operator>.indirection,*(_QWORD *)v10)" ]
"1000621" [label = "(<operator>.cast,(_QWORD *)v10)" ]
"1000622" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000625" [label = "(<operator>.assignment,new_chain = v10)" ]
"1000628" [label = "(RETURN,return v10;,return v10;)" ]
"1000634" [label = "(<operator>.logicalNot,!warned_9927)" ]
"1000637" [label = "(<operator>.assignment,warned_9927 = 1)" ]
"1000644" [label = "(<operator>.assignment,v19 = *(_QWORD *)(cache_tail + 32))" ]
"1000646" [label = "(<operator>.indirection,*(_QWORD *)(cache_tail + 32))" ]
"1000647" [label = "(<operator>.cast,(_QWORD *)(cache_tail + 32))" ]
"1000648" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000649" [label = "(<operator>.addition,cache_tail + 32)" ]
"1000652" [label = "(<operator>.assignment,v28[0] = *(_QWORD *)(cache_tail + 24))" ]
"1000653" [label = "(<operator>.indirectIndexAccess,v28[0])" ]
"1000656" [label = "(<operator>.indirection,*(_QWORD *)(cache_tail + 24))" ]
"1000657" [label = "(<operator>.cast,(_QWORD *)(cache_tail + 24))" ]
"1000658" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000659" [label = "(<operator>.addition,cache_tail + 24)" ]
"1000662" [label = "(<operator>.assignment,v28[1] = v19)" ]
"1000663" [label = "(<operator>.indirectIndexAccess,v28[1])" ]
"1000668" [label = "(<operator>.logicalOr,(v18 & 0x200) != 0 || (LODWORD(v20) = cache_tail + 56, (v18 & 2) != 0))" ]
"1000669" [label = "(<operator>.notEquals,(v18 & 0x200) != 0)" ]
"1000670" [label = "(<operator>.and,v18 & 0x200)" ]
"1000675" [label = "(<operator>.assignment,LODWORD(v20) = cache_tail + 56)" ]
"1000676" [label = "(LODWORD,LODWORD(v20))" ]
"1000678" [label = "(<operator>.addition,cache_tail + 56)" ]
"1000681" [label = "(<operator>.notEquals,(v18 & 2) != 0)" ]
"1000682" [label = "(<operator>.and,v18 & 2)" ]
"1000686" [label = "(<operator>.assignment,v20 = *(_QWORD *)(cache_tail + 56))" ]
"1000688" [label = "(<operator>.indirection,*(_QWORD *)(cache_tail + 56))" ]
"1000689" [label = "(<operator>.cast,(_QWORD *)(cache_tail + 56))" ]
"1000690" [label = "(UNKNOWN,_QWORD *,_QWORD *)" ]
"1000691" [label = "(<operator>.addition,cache_tail + 56)" ]
"1000694" [label = "(<operator>.assignment,v27 = v17)" ]
"1000697" [label = "(<operator>.assignment,v11 = 1)" ]
"1000700" [label = "(cache_scan_free,cache_scan_free(v20, (int)v28, time1))" ]
"1000702" [label = "(<operator>.cast,(int)v28)" ]
"1000703" [label = "(UNKNOWN,int,int)" ]
"1000706" [label = "(<operator>.assignment,v17 = v27)" ]
"1000709" [label = "(<operator>.preIncrement,++cache_live_freed)" ]
"1000713" [label = "(<operator>.assignment,v11 = 0)" ]
"1000716" [label = "(cache_scan_free,cache_scan_free(0, 0, time1))" ]
"1000720" [label = "(<operator>.assignment,v17 = 1)" ]
"1000724" [label = "(<operator>.assignment,insert_error = 1)" ]
"1000727" [label = "(RETURN,return v10;,return v10;)" ]
"1000120" [label = "(METHOD,cache_insert)" ]
"1000729" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000146" -> "1000151" 
  "1000150" -> "1000157" 
  "1000150" -> "1000214" 
  "1000151" -> "1000150" 
  "1000156" -> "1000168" 
  "1000157" -> "1000161" 
  "1000160" -> "1000156" 
  "1000161" -> "1000160" 
  "1000164" -> "1000176" 
  "1000164" -> "1000180" 
  "1000166" -> "1000164" 
  "1000167" -> "1000166" 
  "1000168" -> "1000169" 
  "1000169" -> "1000167" 
  "1000174" -> "1000184" 
  "1000176" -> "1000174" 
  "1000180" -> "1000184" 
  "1000184" -> "1000186" 
  "1000184" -> "1000193" 
  "1000186" -> "1000193" 
  "1000189" -> "1000201" 
  "1000189" -> "1000205" 
  "1000191" -> "1000189" 
  "1000192" -> "1000191" 
  "1000193" -> "1000194" 
  "1000194" -> "1000192" 
  "1000199" -> "1000210" 
  "1000199" -> "1000214" 
  "1000201" -> "1000199" 
  "1000205" -> "1000210" 
  "1000205" -> "1000214" 
  "1000210" -> "1000214" 
  "1000214" -> "1000218" 
  "1000218" -> "1000225" 
  "1000218" -> "1000727" 
  "1000221" -> "1000231" 
  "1000223" -> "1000221" 
  "1000224" -> "1000228" 
  "1000225" -> "1000224" 
  "1000227" -> "1000223" 
  "1000228" -> "1000227" 
  "1000231" -> "1000240" 
  "1000231" -> "1000356" 
  "1000238" -> "1000350" 
  "1000238" -> "1000724" 
  "1000239" -> "1000238" 
  "1000239" -> "1000246" 
  "1000240" -> "1000239" 
  "1000244" -> "1000238" 
  "1000245" -> "1000244" 
  "1000245" -> "1000253" 
  "1000246" -> "1000245" 
  "1000250" -> "1000244" 
  "1000251" -> "1000250" 
  "1000251" -> "1000281" 
  "1000252" -> "1000262" 
  "1000252" -> "1000251" 
  "1000253" -> "1000252" 
  "1000257" -> "1000251" 
  "1000258" -> "1000271" 
  "1000258" -> "1000257" 
  "1000259" -> "1000258" 
  "1000260" -> "1000259" 
  "1000261" -> "1000260" 
  "1000262" -> "1000263" 
  "1000263" -> "1000261" 
  "1000268" -> "1000257" 
  "1000269" -> "1000277" 
  "1000270" -> "1000269" 
  "1000271" -> "1000272" 
  "1000272" -> "1000270" 
  "1000275" -> "1000268" 
  "1000276" -> "1000275" 
  "1000277" -> "1000276" 
  "1000279" -> "1000250" 
  "1000280" -> "1000290" 
  "1000280" -> "1000279" 
  "1000281" -> "1000280" 
  "1000285" -> "1000279" 
  "1000286" -> "1000300" 
  "1000286" -> "1000285" 
  "1000287" -> "1000286" 
  "1000288" -> "1000287" 
  "1000289" -> "1000288" 
  "1000290" -> "1000291" 
  "1000291" -> "1000289" 
  "1000296" -> "1000285" 
  "1000297" -> "1000312" 
  "1000297" -> "1000296" 
  "1000298" -> "1000306" 
  "1000299" -> "1000298" 
  "1000300" -> "1000301" 
  "1000301" -> "1000299" 
  "1000304" -> "1000297" 
  "1000305" -> "1000304" 
  "1000306" -> "1000305" 
  "1000308" -> "1000296" 
  "1000309" -> "1000326" 
  "1000309" -> "1000308" 
  "1000310" -> "1000319" 
  "1000311" -> "1000310" 
  "1000312" -> "1000313" 
  "1000313" -> "1000311" 
  "1000316" -> "1000309" 
  "1000317" -> "1000316" 
  "1000318" -> "1000317" 
  "1000319" -> "1000318" 
  "1000322" -> "1000308" 
  "1000323" -> "1000339" 
  "1000323" -> "1000322" 
  "1000324" -> "1000333" 
  "1000325" -> "1000324" 
  "1000326" -> "1000327" 
  "1000327" -> "1000325" 
  "1000330" -> "1000323" 
  "1000331" -> "1000330" 
  "1000332" -> "1000331" 
  "1000333" -> "1000332" 
  "1000336" -> "1000322" 
  "1000337" -> "1000346" 
  "1000338" -> "1000337" 
  "1000339" -> "1000340" 
  "1000340" -> "1000338" 
  "1000343" -> "1000336" 
  "1000344" -> "1000343" 
  "1000345" -> "1000344" 
  "1000346" -> "1000345" 
  "1000350" -> "1000729" 
  "1000354" -> "1000362" 
  "1000354" -> "1000724" 
  "1000356" -> "1000354" 
  "1000362" -> "1000366" 
  "1000366" -> "1000724" 
  "1000366" -> "1000373" 
  "1000369" -> "1000379" 
  "1000371" -> "1000369" 
  "1000372" -> "1000371" 
  "1000373" -> "1000374" 
  "1000374" -> "1000372" 
  "1000378" -> "1000385" 
  "1000378" -> "1000388" 
  "1000378" -> "1000634" 
  "1000378" -> "1000648" 
  "1000378" -> "1000713" 
  "1000379" -> "1000378" 
  "1000385" -> "1000392" 
  "1000385" -> "1000431" 
  "1000387" -> "1000385" 
  "1000388" -> "1000387" 
  "1000392" -> "1000402" 
  "1000392" -> "1000408" 
  "1000398" -> "1000431" 
  "1000400" -> "1000398" 
  "1000401" -> "1000400" 
  "1000402" -> "1000401" 
  "1000407" -> "1000724" 
  "1000407" -> "1000417" 
  "1000408" -> "1000407" 
  "1000408" -> "1000411" 
  "1000410" -> "1000407" 
  "1000411" -> "1000410" 
  "1000417" -> "1000724" 
  "1000417" -> "1000422" 
  "1000417" -> "1000431" 
  "1000422" -> "1000431" 
  "1000427" -> "1000439" 
  "1000427" -> "1000457" 
  "1000429" -> "1000427" 
  "1000430" -> "1000429" 
  "1000431" -> "1000432" 
  "1000432" -> "1000430" 
  "1000438" -> "1000449" 
  "1000439" -> "1000443" 
  "1000441" -> "1000438" 
  "1000442" -> "1000441" 
  "1000443" -> "1000442" 
  "1000445" -> "1000470" 
  "1000445" -> "1000479" 
  "1000447" -> "1000445" 
  "1000448" -> "1000447" 
  "1000449" -> "1000448" 
  "1000453" -> "1000463" 
  "1000455" -> "1000453" 
  "1000456" -> "1000455" 
  "1000457" -> "1000456" 
  "1000459" -> "1000470" 
  "1000459" -> "1000479" 
  "1000461" -> "1000459" 
  "1000462" -> "1000461" 
  "1000463" -> "1000462" 
  "1000467" -> "1000484" 
  "1000468" -> "1000467" 
  "1000469" -> "1000468" 
  "1000470" -> "1000471" 
  "1000471" -> "1000469" 
  "1000476" -> "1000484" 
  "1000478" -> "1000476" 
  "1000479" -> "1000478" 
  "1000481" -> "1000492" 
  "1000481" -> "1000517" 
  "1000481" -> "1000550" 
  "1000482" -> "1000481" 
  "1000483" -> "1000482" 
  "1000484" -> "1000485" 
  "1000485" -> "1000483" 
  "1000492" -> "1000498" 
  "1000495" -> "1000506" 
  "1000496" -> "1000495" 
  "1000497" -> "1000496" 
  "1000498" -> "1000499" 
  "1000499" -> "1000497" 
  "1000503" -> "1000517" 
  "1000503" -> "1000550" 
  "1000504" -> "1000503" 
  "1000505" -> "1000504" 
  "1000506" -> "1000507" 
  "1000507" -> "1000505" 
  "1000515" -> "1000538" 
  "1000515" -> "1000542" 
  "1000516" -> "1000515" 
  "1000516" -> "1000525" 
  "1000517" -> "1000516" 
  "1000522" -> "1000530" 
  "1000524" -> "1000522" 
  "1000525" -> "1000526" 
  "1000526" -> "1000524" 
  "1000529" -> "1000515" 
  "1000530" -> "1000529" 
  "1000534" -> "1000542" 
  "1000536" -> "1000534" 
  "1000537" -> "1000536" 
  "1000538" -> "1000539" 
  "1000539" -> "1000537" 
  "1000542" -> "1000612" 
  "1000542" -> "1000587" 
  "1000548" -> "1000571" 
  "1000548" -> "1000576" 
  "1000549" -> "1000548" 
  "1000549" -> "1000558" 
  "1000550" -> "1000549" 
  "1000555" -> "1000563" 
  "1000557" -> "1000555" 
  "1000558" -> "1000559" 
  "1000559" -> "1000557" 
  "1000562" -> "1000548" 
  "1000563" -> "1000562" 
  "1000567" -> "1000576" 
  "1000569" -> "1000567" 
  "1000570" -> "1000569" 
  "1000571" -> "1000572" 
  "1000572" -> "1000570" 
  "1000575" -> "1000612" 
  "1000575" -> "1000587" 
  "1000576" -> "1000575" 
  "1000582" -> "1000593" 
  "1000584" -> "1000582" 
  "1000585" -> "1000584" 
  "1000586" -> "1000585" 
  "1000587" -> "1000586" 
  "1000590" -> "1000604" 
  "1000591" -> "1000599" 
  "1000592" -> "1000591" 
  "1000593" -> "1000594" 
  "1000594" -> "1000592" 
  "1000597" -> "1000590" 
  "1000598" -> "1000597" 
  "1000599" -> "1000598" 
  "1000601" -> "1000612" 
  "1000602" -> "1000601" 
  "1000603" -> "1000602" 
  "1000604" -> "1000605" 
  "1000605" -> "1000603" 
  "1000609" -> "1000622" 
  "1000610" -> "1000616" 
  "1000611" -> "1000610" 
  "1000612" -> "1000613" 
  "1000613" -> "1000611" 
  "1000616" -> "1000609" 
  "1000619" -> "1000625" 
  "1000620" -> "1000619" 
  "1000621" -> "1000620" 
  "1000622" -> "1000621" 
  "1000625" -> "1000628" 
  "1000628" -> "1000729" 
  "1000634" -> "1000637" 
  "1000634" -> "1000724" 
  "1000637" -> "1000724" 
  "1000644" -> "1000653" 
  "1000646" -> "1000644" 
  "1000647" -> "1000646" 
  "1000648" -> "1000649" 
  "1000649" -> "1000647" 
  "1000652" -> "1000663" 
  "1000653" -> "1000658" 
  "1000656" -> "1000652" 
  "1000657" -> "1000656" 
  "1000658" -> "1000659" 
  "1000659" -> "1000657" 
  "1000662" -> "1000670" 
  "1000663" -> "1000662" 
  "1000668" -> "1000690" 
  "1000668" -> "1000694" 
  "1000669" -> "1000668" 
  "1000669" -> "1000676" 
  "1000670" -> "1000669" 
  "1000675" -> "1000682" 
  "1000676" -> "1000678" 
  "1000678" -> "1000675" 
  "1000681" -> "1000668" 
  "1000682" -> "1000681" 
  "1000686" -> "1000694" 
  "1000688" -> "1000686" 
  "1000689" -> "1000688" 
  "1000690" -> "1000691" 
  "1000691" -> "1000689" 
  "1000694" -> "1000697" 
  "1000697" -> "1000703" 
  "1000700" -> "1000706" 
  "1000702" -> "1000700" 
  "1000703" -> "1000702" 
  "1000706" -> "1000709" 
  "1000709" -> "1000362" 
  "1000709" -> "1000724" 
  "1000713" -> "1000716" 
  "1000716" -> "1000720" 
  "1000720" -> "1000362" 
  "1000720" -> "1000724" 
  "1000724" -> "1000727" 
  "1000727" -> "1000729" 
  "1000120" -> "1000146" 
}
