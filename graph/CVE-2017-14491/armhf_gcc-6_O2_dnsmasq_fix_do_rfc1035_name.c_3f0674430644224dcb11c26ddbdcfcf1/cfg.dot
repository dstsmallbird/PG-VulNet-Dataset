digraph do_rfc1035_name {  
"1000127" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000129" [label = "(<operator>.indirection,*a2)" ]
"1000135" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000137" [label = "(<operator>.addition,a1 + 1)" ]
"1000144" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000146" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000147" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000150" [label = "(<operator>.assignment,v5 = (unsigned __int8)*a2)" ]
"1000152" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000153" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000154" [label = "(<operator>.indirection,*a2)" ]
"1000156" [label = "(<operator>.assignment,v6 = v5 == 0)" ]
"1000158" [label = "(<operator>.equals,v5 == 0)" ]
"1000162" [label = "(<operator>.indirection,*a2)" ]
"1000164" [label = "(<operator>.assignment,v6 = v5 == 46)" ]
"1000166" [label = "(<operator>.equals,v5 == 46)" ]
"1000170" [label = "(<operator>.logicalNot,!v6)" ]
"1000173" [label = "(<operator>.assignment,v8 = a1 + 2)" ]
"1000175" [label = "(<operator>.addition,a1 + 2)" ]
"1000178" [label = "(<operator>.assignment,v9 = a2 + 1)" ]
"1000180" [label = "(<operator>.addition,a2 + 1)" ]
"1000183" [label = "(<operator>.assignment,v10 = a1 + 1)" ]
"1000185" [label = "(<operator>.addition,a1 + 1)" ]
"1000191" [label = "(<operator>.assignment,v11 = v8)" ]
"1000194" [label = "(<operator>.assignment,result = v10)" ]
"1000201" [label = "(<operator>.lessThan,a3 < (unsigned int)v8)" ]
"1000203" [label = "(<operator>.cast,(unsigned int)v8)" ]
"1000204" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000206" [label = "(RETURN,return result;,return result;)" ]
"1000208" [label = "(<operator>.assignment,*v10++ = v5)" ]
"1000209" [label = "(<operator>.indirection,*v10++)" ]
"1000210" [label = "(<operator>.postIncrement,v10++)" ]
"1000213" [label = "(<operator>.assignment,v13 = v9)" ]
"1000216" [label = "(<operator>.assignment,v5 = *v9)" ]
"1000218" [label = "(<operator>.indirection,*v9)" ]
"1000220" [label = "(<operator>.assignment,v7 = (_BYTE)v9 - (_BYTE)a2)" ]
"1000222" [label = "(<operator>.subtraction,(_BYTE)v9 - (_BYTE)a2)" ]
"1000223" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000224" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000226" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000227" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000229" [label = "(<operator>.preIncrement,++v8)" ]
"1000231" [label = "(<operator>.preIncrement,++v9)" ]
"1000233" [label = "(<operator>.assignment,v12 = v5 == 0)" ]
"1000235" [label = "(<operator>.equals,v5 == 0)" ]
"1000240" [label = "(<operator>.assignment,v12 = v5 == 46)" ]
"1000242" [label = "(<operator>.equals,v5 == 46)" ]
"1000248" [label = "(<operator>.assignment,result = v11)" ]
"1000252" [label = "(<operator>.assignment,v7 = 0)" ]
"1000255" [label = "(<operator>.assignment,v13 = a2)" ]
"1000259" [label = "(<operator>.assignment,*a1 = v7)" ]
"1000260" [label = "(<operator>.indirection,*a1)" ]
"1000264" [label = "(<operator>.logicalNot,!*v13)" ]
"1000265" [label = "(<operator>.indirection,*v13)" ]
"1000267" [label = "(RETURN,return result;,return result;)" ]
"1000269" [label = "(<operator>.assignment,a2 = v13 + 1)" ]
"1000271" [label = "(<operator>.addition,v13 + 1)" ]
"1000275" [label = "(<operator>.logicalOr,v13 == (_BYTE *)-1 || !v13[1])" ]
"1000276" [label = "(<operator>.equals,v13 == (_BYTE *)-1)" ]
"1000278" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000279" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000280" [label = "(<operator>.minus,-1)" ]
"1000282" [label = "(<operator>.logicalNot,!v13[1])" ]
"1000283" [label = "(<operator>.indirectIndexAccess,v13[1])" ]
"1000286" [label = "(RETURN,return result;,return result;)" ]
"1000288" [label = "(<operator>.assignment,a1 = result)" ]
"1000291" [label = "(RETURN,return a1;,return a1;)" ]
"1000111" [label = "(METHOD,do_rfc1035_name)" ]
"1000293" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000127" -> "1000137" 
  "1000127" -> "1000291" 
  "1000127" -> "1000291" 
  "1000129" -> "1000127" 
  "1000135" -> "1000147" 
  "1000135" -> "1000153" 
  "1000137" -> "1000135" 
  "1000144" -> "1000291" 
  "1000144" -> "1000153" 
  "1000146" -> "1000144" 
  "1000147" -> "1000146" 
  "1000150" -> "1000158" 
  "1000152" -> "1000150" 
  "1000153" -> "1000154" 
  "1000154" -> "1000152" 
  "1000156" -> "1000162" 
  "1000158" -> "1000156" 
  "1000162" -> "1000166" 
  "1000162" -> "1000170" 
  "1000164" -> "1000170" 
  "1000166" -> "1000164" 
  "1000170" -> "1000175" 
  "1000170" -> "1000252" 
  "1000173" -> "1000180" 
  "1000175" -> "1000173" 
  "1000178" -> "1000185" 
  "1000180" -> "1000178" 
  "1000183" -> "1000191" 
  "1000183" -> "1000252" 
  "1000185" -> "1000183" 
  "1000191" -> "1000194" 
  "1000194" -> "1000204" 
  "1000194" -> "1000210" 
  "1000201" -> "1000206" 
  "1000201" -> "1000210" 
  "1000203" -> "1000201" 
  "1000204" -> "1000203" 
  "1000206" -> "1000293" 
  "1000208" -> "1000213" 
  "1000209" -> "1000208" 
  "1000210" -> "1000209" 
  "1000213" -> "1000218" 
  "1000216" -> "1000224" 
  "1000218" -> "1000216" 
  "1000220" -> "1000229" 
  "1000222" -> "1000220" 
  "1000223" -> "1000227" 
  "1000224" -> "1000223" 
  "1000226" -> "1000222" 
  "1000227" -> "1000226" 
  "1000229" -> "1000231" 
  "1000231" -> "1000235" 
  "1000233" -> "1000242" 
  "1000233" -> "1000191" 
  "1000233" -> "1000252" 
  "1000233" -> "1000248" 
  "1000235" -> "1000233" 
  "1000240" -> "1000191" 
  "1000240" -> "1000252" 
  "1000240" -> "1000248" 
  "1000242" -> "1000240" 
  "1000248" -> "1000260" 
  "1000252" -> "1000255" 
  "1000255" -> "1000260" 
  "1000259" -> "1000265" 
  "1000260" -> "1000259" 
  "1000264" -> "1000267" 
  "1000264" -> "1000271" 
  "1000265" -> "1000264" 
  "1000267" -> "1000293" 
  "1000269" -> "1000279" 
  "1000271" -> "1000269" 
  "1000275" -> "1000286" 
  "1000275" -> "1000288" 
  "1000276" -> "1000275" 
  "1000276" -> "1000283" 
  "1000278" -> "1000276" 
  "1000279" -> "1000280" 
  "1000280" -> "1000278" 
  "1000282" -> "1000275" 
  "1000283" -> "1000282" 
  "1000286" -> "1000293" 
  "1000288" -> "1000137" 
  "1000288" -> "1000291" 
  "1000291" -> "1000293" 
  "1000111" -> "1000127" 
  "1000111" -> "1000129" 
}
