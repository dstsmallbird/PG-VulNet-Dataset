digraph do_rfc1035_name {  
"1000115" [label = "(<operator>.logicalNot,!a2)" ]
"1000117" [label = "(RETURN,return a1;,return a1;)" ]
"1000120" [label = "(<operator>.logicalNot,!*a2)" ]
"1000121" [label = "(<operator>.indirection,*a2)" ]
"1000123" [label = "(RETURN,return a1;,return a1;)" ]
"1000129" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned __int64)(a1 + 1))" ]
"1000131" [label = "(<operator>.lessThan,a3 < (unsigned __int64)(a1 + 1))" ]
"1000133" [label = "(<operator>.cast,(unsigned __int64)(a1 + 1))" ]
"1000134" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000135" [label = "(<operator>.addition,a1 + 1)" ]
"1000138" [label = "(RETURN,return a1;,return a1;)" ]
"1000140" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000142" [label = "(<operator>.addition,a1 + 1)" ]
"1000145" [label = "(<operator>.assignment,v3 = *a2)" ]
"1000147" [label = "(<operator>.indirection,*a2)" ]
"1000150" [label = "(<operator>.indirection,*a2)" ]
"1000154" [label = "(<operator>.notEquals,v3 != 46)" ]
"1000158" [label = "(<operator>.assignment,v5 = a2)" ]
"1000161" [label = "(<operator>.assignment,v4 = 0)" ]
"1000165" [label = "(<operator>.assignment,*a1 = v4)" ]
"1000166" [label = "(<operator>.indirection,*a1)" ]
"1000170" [label = "(<operator>.logicalNot,!*v5)" ]
"1000171" [label = "(<operator>.indirection,*v5)" ]
"1000173" [label = "(RETURN,return result;,return result;)" ]
"1000175" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000177" [label = "(<operator>.addition,v5 + 1)" ]
"1000180" [label = "(RETURN,return result;,return result;)" ]
"1000182" [label = "(<operator>.assignment,a1 = result)" ]
"1000185" [label = "(<operator>.assignment,v4 = 0)" ]
"1000189" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned __int64)(result + 1))" ]
"1000190" [label = "(<operator>.logicalNot,!a3)" ]
"1000192" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned __int64)(result + 1))" ]
"1000194" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000195" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000196" [label = "(<operator>.addition,result + 1)" ]
"1000200" [label = "(<operator>.assignment,*result++ = v3)" ]
"1000201" [label = "(<operator>.indirection,*result++)" ]
"1000202" [label = "(<operator>.postIncrement,result++)" ]
"1000205" [label = "(<operator>.preIncrement,++a2)" ]
"1000207" [label = "(<operator>.preIncrement,++v4)" ]
"1000209" [label = "(<operator>.assignment,v3 = *a2)" ]
"1000211" [label = "(<operator>.indirection,*a2)" ]
"1000214" [label = "(<operator>.logicalOr,!*a2 || v3 == 46)" ]
"1000215" [label = "(<operator>.logicalNot,!*a2)" ]
"1000216" [label = "(<operator>.indirection,*a2)" ]
"1000218" [label = "(<operator>.equals,v3 == 46)" ]
"1000222" [label = "(<operator>.assignment,v5 = a2)" ]
"1000226" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000228" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000115" -> "1000117" 
  "1000115" -> "1000121" 
  "1000117" -> "1000228" 
  "1000120" -> "1000123" 
  "1000120" -> "1000129" 
  "1000120" -> "1000134" 
  "1000120" -> "1000185" 
  "1000121" -> "1000120" 
  "1000123" -> "1000228" 
  "1000129" -> "1000138" 
  "1000129" -> "1000142" 
  "1000131" -> "1000129" 
  "1000133" -> "1000131" 
  "1000134" -> "1000135" 
  "1000135" -> "1000133" 
  "1000138" -> "1000228" 
  "1000140" -> "1000147" 
  "1000142" -> "1000140" 
  "1000145" -> "1000150" 
  "1000147" -> "1000145" 
  "1000150" -> "1000154" 
  "1000150" -> "1000158" 
  "1000154" -> "1000185" 
  "1000154" -> "1000158" 
  "1000158" -> "1000161" 
  "1000161" -> "1000166" 
  "1000165" -> "1000171" 
  "1000166" -> "1000165" 
  "1000170" -> "1000173" 
  "1000170" -> "1000177" 
  "1000171" -> "1000170" 
  "1000173" -> "1000228" 
  "1000175" -> "1000180" 
  "1000177" -> "1000175" 
  "1000180" -> "1000228" 
  "1000182" -> "1000129" 
  "1000182" -> "1000134" 
  "1000182" -> "1000185" 
  "1000185" -> "1000190" 
  "1000189" -> "1000202" 
  "1000189" -> "1000226" 
  "1000190" -> "1000189" 
  "1000190" -> "1000195" 
  "1000192" -> "1000189" 
  "1000194" -> "1000192" 
  "1000195" -> "1000196" 
  "1000196" -> "1000194" 
  "1000200" -> "1000205" 
  "1000201" -> "1000200" 
  "1000202" -> "1000201" 
  "1000205" -> "1000207" 
  "1000207" -> "1000211" 
  "1000209" -> "1000216" 
  "1000211" -> "1000209" 
  "1000214" -> "1000190" 
  "1000214" -> "1000222" 
  "1000215" -> "1000214" 
  "1000215" -> "1000218" 
  "1000216" -> "1000215" 
  "1000218" -> "1000214" 
  "1000222" -> "1000166" 
  "1000226" -> "1000228" 
  "1000105" -> "1000115" 
}
