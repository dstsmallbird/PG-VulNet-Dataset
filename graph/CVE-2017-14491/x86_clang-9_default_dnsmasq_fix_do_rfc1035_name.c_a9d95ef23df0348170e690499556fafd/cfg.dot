digraph do_rfc1035_name {  
"1000120" [label = "(<operator>.assignment,v3 = a2)" ]
"1000123" [label = "(<operator>.assignment,result = a1)" ]
"1000132" [label = "(<operator>.assignment,v5 = (_BYTE *)result)" ]
"1000134" [label = "(<operator>.cast,(_BYTE *)result)" ]
"1000135" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000137" [label = "(<operator>.assignment,v6 = *v3)" ]
"1000139" [label = "(<operator>.indirection,*v3)" ]
"1000142" [label = "(<operator>.logicalOr,!*v3 || a3 && (unsigned int)(v5 + 1) > a3)" ]
"1000143" [label = "(<operator>.logicalNot,!*v3)" ]
"1000144" [label = "(<operator>.indirection,*v3)" ]
"1000146" [label = "(<operator>.logicalAnd,a3 && (unsigned int)(v5 + 1) > a3)" ]
"1000148" [label = "(<operator>.greaterThan,(unsigned int)(v5 + 1) > a3)" ]
"1000149" [label = "(<operator>.cast,(unsigned int)(v5 + 1))" ]
"1000150" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000151" [label = "(<operator>.addition,v5 + 1)" ]
"1000156" [label = "(<operator>.assignment,v7 = 0)" ]
"1000163" [label = "(<operator>.notEquals,v6 != 46)" ]
"1000168" [label = "(<operator>.logicalAnd,a3 && (unsigned int)&v5[v7 + 2] > a3)" ]
"1000170" [label = "(<operator>.greaterThan,(unsigned int)&v5[v7 + 2] > a3)" ]
"1000171" [label = "(<operator>.cast,(unsigned int)&v5[v7 + 2])" ]
"1000172" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000173" [label = "(<operator>.addressOf,&v5[v7 + 2])" ]
"1000174" [label = "(<operator>.indirectIndexAccess,v5[v7 + 2])" ]
"1000176" [label = "(<operator>.addition,v7 + 2)" ]
"1000180" [label = "(RETURN,return (int)&v5[v7 + 1];,return (int)&v5[v7 + 1];)" ]
"1000181" [label = "(<operator>.cast,(int)&v5[v7 + 1])" ]
"1000182" [label = "(UNKNOWN,int,int)" ]
"1000183" [label = "(<operator>.addressOf,&v5[v7 + 1])" ]
"1000184" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000186" [label = "(<operator>.addition,v7 + 1)" ]
"1000189" [label = "(<operator>.assignment,v5[v7 + 1] = v6)" ]
"1000190" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000192" [label = "(<operator>.addition,v7 + 1)" ]
"1000196" [label = "(<operator>.assignment,v6 = v3[++v7])" ]
"1000198" [label = "(<operator>.indirectIndexAccess,v3[++v7])" ]
"1000200" [label = "(<operator>.preIncrement,++v7)" ]
"1000203" [label = "(<operator>.logicalNot,!v6)" ]
"1000206" [label = "(<operator>.assignment,*v5 = v7)" ]
"1000207" [label = "(<operator>.indirection,*v5)" ]
"1000210" [label = "(<operator>.assignment,v8 = v3[v7] == 0)" ]
"1000212" [label = "(<operator>.equals,v3[v7] == 0)" ]
"1000213" [label = "(<operator>.indirectIndexAccess,v3[v7])" ]
"1000217" [label = "(<operator>.assignment,v9 = &v3[v7])" ]
"1000219" [label = "(<operator>.addressOf,&v3[v7])" ]
"1000220" [label = "(<operator>.indirectIndexAccess,v3[v7])" ]
"1000223" [label = "(<operator>.assignmentPlus,v3 += v7 + 1)" ]
"1000225" [label = "(<operator>.addition,v7 + 1)" ]
"1000230" [label = "(<operator>.assignment,v3 = v9)" ]
"1000233" [label = "(<operator>.assignment,result = (int)&v5[v7 + 1])" ]
"1000235" [label = "(<operator>.cast,(int)&v5[v7 + 1])" ]
"1000236" [label = "(UNKNOWN,int,int)" ]
"1000237" [label = "(<operator>.addressOf,&v5[v7 + 1])" ]
"1000238" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000240" [label = "(<operator>.addition,v7 + 1)" ]
"1000244" [label = "(<operator>.logicalNot,!v3)" ]
"1000246" [label = "(RETURN,return (int)&v5[v7 + 1];,return (int)&v5[v7 + 1];)" ]
"1000247" [label = "(<operator>.cast,(int)&v5[v7 + 1])" ]
"1000248" [label = "(UNKNOWN,int,int)" ]
"1000249" [label = "(<operator>.addressOf,&v5[v7 + 1])" ]
"1000250" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000252" [label = "(<operator>.addition,v7 + 1)" ]
"1000255" [label = "(<operator>.assignment,result = (int)v5)" ]
"1000257" [label = "(<operator>.cast,(int)v5)" ]
"1000258" [label = "(UNKNOWN,int,int)" ]
"1000260" [label = "(RETURN,return result;,return result;)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000262" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000120" -> "1000123" 
  "1000123" -> "1000135" 
  "1000123" -> "1000258" 
  "1000123" -> "1000260" 
  "1000132" -> "1000139" 
  "1000134" -> "1000132" 
  "1000135" -> "1000134" 
  "1000137" -> "1000144" 
  "1000139" -> "1000137" 
  "1000142" -> "1000258" 
  "1000142" -> "1000156" 
  "1000143" -> "1000142" 
  "1000143" -> "1000150" 
  "1000143" -> "1000146" 
  "1000144" -> "1000143" 
  "1000146" -> "1000142" 
  "1000148" -> "1000146" 
  "1000149" -> "1000148" 
  "1000150" -> "1000151" 
  "1000151" -> "1000149" 
  "1000156" -> "1000163" 
  "1000156" -> "1000207" 
  "1000163" -> "1000172" 
  "1000163" -> "1000168" 
  "1000163" -> "1000207" 
  "1000168" -> "1000182" 
  "1000168" -> "1000192" 
  "1000170" -> "1000168" 
  "1000171" -> "1000170" 
  "1000172" -> "1000176" 
  "1000173" -> "1000171" 
  "1000174" -> "1000173" 
  "1000176" -> "1000174" 
  "1000180" -> "1000262" 
  "1000181" -> "1000180" 
  "1000182" -> "1000186" 
  "1000183" -> "1000181" 
  "1000184" -> "1000183" 
  "1000186" -> "1000184" 
  "1000189" -> "1000200" 
  "1000190" -> "1000189" 
  "1000192" -> "1000190" 
  "1000196" -> "1000203" 
  "1000198" -> "1000196" 
  "1000200" -> "1000198" 
  "1000203" -> "1000163" 
  "1000203" -> "1000207" 
  "1000203" -> "1000258" 
  "1000206" -> "1000213" 
  "1000207" -> "1000206" 
  "1000210" -> "1000220" 
  "1000212" -> "1000210" 
  "1000213" -> "1000212" 
  "1000217" -> "1000225" 
  "1000219" -> "1000217" 
  "1000220" -> "1000219" 
  "1000223" -> "1000230" 
  "1000223" -> "1000236" 
  "1000225" -> "1000223" 
  "1000230" -> "1000236" 
  "1000233" -> "1000244" 
  "1000235" -> "1000233" 
  "1000236" -> "1000240" 
  "1000237" -> "1000235" 
  "1000238" -> "1000237" 
  "1000240" -> "1000238" 
  "1000244" -> "1000248" 
  "1000244" -> "1000135" 
  "1000244" -> "1000258" 
  "1000246" -> "1000262" 
  "1000247" -> "1000246" 
  "1000248" -> "1000252" 
  "1000249" -> "1000247" 
  "1000250" -> "1000249" 
  "1000252" -> "1000250" 
  "1000255" -> "1000260" 
  "1000257" -> "1000255" 
  "1000258" -> "1000257" 
  "1000260" -> "1000262" 
  "1000108" -> "1000120" 
}
