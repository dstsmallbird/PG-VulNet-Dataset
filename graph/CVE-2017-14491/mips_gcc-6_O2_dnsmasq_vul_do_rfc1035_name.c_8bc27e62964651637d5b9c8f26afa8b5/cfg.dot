digraph do_rfc1035_name {  
"1000112" [label = "(<operator>.logicalNot,!a2)" ]
"1000114" [label = "(RETURN,return a1;,return a1;)" ]
"1000116" [label = "(<operator>.assignment,v2 = (char)*a2)" ]
"1000118" [label = "(<operator>.cast,(char)*a2)" ]
"1000119" [label = "(UNKNOWN,char,char)" ]
"1000120" [label = "(<operator>.indirection,*a2)" ]
"1000123" [label = "(<operator>.logicalNot,!*a2)" ]
"1000124" [label = "(<operator>.indirection,*a2)" ]
"1000126" [label = "(RETURN,return a1;,return a1;)" ]
"1000128" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000130" [label = "(<operator>.addition,a1 + 1)" ]
"1000134" [label = "(<operator>.equals,v2 == 46)" ]
"1000139" [label = "(<operator>.assignment,v4 = a2)" ]
"1000144" [label = "(<operator>.assignment,*result++ = v2)" ]
"1000145" [label = "(<operator>.indirection,*result++)" ]
"1000146" [label = "(<operator>.postIncrement,result++)" ]
"1000149" [label = "(<operator>.assignment,v2 = (char)*++v4)" ]
"1000151" [label = "(<operator>.cast,(char)*++v4)" ]
"1000152" [label = "(UNKNOWN,char,char)" ]
"1000153" [label = "(<operator>.indirection,*++v4)" ]
"1000154" [label = "(<operator>.preIncrement,++v4)" ]
"1000156" [label = "(<operator>.logicalAnd,*v4 && v2 != 46)" ]
"1000157" [label = "(<operator>.indirection,*v4)" ]
"1000159" [label = "(<operator>.notEquals,v2 != 46)" ]
"1000162" [label = "(<operator>.assignment,*a1 = (_BYTE)v4 - (_BYTE)a2)" ]
"1000163" [label = "(<operator>.indirection,*a1)" ]
"1000165" [label = "(<operator>.subtraction,(_BYTE)v4 - (_BYTE)a2)" ]
"1000166" [label = "(<operator>.cast,(_BYTE)v4)" ]
"1000167" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000169" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000170" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000172" [label = "(<operator>.assignment,a2 = v4 + 1)" ]
"1000174" [label = "(<operator>.addition,v4 + 1)" ]
"1000178" [label = "(<operator>.indirection,*v4)" ]
"1000184" [label = "(<operator>.logicalNot,!a2)" ]
"1000187" [label = "(<operator>.assignment,v2 = (char)v4[1])" ]
"1000189" [label = "(<operator>.cast,(char)v4[1])" ]
"1000190" [label = "(UNKNOWN,char,char)" ]
"1000191" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000194" [label = "(<operator>.assignment,a1 = result)" ]
"1000198" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000199" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000203" [label = "(<operator>.preIncrement,++result)" ]
"1000206" [label = "(<operator>.notEquals,v2 != 46)" ]
"1000211" [label = "(<operator>.assignment,v4 = a2)" ]
"1000214" [label = "(<operator>.assignment,*a1 = 0)" ]
"1000215" [label = "(<operator>.indirection,*a1)" ]
"1000218" [label = "(<operator>.indirection,*a2++)" ]
"1000219" [label = "(<operator>.postIncrement,a2++)" ]
"1000221" [label = "(RETURN,return result;,return result;)" ]
"1000104" [label = "(METHOD,do_rfc1035_name)" ]
"1000223" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000112" -> "1000114" 
  "1000112" -> "1000119" 
  "1000114" -> "1000223" 
  "1000116" -> "1000124" 
  "1000118" -> "1000116" 
  "1000119" -> "1000120" 
  "1000120" -> "1000118" 
  "1000123" -> "1000126" 
  "1000123" -> "1000130" 
  "1000124" -> "1000123" 
  "1000126" -> "1000223" 
  "1000128" -> "1000134" 
  "1000130" -> "1000128" 
  "1000134" -> "1000211" 
  "1000134" -> "1000139" 
  "1000139" -> "1000146" 
  "1000144" -> "1000152" 
  "1000145" -> "1000144" 
  "1000146" -> "1000145" 
  "1000149" -> "1000157" 
  "1000151" -> "1000149" 
  "1000152" -> "1000154" 
  "1000153" -> "1000151" 
  "1000154" -> "1000153" 
  "1000156" -> "1000146" 
  "1000156" -> "1000163" 
  "1000157" -> "1000156" 
  "1000157" -> "1000159" 
  "1000159" -> "1000156" 
  "1000162" -> "1000174" 
  "1000163" -> "1000167" 
  "1000165" -> "1000162" 
  "1000166" -> "1000170" 
  "1000167" -> "1000166" 
  "1000169" -> "1000165" 
  "1000170" -> "1000169" 
  "1000172" -> "1000178" 
  "1000174" -> "1000172" 
  "1000178" -> "1000184" 
  "1000178" -> "1000221" 
  "1000184" -> "1000221" 
  "1000184" -> "1000190" 
  "1000187" -> "1000194" 
  "1000189" -> "1000187" 
  "1000190" -> "1000191" 
  "1000191" -> "1000189" 
  "1000194" -> "1000199" 
  "1000198" -> "1000221" 
  "1000198" -> "1000203" 
  "1000199" -> "1000198" 
  "1000203" -> "1000206" 
  "1000206" -> "1000139" 
  "1000206" -> "1000139" 
  "1000206" -> "1000211" 
  "1000211" -> "1000215" 
  "1000214" -> "1000219" 
  "1000215" -> "1000214" 
  "1000218" -> "1000184" 
  "1000218" -> "1000221" 
  "1000219" -> "1000218" 
  "1000221" -> "1000223" 
  "1000104" -> "1000112" 
}
