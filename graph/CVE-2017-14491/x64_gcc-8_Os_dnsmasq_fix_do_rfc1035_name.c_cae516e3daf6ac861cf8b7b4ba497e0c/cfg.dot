digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.assignment,result = a1)" ]
"1000121" [label = "(<operator>.logicalNot,!a2)" ]
"1000125" [label = "(<operator>.logicalNot,!*a2)" ]
"1000126" [label = "(<operator>.indirection,*a2)" ]
"1000129" [label = "(<operator>.preIncrement,++a1)" ]
"1000135" [label = "(<operator>.lessThan,a3 < (unsigned __int64)a1)" ]
"1000137" [label = "(<operator>.cast,(unsigned __int64)a1)" ]
"1000138" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000143" [label = "(<operator>.assignment,v5 = a2[i])" ]
"1000145" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000148" [label = "(<operator>.assignment,v6 = &a2[i])" ]
"1000150" [label = "(<operator>.addressOf,&a2[i])" ]
"1000151" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000155" [label = "(<operator>.logicalOr,!v5 || v5 == 46)" ]
"1000156" [label = "(<operator>.logicalNot,!v5)" ]
"1000158" [label = "(<operator>.equals,v5 == 46)" ]
"1000163" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned __int64)(a1 + 1))" ]
"1000165" [label = "(<operator>.lessThan,a3 < (unsigned __int64)(a1 + 1))" ]
"1000167" [label = "(<operator>.cast,(unsigned __int64)(a1 + 1))" ]
"1000168" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000169" [label = "(<operator>.addition,a1 + 1)" ]
"1000172" [label = "(RETURN,return a1;,return a1;)" ]
"1000174" [label = "(<operator>.assignment,*a1++ = v5)" ]
"1000175" [label = "(<operator>.indirection,*a1++)" ]
"1000176" [label = "(<operator>.postIncrement,a1++)" ]
"1000179" [label = "(<operator>.assignment,*result = i)" ]
"1000180" [label = "(<operator>.indirection,*result)" ]
"1000184" [label = "(<operator>.indirection,*v6)" ]
"1000186" [label = "(<operator>.preIncrement,++v6)" ]
"1000188" [label = "(<operator>.assignment,a2 = v6)" ]
"1000191" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000193" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000121" 
  "1000121" -> "1000191" 
  "1000121" -> "1000126" 
  "1000125" -> "1000191" 
  "1000125" -> "1000129" 
  "1000126" -> "1000125" 
  "1000129" -> "1000138" 
  "1000129" -> "1000145" 
  "1000135" -> "1000191" 
  "1000135" -> "1000145" 
  "1000137" -> "1000135" 
  "1000138" -> "1000137" 
  "1000143" -> "1000151" 
  "1000145" -> "1000143" 
  "1000148" -> "1000156" 
  "1000150" -> "1000148" 
  "1000151" -> "1000150" 
  "1000155" -> "1000191" 
  "1000155" -> "1000163" 
  "1000155" -> "1000168" 
  "1000156" -> "1000155" 
  "1000156" -> "1000158" 
  "1000158" -> "1000155" 
  "1000163" -> "1000172" 
  "1000163" -> "1000176" 
  "1000165" -> "1000163" 
  "1000167" -> "1000165" 
  "1000168" -> "1000169" 
  "1000169" -> "1000167" 
  "1000172" -> "1000193" 
  "1000174" -> "1000180" 
  "1000175" -> "1000174" 
  "1000176" -> "1000175" 
  "1000179" -> "1000184" 
  "1000180" -> "1000179" 
  "1000184" -> "1000186" 
  "1000184" -> "1000188" 
  "1000186" -> "1000188" 
  "1000188" -> "1000117" 
  "1000188" -> "1000191" 
  "1000191" -> "1000193" 
  "1000105" -> "1000117" 
  "1000105" -> "1000191" 
}
