digraph do_rfc1035_name {  
"1000120" [label = "(<operator>.assignment,v3 = *a2)" ]
"1000122" [label = "(<operator>.indirection,*a2)" ]
"1000124" [label = "(<operator>.assignment,v4 = result)" ]
"1000128" [label = "(<operator>.logicalOr,!*a2 || a3 && (unsigned __int64)(result + 1) > a3)" ]
"1000129" [label = "(<operator>.logicalNot,!*a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000132" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)(result + 1) > a3)" ]
"1000134" [label = "(<operator>.greaterThan,(unsigned __int64)(result + 1) > a3)" ]
"1000135" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000136" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000137" [label = "(<operator>.addition,result + 1)" ]
"1000144" [label = "(<operator>.assignment,v6 = &result[i])" ]
"1000146" [label = "(<operator>.addressOf,&result[i])" ]
"1000147" [label = "(<operator>.indirectIndexAccess,result[i])" ]
"1000151" [label = "(<operator>.logicalOr,!v3 || v3 == 46)" ]
"1000152" [label = "(<operator>.logicalNot,!v3)" ]
"1000154" [label = "(<operator>.equals,v3 == 46)" ]
"1000159" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)&result[i + 2] > a3)" ]
"1000161" [label = "(<operator>.greaterThan,(unsigned __int64)&result[i + 2] > a3)" ]
"1000162" [label = "(<operator>.cast,(unsigned __int64)&result[i + 2])" ]
"1000163" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000164" [label = "(<operator>.addressOf,&result[i + 2])" ]
"1000165" [label = "(<operator>.indirectIndexAccess,result[i + 2])" ]
"1000167" [label = "(<operator>.addition,i + 2)" ]
"1000171" [label = "(RETURN,return &v4[i + 1];,return &v4[i + 1];)" ]
"1000172" [label = "(<operator>.addressOf,&v4[i + 1])" ]
"1000173" [label = "(<operator>.indirectIndexAccess,v4[i + 1])" ]
"1000175" [label = "(<operator>.addition,i + 1)" ]
"1000178" [label = "(<operator>.assignment,v6[1] = v3)" ]
"1000179" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000183" [label = "(<operator>.assignment,v3 = a2[i + 1])" ]
"1000185" [label = "(<operator>.indirectIndexAccess,a2[i + 1])" ]
"1000187" [label = "(<operator>.addition,i + 1)" ]
"1000190" [label = "(<operator>.assignment,*result = i)" ]
"1000191" [label = "(<operator>.indirection,*result)" ]
"1000194" [label = "(<operator>.assignment,result = v6 + 1)" ]
"1000196" [label = "(<operator>.addition,v6 + 1)" ]
"1000200" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000203" [label = "(<operator>.assignmentPlus,a2 += i + 1)" ]
"1000205" [label = "(<operator>.addition,i + 1)" ]
"1000209" [label = "(<operator>.assignmentPlus,a2 += i)" ]
"1000213" [label = "(<operator>.logicalNot,!a2)" ]
"1000215" [label = "(RETURN,return &v4[i + 1];,return &v4[i + 1];)" ]
"1000216" [label = "(<operator>.addressOf,&v4[i + 1])" ]
"1000217" [label = "(<operator>.indirectIndexAccess,v4[i + 1])" ]
"1000219" [label = "(<operator>.addition,i + 1)" ]
"1000222" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000224" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000120" -> "1000124" 
  "1000122" -> "1000120" 
  "1000124" -> "1000130" 
  "1000128" -> "1000222" 
  "1000128" -> "1000147" 
  "1000129" -> "1000128" 
  "1000129" -> "1000136" 
  "1000129" -> "1000132" 
  "1000130" -> "1000129" 
  "1000132" -> "1000128" 
  "1000134" -> "1000132" 
  "1000135" -> "1000134" 
  "1000136" -> "1000137" 
  "1000137" -> "1000135" 
  "1000144" -> "1000152" 
  "1000146" -> "1000144" 
  "1000147" -> "1000146" 
  "1000151" -> "1000222" 
  "1000151" -> "1000163" 
  "1000151" -> "1000159" 
  "1000152" -> "1000151" 
  "1000152" -> "1000154" 
  "1000154" -> "1000151" 
  "1000159" -> "1000175" 
  "1000159" -> "1000179" 
  "1000161" -> "1000159" 
  "1000162" -> "1000161" 
  "1000163" -> "1000167" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000167" -> "1000165" 
  "1000171" -> "1000224" 
  "1000172" -> "1000171" 
  "1000173" -> "1000172" 
  "1000175" -> "1000173" 
  "1000178" -> "1000187" 
  "1000179" -> "1000178" 
  "1000183" -> "1000191" 
  "1000185" -> "1000183" 
  "1000187" -> "1000185" 
  "1000190" -> "1000196" 
  "1000191" -> "1000190" 
  "1000194" -> "1000200" 
  "1000196" -> "1000194" 
  "1000200" -> "1000205" 
  "1000200" -> "1000209" 
  "1000203" -> "1000213" 
  "1000205" -> "1000203" 
  "1000209" -> "1000213" 
  "1000213" -> "1000122" 
  "1000213" -> "1000222" 
  "1000213" -> "1000219" 
  "1000215" -> "1000224" 
  "1000216" -> "1000215" 
  "1000217" -> "1000216" 
  "1000219" -> "1000217" 
  "1000222" -> "1000224" 
  "1000105" -> "1000122" 
  "1000105" -> "1000222" 
  "1000105" -> "1000222" 
}
