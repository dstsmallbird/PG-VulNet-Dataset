digraph do_rfc1035_name {  
"1000114" [label = "(<operator>.logicalNot,!a2)" ]
"1000116" [label = "(RETURN,return a1;,return a1;)" ]
"1000119" [label = "(<operator>.logicalNot,!*a2)" ]
"1000120" [label = "(<operator>.indirection,*a2)" ]
"1000122" [label = "(RETURN,return a1;,return a1;)" ]
"1000126" [label = "(<operator>.assignment,v4 = (char)*a2)" ]
"1000128" [label = "(<operator>.cast,(char)*a2)" ]
"1000129" [label = "(UNKNOWN,char,char)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000132" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000134" [label = "(<operator>.addition,a1 + 1)" ]
"1000138" [label = "(<operator>.indirection,*a2)" ]
"1000142" [label = "(<operator>.equals,v4 == 46)" ]
"1000146" [label = "(<operator>.assignment,v2 = a2)" ]
"1000149" [label = "(<operator>.assignment,v3 = 0)" ]
"1000154" [label = "(<operator>.assignment,result = a1 + 2)" ]
"1000156" [label = "(<operator>.addition,a1 + 2)" ]
"1000161" [label = "(<operator>.assignment,*(result - 1) = v4)" ]
"1000162" [label = "(<operator>.indirection,*(result - 1))" ]
"1000163" [label = "(<operator>.subtraction,result - 1)" ]
"1000167" [label = "(<operator>.preIncrement,++a2)" ]
"1000169" [label = "(<operator>.assignment,v3 = (_BYTE)result - 1 - (_BYTE)a1)" ]
"1000171" [label = "(<operator>.subtraction,(_BYTE)result - 1 - (_BYTE)a1)" ]
"1000172" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000173" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000175" [label = "(<operator>.subtraction,1 - (_BYTE)a1)" ]
"1000177" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000178" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000180" [label = "(<operator>.assignment,v4 = (char)*a2)" ]
"1000182" [label = "(<operator>.cast,(char)*a2)" ]
"1000183" [label = "(UNKNOWN,char,char)" ]
"1000184" [label = "(<operator>.indirection,*a2)" ]
"1000187" [label = "(<operator>.logicalNot,!*a2)" ]
"1000188" [label = "(<operator>.indirection,*a2)" ]
"1000191" [label = "(<operator>.assignment,v2 = a2)" ]
"1000195" [label = "(<operator>.preIncrement,++result)" ]
"1000197" [label = "(<operator>.notEquals,v4 != 46)" ]
"1000200" [label = "(<operator>.preDecrement,--result)" ]
"1000202" [label = "(<operator>.assignment,v2 = a2)" ]
"1000207" [label = "(<operator>.assignment,v2 = a2)" ]
"1000210" [label = "(<operator>.assignment,v3 = 0)" ]
"1000214" [label = "(<operator>.assignment,*a1 = v3)" ]
"1000215" [label = "(<operator>.indirection,*a1)" ]
"1000218" [label = "(<operator>.assignment,a2 = v2 + 1)" ]
"1000220" [label = "(<operator>.addition,v2 + 1)" ]
"1000224" [label = "(<operator>.logicalNot,!*v2)" ]
"1000225" [label = "(<operator>.indirection,*v2)" ]
"1000229" [label = "(<operator>.equals,v2 == (_BYTE *)-1)" ]
"1000231" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000232" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000233" [label = "(<operator>.minus,-1)" ]
"1000236" [label = "(<operator>.assignment,a1 = result)" ]
"1000239" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000242" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000244" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000114" -> "1000116" 
  "1000114" -> "1000120" 
  "1000116" -> "1000244" 
  "1000119" -> "1000122" 
  "1000119" -> "1000129" 
  "1000120" -> "1000119" 
  "1000122" -> "1000244" 
  "1000126" -> "1000134" 
  "1000128" -> "1000126" 
  "1000129" -> "1000130" 
  "1000130" -> "1000128" 
  "1000132" -> "1000138" 
  "1000134" -> "1000132" 
  "1000138" -> "1000142" 
  "1000138" -> "1000207" 
  "1000142" -> "1000146" 
  "1000142" -> "1000156" 
  "1000146" -> "1000149" 
  "1000149" -> "1000215" 
  "1000154" -> "1000163" 
  "1000156" -> "1000154" 
  "1000161" -> "1000167" 
  "1000162" -> "1000161" 
  "1000163" -> "1000162" 
  "1000167" -> "1000173" 
  "1000169" -> "1000183" 
  "1000171" -> "1000169" 
  "1000172" -> "1000178" 
  "1000173" -> "1000172" 
  "1000175" -> "1000171" 
  "1000177" -> "1000175" 
  "1000178" -> "1000177" 
  "1000180" -> "1000188" 
  "1000182" -> "1000180" 
  "1000183" -> "1000184" 
  "1000184" -> "1000182" 
  "1000187" -> "1000191" 
  "1000187" -> "1000195" 
  "1000188" -> "1000187" 
  "1000191" -> "1000215" 
  "1000191" -> "1000215" 
  "1000191" -> "1000215" 
  "1000191" -> "1000215" 
  "1000195" -> "1000197" 
  "1000197" -> "1000163" 
  "1000197" -> "1000200" 
  "1000200" -> "1000202" 
  "1000202" -> "1000215" 
  "1000207" -> "1000210" 
  "1000210" -> "1000215" 
  "1000214" -> "1000220" 
  "1000215" -> "1000214" 
  "1000218" -> "1000225" 
  "1000220" -> "1000218" 
  "1000224" -> "1000242" 
  "1000224" -> "1000232" 
  "1000225" -> "1000224" 
  "1000229" -> "1000242" 
  "1000229" -> "1000236" 
  "1000231" -> "1000229" 
  "1000232" -> "1000233" 
  "1000233" -> "1000231" 
  "1000236" -> "1000239" 
  "1000239" -> "1000129" 
  "1000239" -> "1000242" 
  "1000242" -> "1000244" 
  "1000105" -> "1000114" 
}
