digraph do_rfc1035_name {  
"1000127" [label = "(<operator>.assignment,v3 = a2)" ]
"1000131" [label = "(<operator>.indirection,*a2)" ]
"1000138" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)(result + 1))" ]
"1000140" [label = "(<operator>.lessThan,a3 < (unsigned int)(result + 1))" ]
"1000142" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000143" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000144" [label = "(<operator>.addition,result + 1)" ]
"1000148" [label = "(<operator>.assignment,v4 = result)" ]
"1000152" [label = "(<operator>.assignment,v4 = result + 1)" ]
"1000154" [label = "(<operator>.addition,result + 1)" ]
"1000157" [label = "(<operator>.assignment,v7 = (unsigned __int8)*v3)" ]
"1000159" [label = "(<operator>.cast,(unsigned __int8)*v3)" ]
"1000160" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000161" [label = "(<operator>.indirection,*v3)" ]
"1000163" [label = "(<operator>.assignment,v11 = v7 == 0)" ]
"1000165" [label = "(<operator>.equals,v7 == 0)" ]
"1000169" [label = "(<operator>.indirection,*v3)" ]
"1000171" [label = "(<operator>.assignment,v11 = v7 == 46)" ]
"1000173" [label = "(<operator>.equals,v7 == 46)" ]
"1000177" [label = "(<operator>.logicalNot,!v11)" ]
"1000180" [label = "(<operator>.assignment,v5 = v3)" ]
"1000183" [label = "(<operator>.assignment,v6 = 0)" ]
"1000187" [label = "(<operator>.assignment,*result = v6)" ]
"1000188" [label = "(<operator>.indirection,*result)" ]
"1000192" [label = "(<operator>.logicalNot,!*v5)" ]
"1000193" [label = "(<operator>.indirection,*v5)" ]
"1000196" [label = "(<operator>.assignment,v3 = v5 + 1)" ]
"1000198" [label = "(<operator>.addition,v5 + 1)" ]
"1000202" [label = "(<operator>.logicalOr,v5 == (_BYTE *)-1 || !v5[1])" ]
"1000203" [label = "(<operator>.equals,v5 == (_BYTE *)-1)" ]
"1000205" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000206" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000207" [label = "(<operator>.minus,-1)" ]
"1000209" [label = "(<operator>.logicalNot,!v5[1])" ]
"1000210" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000214" [label = "(<operator>.assignment,result = v4)" ]
"1000217" [label = "(<operator>.assignment,v8 = v3 + 1)" ]
"1000219" [label = "(<operator>.addition,v3 + 1)" ]
"1000223" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(v4 + 1))" ]
"1000224" [label = "(<operator>.logicalNot,!a3)" ]
"1000226" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(v4 + 1))" ]
"1000228" [label = "(<operator>.cast,(unsigned int)(v4 + 1))" ]
"1000229" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000230" [label = "(<operator>.addition,v4 + 1)" ]
"1000234" [label = "(<operator>.assignment,*v4++ = v7)" ]
"1000235" [label = "(<operator>.indirection,*v4++)" ]
"1000236" [label = "(<operator>.postIncrement,v4++)" ]
"1000239" [label = "(<operator>.assignment,v5 = v8)" ]
"1000242" [label = "(<operator>.assignment,v6 = (_BYTE)v4 + ~(_BYTE)result)" ]
"1000244" [label = "(<operator>.addition,(_BYTE)v4 + ~(_BYTE)result)" ]
"1000245" [label = "(<operator>.cast,(_BYTE)v4)" ]
"1000246" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000248" [label = "(<operator>.not,~(_BYTE)result)" ]
"1000249" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000250" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000252" [label = "(<operator>.assignment,v9 = *v8++)" ]
"1000254" [label = "(<operator>.indirection,*v8++)" ]
"1000255" [label = "(<operator>.postIncrement,v8++)" ]
"1000257" [label = "(<operator>.assignment,v7 = v9)" ]
"1000260" [label = "(<operator>.assignment,v10 = v9 == 0)" ]
"1000262" [label = "(<operator>.equals,v9 == 0)" ]
"1000267" [label = "(<operator>.assignment,v10 = v7 == 46)" ]
"1000269" [label = "(<operator>.equals,v7 == 46)" ]
"1000277" [label = "(<operator>.assignment,v4 = result)" ]
"1000281" [label = "(<operator>.assignment,result = v4)" ]
"1000284" [label = "(RETURN,return result;,return result;)" ]
"1000110" [label = "(METHOD,do_rfc1035_name)" ]
"1000286" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000127" -> "1000131" 
  "1000131" -> "1000138" 
  "1000131" -> "1000143" 
  "1000131" -> "1000219" 
  "1000131" -> "1000277" 
  "1000138" -> "1000148" 
  "1000138" -> "1000154" 
  "1000140" -> "1000138" 
  "1000142" -> "1000140" 
  "1000143" -> "1000144" 
  "1000144" -> "1000142" 
  "1000148" -> "1000281" 
  "1000152" -> "1000160" 
  "1000154" -> "1000152" 
  "1000157" -> "1000165" 
  "1000159" -> "1000157" 
  "1000160" -> "1000161" 
  "1000161" -> "1000159" 
  "1000163" -> "1000169" 
  "1000165" -> "1000163" 
  "1000169" -> "1000173" 
  "1000169" -> "1000177" 
  "1000171" -> "1000177" 
  "1000173" -> "1000171" 
  "1000177" -> "1000219" 
  "1000177" -> "1000180" 
  "1000180" -> "1000183" 
  "1000183" -> "1000188" 
  "1000187" -> "1000193" 
  "1000188" -> "1000187" 
  "1000192" -> "1000281" 
  "1000192" -> "1000198" 
  "1000193" -> "1000192" 
  "1000196" -> "1000206" 
  "1000198" -> "1000196" 
  "1000202" -> "1000281" 
  "1000202" -> "1000214" 
  "1000203" -> "1000202" 
  "1000203" -> "1000210" 
  "1000205" -> "1000203" 
  "1000206" -> "1000207" 
  "1000207" -> "1000205" 
  "1000209" -> "1000202" 
  "1000210" -> "1000209" 
  "1000214" -> "1000138" 
  "1000214" -> "1000143" 
  "1000214" -> "1000219" 
  "1000217" -> "1000224" 
  "1000219" -> "1000217" 
  "1000223" -> "1000236" 
  "1000223" -> "1000281" 
  "1000224" -> "1000223" 
  "1000224" -> "1000229" 
  "1000226" -> "1000223" 
  "1000228" -> "1000226" 
  "1000229" -> "1000230" 
  "1000230" -> "1000228" 
  "1000234" -> "1000239" 
  "1000235" -> "1000234" 
  "1000236" -> "1000235" 
  "1000239" -> "1000246" 
  "1000242" -> "1000255" 
  "1000244" -> "1000242" 
  "1000245" -> "1000250" 
  "1000246" -> "1000245" 
  "1000248" -> "1000244" 
  "1000249" -> "1000248" 
  "1000250" -> "1000249" 
  "1000252" -> "1000257" 
  "1000254" -> "1000252" 
  "1000255" -> "1000254" 
  "1000257" -> "1000262" 
  "1000260" -> "1000269" 
  "1000260" -> "1000224" 
  "1000260" -> "1000188" 
  "1000262" -> "1000260" 
  "1000267" -> "1000224" 
  "1000267" -> "1000188" 
  "1000269" -> "1000267" 
  "1000277" -> "1000281" 
  "1000281" -> "1000284" 
  "1000284" -> "1000286" 
  "1000110" -> "1000127" 
  "1000110" -> "1000284" 
}
