digraph do_rfc1035_name {  
"1000124" [label = "(<operator>.indirection,*a2)" ]
"1000127" [label = "(<operator>.assignment,v3 = result + 1)" ]
"1000129" [label = "(<operator>.addition,result + 1)" ]
"1000133" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)v3)" ]
"1000134" [label = "(<operator>.logicalNot,!a3)" ]
"1000136" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)v3)" ]
"1000138" [label = "(<operator>.cast,(unsigned int)v3)" ]
"1000139" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000145" [label = "(<operator>.assignment,v4 = (char)a2)" ]
"1000147" [label = "(<operator>.cast,(char)a2)" ]
"1000148" [label = "(UNKNOWN,char,char)" ]
"1000150" [label = "(<operator>.assignment,v5 = a2)" ]
"1000156" [label = "(<operator>.assignment,v6 = (unsigned __int8)*v5)" ]
"1000158" [label = "(<operator>.cast,(unsigned __int8)*v5)" ]
"1000159" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000160" [label = "(<operator>.indirection,*v5)" ]
"1000162" [label = "(<operator>.assignment,v7 = (_BYTE)v5 - v4)" ]
"1000164" [label = "(<operator>.subtraction,(_BYTE)v5 - v4)" ]
"1000165" [label = "(<operator>.cast,(_BYTE)v5)" ]
"1000166" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000169" [label = "(<operator>.assignment,v8 = v6 == 0)" ]
"1000171" [label = "(<operator>.equals,v6 == 0)" ]
"1000175" [label = "(<operator>.indirection,*v5)" ]
"1000177" [label = "(<operator>.assignment,v8 = v6 == 46)" ]
"1000179" [label = "(<operator>.equals,v6 == 46)" ]
"1000182" [label = "(<operator>.assignment,a2 = v5++)" ]
"1000184" [label = "(<operator>.postIncrement,v5++)" ]
"1000189" [label = "(<operator>.assignment,v9 = v3 + 1)" ]
"1000191" [label = "(<operator>.addition,v3 + 1)" ]
"1000195" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)v9)" ]
"1000197" [label = "(<operator>.lessThan,a3 < (unsigned int)v9)" ]
"1000199" [label = "(<operator>.cast,(unsigned int)v9)" ]
"1000200" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000202" [label = "(RETURN,return v3;,return v3;)" ]
"1000204" [label = "(<operator>.preIncrement,++v3)" ]
"1000206" [label = "(<operator>.assignment,*(v9 - 1) = v6)" ]
"1000207" [label = "(<operator>.indirection,*(v9 - 1))" ]
"1000208" [label = "(<operator>.subtraction,v9 - 1)" ]
"1000212" [label = "(<operator>.assignment,*result = v7)" ]
"1000213" [label = "(<operator>.indirection,*result)" ]
"1000217" [label = "(<operator>.indirection,*a2)" ]
"1000219" [label = "(<operator>.assignment,a2 = v5)" ]
"1000222" [label = "(<operator>.assignment,result = v3)" ]
"1000226" [label = "(<operator>.logicalNot,!a2)" ]
"1000230" [label = "(<operator>.logicalNot,!*a2)" ]
"1000231" [label = "(<operator>.indirection,*a2)" ]
"1000234" [label = "(<operator>.preIncrement,++v3)" ]
"1000240" [label = "(<operator>.lessThan,a3 < (unsigned int)v3)" ]
"1000242" [label = "(<operator>.cast,(unsigned int)v3)" ]
"1000243" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000246" [label = "(RETURN,return result;,return result;)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000248" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000124" -> "1000129" 
  "1000124" -> "1000246" 
  "1000127" -> "1000134" 
  "1000129" -> "1000127" 
  "1000133" -> "1000148" 
  "1000133" -> "1000246" 
  "1000133" -> "1000246" 
  "1000134" -> "1000133" 
  "1000134" -> "1000139" 
  "1000136" -> "1000133" 
  "1000138" -> "1000136" 
  "1000139" -> "1000138" 
  "1000145" -> "1000150" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000150" -> "1000159" 
  "1000150" -> "1000213" 
  "1000156" -> "1000166" 
  "1000158" -> "1000156" 
  "1000159" -> "1000160" 
  "1000160" -> "1000158" 
  "1000162" -> "1000171" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000166" -> "1000165" 
  "1000169" -> "1000175" 
  "1000171" -> "1000169" 
  "1000175" -> "1000179" 
  "1000175" -> "1000184" 
  "1000177" -> "1000184" 
  "1000179" -> "1000177" 
  "1000182" -> "1000213" 
  "1000182" -> "1000246" 
  "1000182" -> "1000191" 
  "1000184" -> "1000182" 
  "1000189" -> "1000195" 
  "1000189" -> "1000200" 
  "1000191" -> "1000189" 
  "1000195" -> "1000202" 
  "1000195" -> "1000204" 
  "1000197" -> "1000195" 
  "1000199" -> "1000197" 
  "1000200" -> "1000199" 
  "1000202" -> "1000248" 
  "1000204" -> "1000208" 
  "1000206" -> "1000159" 
  "1000206" -> "1000213" 
  "1000207" -> "1000206" 
  "1000208" -> "1000207" 
  "1000212" -> "1000217" 
  "1000213" -> "1000212" 
  "1000217" -> "1000219" 
  "1000217" -> "1000222" 
  "1000219" -> "1000222" 
  "1000222" -> "1000226" 
  "1000226" -> "1000246" 
  "1000226" -> "1000231" 
  "1000230" -> "1000246" 
  "1000230" -> "1000234" 
  "1000231" -> "1000230" 
  "1000234" -> "1000148" 
  "1000234" -> "1000246" 
  "1000234" -> "1000243" 
  "1000240" -> "1000148" 
  "1000240" -> "1000246" 
  "1000240" -> "1000246" 
  "1000242" -> "1000240" 
  "1000243" -> "1000242" 
  "1000246" -> "1000248" 
  "1000108" -> "1000124" 
  "1000108" -> "1000246" 
}
