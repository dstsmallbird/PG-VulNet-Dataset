digraph do_rfc1035_name {  
"1000121" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000123" [label = "(<operator>.indirection,*a2)" ]
"1000129" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000131" [label = "(<operator>.addition,a1 + 1)" ]
"1000138" [label = "(<operator>.lessThan,a3 < (unsigned __int64)result)" ]
"1000140" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000141" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000144" [label = "(<operator>.assignment,v5 = *a2)" ]
"1000146" [label = "(<operator>.indirection,*a2)" ]
"1000149" [label = "(<operator>.equals,v5 == 46)" ]
"1000152" [label = "(<operator>.assignment,v6 = 1)" ]
"1000156" [label = "(<operator>.assignment,v6 = v5 == 0)" ]
"1000158" [label = "(<operator>.equals,v5 == 0)" ]
"1000162" [label = "(<operator>.logicalNot,!v6)" ]
"1000165" [label = "(<operator>.assignment,v7 = a1 + 2)" ]
"1000167" [label = "(<operator>.addition,a1 + 2)" ]
"1000170" [label = "(<operator>.assignment,v8 = a2)" ]
"1000176" [label = "(<operator>.assignment,result = v7 - 1)" ]
"1000178" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000185" [label = "(<operator>.lessThan,a3 < (unsigned __int64)v7)" ]
"1000187" [label = "(<operator>.cast,(unsigned __int64)v7)" ]
"1000188" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000190" [label = "(RETURN,return result;,return result;)" ]
"1000192" [label = "(<operator>.preIncrement,++v8)" ]
"1000194" [label = "(<operator>.assignment,*(v7 - 1) = v5)" ]
"1000195" [label = "(<operator>.indirection,*(v7 - 1))" ]
"1000196" [label = "(<operator>.subtraction,v7 - 1)" ]
"1000200" [label = "(<operator>.assignment,result = v7)" ]
"1000203" [label = "(<operator>.assignment,v9 = (_BYTE)v8 - (_BYTE)a2)" ]
"1000205" [label = "(<operator>.subtraction,(_BYTE)v8 - (_BYTE)a2)" ]
"1000206" [label = "(<operator>.cast,(_BYTE)v8)" ]
"1000207" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000209" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000210" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000212" [label = "(<operator>.preIncrement,++v7)" ]
"1000214" [label = "(<operator>.assignment,v5 = *v8)" ]
"1000216" [label = "(<operator>.indirection,*v8)" ]
"1000219" [label = "(<operator>.indirection,*v8)" ]
"1000221" [label = "(<operator>.assignment,v10 = v5 == 46)" ]
"1000223" [label = "(<operator>.equals,v5 == 46)" ]
"1000227" [label = "(<operator>.assignment,v10 = 1)" ]
"1000233" [label = "(<operator>.assignment,v8 = a2)" ]
"1000236" [label = "(<operator>.assignment,v9 = 0)" ]
"1000240" [label = "(<operator>.assignment,*a1 = v9)" ]
"1000241" [label = "(<operator>.indirection,*a1)" ]
"1000245" [label = "(<operator>.logicalNot,!*v8)" ]
"1000246" [label = "(<operator>.indirection,*v8)" ]
"1000248" [label = "(RETURN,return result;,return result;)" ]
"1000250" [label = "(<operator>.assignment,a2 = v8 + 1)" ]
"1000252" [label = "(<operator>.addition,v8 + 1)" ]
"1000255" [label = "(RETURN,return result;,return result;)" ]
"1000257" [label = "(<operator>.assignment,a1 = result)" ]
"1000260" [label = "(RETURN,return a1;,return a1;)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000262" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000131" 
  "1000121" -> "1000260" 
  "1000121" -> "1000260" 
  "1000123" -> "1000121" 
  "1000129" -> "1000141" 
  "1000129" -> "1000146" 
  "1000131" -> "1000129" 
  "1000138" -> "1000260" 
  "1000138" -> "1000146" 
  "1000140" -> "1000138" 
  "1000141" -> "1000140" 
  "1000144" -> "1000149" 
  "1000146" -> "1000144" 
  "1000149" -> "1000152" 
  "1000149" -> "1000158" 
  "1000152" -> "1000162" 
  "1000156" -> "1000162" 
  "1000158" -> "1000156" 
  "1000162" -> "1000167" 
  "1000162" -> "1000233" 
  "1000165" -> "1000170" 
  "1000167" -> "1000165" 
  "1000170" -> "1000178" 
  "1000170" -> "1000233" 
  "1000176" -> "1000188" 
  "1000176" -> "1000192" 
  "1000178" -> "1000176" 
  "1000185" -> "1000190" 
  "1000185" -> "1000192" 
  "1000187" -> "1000185" 
  "1000188" -> "1000187" 
  "1000190" -> "1000262" 
  "1000192" -> "1000196" 
  "1000194" -> "1000200" 
  "1000195" -> "1000194" 
  "1000196" -> "1000195" 
  "1000200" -> "1000207" 
  "1000203" -> "1000212" 
  "1000205" -> "1000203" 
  "1000206" -> "1000210" 
  "1000207" -> "1000206" 
  "1000209" -> "1000205" 
  "1000210" -> "1000209" 
  "1000212" -> "1000216" 
  "1000214" -> "1000219" 
  "1000216" -> "1000214" 
  "1000219" -> "1000223" 
  "1000219" -> "1000227" 
  "1000221" -> "1000178" 
  "1000221" -> "1000233" 
  "1000221" -> "1000241" 
  "1000223" -> "1000221" 
  "1000227" -> "1000178" 
  "1000227" -> "1000233" 
  "1000227" -> "1000241" 
  "1000233" -> "1000236" 
  "1000236" -> "1000241" 
  "1000240" -> "1000246" 
  "1000241" -> "1000240" 
  "1000245" -> "1000248" 
  "1000245" -> "1000252" 
  "1000246" -> "1000245" 
  "1000248" -> "1000262" 
  "1000250" -> "1000255" 
  "1000252" -> "1000250" 
  "1000255" -> "1000262" 
  "1000257" -> "1000131" 
  "1000257" -> "1000260" 
  "1000260" -> "1000262" 
  "1000108" -> "1000121" 
  "1000108" -> "1000123" 
}
