digraph do_rfc1035_name {  
"1000121" [label = "(<operator>.logicalNot,!a2)" ]
"1000123" [label = "(RETURN,return a1;,return a1;)" ]
"1000125" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000127" [label = "(<operator>.indirection,*a2)" ]
"1000130" [label = "(<operator>.logicalNot,!*a2)" ]
"1000131" [label = "(<operator>.indirection,*a2)" ]
"1000133" [label = "(RETURN,return a1;,return a1;)" ]
"1000138" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000140" [label = "(<operator>.addition,a1 + 1)" ]
"1000146" [label = "(<operator>.assignment,v6 = a2)" ]
"1000150" [label = "(<operator>.equals,v4 == 46)" ]
"1000156" [label = "(<operator>.preIncrement,++v6)" ]
"1000158" [label = "(<operator>.assignment,*result++ = v4)" ]
"1000159" [label = "(<operator>.indirection,*result++)" ]
"1000160" [label = "(<operator>.postIncrement,result++)" ]
"1000163" [label = "(<operator>.assignment,v7 = (_BYTE)v6 - (_BYTE)a2)" ]
"1000165" [label = "(<operator>.subtraction,(_BYTE)v6 - (_BYTE)a2)" ]
"1000166" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000167" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000169" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000170" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000172" [label = "(<operator>.assignment,v4 = *v6)" ]
"1000174" [label = "(<operator>.indirection,*v6)" ]
"1000177" [label = "(<operator>.equals,v4 == 46)" ]
"1000180" [label = "(<operator>.assignment,v10 = 1)" ]
"1000184" [label = "(<operator>.assignment,v10 = v4 == 0)" ]
"1000186" [label = "(<operator>.equals,v4 == 0)" ]
"1000189" [label = "(<operator>.logicalNot,!v10)" ]
"1000191" [label = "(<operator>.assignment,v9 = result)" ]
"1000195" [label = "(<operator>.assignment,result = v9)" ]
"1000199" [label = "(<operator>.assignment,*a1 = v7)" ]
"1000200" [label = "(<operator>.indirection,*a1)" ]
"1000204" [label = "(<operator>.logicalNot,!*v6)" ]
"1000205" [label = "(<operator>.indirection,*v6)" ]
"1000207" [label = "(RETURN,return result;,return result;)" ]
"1000209" [label = "(<operator>.assignment,a2 = v6 + 1)" ]
"1000211" [label = "(<operator>.addition,v6 + 1)" ]
"1000214" [label = "(RETURN,return result;,return result;)" ]
"1000216" [label = "(<operator>.assignment,v4 = v6[1])" ]
"1000218" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000222" [label = "(<operator>.logicalNot,!v6[1])" ]
"1000223" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000226" [label = "(RETURN,return result;,return result;)" ]
"1000228" [label = "(<operator>.assignment,a1 = result)" ]
"1000232" [label = "(<operator>.greaterThan,(unsigned __int64)result > a3)" ]
"1000233" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000234" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000237" [label = "(RETURN,return a1;,return a1;)" ]
"1000239" [label = "(<operator>.assignment,v6 = a2)" ]
"1000243" [label = "(<operator>.equals,v4 == 46)" ]
"1000248" [label = "(<operator>.assignment,v7 = 0)" ]
"1000255" [label = "(<operator>.assignment,v9 = result + 1)" ]
"1000257" [label = "(<operator>.addition,result + 1)" ]
"1000260" [label = "(<operator>.preIncrement,++v6)" ]
"1000263" [label = "(<operator>.greaterThan,(unsigned __int64)(result + 1) > a3)" ]
"1000264" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000265" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000266" [label = "(<operator>.addition,result + 1)" ]
"1000270" [label = "(RETURN,return result;,return result;)" ]
"1000272" [label = "(<operator>.assignment,*result = v4)" ]
"1000273" [label = "(<operator>.indirection,*result)" ]
"1000276" [label = "(<operator>.assignment,v7 = (_BYTE)v6 - (_BYTE)a2)" ]
"1000278" [label = "(<operator>.subtraction,(_BYTE)v6 - (_BYTE)a2)" ]
"1000279" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000280" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000282" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000283" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000285" [label = "(<operator>.preIncrement,++result)" ]
"1000287" [label = "(<operator>.assignment,v4 = *v6)" ]
"1000289" [label = "(<operator>.indirection,*v6)" ]
"1000292" [label = "(<operator>.equals,v4 == 46)" ]
"1000295" [label = "(<operator>.assignment,v8 = 1)" ]
"1000299" [label = "(<operator>.assignment,v8 = v4 == 0)" ]
"1000301" [label = "(<operator>.equals,v4 == 0)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000307" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000123" 
  "1000121" -> "1000127" 
  "1000123" -> "1000307" 
  "1000125" -> "1000131" 
  "1000127" -> "1000125" 
  "1000130" -> "1000133" 
  "1000130" -> "1000234" 
  "1000130" -> "1000140" 
  "1000131" -> "1000130" 
  "1000133" -> "1000307" 
  "1000138" -> "1000234" 
  "1000138" -> "1000146" 
  "1000140" -> "1000138" 
  "1000146" -> "1000150" 
  "1000150" -> "1000248" 
  "1000150" -> "1000156" 
  "1000156" -> "1000160" 
  "1000158" -> "1000167" 
  "1000159" -> "1000158" 
  "1000160" -> "1000159" 
  "1000163" -> "1000174" 
  "1000165" -> "1000163" 
  "1000166" -> "1000170" 
  "1000167" -> "1000166" 
  "1000169" -> "1000165" 
  "1000170" -> "1000169" 
  "1000172" -> "1000177" 
  "1000174" -> "1000172" 
  "1000177" -> "1000180" 
  "1000177" -> "1000186" 
  "1000180" -> "1000189" 
  "1000184" -> "1000189" 
  "1000186" -> "1000184" 
  "1000189" -> "1000156" 
  "1000189" -> "1000191" 
  "1000191" -> "1000195" 
  "1000195" -> "1000200" 
  "1000199" -> "1000205" 
  "1000200" -> "1000199" 
  "1000204" -> "1000207" 
  "1000204" -> "1000211" 
  "1000205" -> "1000204" 
  "1000207" -> "1000307" 
  "1000209" -> "1000214" 
  "1000211" -> "1000209" 
  "1000214" -> "1000307" 
  "1000216" -> "1000223" 
  "1000218" -> "1000216" 
  "1000222" -> "1000226" 
  "1000222" -> "1000228" 
  "1000223" -> "1000222" 
  "1000226" -> "1000307" 
  "1000228" -> "1000234" 
  "1000228" -> "1000140" 
  "1000232" -> "1000237" 
  "1000232" -> "1000239" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000237" -> "1000307" 
  "1000239" -> "1000243" 
  "1000243" -> "1000248" 
  "1000243" -> "1000307" 
  "1000243" -> "1000257" 
  "1000248" -> "1000200" 
  "1000255" -> "1000260" 
  "1000257" -> "1000255" 
  "1000260" -> "1000265" 
  "1000263" -> "1000270" 
  "1000263" -> "1000273" 
  "1000264" -> "1000263" 
  "1000265" -> "1000266" 
  "1000266" -> "1000264" 
  "1000270" -> "1000307" 
  "1000272" -> "1000280" 
  "1000273" -> "1000272" 
  "1000276" -> "1000285" 
  "1000278" -> "1000276" 
  "1000279" -> "1000283" 
  "1000280" -> "1000279" 
  "1000282" -> "1000278" 
  "1000283" -> "1000282" 
  "1000285" -> "1000289" 
  "1000287" -> "1000292" 
  "1000289" -> "1000287" 
  "1000292" -> "1000295" 
  "1000292" -> "1000301" 
  "1000295" -> "1000307" 
  "1000295" -> "1000257" 
  "1000295" -> "1000195" 
  "1000299" -> "1000307" 
  "1000299" -> "1000257" 
  "1000299" -> "1000195" 
  "1000301" -> "1000299" 
  "1000108" -> "1000121" 
}
