digraph do_rfc1035_name {  
"1000124" [label = "(<operator>.assignment,v3 = result)" ]
"1000130" [label = "(<operator>.assignment,v4 = a2)" ]
"1000134" [label = "(<operator>.indirection,*a2)" ]
"1000141" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)(v3 + 1))" ]
"1000143" [label = "(<operator>.lessThan,a3 < (unsigned int)(v3 + 1))" ]
"1000145" [label = "(<operator>.cast,(unsigned int)(v3 + 1))" ]
"1000146" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000147" [label = "(<operator>.addition,v3 + 1)" ]
"1000150" [label = "(RETURN,return v3;,return v3;)" ]
"1000152" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000154" [label = "(<operator>.addition,v3 + 1)" ]
"1000157" [label = "(<operator>.assignment,v8 = (unsigned __int8)*v4)" ]
"1000159" [label = "(<operator>.cast,(unsigned __int8)*v4)" ]
"1000160" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000161" [label = "(<operator>.indirection,*v4)" ]
"1000163" [label = "(<operator>.assignment,v11 = v8 == 0)" ]
"1000165" [label = "(<operator>.equals,v8 == 0)" ]
"1000169" [label = "(<operator>.indirection,*v4)" ]
"1000171" [label = "(<operator>.assignment,v11 = v8 == 46)" ]
"1000173" [label = "(<operator>.equals,v8 == 46)" ]
"1000177" [label = "(<operator>.logicalNot,!v11)" ]
"1000180" [label = "(<operator>.assignment,v5 = v4)" ]
"1000183" [label = "(<operator>.assignment,v6 = 0)" ]
"1000187" [label = "(<operator>.assignment,*v3 = v6)" ]
"1000188" [label = "(<operator>.indirection,*v3)" ]
"1000192" [label = "(<operator>.logicalNot,!*v5)" ]
"1000193" [label = "(<operator>.indirection,*v5)" ]
"1000195" [label = "(RETURN,return result;,return result;)" ]
"1000197" [label = "(<operator>.assignment,v4 = v5 + 1)" ]
"1000199" [label = "(<operator>.addition,v5 + 1)" ]
"1000203" [label = "(<operator>.logicalOr,v5 == (_BYTE *)-1 || !v5[1])" ]
"1000204" [label = "(<operator>.equals,v5 == (_BYTE *)-1)" ]
"1000206" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000207" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000208" [label = "(<operator>.minus,-1)" ]
"1000210" [label = "(<operator>.logicalNot,!v5[1])" ]
"1000211" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000214" [label = "(RETURN,return result;,return result;)" ]
"1000216" [label = "(<operator>.assignment,v3 = result)" ]
"1000219" [label = "(<operator>.assignment,v7 = v4 + 1)" ]
"1000221" [label = "(<operator>.addition,v4 + 1)" ]
"1000225" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(result + 1))" ]
"1000226" [label = "(<operator>.logicalNot,!a3)" ]
"1000228" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(result + 1))" ]
"1000230" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000231" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000232" [label = "(<operator>.addition,result + 1)" ]
"1000236" [label = "(<operator>.assignment,*result++ = v8)" ]
"1000237" [label = "(<operator>.indirection,*result++)" ]
"1000238" [label = "(<operator>.postIncrement,result++)" ]
"1000241" [label = "(<operator>.assignment,v5 = v7)" ]
"1000244" [label = "(<operator>.assignment,v6 = (_BYTE)result + ~(_BYTE)v3)" ]
"1000246" [label = "(<operator>.addition,(_BYTE)result + ~(_BYTE)v3)" ]
"1000247" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000248" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000250" [label = "(<operator>.not,~(_BYTE)v3)" ]
"1000251" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000252" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000254" [label = "(<operator>.assignment,v9 = *v7++)" ]
"1000256" [label = "(<operator>.indirection,*v7++)" ]
"1000257" [label = "(<operator>.postIncrement,v7++)" ]
"1000259" [label = "(<operator>.assignment,v8 = v9)" ]
"1000262" [label = "(<operator>.assignment,v10 = v9 == 0)" ]
"1000264" [label = "(<operator>.equals,v9 == 0)" ]
"1000269" [label = "(<operator>.assignment,v10 = v8 == 46)" ]
"1000271" [label = "(<operator>.equals,v8 == 46)" ]
"1000277" [label = "(RETURN,return result;,return result;)" ]
"1000110" [label = "(METHOD,do_rfc1035_name)" ]
"1000279" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000124" -> "1000130" 
  "1000124" -> "1000277" 
  "1000130" -> "1000134" 
  "1000134" -> "1000141" 
  "1000134" -> "1000146" 
  "1000134" -> "1000221" 
  "1000134" -> "1000277" 
  "1000141" -> "1000150" 
  "1000141" -> "1000154" 
  "1000143" -> "1000141" 
  "1000145" -> "1000143" 
  "1000146" -> "1000147" 
  "1000147" -> "1000145" 
  "1000150" -> "1000279" 
  "1000152" -> "1000160" 
  "1000154" -> "1000152" 
  "1000157" -> "1000165" 
  "1000159" -> "1000157" 
  "1000160" -> "1000161" 
  "1000161" -> "1000159" 
  "1000163" -> "1000169" 
  "1000165" -> "1000163" 
  "1000169" -> "1000173" 
  "1000169" -> "1000177" 
  "1000171" -> "1000177" 
  "1000173" -> "1000171" 
  "1000177" -> "1000221" 
  "1000177" -> "1000180" 
  "1000180" -> "1000183" 
  "1000183" -> "1000188" 
  "1000187" -> "1000193" 
  "1000188" -> "1000187" 
  "1000192" -> "1000195" 
  "1000192" -> "1000199" 
  "1000193" -> "1000192" 
  "1000195" -> "1000279" 
  "1000197" -> "1000207" 
  "1000199" -> "1000197" 
  "1000203" -> "1000214" 
  "1000203" -> "1000216" 
  "1000204" -> "1000203" 
  "1000204" -> "1000211" 
  "1000206" -> "1000204" 
  "1000207" -> "1000208" 
  "1000208" -> "1000206" 
  "1000210" -> "1000203" 
  "1000211" -> "1000210" 
  "1000214" -> "1000279" 
  "1000216" -> "1000141" 
  "1000216" -> "1000146" 
  "1000216" -> "1000221" 
  "1000219" -> "1000226" 
  "1000221" -> "1000219" 
  "1000225" -> "1000238" 
  "1000225" -> "1000277" 
  "1000226" -> "1000225" 
  "1000226" -> "1000231" 
  "1000228" -> "1000225" 
  "1000230" -> "1000228" 
  "1000231" -> "1000232" 
  "1000232" -> "1000230" 
  "1000236" -> "1000241" 
  "1000237" -> "1000236" 
  "1000238" -> "1000237" 
  "1000241" -> "1000248" 
  "1000244" -> "1000257" 
  "1000246" -> "1000244" 
  "1000247" -> "1000252" 
  "1000248" -> "1000247" 
  "1000250" -> "1000246" 
  "1000251" -> "1000250" 
  "1000252" -> "1000251" 
  "1000254" -> "1000259" 
  "1000256" -> "1000254" 
  "1000257" -> "1000256" 
  "1000259" -> "1000264" 
  "1000262" -> "1000271" 
  "1000262" -> "1000226" 
  "1000262" -> "1000188" 
  "1000264" -> "1000262" 
  "1000269" -> "1000226" 
  "1000269" -> "1000188" 
  "1000271" -> "1000269" 
  "1000277" -> "1000279" 
  "1000110" -> "1000124" 
}
