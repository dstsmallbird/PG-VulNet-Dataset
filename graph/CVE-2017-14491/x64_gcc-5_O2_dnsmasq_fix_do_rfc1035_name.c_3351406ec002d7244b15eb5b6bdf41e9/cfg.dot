digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000119" [label = "(<operator>.indirection,*a2)" ]
"1000125" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000127" [label = "(<operator>.addition,a1 + 1)" ]
"1000134" [label = "(<operator>.lessThan,a3 < (unsigned __int64)result)" ]
"1000136" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000137" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000140" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000142" [label = "(<operator>.indirection,*a2)" ]
"1000145" [label = "(<operator>.logicalAnd,*a2 != 46 && v4)" ]
"1000146" [label = "(<operator>.notEquals,*a2 != 46)" ]
"1000147" [label = "(<operator>.indirection,*a2)" ]
"1000152" [label = "(<operator>.assignment,v5 = a1 + 2)" ]
"1000154" [label = "(<operator>.addition,a1 + 2)" ]
"1000157" [label = "(<operator>.assignment,v6 = 0)" ]
"1000163" [label = "(<operator>.assignment,result = v5 - 1)" ]
"1000165" [label = "(<operator>.subtraction,v5 - 1)" ]
"1000172" [label = "(<operator>.lessThan,a3 < (unsigned __int64)v5)" ]
"1000174" [label = "(<operator>.cast,(unsigned __int64)v5)" ]
"1000175" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000177" [label = "(RETURN,return result;,return result;)" ]
"1000179" [label = "(<operator>.preIncrement,++a2)" ]
"1000181" [label = "(<operator>.assignment,*(v5 - 1) = v4)" ]
"1000182" [label = "(<operator>.indirection,*(v5 - 1))" ]
"1000183" [label = "(<operator>.subtraction,v5 - 1)" ]
"1000187" [label = "(<operator>.assignment,result = v5)" ]
"1000190" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000192" [label = "(<operator>.indirection,*a2)" ]
"1000194" [label = "(<operator>.preIncrement,++v6)" ]
"1000196" [label = "(<operator>.preIncrement,++v5)" ]
"1000199" [label = "(<operator>.logicalOr,!*a2 || v4 == 46)" ]
"1000200" [label = "(<operator>.logicalNot,!*a2)" ]
"1000201" [label = "(<operator>.indirection,*a2)" ]
"1000203" [label = "(<operator>.equals,v4 == 46)" ]
"1000207" [label = "(<operator>.assignment,v7 = a2)" ]
"1000211" [label = "(<operator>.assignment,v7 = a2)" ]
"1000214" [label = "(<operator>.assignment,v6 = 0)" ]
"1000218" [label = "(<operator>.assignment,*a1 = v6)" ]
"1000219" [label = "(<operator>.indirection,*a1)" ]
"1000223" [label = "(<operator>.logicalNot,!*a2)" ]
"1000224" [label = "(<operator>.indirection,*a2)" ]
"1000226" [label = "(RETURN,return result;,return result;)" ]
"1000229" [label = "(<operator>.logicalOr,!++a2 || !v7[1])" ]
"1000230" [label = "(<operator>.logicalNot,!++a2)" ]
"1000231" [label = "(<operator>.preIncrement,++a2)" ]
"1000233" [label = "(<operator>.logicalNot,!v7[1])" ]
"1000234" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000237" [label = "(RETURN,return result;,return result;)" ]
"1000239" [label = "(<operator>.assignment,a1 = result)" ]
"1000242" [label = "(RETURN,return a1;,return a1;)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000244" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000127" 
  "1000117" -> "1000242" 
  "1000117" -> "1000242" 
  "1000119" -> "1000117" 
  "1000125" -> "1000137" 
  "1000125" -> "1000142" 
  "1000127" -> "1000125" 
  "1000134" -> "1000242" 
  "1000134" -> "1000142" 
  "1000136" -> "1000134" 
  "1000137" -> "1000136" 
  "1000140" -> "1000147" 
  "1000142" -> "1000140" 
  "1000145" -> "1000154" 
  "1000145" -> "1000211" 
  "1000146" -> "1000145" 
  "1000146" -> "1000145" 
  "1000147" -> "1000146" 
  "1000152" -> "1000157" 
  "1000154" -> "1000152" 
  "1000157" -> "1000165" 
  "1000157" -> "1000211" 
  "1000163" -> "1000175" 
  "1000163" -> "1000179" 
  "1000165" -> "1000163" 
  "1000172" -> "1000177" 
  "1000172" -> "1000179" 
  "1000174" -> "1000172" 
  "1000175" -> "1000174" 
  "1000177" -> "1000244" 
  "1000179" -> "1000183" 
  "1000181" -> "1000187" 
  "1000182" -> "1000181" 
  "1000183" -> "1000182" 
  "1000187" -> "1000192" 
  "1000190" -> "1000194" 
  "1000192" -> "1000190" 
  "1000194" -> "1000196" 
  "1000196" -> "1000201" 
  "1000199" -> "1000165" 
  "1000199" -> "1000211" 
  "1000199" -> "1000207" 
  "1000200" -> "1000199" 
  "1000200" -> "1000203" 
  "1000201" -> "1000200" 
  "1000203" -> "1000199" 
  "1000207" -> "1000219" 
  "1000211" -> "1000214" 
  "1000214" -> "1000219" 
  "1000218" -> "1000224" 
  "1000219" -> "1000218" 
  "1000223" -> "1000226" 
  "1000223" -> "1000231" 
  "1000224" -> "1000223" 
  "1000226" -> "1000244" 
  "1000229" -> "1000237" 
  "1000229" -> "1000239" 
  "1000230" -> "1000229" 
  "1000230" -> "1000234" 
  "1000231" -> "1000230" 
  "1000233" -> "1000229" 
  "1000234" -> "1000233" 
  "1000237" -> "1000244" 
  "1000239" -> "1000127" 
  "1000239" -> "1000242" 
  "1000242" -> "1000244" 
  "1000106" -> "1000117" 
  "1000106" -> "1000119" 
}
