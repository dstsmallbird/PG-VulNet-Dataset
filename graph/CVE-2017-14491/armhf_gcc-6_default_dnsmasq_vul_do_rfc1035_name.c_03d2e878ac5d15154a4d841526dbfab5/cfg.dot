digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.assignment,v2 = result)" ]
"1000123" [label = "(<operator>.assignment,v3 = (unsigned __int8)*a2)" ]
"1000125" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000126" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000127" [label = "(<operator>.indirection,*a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000133" [label = "(<operator>.preIncrement,++result)" ]
"1000136" [label = "(<operator>.equals,v3 == 46)" ]
"1000141" [label = "(<operator>.assignment,v4 = a2 + 1)" ]
"1000143" [label = "(<operator>.addition,a2 + 1)" ]
"1000148" [label = "(<operator>.assignment,*result++ = v3)" ]
"1000149" [label = "(<operator>.indirection,*result++)" ]
"1000150" [label = "(<operator>.postIncrement,result++)" ]
"1000153" [label = "(<operator>.assignment,v5 = v4)" ]
"1000156" [label = "(<operator>.assignment,v3 = *v4)" ]
"1000158" [label = "(<operator>.indirection,*v4)" ]
"1000160" [label = "(<operator>.assignment,v6 = (_BYTE)v4++ - (_BYTE)a2)" ]
"1000162" [label = "(<operator>.subtraction,(_BYTE)v4++ - (_BYTE)a2)" ]
"1000163" [label = "(<operator>.cast,(_BYTE)v4++)" ]
"1000164" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000165" [label = "(<operator>.postIncrement,v4++)" ]
"1000167" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000168" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000170" [label = "(<operator>.assignment,v7 = v3 == 0)" ]
"1000172" [label = "(<operator>.equals,v3 == 0)" ]
"1000177" [label = "(<operator>.assignment,v7 = v3 == 46)" ]
"1000179" [label = "(<operator>.equals,v3 == 46)" ]
"1000182" [label = "(<operator>.logicalNot,!v7)" ]
"1000187" [label = "(<operator>.assignment,*v2 = v6)" ]
"1000188" [label = "(<operator>.indirection,*v2)" ]
"1000192" [label = "(<operator>.logicalNot,!*v5)" ]
"1000193" [label = "(<operator>.indirection,*v5)" ]
"1000196" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000198" [label = "(<operator>.addition,v5 + 1)" ]
"1000202" [label = "(<operator>.equals,v5 == (_BYTE *)-1)" ]
"1000204" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000205" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000206" [label = "(<operator>.minus,-1)" ]
"1000209" [label = "(<operator>.assignment,v3 = (unsigned __int8)v5[1])" ]
"1000211" [label = "(<operator>.cast,(unsigned __int8)v5[1])" ]
"1000212" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000213" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000217" [label = "(<operator>.logicalNot,!v5[1])" ]
"1000218" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000222" [label = "(<operator>.assignment,v2 = result++)" ]
"1000224" [label = "(<operator>.postIncrement,result++)" ]
"1000227" [label = "(<operator>.notEquals,v3 != 46)" ]
"1000232" [label = "(<operator>.assignment,v5 = a2)" ]
"1000235" [label = "(<operator>.assignment,v6 = 0)" ]
"1000238" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000240" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000126" 
  "1000117" -> "1000238" 
  "1000123" -> "1000130" 
  "1000125" -> "1000123" 
  "1000126" -> "1000127" 
  "1000127" -> "1000125" 
  "1000130" -> "1000133" 
  "1000130" -> "1000238" 
  "1000133" -> "1000136" 
  "1000136" -> "1000232" 
  "1000136" -> "1000143" 
  "1000141" -> "1000150" 
  "1000143" -> "1000141" 
  "1000148" -> "1000153" 
  "1000149" -> "1000148" 
  "1000150" -> "1000149" 
  "1000153" -> "1000158" 
  "1000156" -> "1000164" 
  "1000158" -> "1000156" 
  "1000160" -> "1000172" 
  "1000162" -> "1000160" 
  "1000163" -> "1000168" 
  "1000164" -> "1000165" 
  "1000165" -> "1000163" 
  "1000167" -> "1000162" 
  "1000168" -> "1000167" 
  "1000170" -> "1000182" 
  "1000170" -> "1000179" 
  "1000172" -> "1000170" 
  "1000177" -> "1000182" 
  "1000179" -> "1000177" 
  "1000182" -> "1000150" 
  "1000182" -> "1000188" 
  "1000182" -> "1000238" 
  "1000187" -> "1000193" 
  "1000188" -> "1000187" 
  "1000192" -> "1000238" 
  "1000192" -> "1000198" 
  "1000193" -> "1000192" 
  "1000196" -> "1000205" 
  "1000198" -> "1000196" 
  "1000202" -> "1000238" 
  "1000202" -> "1000212" 
  "1000204" -> "1000202" 
  "1000205" -> "1000206" 
  "1000206" -> "1000204" 
  "1000209" -> "1000218" 
  "1000211" -> "1000209" 
  "1000212" -> "1000213" 
  "1000213" -> "1000211" 
  "1000217" -> "1000238" 
  "1000217" -> "1000224" 
  "1000218" -> "1000217" 
  "1000222" -> "1000227" 
  "1000224" -> "1000222" 
  "1000227" -> "1000143" 
  "1000227" -> "1000232" 
  "1000232" -> "1000235" 
  "1000235" -> "1000188" 
  "1000235" -> "1000238" 
  "1000238" -> "1000240" 
  "1000107" -> "1000117" 
}
