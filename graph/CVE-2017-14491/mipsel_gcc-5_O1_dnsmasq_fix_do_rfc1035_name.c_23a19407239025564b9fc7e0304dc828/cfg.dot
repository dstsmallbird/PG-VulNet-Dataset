digraph do_rfc1035_name {  
"1000115" [label = "(<operator>.logicalNot,!a2)" ]
"1000117" [label = "(RETURN,return a1;,return a1;)" ]
"1000120" [label = "(<operator>.logicalNot,!*a2)" ]
"1000121" [label = "(<operator>.indirection,*a2)" ]
"1000123" [label = "(RETURN,return a1;,return a1;)" ]
"1000129" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)(a1 + 1))" ]
"1000131" [label = "(<operator>.lessThan,a3 < (unsigned int)(a1 + 1))" ]
"1000133" [label = "(<operator>.cast,(unsigned int)(a1 + 1))" ]
"1000134" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000135" [label = "(<operator>.addition,a1 + 1)" ]
"1000138" [label = "(RETURN,return a1;,return a1;)" ]
"1000140" [label = "(<operator>.assignment,v3 = (char)*a2)" ]
"1000142" [label = "(<operator>.cast,(char)*a2)" ]
"1000143" [label = "(UNKNOWN,char,char)" ]
"1000144" [label = "(<operator>.indirection,*a2)" ]
"1000146" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000148" [label = "(<operator>.addition,a1 + 1)" ]
"1000152" [label = "(<operator>.logicalNot,!*a2)" ]
"1000153" [label = "(<operator>.indirection,*a2)" ]
"1000156" [label = "(<operator>.assignment,v5 = a2)" ]
"1000159" [label = "(<operator>.assignment,v6 = 0)" ]
"1000163" [label = "(<operator>.assignment,v5 = a2)" ]
"1000167" [label = "(<operator>.notEquals,v3 != 46)" ]
"1000171" [label = "(<operator>.assignment,v6 = 0)" ]
"1000175" [label = "(<operator>.assignment,*a1 = v6)" ]
"1000176" [label = "(<operator>.indirection,*a1)" ]
"1000180" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000182" [label = "(<operator>.addition,v5 + 1)" ]
"1000186" [label = "(<operator>.indirection,*v5)" ]
"1000190" [label = "(<operator>.notEquals,v5 != (_BYTE *)-1)" ]
"1000192" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000193" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000194" [label = "(<operator>.minus,-1)" ]
"1000197" [label = "(<operator>.assignment,a1 = result)" ]
"1000201" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000205" [label = "(RETURN,return result;,return result;)" ]
"1000208" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(result + 1))" ]
"1000209" [label = "(<operator>.logicalNot,!a3)" ]
"1000211" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(result + 1))" ]
"1000213" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000214" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000215" [label = "(<operator>.addition,result + 1)" ]
"1000219" [label = "(<operator>.assignment,*result++ = v3)" ]
"1000220" [label = "(<operator>.indirection,*result++)" ]
"1000221" [label = "(<operator>.postIncrement,result++)" ]
"1000224" [label = "(<operator>.assignment,v3 = (char)*++v5)" ]
"1000226" [label = "(<operator>.cast,(char)*++v5)" ]
"1000227" [label = "(UNKNOWN,char,char)" ]
"1000228" [label = "(<operator>.indirection,*++v5)" ]
"1000229" [label = "(<operator>.preIncrement,++v5)" ]
"1000231" [label = "(<operator>.assignment,v6 = (_BYTE)v5 - (_BYTE)a2)" ]
"1000233" [label = "(<operator>.subtraction,(_BYTE)v5 - (_BYTE)a2)" ]
"1000234" [label = "(<operator>.cast,(_BYTE)v5)" ]
"1000235" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000237" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000238" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000241" [label = "(<operator>.logicalNot,!*v5)" ]
"1000242" [label = "(<operator>.indirection,*v5)" ]
"1000246" [label = "(<operator>.equals,v3 == 46)" ]
"1000250" [label = "(<operator>.assignment,*a1 = v6)" ]
"1000251" [label = "(<operator>.indirection,*a1)" ]
"1000255" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000257" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000115" -> "1000117" 
  "1000115" -> "1000121" 
  "1000117" -> "1000257" 
  "1000120" -> "1000123" 
  "1000120" -> "1000129" 
  "1000120" -> "1000134" 
  "1000120" -> "1000209" 
  "1000121" -> "1000120" 
  "1000123" -> "1000257" 
  "1000129" -> "1000138" 
  "1000129" -> "1000143" 
  "1000131" -> "1000129" 
  "1000133" -> "1000131" 
  "1000134" -> "1000135" 
  "1000135" -> "1000133" 
  "1000138" -> "1000257" 
  "1000140" -> "1000148" 
  "1000142" -> "1000140" 
  "1000143" -> "1000144" 
  "1000144" -> "1000142" 
  "1000146" -> "1000153" 
  "1000148" -> "1000146" 
  "1000152" -> "1000156" 
  "1000152" -> "1000163" 
  "1000153" -> "1000152" 
  "1000156" -> "1000159" 
  "1000159" -> "1000176" 
  "1000163" -> "1000167" 
  "1000167" -> "1000209" 
  "1000167" -> "1000171" 
  "1000171" -> "1000176" 
  "1000175" -> "1000182" 
  "1000176" -> "1000175" 
  "1000180" -> "1000186" 
  "1000182" -> "1000180" 
  "1000186" -> "1000193" 
  "1000186" -> "1000205" 
  "1000190" -> "1000197" 
  "1000190" -> "1000205" 
  "1000192" -> "1000190" 
  "1000193" -> "1000194" 
  "1000194" -> "1000192" 
  "1000197" -> "1000201" 
  "1000201" -> "1000129" 
  "1000201" -> "1000134" 
  "1000201" -> "1000209" 
  "1000201" -> "1000205" 
  "1000205" -> "1000257" 
  "1000208" -> "1000221" 
  "1000208" -> "1000255" 
  "1000209" -> "1000208" 
  "1000209" -> "1000214" 
  "1000211" -> "1000208" 
  "1000213" -> "1000211" 
  "1000214" -> "1000215" 
  "1000215" -> "1000213" 
  "1000219" -> "1000227" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000224" -> "1000235" 
  "1000226" -> "1000224" 
  "1000227" -> "1000229" 
  "1000228" -> "1000226" 
  "1000229" -> "1000228" 
  "1000231" -> "1000242" 
  "1000233" -> "1000231" 
  "1000234" -> "1000238" 
  "1000235" -> "1000234" 
  "1000237" -> "1000233" 
  "1000238" -> "1000237" 
  "1000241" -> "1000176" 
  "1000241" -> "1000246" 
  "1000242" -> "1000241" 
  "1000246" -> "1000209" 
  "1000246" -> "1000251" 
  "1000250" -> "1000182" 
  "1000251" -> "1000250" 
  "1000255" -> "1000257" 
  "1000105" -> "1000115" 
}
