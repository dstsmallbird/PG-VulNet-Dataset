digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000120" [label = "(<operator>.indirection,*a2)" ]
"1000123" [label = "(<operator>.assignment,v2 = result + 1)" ]
"1000125" [label = "(<operator>.addition,result + 1)" ]
"1000128" [label = "(<operator>.assignment,v3 = (char)a2)" ]
"1000130" [label = "(<operator>.cast,(char)a2)" ]
"1000131" [label = "(UNKNOWN,char,char)" ]
"1000133" [label = "(<operator>.assignment,v4 = a2)" ]
"1000139" [label = "(<operator>.assignment,v5 = (_BYTE)v4 - v3)" ]
"1000141" [label = "(<operator>.subtraction,(_BYTE)v4 - v3)" ]
"1000142" [label = "(<operator>.cast,(_BYTE)v4)" ]
"1000143" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000146" [label = "(<operator>.assignment,a2 = v4)" ]
"1000149" [label = "(<operator>.assignment,v7 = *v4++)" ]
"1000151" [label = "(<operator>.indirection,*v4++)" ]
"1000152" [label = "(<operator>.postIncrement,v4++)" ]
"1000154" [label = "(<operator>.assignment,v6 = v7)" ]
"1000158" [label = "(<operator>.logicalOr,!v7 || v6 == 46)" ]
"1000159" [label = "(<operator>.logicalNot,!v7)" ]
"1000161" [label = "(<operator>.equals,v6 == 46)" ]
"1000165" [label = "(<operator>.assignment,*v2++ = v6)" ]
"1000166" [label = "(<operator>.indirection,*v2++)" ]
"1000167" [label = "(<operator>.postIncrement,v2++)" ]
"1000170" [label = "(<operator>.assignment,*result = v5)" ]
"1000171" [label = "(<operator>.indirection,*result)" ]
"1000175" [label = "(<operator>.indirection,*a2)" ]
"1000177" [label = "(<operator>.preIncrement,++a2)" ]
"1000179" [label = "(<operator>.assignment,result = v2)" ]
"1000182" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000184" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000118" -> "1000125" 
  "1000118" -> "1000182" 
  "1000120" -> "1000118" 
  "1000123" -> "1000131" 
  "1000125" -> "1000123" 
  "1000128" -> "1000133" 
  "1000130" -> "1000128" 
  "1000131" -> "1000130" 
  "1000133" -> "1000143" 
  "1000133" -> "1000171" 
  "1000139" -> "1000146" 
  "1000141" -> "1000139" 
  "1000142" -> "1000141" 
  "1000143" -> "1000142" 
  "1000146" -> "1000152" 
  "1000149" -> "1000154" 
  "1000151" -> "1000149" 
  "1000152" -> "1000151" 
  "1000154" -> "1000159" 
  "1000158" -> "1000171" 
  "1000158" -> "1000182" 
  "1000158" -> "1000167" 
  "1000159" -> "1000158" 
  "1000159" -> "1000161" 
  "1000161" -> "1000158" 
  "1000165" -> "1000143" 
  "1000165" -> "1000171" 
  "1000166" -> "1000165" 
  "1000167" -> "1000166" 
  "1000170" -> "1000175" 
  "1000171" -> "1000170" 
  "1000175" -> "1000177" 
  "1000175" -> "1000179" 
  "1000177" -> "1000179" 
  "1000179" -> "1000118" 
  "1000179" -> "1000120" 
  "1000182" -> "1000184" 
  "1000107" -> "1000118" 
  "1000107" -> "1000120" 
}
