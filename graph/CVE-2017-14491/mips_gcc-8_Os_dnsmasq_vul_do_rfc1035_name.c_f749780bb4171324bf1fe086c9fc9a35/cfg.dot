digraph do_rfc1035_name {  
"1000116" [label = "(<operator>.assignment,result = a1)" ]
"1000120" [label = "(<operator>.assignment,result = v3)" ]
"1000124" [label = "(<operator>.assignment,v3 = result + 1)" ]
"1000126" [label = "(<operator>.addition,result + 1)" ]
"1000130" [label = "(<operator>.logicalNot,!*a2)" ]
"1000131" [label = "(<operator>.indirection,*a2)" ]
"1000135" [label = "(<operator>.assignment,i = 0)" ]
"1000138" [label = "(<operator>.preIncrement,++i)" ]
"1000141" [label = "(<operator>.assignment,v5 = &a2[i])" ]
"1000143" [label = "(<operator>.addressOf,&a2[i])" ]
"1000144" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000147" [label = "(<operator>.assignment,v6 = (char)a2[i])" ]
"1000149" [label = "(<operator>.cast,(char)a2[i])" ]
"1000150" [label = "(UNKNOWN,char,char)" ]
"1000151" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000155" [label = "(<operator>.logicalOr,!a2[i] || v6 == 46)" ]
"1000156" [label = "(<operator>.logicalNot,!a2[i])" ]
"1000157" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000160" [label = "(<operator>.equals,v6 == 46)" ]
"1000164" [label = "(<operator>.assignment,*v3++ = v6)" ]
"1000165" [label = "(<operator>.indirection,*v3++)" ]
"1000166" [label = "(<operator>.postIncrement,v3++)" ]
"1000169" [label = "(<operator>.assignment,*result = i)" ]
"1000170" [label = "(<operator>.indirection,*result)" ]
"1000174" [label = "(<operator>.indirection,*v5)" ]
"1000176" [label = "(<operator>.preIncrement,++v5)" ]
"1000178" [label = "(<operator>.assignment,a2 = v5)" ]
"1000181" [label = "(RETURN,return result;,return result;)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000183" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000116" -> "1000126" 
  "1000116" -> "1000126" 
  "1000116" -> "1000181" 
  "1000120" -> "1000126" 
  "1000120" -> "1000126" 
  "1000120" -> "1000181" 
  "1000124" -> "1000131" 
  "1000126" -> "1000124" 
  "1000130" -> "1000181" 
  "1000130" -> "1000135" 
  "1000131" -> "1000130" 
  "1000135" -> "1000144" 
  "1000138" -> "1000144" 
  "1000141" -> "1000150" 
  "1000143" -> "1000141" 
  "1000144" -> "1000143" 
  "1000147" -> "1000157" 
  "1000149" -> "1000147" 
  "1000150" -> "1000151" 
  "1000151" -> "1000149" 
  "1000155" -> "1000170" 
  "1000155" -> "1000181" 
  "1000155" -> "1000166" 
  "1000156" -> "1000155" 
  "1000156" -> "1000160" 
  "1000157" -> "1000156" 
  "1000160" -> "1000155" 
  "1000164" -> "1000138" 
  "1000165" -> "1000164" 
  "1000166" -> "1000165" 
  "1000169" -> "1000174" 
  "1000170" -> "1000169" 
  "1000174" -> "1000176" 
  "1000174" -> "1000178" 
  "1000176" -> "1000178" 
  "1000178" -> "1000120" 
  "1000181" -> "1000183" 
  "1000106" -> "1000116" 
}
