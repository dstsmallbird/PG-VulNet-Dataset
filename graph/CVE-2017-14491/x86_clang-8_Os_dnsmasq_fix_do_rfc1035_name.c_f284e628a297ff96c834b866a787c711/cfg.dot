digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.assignment,v3 = a2)" ]
"1000121" [label = "(<operator>.assignment,result = a1)" ]
"1000130" [label = "(<operator>.assignment,v5 = (_BYTE *)result)" ]
"1000132" [label = "(<operator>.cast,(_BYTE *)result)" ]
"1000133" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000135" [label = "(<operator>.assignment,v6 = *v3)" ]
"1000137" [label = "(<operator>.indirection,*v3)" ]
"1000140" [label = "(<operator>.logicalOr,!*v3 || a3 && (unsigned int)(v5 + 1) > a3)" ]
"1000141" [label = "(<operator>.logicalNot,!*v3)" ]
"1000142" [label = "(<operator>.indirection,*v3)" ]
"1000144" [label = "(<operator>.logicalAnd,a3 && (unsigned int)(v5 + 1) > a3)" ]
"1000146" [label = "(<operator>.greaterThan,(unsigned int)(v5 + 1) > a3)" ]
"1000147" [label = "(<operator>.cast,(unsigned int)(v5 + 1))" ]
"1000148" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000149" [label = "(<operator>.addition,v5 + 1)" ]
"1000154" [label = "(<operator>.assignment,v7 = 0)" ]
"1000158" [label = "(<operator>.logicalAnd,v6 && v6 != 46)" ]
"1000160" [label = "(<operator>.notEquals,v6 != 46)" ]
"1000165" [label = "(<operator>.logicalAnd,a3 && (unsigned int)&v5[v7 + 2] > a3)" ]
"1000167" [label = "(<operator>.greaterThan,(unsigned int)&v5[v7 + 2] > a3)" ]
"1000168" [label = "(<operator>.cast,(unsigned int)&v5[v7 + 2])" ]
"1000169" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000170" [label = "(<operator>.addressOf,&v5[v7 + 2])" ]
"1000171" [label = "(<operator>.indirectIndexAccess,v5[v7 + 2])" ]
"1000173" [label = "(<operator>.addition,v7 + 2)" ]
"1000177" [label = "(RETURN,return (int)&v5[v7 + 1];,return (int)&v5[v7 + 1];)" ]
"1000178" [label = "(<operator>.cast,(int)&v5[v7 + 1])" ]
"1000179" [label = "(UNKNOWN,int,int)" ]
"1000180" [label = "(<operator>.addressOf,&v5[v7 + 1])" ]
"1000181" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000183" [label = "(<operator>.addition,v7 + 1)" ]
"1000186" [label = "(<operator>.assignment,v5[v7 + 1] = v6)" ]
"1000187" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000189" [label = "(<operator>.addition,v7 + 1)" ]
"1000193" [label = "(<operator>.assignment,v6 = v3[++v7])" ]
"1000195" [label = "(<operator>.indirectIndexAccess,v3[++v7])" ]
"1000197" [label = "(<operator>.preIncrement,++v7)" ]
"1000199" [label = "(<operator>.assignment,*v5 = v7)" ]
"1000200" [label = "(<operator>.indirection,*v5)" ]
"1000203" [label = "(<operator>.assignment,v8 = (int)&v3[v7 + 1])" ]
"1000205" [label = "(<operator>.cast,(int)&v3[v7 + 1])" ]
"1000206" [label = "(UNKNOWN,int,int)" ]
"1000207" [label = "(<operator>.addressOf,&v3[v7 + 1])" ]
"1000208" [label = "(<operator>.indirectIndexAccess,v3[v7 + 1])" ]
"1000210" [label = "(<operator>.addition,v7 + 1)" ]
"1000213" [label = "(<operator>.assignmentPlus,v3 += v7)" ]
"1000217" [label = "(<operator>.indirection,*(_BYTE *)(v8 - 1))" ]
"1000218" [label = "(<operator>.cast,(_BYTE *)(v8 - 1))" ]
"1000219" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000220" [label = "(<operator>.subtraction,v8 - 1)" ]
"1000223" [label = "(<operator>.assignment,v3 = (char *)v8)" ]
"1000225" [label = "(<operator>.cast,(char *)v8)" ]
"1000226" [label = "(UNKNOWN,char *,char *)" ]
"1000228" [label = "(<operator>.assignment,result = (int)&v5[v7 + 1])" ]
"1000230" [label = "(<operator>.cast,(int)&v5[v7 + 1])" ]
"1000231" [label = "(UNKNOWN,int,int)" ]
"1000232" [label = "(<operator>.addressOf,&v5[v7 + 1])" ]
"1000233" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000235" [label = "(<operator>.addition,v7 + 1)" ]
"1000239" [label = "(<operator>.logicalNot,!v3)" ]
"1000241" [label = "(RETURN,return (int)&v5[v7 + 1];,return (int)&v5[v7 + 1];)" ]
"1000242" [label = "(<operator>.cast,(int)&v5[v7 + 1])" ]
"1000243" [label = "(UNKNOWN,int,int)" ]
"1000244" [label = "(<operator>.addressOf,&v5[v7 + 1])" ]
"1000245" [label = "(<operator>.indirectIndexAccess,v5[v7 + 1])" ]
"1000247" [label = "(<operator>.addition,v7 + 1)" ]
"1000250" [label = "(<operator>.assignment,result = (int)v5)" ]
"1000252" [label = "(<operator>.cast,(int)v5)" ]
"1000253" [label = "(UNKNOWN,int,int)" ]
"1000255" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000257" [label = "(METHOD_RETURN,int __cdecl)" ]
  "1000118" -> "1000121" 
  "1000121" -> "1000133" 
  "1000121" -> "1000253" 
  "1000121" -> "1000255" 
  "1000130" -> "1000137" 
  "1000132" -> "1000130" 
  "1000133" -> "1000132" 
  "1000135" -> "1000142" 
  "1000137" -> "1000135" 
  "1000140" -> "1000253" 
  "1000140" -> "1000154" 
  "1000141" -> "1000140" 
  "1000141" -> "1000148" 
  "1000141" -> "1000144" 
  "1000142" -> "1000141" 
  "1000144" -> "1000140" 
  "1000146" -> "1000144" 
  "1000147" -> "1000146" 
  "1000148" -> "1000149" 
  "1000149" -> "1000147" 
  "1000154" -> "1000158" 
  "1000154" -> "1000160" 
  "1000158" -> "1000169" 
  "1000158" -> "1000165" 
  "1000158" -> "1000200" 
  "1000160" -> "1000158" 
  "1000165" -> "1000179" 
  "1000165" -> "1000189" 
  "1000167" -> "1000165" 
  "1000168" -> "1000167" 
  "1000169" -> "1000173" 
  "1000170" -> "1000168" 
  "1000171" -> "1000170" 
  "1000173" -> "1000171" 
  "1000177" -> "1000257" 
  "1000178" -> "1000177" 
  "1000179" -> "1000183" 
  "1000180" -> "1000178" 
  "1000181" -> "1000180" 
  "1000183" -> "1000181" 
  "1000186" -> "1000197" 
  "1000187" -> "1000186" 
  "1000189" -> "1000187" 
  "1000193" -> "1000158" 
  "1000193" -> "1000160" 
  "1000195" -> "1000193" 
  "1000197" -> "1000195" 
  "1000199" -> "1000206" 
  "1000200" -> "1000199" 
  "1000203" -> "1000213" 
  "1000205" -> "1000203" 
  "1000206" -> "1000210" 
  "1000207" -> "1000205" 
  "1000208" -> "1000207" 
  "1000210" -> "1000208" 
  "1000213" -> "1000219" 
  "1000217" -> "1000226" 
  "1000217" -> "1000231" 
  "1000218" -> "1000217" 
  "1000219" -> "1000220" 
  "1000220" -> "1000218" 
  "1000223" -> "1000231" 
  "1000225" -> "1000223" 
  "1000226" -> "1000225" 
  "1000228" -> "1000239" 
  "1000230" -> "1000228" 
  "1000231" -> "1000235" 
  "1000232" -> "1000230" 
  "1000233" -> "1000232" 
  "1000235" -> "1000233" 
  "1000239" -> "1000243" 
  "1000239" -> "1000133" 
  "1000239" -> "1000253" 
  "1000241" -> "1000257" 
  "1000242" -> "1000241" 
  "1000243" -> "1000247" 
  "1000244" -> "1000242" 
  "1000245" -> "1000244" 
  "1000247" -> "1000245" 
  "1000250" -> "1000255" 
  "1000252" -> "1000250" 
  "1000253" -> "1000252" 
  "1000255" -> "1000257" 
  "1000107" -> "1000118" 
}
