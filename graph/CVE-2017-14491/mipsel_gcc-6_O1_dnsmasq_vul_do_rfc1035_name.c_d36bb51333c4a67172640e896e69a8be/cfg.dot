digraph do_rfc1035_name {  
"1000114" [label = "(<operator>.logicalNot,!a2)" ]
"1000116" [label = "(RETURN,return a1;,return a1;)" ]
"1000119" [label = "(<operator>.logicalNot,!*a2)" ]
"1000120" [label = "(<operator>.indirection,*a2)" ]
"1000122" [label = "(RETURN,return a1;,return a1;)" ]
"1000126" [label = "(<operator>.assignment,v4 = (char)*a2)" ]
"1000128" [label = "(<operator>.cast,(char)*a2)" ]
"1000129" [label = "(UNKNOWN,char,char)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000132" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000134" [label = "(<operator>.addition,a1 + 1)" ]
"1000138" [label = "(<operator>.indirection,*a2)" ]
"1000141" [label = "(<operator>.assignment,v2 = a2)" ]
"1000145" [label = "(<operator>.equals,v4 == 46)" ]
"1000149" [label = "(<operator>.assignment,v3 = 0)" ]
"1000154" [label = "(<operator>.assignment,result = a1 + 2)" ]
"1000156" [label = "(<operator>.addition,a1 + 2)" ]
"1000162" [label = "(<operator>.assignment,*(result - 1) = v4)" ]
"1000163" [label = "(<operator>.indirection,*(result - 1))" ]
"1000164" [label = "(<operator>.subtraction,result - 1)" ]
"1000168" [label = "(<operator>.assignment,v4 = (char)*++v2)" ]
"1000170" [label = "(<operator>.cast,(char)*++v2)" ]
"1000171" [label = "(UNKNOWN,char,char)" ]
"1000172" [label = "(<operator>.indirection,*++v2)" ]
"1000173" [label = "(<operator>.preIncrement,++v2)" ]
"1000175" [label = "(<operator>.assignment,v3 = (_BYTE)v2 - (_BYTE)a2)" ]
"1000177" [label = "(<operator>.subtraction,(_BYTE)v2 - (_BYTE)a2)" ]
"1000178" [label = "(<operator>.cast,(_BYTE)v2)" ]
"1000179" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000181" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000182" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000185" [label = "(<operator>.logicalNot,!*v2)" ]
"1000186" [label = "(<operator>.indirection,*v2)" ]
"1000189" [label = "(<operator>.preIncrement,++result)" ]
"1000192" [label = "(<operator>.equals,v4 == 46)" ]
"1000196" [label = "(<operator>.preDecrement,--result)" ]
"1000198" [label = "(<operator>.assignment,*a1 = v3)" ]
"1000199" [label = "(<operator>.indirection,*a1)" ]
"1000205" [label = "(<operator>.assignment,v2 = a2)" ]
"1000208" [label = "(<operator>.assignment,v3 = 0)" ]
"1000211" [label = "(<operator>.assignment,*a1 = v3)" ]
"1000212" [label = "(<operator>.indirection,*a1)" ]
"1000216" [label = "(<operator>.assignment,a2 = v2 + 1)" ]
"1000218" [label = "(<operator>.addition,v2 + 1)" ]
"1000222" [label = "(<operator>.logicalNot,!*v2)" ]
"1000223" [label = "(<operator>.indirection,*v2)" ]
"1000227" [label = "(<operator>.equals,v2 == (_BYTE *)-1)" ]
"1000229" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000230" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000231" [label = "(<operator>.minus,-1)" ]
"1000234" [label = "(<operator>.assignment,a1 = result)" ]
"1000237" [label = "(<operator>.indirectIndexAccess,v2[1])" ]
"1000240" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000242" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000114" -> "1000116" 
  "1000114" -> "1000120" 
  "1000116" -> "1000242" 
  "1000119" -> "1000122" 
  "1000119" -> "1000129" 
  "1000120" -> "1000119" 
  "1000122" -> "1000242" 
  "1000126" -> "1000134" 
  "1000128" -> "1000126" 
  "1000129" -> "1000130" 
  "1000130" -> "1000128" 
  "1000132" -> "1000138" 
  "1000134" -> "1000132" 
  "1000138" -> "1000141" 
  "1000138" -> "1000205" 
  "1000141" -> "1000145" 
  "1000145" -> "1000149" 
  "1000145" -> "1000156" 
  "1000149" -> "1000212" 
  "1000154" -> "1000164" 
  "1000154" -> "1000212" 
  "1000156" -> "1000154" 
  "1000162" -> "1000171" 
  "1000163" -> "1000162" 
  "1000164" -> "1000163" 
  "1000168" -> "1000179" 
  "1000170" -> "1000168" 
  "1000171" -> "1000173" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000175" -> "1000186" 
  "1000177" -> "1000175" 
  "1000178" -> "1000182" 
  "1000179" -> "1000178" 
  "1000181" -> "1000177" 
  "1000182" -> "1000181" 
  "1000185" -> "1000212" 
  "1000185" -> "1000240" 
  "1000185" -> "1000189" 
  "1000186" -> "1000185" 
  "1000189" -> "1000192" 
  "1000192" -> "1000164" 
  "1000192" -> "1000212" 
  "1000192" -> "1000196" 
  "1000196" -> "1000199" 
  "1000198" -> "1000218" 
  "1000198" -> "1000218" 
  "1000199" -> "1000198" 
  "1000205" -> "1000208" 
  "1000208" -> "1000212" 
  "1000211" -> "1000218" 
  "1000212" -> "1000211" 
  "1000216" -> "1000223" 
  "1000218" -> "1000216" 
  "1000222" -> "1000240" 
  "1000222" -> "1000230" 
  "1000223" -> "1000222" 
  "1000227" -> "1000240" 
  "1000227" -> "1000234" 
  "1000229" -> "1000227" 
  "1000230" -> "1000231" 
  "1000231" -> "1000229" 
  "1000234" -> "1000237" 
  "1000237" -> "1000129" 
  "1000237" -> "1000240" 
  "1000240" -> "1000242" 
  "1000105" -> "1000114" 
}
