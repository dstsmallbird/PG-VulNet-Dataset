digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.assignment,result = a1)" ]
"1000125" [label = "(<operator>.indirection,*a2)" ]
"1000131" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000133" [label = "(<operator>.addition,a1 + 1)" ]
"1000140" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000142" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000143" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000146" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000148" [label = "(<operator>.indirection,*a2)" ]
"1000150" [label = "(<operator>.assignment,v5 = a2)" ]
"1000154" [label = "(<operator>.indirection,*a2)" ]
"1000157" [label = "(<operator>.assignment,v6 = a1 + 2)" ]
"1000159" [label = "(<operator>.addition,a1 + 2)" ]
"1000163" [label = "(<operator>.notEquals,v4 != 46)" ]
"1000168" [label = "(<operator>.assignment,i = a3 < (unsigned int)v6)" ]
"1000170" [label = "(<operator>.lessThan,a3 < (unsigned int)v6)" ]
"1000172" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000173" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000175" [label = "(<operator>.assignment,i = a3 < (unsigned int)v6)" ]
"1000177" [label = "(<operator>.lessThan,a3 < (unsigned int)v6)" ]
"1000179" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000180" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000183" [label = "(<operator>.assignment,result = v6 - 1)" ]
"1000185" [label = "(<operator>.subtraction,v6 - 1)" ]
"1000194" [label = "(<operator>.preIncrement,++v5)" ]
"1000196" [label = "(<operator>.assignment,*(v6 - 1) = v4)" ]
"1000197" [label = "(<operator>.indirection,*(v6 - 1))" ]
"1000198" [label = "(<operator>.subtraction,v6 - 1)" ]
"1000202" [label = "(<operator>.assignment,result = v6)" ]
"1000205" [label = "(<operator>.assignment,v8 = (_BYTE)v5 - (_BYTE)a2)" ]
"1000207" [label = "(<operator>.subtraction,(_BYTE)v5 - (_BYTE)a2)" ]
"1000208" [label = "(<operator>.cast,(_BYTE)v5)" ]
"1000209" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000211" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000212" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000214" [label = "(<operator>.assignment,v4 = *v5)" ]
"1000216" [label = "(<operator>.indirection,*v5)" ]
"1000218" [label = "(<operator>.preIncrement,++v6)" ]
"1000221" [label = "(<operator>.logicalOr,!*v5 || v4 == 46)" ]
"1000222" [label = "(<operator>.logicalNot,!*v5)" ]
"1000223" [label = "(<operator>.indirection,*v5)" ]
"1000225" [label = "(<operator>.equals,v4 == 46)" ]
"1000229" [label = "(RETURN,return result;,return result;)" ]
"1000231" [label = "(<operator>.assignment,v8 = 0)" ]
"1000234" [label = "(<operator>.assignment,v5 = a2)" ]
"1000239" [label = "(<operator>.assignment,v8 = 0)" ]
"1000243" [label = "(<operator>.assignment,*a1 = v8)" ]
"1000244" [label = "(<operator>.indirection,*a1)" ]
"1000247" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000249" [label = "(<operator>.addition,v5 + 1)" ]
"1000253" [label = "(<operator>.indirection,*v5)" ]
"1000257" [label = "(<operator>.notEquals,v5 != (char *)-1)" ]
"1000259" [label = "(<operator>.cast,(char *)-1)" ]
"1000260" [label = "(UNKNOWN,char *,char *)" ]
"1000261" [label = "(<operator>.minus,-1)" ]
"1000264" [label = "(<operator>.assignment,a1 = result)" ]
"1000268" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000272" [label = "(RETURN,return result;,return result;)" ]
"1000274" [label = "(<operator>.assignment,result = a1)" ]
"1000277" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000279" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000118" -> "1000125" 
  "1000118" -> "1000277" 
  "1000125" -> "1000133" 
  "1000125" -> "1000274" 
  "1000125" -> "1000274" 
  "1000131" -> "1000143" 
  "1000131" -> "1000148" 
  "1000133" -> "1000131" 
  "1000140" -> "1000274" 
  "1000140" -> "1000148" 
  "1000142" -> "1000140" 
  "1000143" -> "1000142" 
  "1000146" -> "1000150" 
  "1000148" -> "1000146" 
  "1000150" -> "1000154" 
  "1000154" -> "1000159" 
  "1000154" -> "1000239" 
  "1000157" -> "1000163" 
  "1000159" -> "1000157" 
  "1000163" -> "1000173" 
  "1000163" -> "1000231" 
  "1000168" -> "1000185" 
  "1000170" -> "1000168" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000175" -> "1000185" 
  "1000177" -> "1000175" 
  "1000179" -> "1000177" 
  "1000180" -> "1000179" 
  "1000183" -> "1000229" 
  "1000183" -> "1000274" 
  "1000183" -> "1000194" 
  "1000183" -> "1000194" 
  "1000185" -> "1000183" 
  "1000194" -> "1000198" 
  "1000196" -> "1000202" 
  "1000197" -> "1000196" 
  "1000198" -> "1000197" 
  "1000202" -> "1000209" 
  "1000205" -> "1000216" 
  "1000207" -> "1000205" 
  "1000208" -> "1000212" 
  "1000209" -> "1000208" 
  "1000211" -> "1000207" 
  "1000212" -> "1000211" 
  "1000214" -> "1000218" 
  "1000216" -> "1000214" 
  "1000218" -> "1000223" 
  "1000221" -> "1000244" 
  "1000221" -> "1000180" 
  "1000222" -> "1000221" 
  "1000222" -> "1000225" 
  "1000223" -> "1000222" 
  "1000225" -> "1000221" 
  "1000229" -> "1000279" 
  "1000231" -> "1000234" 
  "1000234" -> "1000244" 
  "1000239" -> "1000244" 
  "1000243" -> "1000249" 
  "1000244" -> "1000243" 
  "1000247" -> "1000253" 
  "1000249" -> "1000247" 
  "1000253" -> "1000260" 
  "1000253" -> "1000272" 
  "1000257" -> "1000264" 
  "1000257" -> "1000272" 
  "1000259" -> "1000257" 
  "1000260" -> "1000261" 
  "1000261" -> "1000259" 
  "1000264" -> "1000268" 
  "1000268" -> "1000133" 
  "1000268" -> "1000274" 
  "1000268" -> "1000272" 
  "1000272" -> "1000279" 
  "1000274" -> "1000277" 
  "1000277" -> "1000279" 
  "1000107" -> "1000118" 
}
