digraph do_rfc1035_name {  
"1000122" [label = "(<operator>.assignment,v3 = result)" ]
"1000126" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000128" [label = "(<operator>.indirection,*a2)" ]
"1000135" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)(v3 + 1))" ]
"1000137" [label = "(<operator>.lessThan,a3 < (unsigned int)(v3 + 1))" ]
"1000139" [label = "(<operator>.cast,(unsigned int)(v3 + 1))" ]
"1000140" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000141" [label = "(<operator>.addition,v3 + 1)" ]
"1000144" [label = "(RETURN,return v3;,return v3;)" ]
"1000146" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000148" [label = "(<operator>.addition,v3 + 1)" ]
"1000151" [label = "(<operator>.assignment,v6 = (unsigned __int8)*a2)" ]
"1000153" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000154" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000155" [label = "(<operator>.indirection,*a2)" ]
"1000157" [label = "(<operator>.assignment,v10 = v6 == 0)" ]
"1000159" [label = "(<operator>.equals,v6 == 0)" ]
"1000163" [label = "(<operator>.indirection,*a2)" ]
"1000165" [label = "(<operator>.assignment,v10 = v6 == 46)" ]
"1000167" [label = "(<operator>.equals,v6 == 46)" ]
"1000171" [label = "(<operator>.logicalNot,!v10)" ]
"1000174" [label = "(<operator>.assignment,v4 = a2)" ]
"1000177" [label = "(<operator>.assignment,v5 = 0)" ]
"1000181" [label = "(<operator>.assignment,*v3 = v5)" ]
"1000182" [label = "(<operator>.indirection,*v3)" ]
"1000186" [label = "(<operator>.logicalNot,!*v4)" ]
"1000187" [label = "(<operator>.indirection,*v4)" ]
"1000189" [label = "(RETURN,return result;,return result;)" ]
"1000191" [label = "(<operator>.assignment,a2 = v4 + 1)" ]
"1000193" [label = "(<operator>.addition,v4 + 1)" ]
"1000197" [label = "(<operator>.logicalOr,v4 == (_BYTE *)-1 || !v4[1])" ]
"1000198" [label = "(<operator>.equals,v4 == (_BYTE *)-1)" ]
"1000200" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000201" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000202" [label = "(<operator>.minus,-1)" ]
"1000204" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000205" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000208" [label = "(RETURN,return result;,return result;)" ]
"1000210" [label = "(<operator>.assignment,v3 = result)" ]
"1000213" [label = "(<operator>.assignment,v7 = a2 + 1)" ]
"1000215" [label = "(<operator>.addition,a2 + 1)" ]
"1000219" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(result + 1))" ]
"1000220" [label = "(<operator>.logicalNot,!a3)" ]
"1000222" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(result + 1))" ]
"1000224" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000225" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000226" [label = "(<operator>.addition,result + 1)" ]
"1000230" [label = "(<operator>.assignment,*result++ = v6)" ]
"1000231" [label = "(<operator>.indirection,*result++)" ]
"1000232" [label = "(<operator>.postIncrement,result++)" ]
"1000235" [label = "(<operator>.assignment,v4 = v7)" ]
"1000238" [label = "(<operator>.assignment,v5 = (_BYTE)v7 - (_BYTE)a2)" ]
"1000240" [label = "(<operator>.subtraction,(_BYTE)v7 - (_BYTE)a2)" ]
"1000241" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000242" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000244" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000245" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000247" [label = "(<operator>.assignment,v8 = *v7++)" ]
"1000249" [label = "(<operator>.indirection,*v7++)" ]
"1000250" [label = "(<operator>.postIncrement,v7++)" ]
"1000252" [label = "(<operator>.assignment,v6 = v8)" ]
"1000255" [label = "(<operator>.assignment,v9 = v8 == 0)" ]
"1000257" [label = "(<operator>.equals,v8 == 0)" ]
"1000262" [label = "(<operator>.assignment,v9 = v6 == 46)" ]
"1000264" [label = "(<operator>.equals,v6 == 46)" ]
"1000270" [label = "(RETURN,return result;,return result;)" ]
"1000109" [label = "(METHOD,do_rfc1035_name)" ]
"1000272" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000122" -> "1000126" 
  "1000122" -> "1000128" 
  "1000126" -> "1000135" 
  "1000126" -> "1000140" 
  "1000126" -> "1000215" 
  "1000126" -> "1000270" 
  "1000128" -> "1000126" 
  "1000135" -> "1000144" 
  "1000135" -> "1000148" 
  "1000137" -> "1000135" 
  "1000139" -> "1000137" 
  "1000140" -> "1000141" 
  "1000141" -> "1000139" 
  "1000144" -> "1000272" 
  "1000146" -> "1000154" 
  "1000148" -> "1000146" 
  "1000151" -> "1000159" 
  "1000153" -> "1000151" 
  "1000154" -> "1000155" 
  "1000155" -> "1000153" 
  "1000157" -> "1000163" 
  "1000159" -> "1000157" 
  "1000163" -> "1000167" 
  "1000163" -> "1000171" 
  "1000165" -> "1000171" 
  "1000167" -> "1000165" 
  "1000171" -> "1000215" 
  "1000171" -> "1000174" 
  "1000174" -> "1000177" 
  "1000177" -> "1000182" 
  "1000181" -> "1000187" 
  "1000182" -> "1000181" 
  "1000186" -> "1000189" 
  "1000186" -> "1000193" 
  "1000187" -> "1000186" 
  "1000189" -> "1000272" 
  "1000191" -> "1000201" 
  "1000193" -> "1000191" 
  "1000197" -> "1000208" 
  "1000197" -> "1000210" 
  "1000198" -> "1000197" 
  "1000198" -> "1000205" 
  "1000200" -> "1000198" 
  "1000201" -> "1000202" 
  "1000202" -> "1000200" 
  "1000204" -> "1000197" 
  "1000205" -> "1000204" 
  "1000208" -> "1000272" 
  "1000210" -> "1000135" 
  "1000210" -> "1000140" 
  "1000210" -> "1000215" 
  "1000213" -> "1000220" 
  "1000215" -> "1000213" 
  "1000219" -> "1000232" 
  "1000219" -> "1000270" 
  "1000220" -> "1000219" 
  "1000220" -> "1000225" 
  "1000222" -> "1000219" 
  "1000224" -> "1000222" 
  "1000225" -> "1000226" 
  "1000226" -> "1000224" 
  "1000230" -> "1000235" 
  "1000231" -> "1000230" 
  "1000232" -> "1000231" 
  "1000235" -> "1000242" 
  "1000238" -> "1000250" 
  "1000240" -> "1000238" 
  "1000241" -> "1000245" 
  "1000242" -> "1000241" 
  "1000244" -> "1000240" 
  "1000245" -> "1000244" 
  "1000247" -> "1000252" 
  "1000249" -> "1000247" 
  "1000250" -> "1000249" 
  "1000252" -> "1000257" 
  "1000255" -> "1000264" 
  "1000255" -> "1000220" 
  "1000255" -> "1000182" 
  "1000257" -> "1000255" 
  "1000262" -> "1000220" 
  "1000262" -> "1000182" 
  "1000264" -> "1000262" 
  "1000270" -> "1000272" 
  "1000109" -> "1000122" 
}
