digraph do_rfc1035_name {  
"1000122" [label = "(<operator>.assignment,v3 = a1)" ]
"1000126" [label = "(<operator>.logicalNot,!a2)" ]
"1000128" [label = "(RETURN,return v3;,return v3;)" ]
"1000131" [label = "(<operator>.logicalNot,!*a2)" ]
"1000132" [label = "(<operator>.indirection,*a2)" ]
"1000134" [label = "(RETURN,return v3;,return v3;)" ]
"1000136" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000138" [label = "(<operator>.addition,a1 + 1)" ]
"1000145" [label = "(<operator>.greaterThan,(unsigned int)result > a3)" ]
"1000146" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000147" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000150" [label = "(RETURN,return v3;,return v3;)" ]
"1000155" [label = "(<operator>.assignment,v5 = (unsigned __int8)*a2)" ]
"1000157" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000158" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000159" [label = "(<operator>.indirection,*a2)" ]
"1000161" [label = "(<operator>.assignment,v6 = v5 == 46)" ]
"1000163" [label = "(<operator>.equals,v5 == 46)" ]
"1000167" [label = "(<operator>.notEquals,v5 != 46)" ]
"1000170" [label = "(<operator>.assignment,v6 = v5 == 0)" ]
"1000172" [label = "(<operator>.equals,v5 == 0)" ]
"1000176" [label = "(<operator>.logicalNot,!v6)" ]
"1000179" [label = "(<operator>.assignment,v7 = 0)" ]
"1000182" [label = "(<operator>.assignment,v10 = a2)" ]
"1000186" [label = "(<operator>.assignment,*v3 = v7)" ]
"1000187" [label = "(<operator>.indirection,*v3)" ]
"1000191" [label = "(<operator>.logicalNot,!*v10)" ]
"1000192" [label = "(<operator>.indirection,*v10)" ]
"1000194" [label = "(RETURN,return result;,return result;)" ]
"1000196" [label = "(<operator>.assignment,a2 = v10 + 1)" ]
"1000198" [label = "(<operator>.addition,v10 + 1)" ]
"1000202" [label = "(<operator>.logicalOr,v10 == (_BYTE *)-1 || !v10[1])" ]
"1000203" [label = "(<operator>.equals,v10 == (_BYTE *)-1)" ]
"1000205" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000206" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000207" [label = "(<operator>.minus,-1)" ]
"1000209" [label = "(<operator>.logicalNot,!v10[1])" ]
"1000210" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000213" [label = "(RETURN,return result;,return result;)" ]
"1000215" [label = "(<operator>.assignment,v3 = result++)" ]
"1000217" [label = "(<operator>.postIncrement,result++)" ]
"1000220" [label = "(<operator>.logicalAnd,a3 && (unsigned int)result > a3)" ]
"1000222" [label = "(<operator>.greaterThan,(unsigned int)result > a3)" ]
"1000223" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000224" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000227" [label = "(RETURN,return v3;,return v3;)" ]
"1000229" [label = "(<operator>.assignment,v8 = a2 + 1)" ]
"1000231" [label = "(<operator>.addition,a2 + 1)" ]
"1000237" [label = "(<operator>.assignment,v10 = v8)" ]
"1000240" [label = "(<operator>.assignment,v7 = (_BYTE)result + 1 + ~(_BYTE)v3)" ]
"1000242" [label = "(<operator>.addition,(_BYTE)result + 1 + ~(_BYTE)v3)" ]
"1000243" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000244" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000246" [label = "(<operator>.addition,1 + ~(_BYTE)v3)" ]
"1000248" [label = "(<operator>.not,~(_BYTE)v3)" ]
"1000249" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000250" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000256" [label = "(<operator>.greaterThan,(unsigned int)(result + 1) > a3)" ]
"1000257" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000258" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000259" [label = "(<operator>.addition,result + 1)" ]
"1000263" [label = "(RETURN,return result;,return result;)" ]
"1000265" [label = "(<operator>.assignment,*result++ = v5)" ]
"1000266" [label = "(<operator>.indirection,*result++)" ]
"1000267" [label = "(<operator>.postIncrement,result++)" ]
"1000270" [label = "(<operator>.assignment,v5 = *v8++)" ]
"1000272" [label = "(<operator>.indirection,*v8++)" ]
"1000273" [label = "(<operator>.postIncrement,v8++)" ]
"1000275" [label = "(<operator>.assignment,v9 = v5 == 0)" ]
"1000277" [label = "(<operator>.equals,v5 == 0)" ]
"1000282" [label = "(<operator>.assignment,v9 = v5 == 46)" ]
"1000284" [label = "(<operator>.equals,v5 == 46)" ]
"1000109" [label = "(METHOD,do_rfc1035_name)" ]
"1000290" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000122" -> "1000126" 
  "1000126" -> "1000128" 
  "1000126" -> "1000132" 
  "1000128" -> "1000290" 
  "1000131" -> "1000134" 
  "1000131" -> "1000138" 
  "1000132" -> "1000131" 
  "1000134" -> "1000290" 
  "1000136" -> "1000147" 
  "1000136" -> "1000158" 
  "1000136" -> "1000231" 
  "1000138" -> "1000136" 
  "1000145" -> "1000150" 
  "1000145" -> "1000158" 
  "1000145" -> "1000231" 
  "1000146" -> "1000145" 
  "1000147" -> "1000146" 
  "1000150" -> "1000290" 
  "1000155" -> "1000163" 
  "1000157" -> "1000155" 
  "1000158" -> "1000159" 
  "1000159" -> "1000157" 
  "1000161" -> "1000167" 
  "1000163" -> "1000161" 
  "1000167" -> "1000172" 
  "1000167" -> "1000176" 
  "1000170" -> "1000176" 
  "1000172" -> "1000170" 
  "1000176" -> "1000231" 
  "1000176" -> "1000179" 
  "1000179" -> "1000182" 
  "1000182" -> "1000187" 
  "1000186" -> "1000192" 
  "1000187" -> "1000186" 
  "1000191" -> "1000194" 
  "1000191" -> "1000198" 
  "1000192" -> "1000191" 
  "1000194" -> "1000290" 
  "1000196" -> "1000206" 
  "1000198" -> "1000196" 
  "1000202" -> "1000213" 
  "1000202" -> "1000217" 
  "1000203" -> "1000202" 
  "1000203" -> "1000210" 
  "1000205" -> "1000203" 
  "1000206" -> "1000207" 
  "1000207" -> "1000205" 
  "1000209" -> "1000202" 
  "1000210" -> "1000209" 
  "1000213" -> "1000290" 
  "1000215" -> "1000224" 
  "1000215" -> "1000220" 
  "1000217" -> "1000215" 
  "1000220" -> "1000158" 
  "1000220" -> "1000231" 
  "1000220" -> "1000227" 
  "1000222" -> "1000220" 
  "1000223" -> "1000222" 
  "1000224" -> "1000223" 
  "1000227" -> "1000290" 
  "1000229" -> "1000290" 
  "1000229" -> "1000237" 
  "1000231" -> "1000229" 
  "1000237" -> "1000244" 
  "1000240" -> "1000258" 
  "1000240" -> "1000267" 
  "1000242" -> "1000240" 
  "1000243" -> "1000250" 
  "1000244" -> "1000243" 
  "1000246" -> "1000242" 
  "1000248" -> "1000246" 
  "1000249" -> "1000248" 
  "1000250" -> "1000249" 
  "1000256" -> "1000263" 
  "1000256" -> "1000267" 
  "1000257" -> "1000256" 
  "1000258" -> "1000259" 
  "1000259" -> "1000257" 
  "1000263" -> "1000290" 
  "1000265" -> "1000273" 
  "1000266" -> "1000265" 
  "1000267" -> "1000266" 
  "1000270" -> "1000277" 
  "1000272" -> "1000270" 
  "1000273" -> "1000272" 
  "1000275" -> "1000284" 
  "1000275" -> "1000290" 
  "1000275" -> "1000237" 
  "1000275" -> "1000187" 
  "1000277" -> "1000275" 
  "1000282" -> "1000290" 
  "1000282" -> "1000237" 
  "1000282" -> "1000187" 
  "1000284" -> "1000282" 
  "1000109" -> "1000122" 
}
