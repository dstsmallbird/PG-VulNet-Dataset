digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.assignment,v3 = a1)" ]
"1000121" [label = "(<operator>.assignment,v4 = a2)" ]
"1000125" [label = "(<operator>.logicalNot,!a2)" ]
"1000127" [label = "(RETURN,return a1;,return a1;)" ]
"1000130" [label = "(<operator>.logicalNot,!*a2)" ]
"1000131" [label = "(<operator>.indirection,*a2)" ]
"1000133" [label = "(RETURN,return a1;,return a1;)" ]
"1000139" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)(v3 + 1))" ]
"1000141" [label = "(<operator>.lessThan,a3 < (unsigned int)(v3 + 1))" ]
"1000143" [label = "(<operator>.cast,(unsigned int)(v3 + 1))" ]
"1000144" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000145" [label = "(<operator>.addition,v3 + 1)" ]
"1000148" [label = "(RETURN,return v3;,return v3;)" ]
"1000150" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000152" [label = "(<operator>.addition,v3 + 1)" ]
"1000155" [label = "(<operator>.assignment,v5 = *v4)" ]
"1000157" [label = "(<operator>.indirection,*v4)" ]
"1000160" [label = "(<operator>.indirection,*v4)" ]
"1000164" [label = "(<operator>.notEquals,v5 != 46)" ]
"1000168" [label = "(<operator>.assignment,v6 = v4)" ]
"1000171" [label = "(<operator>.assignment,v7 = 0)" ]
"1000175" [label = "(<operator>.assignment,*v3 = v7)" ]
"1000176" [label = "(<operator>.indirection,*v3)" ]
"1000180" [label = "(<operator>.logicalNot,!*v6)" ]
"1000181" [label = "(<operator>.indirection,*v6)" ]
"1000183" [label = "(RETURN,return result;,return result;)" ]
"1000185" [label = "(<operator>.assignment,v4 = v6 + 1)" ]
"1000187" [label = "(<operator>.addition,v6 + 1)" ]
"1000191" [label = "(<operator>.logicalOr,v6 == (char *)-1 || !v6[1])" ]
"1000192" [label = "(<operator>.equals,v6 == (char *)-1)" ]
"1000194" [label = "(<operator>.cast,(char *)-1)" ]
"1000195" [label = "(UNKNOWN,char *,char *)" ]
"1000196" [label = "(<operator>.minus,-1)" ]
"1000198" [label = "(<operator>.logicalNot,!v6[1])" ]
"1000199" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000202" [label = "(RETURN,return result;,return result;)" ]
"1000204" [label = "(<operator>.assignment,v3 = result)" ]
"1000207" [label = "(<operator>.assignment,v6 = v4)" ]
"1000211" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(result + 1))" ]
"1000212" [label = "(<operator>.logicalNot,!a3)" ]
"1000214" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(result + 1))" ]
"1000216" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000217" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000218" [label = "(<operator>.addition,result + 1)" ]
"1000222" [label = "(<operator>.assignment,*result++ = v5)" ]
"1000223" [label = "(<operator>.indirection,*result++)" ]
"1000224" [label = "(<operator>.postIncrement,result++)" ]
"1000227" [label = "(<operator>.assignment,v7 = (_BYTE)++v6 - (_BYTE)v4)" ]
"1000229" [label = "(<operator>.subtraction,(_BYTE)++v6 - (_BYTE)v4)" ]
"1000230" [label = "(<operator>.cast,(_BYTE)++v6)" ]
"1000231" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000232" [label = "(<operator>.preIncrement,++v6)" ]
"1000234" [label = "(<operator>.cast,(_BYTE)v4)" ]
"1000235" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000237" [label = "(<operator>.assignment,v5 = *v6)" ]
"1000239" [label = "(<operator>.indirection,*v6)" ]
"1000242" [label = "(<operator>.logicalOr,!*v6 || v5 == 46)" ]
"1000243" [label = "(<operator>.logicalNot,!*v6)" ]
"1000244" [label = "(<operator>.indirection,*v6)" ]
"1000246" [label = "(<operator>.equals,v5 == 46)" ]
"1000250" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000252" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000118" -> "1000121" 
  "1000121" -> "1000125" 
  "1000125" -> "1000127" 
  "1000125" -> "1000131" 
  "1000127" -> "1000252" 
  "1000130" -> "1000133" 
  "1000130" -> "1000139" 
  "1000130" -> "1000144" 
  "1000130" -> "1000207" 
  "1000131" -> "1000130" 
  "1000133" -> "1000252" 
  "1000139" -> "1000148" 
  "1000139" -> "1000152" 
  "1000141" -> "1000139" 
  "1000143" -> "1000141" 
  "1000144" -> "1000145" 
  "1000145" -> "1000143" 
  "1000148" -> "1000252" 
  "1000150" -> "1000157" 
  "1000152" -> "1000150" 
  "1000155" -> "1000160" 
  "1000157" -> "1000155" 
  "1000160" -> "1000164" 
  "1000160" -> "1000168" 
  "1000164" -> "1000207" 
  "1000164" -> "1000168" 
  "1000168" -> "1000171" 
  "1000171" -> "1000176" 
  "1000175" -> "1000181" 
  "1000176" -> "1000175" 
  "1000180" -> "1000183" 
  "1000180" -> "1000187" 
  "1000181" -> "1000180" 
  "1000183" -> "1000252" 
  "1000185" -> "1000195" 
  "1000187" -> "1000185" 
  "1000191" -> "1000202" 
  "1000191" -> "1000204" 
  "1000192" -> "1000191" 
  "1000192" -> "1000199" 
  "1000194" -> "1000192" 
  "1000195" -> "1000196" 
  "1000196" -> "1000194" 
  "1000198" -> "1000191" 
  "1000199" -> "1000198" 
  "1000202" -> "1000252" 
  "1000204" -> "1000139" 
  "1000204" -> "1000144" 
  "1000204" -> "1000207" 
  "1000207" -> "1000212" 
  "1000211" -> "1000224" 
  "1000211" -> "1000250" 
  "1000212" -> "1000211" 
  "1000212" -> "1000217" 
  "1000214" -> "1000211" 
  "1000216" -> "1000214" 
  "1000217" -> "1000218" 
  "1000218" -> "1000216" 
  "1000222" -> "1000231" 
  "1000223" -> "1000222" 
  "1000224" -> "1000223" 
  "1000227" -> "1000239" 
  "1000229" -> "1000227" 
  "1000230" -> "1000235" 
  "1000231" -> "1000232" 
  "1000232" -> "1000230" 
  "1000234" -> "1000229" 
  "1000235" -> "1000234" 
  "1000237" -> "1000244" 
  "1000239" -> "1000237" 
  "1000242" -> "1000212" 
  "1000242" -> "1000176" 
  "1000243" -> "1000242" 
  "1000243" -> "1000246" 
  "1000244" -> "1000243" 
  "1000246" -> "1000242" 
  "1000250" -> "1000252" 
  "1000107" -> "1000118" 
}
