digraph do_rfc1035_name {  
"1000127" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000129" [label = "(<operator>.indirection,*a2)" ]
"1000135" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000137" [label = "(<operator>.addition,a1 + 1)" ]
"1000144" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000146" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000147" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000150" [label = "(<operator>.assignment,v5 = (unsigned __int8)*a2)" ]
"1000152" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000153" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000154" [label = "(<operator>.indirection,*a2)" ]
"1000156" [label = "(<operator>.assignment,v6 = v5 == 0)" ]
"1000158" [label = "(<operator>.equals,v5 == 0)" ]
"1000162" [label = "(<operator>.indirection,*a2)" ]
"1000164" [label = "(<operator>.assignment,v6 = v5 == 46)" ]
"1000166" [label = "(<operator>.equals,v5 == 46)" ]
"1000172" [label = "(<operator>.assignment,v7 = 0)" ]
"1000175" [label = "(<operator>.assignment,v13 = a2)" ]
"1000180" [label = "(<operator>.assignment,v8 = a1 + 1)" ]
"1000182" [label = "(<operator>.addition,a1 + 1)" ]
"1000185" [label = "(<operator>.assignment,v9 = a1 + 2)" ]
"1000187" [label = "(<operator>.addition,a1 + 2)" ]
"1000190" [label = "(<operator>.assignment,v10 = a2 + 1)" ]
"1000192" [label = "(<operator>.addition,a2 + 1)" ]
"1000197" [label = "(<operator>.assignment,result = v8)" ]
"1000203" [label = "(<operator>.assignment,v11 = v9)" ]
"1000207" [label = "(<operator>.lessThan,a3 < (unsigned int)v9)" ]
"1000209" [label = "(<operator>.cast,(unsigned int)v9)" ]
"1000210" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000212" [label = "(RETURN,return result;,return result;)" ]
"1000216" [label = "(<operator>.assignment,v11 = v9)" ]
"1000219" [label = "(<operator>.assignment,*v8++ = v5)" ]
"1000220" [label = "(<operator>.indirection,*v8++)" ]
"1000221" [label = "(<operator>.postIncrement,v8++)" ]
"1000224" [label = "(<operator>.assignment,v5 = (unsigned __int8)*v10)" ]
"1000226" [label = "(<operator>.cast,(unsigned __int8)*v10)" ]
"1000227" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000228" [label = "(<operator>.indirection,*v10)" ]
"1000230" [label = "(<operator>.assignment,v13 = v10)" ]
"1000233" [label = "(<operator>.assignment,v12 = v5 == 0)" ]
"1000235" [label = "(<operator>.equals,v5 == 0)" ]
"1000239" [label = "(<operator>.indirection,*v10)" ]
"1000241" [label = "(<operator>.assignment,v12 = v5 == 46)" ]
"1000243" [label = "(<operator>.equals,v5 == 46)" ]
"1000246" [label = "(<operator>.assignment,v7 = (_BYTE)v10 - (_BYTE)a2)" ]
"1000248" [label = "(<operator>.subtraction,(_BYTE)v10 - (_BYTE)a2)" ]
"1000249" [label = "(<operator>.cast,(_BYTE)v10)" ]
"1000250" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000252" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000253" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000255" [label = "(<operator>.preIncrement,++v9)" ]
"1000257" [label = "(<operator>.preIncrement,++v10)" ]
"1000259" [label = "(<operator>.logicalNot,!v12)" ]
"1000261" [label = "(<operator>.assignment,result = v11)" ]
"1000264" [label = "(<operator>.assignment,*a1 = v7)" ]
"1000265" [label = "(<operator>.indirection,*a1)" ]
"1000269" [label = "(<operator>.logicalNot,!*v13)" ]
"1000270" [label = "(<operator>.indirection,*v13)" ]
"1000272" [label = "(RETURN,return result;,return result;)" ]
"1000274" [label = "(<operator>.assignment,a2 = v13 + 1)" ]
"1000276" [label = "(<operator>.addition,v13 + 1)" ]
"1000280" [label = "(<operator>.logicalOr,v13 == (_BYTE *)-1 || !v13[1])" ]
"1000281" [label = "(<operator>.equals,v13 == (_BYTE *)-1)" ]
"1000283" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000284" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000285" [label = "(<operator>.minus,-1)" ]
"1000287" [label = "(<operator>.logicalNot,!v13[1])" ]
"1000288" [label = "(<operator>.indirectIndexAccess,v13[1])" ]
"1000291" [label = "(RETURN,return result;,return result;)" ]
"1000293" [label = "(<operator>.assignment,a1 = result)" ]
"1000296" [label = "(RETURN,return a1;,return a1;)" ]
"1000111" [label = "(METHOD,do_rfc1035_name)" ]
"1000298" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000127" -> "1000137" 
  "1000127" -> "1000296" 
  "1000127" -> "1000296" 
  "1000129" -> "1000127" 
  "1000135" -> "1000147" 
  "1000135" -> "1000153" 
  "1000137" -> "1000135" 
  "1000144" -> "1000296" 
  "1000144" -> "1000153" 
  "1000146" -> "1000144" 
  "1000147" -> "1000146" 
  "1000150" -> "1000158" 
  "1000152" -> "1000150" 
  "1000153" -> "1000154" 
  "1000154" -> "1000152" 
  "1000156" -> "1000162" 
  "1000158" -> "1000156" 
  "1000162" -> "1000166" 
  "1000162" -> "1000172" 
  "1000162" -> "1000182" 
  "1000164" -> "1000172" 
  "1000164" -> "1000182" 
  "1000166" -> "1000164" 
  "1000172" -> "1000175" 
  "1000175" -> "1000265" 
  "1000180" -> "1000187" 
  "1000182" -> "1000180" 
  "1000185" -> "1000192" 
  "1000187" -> "1000185" 
  "1000190" -> "1000197" 
  "1000192" -> "1000190" 
  "1000197" -> "1000203" 
  "1000197" -> "1000216" 
  "1000203" -> "1000210" 
  "1000207" -> "1000212" 
  "1000207" -> "1000221" 
  "1000209" -> "1000207" 
  "1000210" -> "1000209" 
  "1000212" -> "1000298" 
  "1000216" -> "1000221" 
  "1000219" -> "1000227" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000224" -> "1000230" 
  "1000226" -> "1000224" 
  "1000227" -> "1000228" 
  "1000228" -> "1000226" 
  "1000230" -> "1000235" 
  "1000233" -> "1000239" 
  "1000235" -> "1000233" 
  "1000239" -> "1000243" 
  "1000239" -> "1000250" 
  "1000241" -> "1000250" 
  "1000243" -> "1000241" 
  "1000246" -> "1000255" 
  "1000248" -> "1000246" 
  "1000249" -> "1000253" 
  "1000250" -> "1000249" 
  "1000252" -> "1000248" 
  "1000253" -> "1000252" 
  "1000255" -> "1000257" 
  "1000257" -> "1000259" 
  "1000259" -> "1000197" 
  "1000259" -> "1000261" 
  "1000261" -> "1000265" 
  "1000264" -> "1000270" 
  "1000265" -> "1000264" 
  "1000269" -> "1000272" 
  "1000269" -> "1000276" 
  "1000270" -> "1000269" 
  "1000272" -> "1000298" 
  "1000274" -> "1000284" 
  "1000276" -> "1000274" 
  "1000280" -> "1000291" 
  "1000280" -> "1000293" 
  "1000281" -> "1000280" 
  "1000281" -> "1000288" 
  "1000283" -> "1000281" 
  "1000284" -> "1000285" 
  "1000285" -> "1000283" 
  "1000287" -> "1000280" 
  "1000288" -> "1000287" 
  "1000291" -> "1000298" 
  "1000293" -> "1000137" 
  "1000293" -> "1000296" 
  "1000296" -> "1000298" 
  "1000111" -> "1000127" 
  "1000111" -> "1000129" 
}
