digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.assignment,v2 = a1)" ]
"1000120" [label = "(<operator>.assignment,v3 = a2)" ]
"1000124" [label = "(<operator>.logicalNot,!a2)" ]
"1000126" [label = "(RETURN,return a1;,return a1;)" ]
"1000129" [label = "(<operator>.logicalNot,!*a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000132" [label = "(RETURN,return a1;,return a1;)" ]
"1000137" [label = "(<operator>.assignment,result = v2 + 1)" ]
"1000139" [label = "(<operator>.addition,v2 + 1)" ]
"1000142" [label = "(<operator>.assignment,v4 = *v3)" ]
"1000144" [label = "(<operator>.indirection,*v3)" ]
"1000147" [label = "(<operator>.logicalOr,!*v3 || v4 == 46)" ]
"1000148" [label = "(<operator>.logicalNot,!*v3)" ]
"1000149" [label = "(<operator>.indirection,*v3)" ]
"1000151" [label = "(<operator>.equals,v4 == 46)" ]
"1000155" [label = "(<operator>.assignment,v5 = v3)" ]
"1000158" [label = "(<operator>.assignment,v6 = 0)" ]
"1000163" [label = "(<operator>.assignment,v5 = v3)" ]
"1000168" [label = "(<operator>.assignment,*result++ = v4)" ]
"1000169" [label = "(<operator>.indirection,*result++)" ]
"1000170" [label = "(<operator>.postIncrement,result++)" ]
"1000173" [label = "(<operator>.assignment,v6 = (_BYTE)++v5 - (_BYTE)v3)" ]
"1000175" [label = "(<operator>.subtraction,(_BYTE)++v5 - (_BYTE)v3)" ]
"1000176" [label = "(<operator>.cast,(_BYTE)++v5)" ]
"1000177" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000178" [label = "(<operator>.preIncrement,++v5)" ]
"1000180" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000181" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000183" [label = "(<operator>.assignment,v4 = *v5)" ]
"1000185" [label = "(<operator>.indirection,*v5)" ]
"1000187" [label = "(<operator>.logicalAnd,*v5 && v4 != 46)" ]
"1000188" [label = "(<operator>.indirection,*v5)" ]
"1000190" [label = "(<operator>.notEquals,v4 != 46)" ]
"1000193" [label = "(<operator>.assignment,*v2 = v6)" ]
"1000194" [label = "(<operator>.indirection,*v2)" ]
"1000198" [label = "(<operator>.logicalNot,!*v5)" ]
"1000199" [label = "(<operator>.indirection,*v5)" ]
"1000202" [label = "(<operator>.assignment,v3 = v5 + 1)" ]
"1000204" [label = "(<operator>.addition,v5 + 1)" ]
"1000208" [label = "(<operator>.logicalOr,v5 == (char *)-1 || !v5[1])" ]
"1000209" [label = "(<operator>.equals,v5 == (char *)-1)" ]
"1000211" [label = "(<operator>.cast,(char *)-1)" ]
"1000212" [label = "(UNKNOWN,char *,char *)" ]
"1000213" [label = "(<operator>.minus,-1)" ]
"1000215" [label = "(<operator>.logicalNot,!v5[1])" ]
"1000216" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000220" [label = "(<operator>.assignment,v2 = result)" ]
"1000223" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000225" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000117" -> "1000120" 
  "1000120" -> "1000124" 
  "1000124" -> "1000126" 
  "1000124" -> "1000130" 
  "1000126" -> "1000225" 
  "1000129" -> "1000132" 
  "1000129" -> "1000139" 
  "1000129" -> "1000223" 
  "1000130" -> "1000129" 
  "1000132" -> "1000225" 
  "1000137" -> "1000144" 
  "1000139" -> "1000137" 
  "1000142" -> "1000149" 
  "1000144" -> "1000142" 
  "1000147" -> "1000155" 
  "1000147" -> "1000163" 
  "1000148" -> "1000147" 
  "1000148" -> "1000151" 
  "1000149" -> "1000148" 
  "1000151" -> "1000147" 
  "1000155" -> "1000158" 
  "1000158" -> "1000194" 
  "1000163" -> "1000170" 
  "1000168" -> "1000177" 
  "1000169" -> "1000168" 
  "1000170" -> "1000169" 
  "1000173" -> "1000185" 
  "1000175" -> "1000173" 
  "1000176" -> "1000181" 
  "1000177" -> "1000178" 
  "1000178" -> "1000176" 
  "1000180" -> "1000175" 
  "1000181" -> "1000180" 
  "1000183" -> "1000188" 
  "1000185" -> "1000183" 
  "1000187" -> "1000170" 
  "1000187" -> "1000194" 
  "1000188" -> "1000187" 
  "1000188" -> "1000190" 
  "1000190" -> "1000187" 
  "1000193" -> "1000199" 
  "1000194" -> "1000193" 
  "1000198" -> "1000223" 
  "1000198" -> "1000204" 
  "1000199" -> "1000198" 
  "1000202" -> "1000212" 
  "1000204" -> "1000202" 
  "1000208" -> "1000223" 
  "1000208" -> "1000220" 
  "1000209" -> "1000208" 
  "1000209" -> "1000216" 
  "1000211" -> "1000209" 
  "1000212" -> "1000213" 
  "1000213" -> "1000211" 
  "1000215" -> "1000208" 
  "1000216" -> "1000215" 
  "1000220" -> "1000139" 
  "1000220" -> "1000223" 
  "1000223" -> "1000225" 
  "1000107" -> "1000117" 
}
