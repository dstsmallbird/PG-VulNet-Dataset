digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.assignment,v3 = a2)" ]
"1000122" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000124" [label = "(<operator>.indirection,*a2)" ]
"1000130" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000132" [label = "(<operator>.addition,a1 + 1)" ]
"1000139" [label = "(<operator>.greaterThan,(unsigned int)result > a3)" ]
"1000140" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000141" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000145" [label = "(<operator>.assignment,v5 = *v3)" ]
"1000147" [label = "(<operator>.indirection,*v3)" ]
"1000150" [label = "(<operator>.logicalAnd,*v3 != 46 && v5)" ]
"1000151" [label = "(<operator>.notEquals,*v3 != 46)" ]
"1000152" [label = "(<operator>.indirection,*v3)" ]
"1000160" [label = "(<operator>.assignment,v6 = result + 1)" ]
"1000162" [label = "(<operator>.addition,result + 1)" ]
"1000169" [label = "(<operator>.greaterThan,(unsigned int)v6 > a3)" ]
"1000170" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000171" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000174" [label = "(RETURN,return result;,return result;)" ]
"1000176" [label = "(<operator>.preIncrement,++v3)" ]
"1000178" [label = "(<operator>.assignment,*result++ = v5)" ]
"1000179" [label = "(<operator>.indirection,*result++)" ]
"1000180" [label = "(<operator>.postIncrement,result++)" ]
"1000183" [label = "(<operator>.assignment,v5 = *v3)" ]
"1000185" [label = "(<operator>.indirection,*v3)" ]
"1000188" [label = "(<operator>.logicalOr,!*v3 || v5 == 46)" ]
"1000189" [label = "(<operator>.logicalNot,!*v3)" ]
"1000190" [label = "(<operator>.indirection,*v3)" ]
"1000192" [label = "(<operator>.equals,v5 == 46)" ]
"1000196" [label = "(<operator>.assignment,v7 = (_BYTE)v6 + ~(_BYTE)a1)" ]
"1000198" [label = "(<operator>.addition,(_BYTE)v6 + ~(_BYTE)a1)" ]
"1000199" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000200" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000202" [label = "(<operator>.not,~(_BYTE)a1)" ]
"1000203" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000204" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000206" [label = "(<operator>.assignment,result = v6)" ]
"1000209" [label = "(<operator>.assignment,v8 = v3)" ]
"1000213" [label = "(<operator>.assignment,v8 = v3)" ]
"1000216" [label = "(<operator>.assignment,v7 = 0)" ]
"1000220" [label = "(<operator>.assignment,*a1 = v7)" ]
"1000221" [label = "(<operator>.indirection,*a1)" ]
"1000225" [label = "(<operator>.logicalNot,!*v3)" ]
"1000226" [label = "(<operator>.indirection,*v3)" ]
"1000228" [label = "(RETURN,return result;,return result;)" ]
"1000231" [label = "(<operator>.logicalOr,!++v3 || !v8[1])" ]
"1000232" [label = "(<operator>.logicalNot,!++v3)" ]
"1000233" [label = "(<operator>.preIncrement,++v3)" ]
"1000235" [label = "(<operator>.logicalNot,!v8[1])" ]
"1000236" [label = "(<operator>.indirectIndexAccess,v8[1])" ]
"1000239" [label = "(RETURN,return result;,return result;)" ]
"1000241" [label = "(<operator>.assignment,a1 = result)" ]
"1000244" [label = "(RETURN,return a1;,return a1;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000246" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000118" -> "1000122" 
  "1000118" -> "1000124" 
  "1000122" -> "1000132" 
  "1000122" -> "1000244" 
  "1000122" -> "1000244" 
  "1000124" -> "1000122" 
  "1000130" -> "1000141" 
  "1000130" -> "1000147" 
  "1000132" -> "1000130" 
  "1000139" -> "1000244" 
  "1000139" -> "1000147" 
  "1000140" -> "1000139" 
  "1000141" -> "1000140" 
  "1000145" -> "1000152" 
  "1000147" -> "1000145" 
  "1000150" -> "1000162" 
  "1000150" -> "1000213" 
  "1000150" -> "1000213" 
  "1000151" -> "1000150" 
  "1000151" -> "1000150" 
  "1000152" -> "1000151" 
  "1000160" -> "1000171" 
  "1000160" -> "1000176" 
  "1000162" -> "1000160" 
  "1000169" -> "1000174" 
  "1000169" -> "1000176" 
  "1000170" -> "1000169" 
  "1000171" -> "1000170" 
  "1000174" -> "1000246" 
  "1000176" -> "1000180" 
  "1000178" -> "1000185" 
  "1000179" -> "1000178" 
  "1000180" -> "1000179" 
  "1000183" -> "1000190" 
  "1000185" -> "1000183" 
  "1000188" -> "1000162" 
  "1000188" -> "1000213" 
  "1000188" -> "1000200" 
  "1000189" -> "1000188" 
  "1000189" -> "1000192" 
  "1000190" -> "1000189" 
  "1000192" -> "1000188" 
  "1000196" -> "1000206" 
  "1000198" -> "1000196" 
  "1000199" -> "1000204" 
  "1000200" -> "1000199" 
  "1000202" -> "1000198" 
  "1000203" -> "1000202" 
  "1000204" -> "1000203" 
  "1000206" -> "1000209" 
  "1000209" -> "1000221" 
  "1000213" -> "1000216" 
  "1000216" -> "1000221" 
  "1000220" -> "1000226" 
  "1000221" -> "1000220" 
  "1000225" -> "1000228" 
  "1000225" -> "1000233" 
  "1000226" -> "1000225" 
  "1000228" -> "1000246" 
  "1000231" -> "1000239" 
  "1000231" -> "1000241" 
  "1000232" -> "1000231" 
  "1000232" -> "1000236" 
  "1000233" -> "1000232" 
  "1000235" -> "1000231" 
  "1000236" -> "1000235" 
  "1000239" -> "1000246" 
  "1000241" -> "1000132" 
  "1000241" -> "1000244" 
  "1000244" -> "1000246" 
  "1000107" -> "1000118" 
}
