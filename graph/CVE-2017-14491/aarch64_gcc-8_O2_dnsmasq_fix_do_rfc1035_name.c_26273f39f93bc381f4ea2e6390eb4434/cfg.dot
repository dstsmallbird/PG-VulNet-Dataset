digraph do_rfc1035_name {  
"1000121" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000123" [label = "(<operator>.indirection,*a2)" ]
"1000129" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000131" [label = "(<operator>.addition,a1 + 1)" ]
"1000138" [label = "(<operator>.greaterThan,(unsigned __int64)result > a3)" ]
"1000139" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000140" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000144" [label = "(<operator>.assignment,v5 = (unsigned __int8)*a2)" ]
"1000146" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000147" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000148" [label = "(<operator>.indirection,*a2)" ]
"1000151" [label = "(<operator>.equals,v5 == 46)" ]
"1000154" [label = "(<operator>.assignment,v6 = 1)" ]
"1000158" [label = "(<operator>.assignment,v6 = v5 == 0)" ]
"1000160" [label = "(<operator>.equals,v5 == 0)" ]
"1000164" [label = "(<operator>.logicalNot,!v6)" ]
"1000167" [label = "(<operator>.assignment,v7 = a2 + 1)" ]
"1000169" [label = "(<operator>.addition,a2 + 1)" ]
"1000175" [label = "(<operator>.assignment,v8 = v7)" ]
"1000182" [label = "(<operator>.greaterThan,(unsigned __int64)(result + 1) > a3)" ]
"1000183" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000184" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000185" [label = "(<operator>.addition,result + 1)" ]
"1000189" [label = "(RETURN,return result;,return result;)" ]
"1000191" [label = "(<operator>.assignment,*result++ = v5)" ]
"1000192" [label = "(<operator>.indirection,*result++)" ]
"1000193" [label = "(<operator>.postIncrement,result++)" ]
"1000196" [label = "(<operator>.assignment,v9 = (_BYTE)v7 - (_BYTE)a2)" ]
"1000198" [label = "(<operator>.subtraction,(_BYTE)v7 - (_BYTE)a2)" ]
"1000199" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000200" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000202" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000203" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000205" [label = "(<operator>.assignment,v5 = *v7++)" ]
"1000207" [label = "(<operator>.indirection,*v7++)" ]
"1000208" [label = "(<operator>.postIncrement,v7++)" ]
"1000211" [label = "(<operator>.equals,v5 == 46)" ]
"1000214" [label = "(<operator>.assignment,v10 = 1)" ]
"1000218" [label = "(<operator>.assignment,v10 = v5 == 0)" ]
"1000220" [label = "(<operator>.equals,v5 == 0)" ]
"1000226" [label = "(<operator>.assignment,v8 = a2)" ]
"1000229" [label = "(<operator>.assignment,v9 = 0)" ]
"1000233" [label = "(<operator>.assignment,*a1 = v9)" ]
"1000234" [label = "(<operator>.indirection,*a1)" ]
"1000238" [label = "(<operator>.logicalNot,!*v8)" ]
"1000239" [label = "(<operator>.indirection,*v8)" ]
"1000241" [label = "(RETURN,return result;,return result;)" ]
"1000243" [label = "(<operator>.assignment,a2 = v8 + 1)" ]
"1000245" [label = "(<operator>.addition,v8 + 1)" ]
"1000248" [label = "(RETURN,return result;,return result;)" ]
"1000250" [label = "(<operator>.assignment,a1 = result)" ]
"1000253" [label = "(RETURN,return a1;,return a1;)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000255" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000131" 
  "1000121" -> "1000253" 
  "1000121" -> "1000253" 
  "1000123" -> "1000121" 
  "1000129" -> "1000140" 
  "1000129" -> "1000147" 
  "1000131" -> "1000129" 
  "1000138" -> "1000253" 
  "1000138" -> "1000147" 
  "1000139" -> "1000138" 
  "1000140" -> "1000139" 
  "1000144" -> "1000151" 
  "1000146" -> "1000144" 
  "1000147" -> "1000148" 
  "1000148" -> "1000146" 
  "1000151" -> "1000154" 
  "1000151" -> "1000160" 
  "1000154" -> "1000164" 
  "1000158" -> "1000164" 
  "1000160" -> "1000158" 
  "1000164" -> "1000169" 
  "1000164" -> "1000226" 
  "1000167" -> "1000175" 
  "1000167" -> "1000226" 
  "1000169" -> "1000167" 
  "1000175" -> "1000184" 
  "1000175" -> "1000193" 
  "1000182" -> "1000189" 
  "1000182" -> "1000193" 
  "1000183" -> "1000182" 
  "1000184" -> "1000185" 
  "1000185" -> "1000183" 
  "1000189" -> "1000255" 
  "1000191" -> "1000200" 
  "1000192" -> "1000191" 
  "1000193" -> "1000192" 
  "1000196" -> "1000208" 
  "1000198" -> "1000196" 
  "1000199" -> "1000203" 
  "1000200" -> "1000199" 
  "1000202" -> "1000198" 
  "1000203" -> "1000202" 
  "1000205" -> "1000211" 
  "1000207" -> "1000205" 
  "1000208" -> "1000207" 
  "1000211" -> "1000214" 
  "1000211" -> "1000220" 
  "1000214" -> "1000175" 
  "1000214" -> "1000226" 
  "1000214" -> "1000234" 
  "1000218" -> "1000175" 
  "1000218" -> "1000226" 
  "1000218" -> "1000234" 
  "1000220" -> "1000218" 
  "1000226" -> "1000229" 
  "1000229" -> "1000234" 
  "1000233" -> "1000239" 
  "1000234" -> "1000233" 
  "1000238" -> "1000241" 
  "1000238" -> "1000245" 
  "1000239" -> "1000238" 
  "1000241" -> "1000255" 
  "1000243" -> "1000248" 
  "1000245" -> "1000243" 
  "1000248" -> "1000255" 
  "1000250" -> "1000131" 
  "1000250" -> "1000253" 
  "1000253" -> "1000255" 
  "1000108" -> "1000121" 
  "1000108" -> "1000123" 
}
