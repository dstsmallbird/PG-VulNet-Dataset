digraph do_rfc1035_name {  
"1000126" [label = "(<operator>.assignment,v3 = a2)" ]
"1000129" [label = "(<operator>.assignment,v4 = a1)" ]
"1000133" [label = "(<operator>.logicalNot,!a2)" ]
"1000135" [label = "(RETURN,return a1;,return a1;)" ]
"1000143" [label = "(<operator>.assignment,v5 = *v3)" ]
"1000145" [label = "(<operator>.indirection,*v3)" ]
"1000147" [label = "(<operator>.assignment,result = v4)" ]
"1000151" [label = "(<operator>.logicalOr,!*v3 || (unsigned int)(v4 + 1) > a3)" ]
"1000152" [label = "(<operator>.logicalNot,!*v3)" ]
"1000153" [label = "(<operator>.indirection,*v3)" ]
"1000155" [label = "(<operator>.greaterThan,(unsigned int)(v4 + 1) > a3)" ]
"1000156" [label = "(<operator>.cast,(unsigned int)(v4 + 1))" ]
"1000157" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000158" [label = "(<operator>.addition,v4 + 1)" ]
"1000163" [label = "(<operator>.assignment,v7 = 0)" ]
"1000170" [label = "(<operator>.notEquals,v5 != 46)" ]
"1000175" [label = "(<operator>.greaterThan,(unsigned int)&v4[v7 + 2] > a3)" ]
"1000176" [label = "(<operator>.cast,(unsigned int)&v4[v7 + 2])" ]
"1000177" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000178" [label = "(<operator>.addressOf,&v4[v7 + 2])" ]
"1000179" [label = "(<operator>.indirectIndexAccess,v4[v7 + 2])" ]
"1000181" [label = "(<operator>.addition,v7 + 2)" ]
"1000186" [label = "(<operator>.assignment,v4[v7 + 1] = v5)" ]
"1000187" [label = "(<operator>.indirectIndexAccess,v4[v7 + 1])" ]
"1000189" [label = "(<operator>.addition,v7 + 1)" ]
"1000193" [label = "(<operator>.assignment,v5 = v3[++v7])" ]
"1000195" [label = "(<operator>.indirectIndexAccess,v3[++v7])" ]
"1000197" [label = "(<operator>.preIncrement,++v7)" ]
"1000200" [label = "(<operator>.logicalNot,!v5)" ]
"1000203" [label = "(<operator>.assignment,*v4 = v7)" ]
"1000204" [label = "(<operator>.indirection,*v4)" ]
"1000207" [label = "(<operator>.assignment,v8 = &v3[v7])" ]
"1000209" [label = "(<operator>.addressOf,&v3[v7])" ]
"1000210" [label = "(<operator>.indirectIndexAccess,v3[v7])" ]
"1000213" [label = "(<operator>.assignmentPlus,v4 += v7 + 1)" ]
"1000215" [label = "(<operator>.addition,v7 + 1)" ]
"1000218" [label = "(<operator>.assignment,v9 = v3[v7] == 0)" ]
"1000220" [label = "(<operator>.equals,v3[v7] == 0)" ]
"1000221" [label = "(<operator>.indirectIndexAccess,v3[v7])" ]
"1000225" [label = "(<operator>.assignmentPlus,v3 += v7 + 1)" ]
"1000227" [label = "(<operator>.addition,v7 + 1)" ]
"1000232" [label = "(<operator>.assignment,v3 = v8)" ]
"1000236" [label = "(<operator>.logicalNot,!v3)" ]
"1000240" [label = "(<operator>.assignmentPlus,result += v7 + 1)" ]
"1000242" [label = "(<operator>.addition,v7 + 1)" ]
"1000245" [label = "(RETURN,return result;,return result;)" ]
"1000252" [label = "(<operator>.assignment,v10 = *v3)" ]
"1000254" [label = "(<operator>.indirection,*v3)" ]
"1000257" [label = "(<operator>.logicalNot,!*v3)" ]
"1000258" [label = "(<operator>.indirection,*v3)" ]
"1000261" [label = "(<operator>.assignment,result = v4 + 1)" ]
"1000263" [label = "(<operator>.addition,v4 + 1)" ]
"1000266" [label = "(<operator>.assignment,v11 = 0)" ]
"1000270" [label = "(<operator>.assignment,i = v3 + 1)" ]
"1000272" [label = "(<operator>.addition,v3 + 1)" ]
"1000276" [label = "(<operator>.assignment,v10 = *i++)" ]
"1000278" [label = "(<operator>.indirection,*i++)" ]
"1000279" [label = "(<operator>.postIncrement,i++)" ]
"1000283" [label = "(<operator>.equals,v10 == 46)" ]
"1000287" [label = "(<operator>.assignment,*result++ = v10)" ]
"1000288" [label = "(<operator>.indirection,*result++)" ]
"1000289" [label = "(<operator>.postIncrement,result++)" ]
"1000292" [label = "(<operator>.preIncrement,++v11)" ]
"1000294" [label = "(<operator>.assignment,*v4 = v11)" ]
"1000295" [label = "(<operator>.indirection,*v4)" ]
"1000298" [label = "(<operator>.assignment,v3 = i - 1)" ]
"1000300" [label = "(<operator>.subtraction,i - 1)" ]
"1000303" [label = "(<operator>.assignment,v4 = result)" ]
"1000307" [label = "(<operator>.indirection,*(i - 1))" ]
"1000308" [label = "(<operator>.subtraction,i - 1)" ]
"1000311" [label = "(<operator>.assignment,v3 = i)" ]
"1000315" [label = "(<operator>.logicalNot,!v3)" ]
"1000317" [label = "(RETURN,return result;,return result;)" ]
"1000319" [label = "(<operator>.assignment,result = v4)" ]
"1000322" [label = "(RETURN,return result;,return result;)" ]
"1000111" [label = "(METHOD,do_rfc1035_name)" ]
"1000324" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000126" -> "1000129" 
  "1000129" -> "1000133" 
  "1000133" -> "1000135" 
  "1000133" -> "1000145" 
  "1000133" -> "1000322" 
  "1000133" -> "1000254" 
  "1000133" -> "1000319" 
  "1000135" -> "1000324" 
  "1000143" -> "1000147" 
  "1000145" -> "1000143" 
  "1000147" -> "1000153" 
  "1000151" -> "1000322" 
  "1000151" -> "1000163" 
  "1000152" -> "1000157" 
  "1000152" -> "1000151" 
  "1000153" -> "1000152" 
  "1000155" -> "1000151" 
  "1000156" -> "1000155" 
  "1000157" -> "1000158" 
  "1000158" -> "1000156" 
  "1000163" -> "1000170" 
  "1000163" -> "1000204" 
  "1000170" -> "1000177" 
  "1000170" -> "1000204" 
  "1000175" -> "1000242" 
  "1000175" -> "1000189" 
  "1000176" -> "1000175" 
  "1000177" -> "1000181" 
  "1000178" -> "1000176" 
  "1000179" -> "1000178" 
  "1000181" -> "1000179" 
  "1000186" -> "1000197" 
  "1000187" -> "1000186" 
  "1000189" -> "1000187" 
  "1000193" -> "1000200" 
  "1000195" -> "1000193" 
  "1000197" -> "1000195" 
  "1000200" -> "1000170" 
  "1000200" -> "1000204" 
  "1000200" -> "1000322" 
  "1000203" -> "1000210" 
  "1000204" -> "1000203" 
  "1000207" -> "1000215" 
  "1000209" -> "1000207" 
  "1000210" -> "1000209" 
  "1000213" -> "1000221" 
  "1000215" -> "1000213" 
  "1000218" -> "1000227" 
  "1000220" -> "1000218" 
  "1000221" -> "1000220" 
  "1000225" -> "1000232" 
  "1000225" -> "1000236" 
  "1000227" -> "1000225" 
  "1000232" -> "1000236" 
  "1000236" -> "1000145" 
  "1000236" -> "1000322" 
  "1000236" -> "1000242" 
  "1000240" -> "1000245" 
  "1000242" -> "1000240" 
  "1000245" -> "1000324" 
  "1000252" -> "1000258" 
  "1000254" -> "1000252" 
  "1000257" -> "1000319" 
  "1000257" -> "1000263" 
  "1000258" -> "1000257" 
  "1000261" -> "1000266" 
  "1000263" -> "1000261" 
  "1000266" -> "1000272" 
  "1000270" -> "1000283" 
  "1000270" -> "1000283" 
  "1000270" -> "1000295" 
  "1000272" -> "1000270" 
  "1000276" -> "1000283" 
  "1000276" -> "1000283" 
  "1000276" -> "1000295" 
  "1000278" -> "1000276" 
  "1000279" -> "1000278" 
  "1000283" -> "1000295" 
  "1000283" -> "1000319" 
  "1000283" -> "1000289" 
  "1000287" -> "1000292" 
  "1000288" -> "1000287" 
  "1000289" -> "1000288" 
  "1000292" -> "1000279" 
  "1000294" -> "1000300" 
  "1000295" -> "1000294" 
  "1000298" -> "1000303" 
  "1000300" -> "1000298" 
  "1000303" -> "1000308" 
  "1000307" -> "1000311" 
  "1000307" -> "1000315" 
  "1000308" -> "1000307" 
  "1000311" -> "1000315" 
  "1000315" -> "1000254" 
  "1000315" -> "1000319" 
  "1000315" -> "1000317" 
  "1000317" -> "1000324" 
  "1000319" -> "1000322" 
  "1000322" -> "1000324" 
  "1000111" -> "1000126" 
}
