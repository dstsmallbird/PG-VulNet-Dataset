digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.assignment,v3 = a1)" ]
"1000121" [label = "(<operator>.assignment,v4 = a2)" ]
"1000125" [label = "(<operator>.logicalNot,!a2)" ]
"1000127" [label = "(RETURN,return a1;,return a1;)" ]
"1000130" [label = "(<operator>.logicalNot,!*a2)" ]
"1000131" [label = "(<operator>.indirection,*a2)" ]
"1000133" [label = "(RETURN,return a1;,return a1;)" ]
"1000139" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)(v3 + 1))" ]
"1000141" [label = "(<operator>.lessThan,a3 < (unsigned int)(v3 + 1))" ]
"1000143" [label = "(<operator>.cast,(unsigned int)(v3 + 1))" ]
"1000144" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000145" [label = "(<operator>.addition,v3 + 1)" ]
"1000148" [label = "(RETURN,return v3;,return v3;)" ]
"1000150" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000152" [label = "(<operator>.addition,v3 + 1)" ]
"1000155" [label = "(<operator>.assignment,v7 = *v4)" ]
"1000157" [label = "(<operator>.indirection,*v4)" ]
"1000160" [label = "(<operator>.indirection,*v4)" ]
"1000164" [label = "(<operator>.notEquals,v7 != 46)" ]
"1000168" [label = "(<operator>.assignment,v8 = v4)" ]
"1000171" [label = "(<operator>.assignment,v6 = 0)" ]
"1000175" [label = "(<operator>.assignment,*v3 = v6)" ]
"1000176" [label = "(<operator>.indirection,*v3)" ]
"1000180" [label = "(<operator>.logicalNot,!*v8)" ]
"1000181" [label = "(<operator>.indirection,*v8)" ]
"1000183" [label = "(RETURN,return result;,return result;)" ]
"1000185" [label = "(<operator>.assignment,v4 = v8 + 1)" ]
"1000187" [label = "(<operator>.addition,v8 + 1)" ]
"1000191" [label = "(<operator>.logicalOr,v8 == (_BYTE *)-1 || !v8[1])" ]
"1000192" [label = "(<operator>.equals,v8 == (_BYTE *)-1)" ]
"1000194" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000195" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000196" [label = "(<operator>.minus,-1)" ]
"1000198" [label = "(<operator>.logicalNot,!v8[1])" ]
"1000199" [label = "(<operator>.indirectIndexAccess,v8[1])" ]
"1000202" [label = "(RETURN,return result;,return result;)" ]
"1000204" [label = "(<operator>.assignment,v3 = result)" ]
"1000208" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(result + 1))" ]
"1000209" [label = "(<operator>.logicalNot,!a3)" ]
"1000211" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(result + 1))" ]
"1000213" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000214" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000215" [label = "(<operator>.addition,result + 1)" ]
"1000219" [label = "(<operator>.assignment,*result++ = v7)" ]
"1000220" [label = "(<operator>.indirection,*result++)" ]
"1000221" [label = "(<operator>.postIncrement,result++)" ]
"1000224" [label = "(<operator>.preIncrement,++v4)" ]
"1000226" [label = "(<operator>.assignment,v6 = (_BYTE)result + ~(_BYTE)v3)" ]
"1000228" [label = "(<operator>.addition,(_BYTE)result + ~(_BYTE)v3)" ]
"1000229" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000230" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000232" [label = "(<operator>.not,~(_BYTE)v3)" ]
"1000233" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000234" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000236" [label = "(<operator>.assignment,v7 = *v4)" ]
"1000238" [label = "(<operator>.indirection,*v4)" ]
"1000241" [label = "(<operator>.logicalOr,!*v4 || v7 == 46)" ]
"1000242" [label = "(<operator>.logicalNot,!*v4)" ]
"1000243" [label = "(<operator>.indirection,*v4)" ]
"1000245" [label = "(<operator>.equals,v7 == 46)" ]
"1000249" [label = "(<operator>.assignment,v8 = v4)" ]
"1000253" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000255" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000118" -> "1000121" 
  "1000121" -> "1000125" 
  "1000125" -> "1000127" 
  "1000125" -> "1000131" 
  "1000127" -> "1000255" 
  "1000130" -> "1000133" 
  "1000130" -> "1000139" 
  "1000130" -> "1000144" 
  "1000130" -> "1000209" 
  "1000131" -> "1000130" 
  "1000133" -> "1000255" 
  "1000139" -> "1000148" 
  "1000139" -> "1000152" 
  "1000141" -> "1000139" 
  "1000143" -> "1000141" 
  "1000144" -> "1000145" 
  "1000145" -> "1000143" 
  "1000148" -> "1000255" 
  "1000150" -> "1000157" 
  "1000152" -> "1000150" 
  "1000155" -> "1000160" 
  "1000157" -> "1000155" 
  "1000160" -> "1000164" 
  "1000160" -> "1000168" 
  "1000164" -> "1000209" 
  "1000164" -> "1000168" 
  "1000168" -> "1000171" 
  "1000171" -> "1000176" 
  "1000175" -> "1000181" 
  "1000176" -> "1000175" 
  "1000180" -> "1000183" 
  "1000180" -> "1000187" 
  "1000181" -> "1000180" 
  "1000183" -> "1000255" 
  "1000185" -> "1000195" 
  "1000187" -> "1000185" 
  "1000191" -> "1000202" 
  "1000191" -> "1000204" 
  "1000192" -> "1000191" 
  "1000192" -> "1000199" 
  "1000194" -> "1000192" 
  "1000195" -> "1000196" 
  "1000196" -> "1000194" 
  "1000198" -> "1000191" 
  "1000199" -> "1000198" 
  "1000202" -> "1000255" 
  "1000204" -> "1000139" 
  "1000204" -> "1000144" 
  "1000204" -> "1000209" 
  "1000208" -> "1000221" 
  "1000208" -> "1000253" 
  "1000209" -> "1000208" 
  "1000209" -> "1000214" 
  "1000211" -> "1000208" 
  "1000213" -> "1000211" 
  "1000214" -> "1000215" 
  "1000215" -> "1000213" 
  "1000219" -> "1000224" 
  "1000220" -> "1000219" 
  "1000221" -> "1000220" 
  "1000224" -> "1000230" 
  "1000226" -> "1000238" 
  "1000228" -> "1000226" 
  "1000229" -> "1000234" 
  "1000230" -> "1000229" 
  "1000232" -> "1000228" 
  "1000233" -> "1000232" 
  "1000234" -> "1000233" 
  "1000236" -> "1000243" 
  "1000238" -> "1000236" 
  "1000241" -> "1000209" 
  "1000241" -> "1000249" 
  "1000242" -> "1000241" 
  "1000242" -> "1000245" 
  "1000243" -> "1000242" 
  "1000245" -> "1000241" 
  "1000249" -> "1000176" 
  "1000253" -> "1000255" 
  "1000107" -> "1000118" 
}
