digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.assignment,v2 = (char)a2)" ]
"1000119" [label = "(<operator>.cast,(char)a2)" ]
"1000120" [label = "(UNKNOWN,char,char)" ]
"1000122" [label = "(<operator>.assignment,v3 = a1)" ]
"1000126" [label = "(<operator>.logicalNot,!a2)" ]
"1000128" [label = "(RETURN,return a1;,return a1;)" ]
"1000130" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000132" [label = "(<operator>.indirection,*a2)" ]
"1000135" [label = "(<operator>.logicalNot,!*a2)" ]
"1000136" [label = "(<operator>.indirection,*a2)" ]
"1000138" [label = "(RETURN,return a1;,return a1;)" ]
"1000140" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000142" [label = "(<operator>.addition,a1 + 1)" ]
"1000145" [label = "(<operator>.assignment,v6 = a2)" ]
"1000149" [label = "(<operator>.notEquals,v4 != 46)" ]
"1000154" [label = "(<operator>.assignment,v7 = 0)" ]
"1000160" [label = "(<operator>.assignment,*v3 = v7)" ]
"1000161" [label = "(<operator>.indirection,*v3)" ]
"1000165" [label = "(<operator>.logicalNot,!*v6)" ]
"1000166" [label = "(<operator>.indirection,*v6)" ]
"1000168" [label = "(RETURN,return result;,return result;)" ]
"1000170" [label = "(<operator>.assignment,v2 = (_BYTE)v6 + 1)" ]
"1000172" [label = "(<operator>.addition,(_BYTE)v6 + 1)" ]
"1000173" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000174" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000178" [label = "(<operator>.equals,v6 == (char *)-1)" ]
"1000180" [label = "(<operator>.cast,(char *)-1)" ]
"1000181" [label = "(UNKNOWN,char *,char *)" ]
"1000182" [label = "(<operator>.minus,-1)" ]
"1000184" [label = "(RETURN,return result;,return result;)" ]
"1000186" [label = "(<operator>.assignment,v4 = v6[1])" ]
"1000188" [label = "(<operator>.indirectIndexAccess,v6[1])" ]
"1000192" [label = "(<operator>.logicalNot,!v4)" ]
"1000194" [label = "(RETURN,return result;,return result;)" ]
"1000196" [label = "(<operator>.assignment,v3 = result)" ]
"1000199" [label = "(<operator>.preIncrement,++v6)" ]
"1000201" [label = "(<operator>.preIncrement,++result)" ]
"1000204" [label = "(<operator>.equals,v4 == 46)" ]
"1000211" [label = "(<operator>.preIncrement,++v6)" ]
"1000213" [label = "(<operator>.assignment,*result++ = v4)" ]
"1000214" [label = "(<operator>.indirection,*result++)" ]
"1000215" [label = "(<operator>.postIncrement,result++)" ]
"1000218" [label = "(<operator>.assignment,v4 = *v6)" ]
"1000220" [label = "(<operator>.indirection,*v6)" ]
"1000222" [label = "(<operator>.assignment,v7 = (_BYTE)v6 - v2)" ]
"1000224" [label = "(<operator>.subtraction,(_BYTE)v6 - v2)" ]
"1000225" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000226" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000229" [label = "(<operator>.logicalAnd,*v6 && v4 != 46)" ]
"1000230" [label = "(<operator>.indirection,*v6)" ]
"1000232" [label = "(<operator>.notEquals,v4 != 46)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000235" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000117" -> "1000122" 
  "1000119" -> "1000117" 
  "1000120" -> "1000119" 
  "1000122" -> "1000126" 
  "1000126" -> "1000128" 
  "1000126" -> "1000132" 
  "1000128" -> "1000235" 
  "1000130" -> "1000136" 
  "1000132" -> "1000130" 
  "1000135" -> "1000138" 
  "1000135" -> "1000142" 
  "1000136" -> "1000135" 
  "1000138" -> "1000235" 
  "1000140" -> "1000145" 
  "1000142" -> "1000140" 
  "1000145" -> "1000149" 
  "1000149" -> "1000211" 
  "1000149" -> "1000154" 
  "1000154" -> "1000235" 
  "1000154" -> "1000161" 
  "1000160" -> "1000166" 
  "1000161" -> "1000160" 
  "1000165" -> "1000168" 
  "1000165" -> "1000174" 
  "1000166" -> "1000165" 
  "1000168" -> "1000235" 
  "1000170" -> "1000181" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000174" -> "1000173" 
  "1000178" -> "1000184" 
  "1000178" -> "1000188" 
  "1000180" -> "1000178" 
  "1000181" -> "1000182" 
  "1000182" -> "1000180" 
  "1000184" -> "1000235" 
  "1000186" -> "1000192" 
  "1000188" -> "1000186" 
  "1000192" -> "1000194" 
  "1000192" -> "1000196" 
  "1000194" -> "1000235" 
  "1000196" -> "1000199" 
  "1000199" -> "1000201" 
  "1000201" -> "1000204" 
  "1000204" -> "1000154" 
  "1000204" -> "1000211" 
  "1000211" -> "1000215" 
  "1000213" -> "1000220" 
  "1000214" -> "1000213" 
  "1000215" -> "1000214" 
  "1000218" -> "1000226" 
  "1000220" -> "1000218" 
  "1000222" -> "1000230" 
  "1000224" -> "1000222" 
  "1000225" -> "1000224" 
  "1000226" -> "1000225" 
  "1000229" -> "1000235" 
  "1000229" -> "1000161" 
  "1000229" -> "1000211" 
  "1000230" -> "1000229" 
  "1000230" -> "1000232" 
  "1000232" -> "1000229" 
  "1000107" -> "1000120" 
}
