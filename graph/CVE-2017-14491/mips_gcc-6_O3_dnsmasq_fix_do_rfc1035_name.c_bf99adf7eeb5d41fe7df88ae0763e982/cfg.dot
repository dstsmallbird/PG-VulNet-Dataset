digraph do_rfc1035_name {  
"1000123" [label = "(<operator>.assignment,v3 = (char)*a2)" ]
"1000125" [label = "(<operator>.cast,(char)*a2)" ]
"1000126" [label = "(UNKNOWN,char,char)" ]
"1000127" [label = "(<operator>.indirection,*a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000136" [label = "(<operator>.assignment,v4 = a1 + 1)" ]
"1000138" [label = "(<operator>.addition,a1 + 1)" ]
"1000145" [label = "(<operator>.lessThan,a3 < (unsigned int)v4)" ]
"1000147" [label = "(<operator>.cast,(unsigned int)v4)" ]
"1000148" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000151" [label = "(<operator>.assignment,v5 = 0)" ]
"1000155" [label = "(<operator>.equals,v3 == 46)" ]
"1000159" [label = "(<operator>.assignment,v9 = a2)" ]
"1000162" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000164" [label = "(<operator>.addition,a1 + 1)" ]
"1000172" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000174" [label = "(<operator>.addition,a1 + 1)" ]
"1000180" [label = "(<operator>.assignment,v7 = result + 1)" ]
"1000182" [label = "(<operator>.addition,result + 1)" ]
"1000185" [label = "(<operator>.preIncrement,++a2)" ]
"1000188" [label = "(<operator>.lessThan,a3 < (unsigned int)(result + 1))" ]
"1000190" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000191" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000192" [label = "(<operator>.addition,result + 1)" ]
"1000195" [label = "(RETURN,return result;,return result;)" ]
"1000197" [label = "(<operator>.assignment,*result = v3)" ]
"1000198" [label = "(<operator>.indirection,*result)" ]
"1000201" [label = "(<operator>.assignment,v5 = (_BYTE)v7 - (_BYTE)v4)" ]
"1000203" [label = "(<operator>.subtraction,(_BYTE)v7 - (_BYTE)v4)" ]
"1000204" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000205" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000207" [label = "(<operator>.cast,(_BYTE)v4)" ]
"1000208" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000210" [label = "(<operator>.assignment,v3 = (char)*a2)" ]
"1000212" [label = "(<operator>.cast,(char)*a2)" ]
"1000213" [label = "(UNKNOWN,char,char)" ]
"1000214" [label = "(<operator>.indirection,*a2)" ]
"1000216" [label = "(<operator>.preIncrement,++result)" ]
"1000219" [label = "(<operator>.logicalOr,!*a2 || v3 == 46)" ]
"1000220" [label = "(<operator>.logicalNot,!*a2)" ]
"1000221" [label = "(<operator>.indirection,*a2)" ]
"1000223" [label = "(<operator>.equals,v3 == 46)" ]
"1000227" [label = "(<operator>.assignment,v8 = a2)" ]
"1000233" [label = "(<operator>.assignment,*v4++ = v3)" ]
"1000234" [label = "(<operator>.indirection,*v4++)" ]
"1000235" [label = "(<operator>.postIncrement,v4++)" ]
"1000238" [label = "(<operator>.assignment,v3 = (char)*++v8)" ]
"1000240" [label = "(<operator>.cast,(char)*++v8)" ]
"1000241" [label = "(UNKNOWN,char,char)" ]
"1000242" [label = "(<operator>.indirection,*++v8)" ]
"1000243" [label = "(<operator>.preIncrement,++v8)" ]
"1000245" [label = "(<operator>.assignment,v5 = (_BYTE)v8 - (_BYTE)a2)" ]
"1000247" [label = "(<operator>.subtraction,(_BYTE)v8 - (_BYTE)a2)" ]
"1000248" [label = "(<operator>.cast,(_BYTE)v8)" ]
"1000249" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000251" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000252" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000255" [label = "(<operator>.logicalNot,!*v8)" ]
"1000256" [label = "(<operator>.indirection,*v8)" ]
"1000259" [label = "(<operator>.assignment,v7 = v4)" ]
"1000263" [label = "(<operator>.equals,v3 == 46)" ]
"1000267" [label = "(<operator>.assignment,v7 = v4)" ]
"1000271" [label = "(<operator>.assignment,a2 = v8)" ]
"1000275" [label = "(<operator>.assignment,v9 = a2)" ]
"1000278" [label = "(<operator>.assignment,result = v7)" ]
"1000281" [label = "(<operator>.assignment,*a1 = v5)" ]
"1000282" [label = "(<operator>.indirection,*a1)" ]
"1000286" [label = "(<operator>.indirection,*a2++)" ]
"1000287" [label = "(<operator>.postIncrement,a2++)" ]
"1000293" [label = "(<operator>.assignment,v3 = (char)v9[1])" ]
"1000295" [label = "(<operator>.cast,(char)v9[1])" ]
"1000296" [label = "(UNKNOWN,char,char)" ]
"1000297" [label = "(<operator>.indirectIndexAccess,v9[1])" ]
"1000300" [label = "(<operator>.assignment,a1 = result)" ]
"1000306" [label = "(RETURN,return result;,return result;)" ]
"1000308" [label = "(RETURN,return a1;,return a1;)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000310" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000123" -> "1000130" 
  "1000125" -> "1000123" 
  "1000126" -> "1000127" 
  "1000127" -> "1000125" 
  "1000130" -> "1000138" 
  "1000130" -> "1000308" 
  "1000130" -> "1000308" 
  "1000136" -> "1000148" 
  "1000136" -> "1000151" 
  "1000138" -> "1000136" 
  "1000145" -> "1000308" 
  "1000145" -> "1000151" 
  "1000147" -> "1000145" 
  "1000148" -> "1000147" 
  "1000151" -> "1000155" 
  "1000155" -> "1000159" 
  "1000155" -> "1000174" 
  "1000155" -> "1000227" 
  "1000159" -> "1000164" 
  "1000162" -> "1000282" 
  "1000164" -> "1000162" 
  "1000172" -> "1000182" 
  "1000172" -> "1000227" 
  "1000174" -> "1000172" 
  "1000180" -> "1000185" 
  "1000182" -> "1000180" 
  "1000185" -> "1000191" 
  "1000188" -> "1000195" 
  "1000188" -> "1000198" 
  "1000190" -> "1000188" 
  "1000191" -> "1000192" 
  "1000192" -> "1000190" 
  "1000195" -> "1000310" 
  "1000197" -> "1000205" 
  "1000198" -> "1000197" 
  "1000201" -> "1000213" 
  "1000203" -> "1000201" 
  "1000204" -> "1000208" 
  "1000205" -> "1000204" 
  "1000207" -> "1000203" 
  "1000208" -> "1000207" 
  "1000210" -> "1000216" 
  "1000212" -> "1000210" 
  "1000213" -> "1000214" 
  "1000214" -> "1000212" 
  "1000216" -> "1000221" 
  "1000219" -> "1000182" 
  "1000219" -> "1000227" 
  "1000219" -> "1000275" 
  "1000220" -> "1000219" 
  "1000220" -> "1000223" 
  "1000221" -> "1000220" 
  "1000223" -> "1000219" 
  "1000227" -> "1000235" 
  "1000227" -> "1000267" 
  "1000233" -> "1000241" 
  "1000234" -> "1000233" 
  "1000235" -> "1000234" 
  "1000238" -> "1000249" 
  "1000240" -> "1000238" 
  "1000241" -> "1000243" 
  "1000242" -> "1000240" 
  "1000243" -> "1000242" 
  "1000245" -> "1000256" 
  "1000247" -> "1000245" 
  "1000248" -> "1000252" 
  "1000249" -> "1000248" 
  "1000251" -> "1000247" 
  "1000252" -> "1000251" 
  "1000255" -> "1000267" 
  "1000255" -> "1000308" 
  "1000255" -> "1000259" 
  "1000256" -> "1000255" 
  "1000259" -> "1000263" 
  "1000263" -> "1000235" 
  "1000263" -> "1000267" 
  "1000263" -> "1000271" 
  "1000267" -> "1000271" 
  "1000271" -> "1000275" 
  "1000275" -> "1000278" 
  "1000278" -> "1000282" 
  "1000281" -> "1000287" 
  "1000282" -> "1000281" 
  "1000286" -> "1000296" 
  "1000286" -> "1000306" 
  "1000286" -> "1000306" 
  "1000287" -> "1000286" 
  "1000293" -> "1000300" 
  "1000295" -> "1000293" 
  "1000296" -> "1000297" 
  "1000297" -> "1000295" 
  "1000300" -> "1000138" 
  "1000300" -> "1000308" 
  "1000300" -> "1000306" 
  "1000306" -> "1000310" 
  "1000308" -> "1000310" 
  "1000108" -> "1000126" 
  "1000108" -> "1000308" 
}
