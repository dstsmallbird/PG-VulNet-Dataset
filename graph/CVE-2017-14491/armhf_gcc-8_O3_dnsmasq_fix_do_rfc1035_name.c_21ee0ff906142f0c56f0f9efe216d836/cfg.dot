digraph do_rfc1035_name {  
"1000129" [label = "(<operator>.logicalNot,!a2)" ]
"1000131" [label = "(RETURN,return a1;,return a1;)" ]
"1000133" [label = "(<operator>.assignment,v4 = (unsigned __int8)*a2)" ]
"1000135" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000136" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000137" [label = "(<operator>.indirection,*a2)" ]
"1000140" [label = "(<operator>.logicalNot,!*a2)" ]
"1000141" [label = "(<operator>.indirection,*a2)" ]
"1000143" [label = "(RETURN,return a1;,return a1;)" ]
"1000148" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000150" [label = "(<operator>.addition,a1 + 1)" ]
"1000157" [label = "(<operator>.equals,v4 == 46)" ]
"1000161" [label = "(<operator>.assignment,v12 = a2 + 1)" ]
"1000163" [label = "(<operator>.addition,a2 + 1)" ]
"1000166" [label = "(<operator>.assignment,v9 = a1 + 1)" ]
"1000168" [label = "(<operator>.addition,a1 + 1)" ]
"1000173" [label = "(<operator>.preIncrement,++v9)" ]
"1000175" [label = "(<operator>.assignment,v10 = v12)" ]
"1000178" [label = "(<operator>.assignment,*(v9 - 1) = v4)" ]
"1000179" [label = "(<operator>.indirection,*(v9 - 1))" ]
"1000180" [label = "(<operator>.subtraction,v9 - 1)" ]
"1000184" [label = "(<operator>.assignment,v11 = (_BYTE)v9 - 1 - (_BYTE)a1)" ]
"1000186" [label = "(<operator>.subtraction,(_BYTE)v9 - 1 - (_BYTE)a1)" ]
"1000187" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000188" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000190" [label = "(<operator>.subtraction,1 - (_BYTE)a1)" ]
"1000192" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000193" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000195" [label = "(<operator>.assignment,v13 = *v12++)" ]
"1000197" [label = "(<operator>.indirection,*v12++)" ]
"1000198" [label = "(<operator>.postIncrement,v12++)" ]
"1000200" [label = "(<operator>.assignment,v4 = v13)" ]
"1000203" [label = "(<operator>.assignment,v14 = v13 == 46)" ]
"1000205" [label = "(<operator>.equals,v13 == 46)" ]
"1000209" [label = "(<operator>.notEquals,v13 != 46)" ]
"1000212" [label = "(<operator>.assignment,v14 = v4 == 0)" ]
"1000214" [label = "(<operator>.equals,v4 == 0)" ]
"1000217" [label = "(<operator>.logicalNot,!v14)" ]
"1000220" [label = "(<operator>.assignment,result = v9)" ]
"1000224" [label = "(<operator>.assignment,*a1 = v11)" ]
"1000225" [label = "(<operator>.indirection,*a1)" ]
"1000229" [label = "(<operator>.logicalNot,!*v10)" ]
"1000230" [label = "(<operator>.indirection,*v10)" ]
"1000232" [label = "(RETURN,return result;,return result;)" ]
"1000234" [label = "(<operator>.assignment,a2 = v10 + 1)" ]
"1000236" [label = "(<operator>.addition,v10 + 1)" ]
"1000240" [label = "(<operator>.equals,v10 == (_BYTE *)-1)" ]
"1000242" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000243" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000244" [label = "(<operator>.minus,-1)" ]
"1000246" [label = "(RETURN,return result;,return result;)" ]
"1000248" [label = "(<operator>.assignment,v4 = (unsigned __int8)v10[1])" ]
"1000250" [label = "(<operator>.cast,(unsigned __int8)v10[1])" ]
"1000251" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000252" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000256" [label = "(<operator>.logicalNot,!v10[1])" ]
"1000257" [label = "(<operator>.indirectIndexAccess,v10[1])" ]
"1000260" [label = "(RETURN,return result;,return result;)" ]
"1000262" [label = "(<operator>.assignment,a1 = result)" ]
"1000266" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000268" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000269" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000271" [label = "(RETURN,return a1;,return a1;)" ]
"1000274" [label = "(<operator>.equals,v4 == 46)" ]
"1000279" [label = "(<operator>.assignment,v10 = a2)" ]
"1000282" [label = "(<operator>.assignment,v11 = 0)" ]
"1000286" [label = "(<operator>.assignment,v6 = a2 + 1)" ]
"1000288" [label = "(<operator>.addition,a2 + 1)" ]
"1000294" [label = "(<operator>.assignment,v9 = result + 1)" ]
"1000296" [label = "(<operator>.addition,result + 1)" ]
"1000299" [label = "(<operator>.assignment,v10 = v6)" ]
"1000302" [label = "(<operator>.assignment,v11 = (_BYTE)result + 1 + ~(_BYTE)a1)" ]
"1000304" [label = "(<operator>.addition,(_BYTE)result + 1 + ~(_BYTE)a1)" ]
"1000305" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000306" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000308" [label = "(<operator>.addition,1 + ~(_BYTE)a1)" ]
"1000310" [label = "(<operator>.not,~(_BYTE)a1)" ]
"1000311" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000312" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000315" [label = "(<operator>.greaterThan,(unsigned int)(result + 1) > a3)" ]
"1000316" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000317" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000318" [label = "(<operator>.addition,result + 1)" ]
"1000322" [label = "(RETURN,return result;,return result;)" ]
"1000324" [label = "(<operator>.assignment,*result++ = v4)" ]
"1000325" [label = "(<operator>.indirection,*result++)" ]
"1000326" [label = "(<operator>.postIncrement,result++)" ]
"1000329" [label = "(<operator>.assignment,v7 = *v6++)" ]
"1000331" [label = "(<operator>.indirection,*v6++)" ]
"1000332" [label = "(<operator>.postIncrement,v6++)" ]
"1000334" [label = "(<operator>.assignment,v4 = v7)" ]
"1000337" [label = "(<operator>.assignment,v8 = v7 == 0)" ]
"1000339" [label = "(<operator>.equals,v7 == 0)" ]
"1000344" [label = "(<operator>.assignment,v8 = v4 == 46)" ]
"1000346" [label = "(<operator>.equals,v4 == 46)" ]
"1000112" [label = "(METHOD,do_rfc1035_name)" ]
"1000352" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000129" -> "1000131" 
  "1000129" -> "1000136" 
  "1000131" -> "1000352" 
  "1000133" -> "1000141" 
  "1000135" -> "1000133" 
  "1000136" -> "1000137" 
  "1000137" -> "1000135" 
  "1000140" -> "1000143" 
  "1000140" -> "1000150" 
  "1000140" -> "1000269" 
  "1000141" -> "1000140" 
  "1000143" -> "1000352" 
  "1000148" -> "1000269" 
  "1000148" -> "1000157" 
  "1000150" -> "1000148" 
  "1000157" -> "1000279" 
  "1000157" -> "1000163" 
  "1000161" -> "1000168" 
  "1000163" -> "1000161" 
  "1000166" -> "1000173" 
  "1000168" -> "1000166" 
  "1000173" -> "1000175" 
  "1000175" -> "1000180" 
  "1000178" -> "1000188" 
  "1000179" -> "1000178" 
  "1000180" -> "1000179" 
  "1000184" -> "1000198" 
  "1000186" -> "1000184" 
  "1000187" -> "1000193" 
  "1000188" -> "1000187" 
  "1000190" -> "1000186" 
  "1000192" -> "1000190" 
  "1000193" -> "1000192" 
  "1000195" -> "1000200" 
  "1000197" -> "1000195" 
  "1000198" -> "1000197" 
  "1000200" -> "1000205" 
  "1000203" -> "1000209" 
  "1000205" -> "1000203" 
  "1000209" -> "1000217" 
  "1000209" -> "1000214" 
  "1000212" -> "1000217" 
  "1000214" -> "1000212" 
  "1000217" -> "1000173" 
  "1000217" -> "1000220" 
  "1000220" -> "1000225" 
  "1000224" -> "1000230" 
  "1000225" -> "1000224" 
  "1000229" -> "1000232" 
  "1000229" -> "1000236" 
  "1000230" -> "1000229" 
  "1000232" -> "1000352" 
  "1000234" -> "1000243" 
  "1000236" -> "1000234" 
  "1000240" -> "1000246" 
  "1000240" -> "1000251" 
  "1000242" -> "1000240" 
  "1000243" -> "1000244" 
  "1000244" -> "1000242" 
  "1000246" -> "1000352" 
  "1000248" -> "1000257" 
  "1000250" -> "1000248" 
  "1000251" -> "1000252" 
  "1000252" -> "1000250" 
  "1000256" -> "1000260" 
  "1000256" -> "1000262" 
  "1000257" -> "1000256" 
  "1000260" -> "1000352" 
  "1000262" -> "1000150" 
  "1000262" -> "1000269" 
  "1000266" -> "1000271" 
  "1000266" -> "1000274" 
  "1000268" -> "1000266" 
  "1000269" -> "1000268" 
  "1000271" -> "1000352" 
  "1000274" -> "1000279" 
  "1000274" -> "1000288" 
  "1000279" -> "1000282" 
  "1000282" -> "1000225" 
  "1000286" -> "1000352" 
  "1000286" -> "1000296" 
  "1000288" -> "1000286" 
  "1000294" -> "1000299" 
  "1000296" -> "1000294" 
  "1000299" -> "1000306" 
  "1000302" -> "1000317" 
  "1000304" -> "1000302" 
  "1000305" -> "1000312" 
  "1000306" -> "1000305" 
  "1000308" -> "1000304" 
  "1000310" -> "1000308" 
  "1000311" -> "1000310" 
  "1000312" -> "1000311" 
  "1000315" -> "1000322" 
  "1000315" -> "1000326" 
  "1000316" -> "1000315" 
  "1000317" -> "1000318" 
  "1000318" -> "1000316" 
  "1000322" -> "1000352" 
  "1000324" -> "1000332" 
  "1000325" -> "1000324" 
  "1000326" -> "1000325" 
  "1000329" -> "1000334" 
  "1000331" -> "1000329" 
  "1000332" -> "1000331" 
  "1000334" -> "1000339" 
  "1000337" -> "1000346" 
  "1000337" -> "1000352" 
  "1000337" -> "1000296" 
  "1000337" -> "1000220" 
  "1000339" -> "1000337" 
  "1000344" -> "1000352" 
  "1000344" -> "1000296" 
  "1000344" -> "1000220" 
  "1000346" -> "1000344" 
  "1000112" -> "1000129" 
}
