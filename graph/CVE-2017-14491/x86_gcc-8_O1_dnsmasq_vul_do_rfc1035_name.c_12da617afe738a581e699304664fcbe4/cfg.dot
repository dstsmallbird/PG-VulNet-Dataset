digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.assignment,v2 = a1)" ]
"1000120" [label = "(<operator>.assignment,v3 = a2)" ]
"1000124" [label = "(<operator>.logicalNot,!a2)" ]
"1000126" [label = "(RETURN,return a1;,return a1;)" ]
"1000129" [label = "(<operator>.logicalNot,!*a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000132" [label = "(RETURN,return a1;,return a1;)" ]
"1000137" [label = "(<operator>.assignment,result = v2 + 1)" ]
"1000139" [label = "(<operator>.addition,v2 + 1)" ]
"1000142" [label = "(<operator>.assignment,v7 = *v3)" ]
"1000144" [label = "(<operator>.indirection,*v3)" ]
"1000147" [label = "(<operator>.logicalOr,!*v3 || v7 == 46)" ]
"1000148" [label = "(<operator>.logicalNot,!*v3)" ]
"1000149" [label = "(<operator>.indirection,*v3)" ]
"1000151" [label = "(<operator>.equals,v7 == 46)" ]
"1000155" [label = "(<operator>.assignment,v4 = v3)" ]
"1000158" [label = "(<operator>.assignment,v5 = 0)" ]
"1000165" [label = "(<operator>.assignment,*result++ = v7)" ]
"1000166" [label = "(<operator>.indirection,*result++)" ]
"1000167" [label = "(<operator>.postIncrement,result++)" ]
"1000170" [label = "(<operator>.preIncrement,++v3)" ]
"1000172" [label = "(<operator>.assignment,v5 = (_BYTE)result - 1 - (_BYTE)v2)" ]
"1000174" [label = "(<operator>.subtraction,(_BYTE)result - 1 - (_BYTE)v2)" ]
"1000175" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000176" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000178" [label = "(<operator>.subtraction,1 - (_BYTE)v2)" ]
"1000180" [label = "(<operator>.cast,(_BYTE)v2)" ]
"1000181" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000183" [label = "(<operator>.assignment,v7 = *v3)" ]
"1000185" [label = "(<operator>.indirection,*v3)" ]
"1000187" [label = "(<operator>.logicalAnd,*v3 && v7 != 46)" ]
"1000188" [label = "(<operator>.indirection,*v3)" ]
"1000190" [label = "(<operator>.notEquals,v7 != 46)" ]
"1000193" [label = "(<operator>.assignment,v4 = v3)" ]
"1000196" [label = "(<operator>.assignment,*v2 = v5)" ]
"1000197" [label = "(<operator>.indirection,*v2)" ]
"1000201" [label = "(<operator>.logicalNot,!*v4)" ]
"1000202" [label = "(<operator>.indirection,*v4)" ]
"1000205" [label = "(<operator>.assignment,v3 = v4 + 1)" ]
"1000207" [label = "(<operator>.addition,v4 + 1)" ]
"1000211" [label = "(<operator>.logicalOr,v4 == (_BYTE *)-1 || !v4[1])" ]
"1000212" [label = "(<operator>.equals,v4 == (_BYTE *)-1)" ]
"1000214" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000215" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000216" [label = "(<operator>.minus,-1)" ]
"1000218" [label = "(<operator>.logicalNot,!v4[1])" ]
"1000219" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000223" [label = "(<operator>.assignment,v2 = result)" ]
"1000226" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000228" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000117" -> "1000120" 
  "1000120" -> "1000124" 
  "1000124" -> "1000126" 
  "1000124" -> "1000130" 
  "1000126" -> "1000228" 
  "1000129" -> "1000132" 
  "1000129" -> "1000139" 
  "1000129" -> "1000226" 
  "1000130" -> "1000129" 
  "1000132" -> "1000228" 
  "1000137" -> "1000144" 
  "1000139" -> "1000137" 
  "1000142" -> "1000149" 
  "1000144" -> "1000142" 
  "1000147" -> "1000155" 
  "1000147" -> "1000167" 
  "1000148" -> "1000147" 
  "1000148" -> "1000151" 
  "1000149" -> "1000148" 
  "1000151" -> "1000147" 
  "1000155" -> "1000158" 
  "1000158" -> "1000197" 
  "1000165" -> "1000170" 
  "1000166" -> "1000165" 
  "1000167" -> "1000166" 
  "1000170" -> "1000176" 
  "1000172" -> "1000185" 
  "1000174" -> "1000172" 
  "1000175" -> "1000181" 
  "1000176" -> "1000175" 
  "1000178" -> "1000174" 
  "1000180" -> "1000178" 
  "1000181" -> "1000180" 
  "1000183" -> "1000188" 
  "1000185" -> "1000183" 
  "1000187" -> "1000167" 
  "1000187" -> "1000193" 
  "1000188" -> "1000187" 
  "1000188" -> "1000190" 
  "1000190" -> "1000187" 
  "1000193" -> "1000197" 
  "1000196" -> "1000202" 
  "1000197" -> "1000196" 
  "1000201" -> "1000226" 
  "1000201" -> "1000207" 
  "1000202" -> "1000201" 
  "1000205" -> "1000215" 
  "1000207" -> "1000205" 
  "1000211" -> "1000226" 
  "1000211" -> "1000223" 
  "1000212" -> "1000211" 
  "1000212" -> "1000219" 
  "1000214" -> "1000212" 
  "1000215" -> "1000216" 
  "1000216" -> "1000214" 
  "1000218" -> "1000211" 
  "1000219" -> "1000218" 
  "1000223" -> "1000139" 
  "1000223" -> "1000226" 
  "1000226" -> "1000228" 
  "1000107" -> "1000117" 
}
