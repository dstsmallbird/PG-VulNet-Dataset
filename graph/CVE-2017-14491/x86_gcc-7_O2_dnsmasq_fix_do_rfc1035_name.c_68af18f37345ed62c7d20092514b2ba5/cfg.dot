digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.assignment,v3 = a2)" ]
"1000122" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000124" [label = "(<operator>.indirection,*a2)" ]
"1000130" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000132" [label = "(<operator>.addition,a1 + 1)" ]
"1000139" [label = "(<operator>.greaterThan,(unsigned int)result > a3)" ]
"1000140" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000141" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000145" [label = "(<operator>.assignment,v5 = *v3)" ]
"1000147" [label = "(<operator>.indirection,*v3)" ]
"1000150" [label = "(<operator>.logicalAnd,*v3 != 46 && v5)" ]
"1000151" [label = "(<operator>.notEquals,*v3 != 46)" ]
"1000152" [label = "(<operator>.indirection,*v3)" ]
"1000160" [label = "(<operator>.assignment,v6 = result + 1)" ]
"1000162" [label = "(<operator>.addition,result + 1)" ]
"1000169" [label = "(<operator>.greaterThan,(unsigned int)v6 > a3)" ]
"1000170" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000171" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000174" [label = "(RETURN,return result;,return result;)" ]
"1000176" [label = "(<operator>.preIncrement,++v3)" ]
"1000178" [label = "(<operator>.assignment,*result = v5)" ]
"1000179" [label = "(<operator>.indirection,*result)" ]
"1000182" [label = "(<operator>.assignment,v5 = *v3)" ]
"1000184" [label = "(<operator>.indirection,*v3)" ]
"1000186" [label = "(<operator>.preIncrement,++result)" ]
"1000189" [label = "(<operator>.logicalOr,!*v3 || v5 == 46)" ]
"1000190" [label = "(<operator>.logicalNot,!*v3)" ]
"1000191" [label = "(<operator>.indirection,*v3)" ]
"1000193" [label = "(<operator>.equals,v5 == 46)" ]
"1000197" [label = "(<operator>.assignment,v7 = (_BYTE)v6 + ~(_BYTE)a1)" ]
"1000199" [label = "(<operator>.addition,(_BYTE)v6 + ~(_BYTE)a1)" ]
"1000200" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000201" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000203" [label = "(<operator>.not,~(_BYTE)a1)" ]
"1000204" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000205" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000207" [label = "(<operator>.assignment,result = v6)" ]
"1000210" [label = "(<operator>.assignment,v8 = v3)" ]
"1000214" [label = "(<operator>.assignment,v8 = v3)" ]
"1000217" [label = "(<operator>.assignment,v7 = 0)" ]
"1000221" [label = "(<operator>.assignment,*a1 = v7)" ]
"1000222" [label = "(<operator>.indirection,*a1)" ]
"1000226" [label = "(<operator>.logicalNot,!*v3)" ]
"1000227" [label = "(<operator>.indirection,*v3)" ]
"1000229" [label = "(RETURN,return result;,return result;)" ]
"1000232" [label = "(<operator>.logicalOr,!++v3 || !v8[1])" ]
"1000233" [label = "(<operator>.logicalNot,!++v3)" ]
"1000234" [label = "(<operator>.preIncrement,++v3)" ]
"1000236" [label = "(<operator>.logicalNot,!v8[1])" ]
"1000237" [label = "(<operator>.indirectIndexAccess,v8[1])" ]
"1000240" [label = "(RETURN,return result;,return result;)" ]
"1000242" [label = "(<operator>.assignment,a1 = result)" ]
"1000245" [label = "(RETURN,return a1;,return a1;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000247" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000118" -> "1000122" 
  "1000118" -> "1000124" 
  "1000122" -> "1000132" 
  "1000122" -> "1000245" 
  "1000122" -> "1000245" 
  "1000124" -> "1000122" 
  "1000130" -> "1000141" 
  "1000130" -> "1000147" 
  "1000132" -> "1000130" 
  "1000139" -> "1000245" 
  "1000139" -> "1000147" 
  "1000140" -> "1000139" 
  "1000141" -> "1000140" 
  "1000145" -> "1000152" 
  "1000147" -> "1000145" 
  "1000150" -> "1000162" 
  "1000150" -> "1000214" 
  "1000150" -> "1000214" 
  "1000151" -> "1000150" 
  "1000151" -> "1000150" 
  "1000152" -> "1000151" 
  "1000160" -> "1000171" 
  "1000160" -> "1000176" 
  "1000162" -> "1000160" 
  "1000169" -> "1000174" 
  "1000169" -> "1000176" 
  "1000170" -> "1000169" 
  "1000171" -> "1000170" 
  "1000174" -> "1000247" 
  "1000176" -> "1000179" 
  "1000178" -> "1000184" 
  "1000179" -> "1000178" 
  "1000182" -> "1000186" 
  "1000184" -> "1000182" 
  "1000186" -> "1000191" 
  "1000189" -> "1000162" 
  "1000189" -> "1000214" 
  "1000189" -> "1000201" 
  "1000190" -> "1000189" 
  "1000190" -> "1000193" 
  "1000191" -> "1000190" 
  "1000193" -> "1000189" 
  "1000197" -> "1000207" 
  "1000199" -> "1000197" 
  "1000200" -> "1000205" 
  "1000201" -> "1000200" 
  "1000203" -> "1000199" 
  "1000204" -> "1000203" 
  "1000205" -> "1000204" 
  "1000207" -> "1000210" 
  "1000210" -> "1000222" 
  "1000214" -> "1000217" 
  "1000217" -> "1000222" 
  "1000221" -> "1000227" 
  "1000222" -> "1000221" 
  "1000226" -> "1000229" 
  "1000226" -> "1000234" 
  "1000227" -> "1000226" 
  "1000229" -> "1000247" 
  "1000232" -> "1000240" 
  "1000232" -> "1000242" 
  "1000233" -> "1000232" 
  "1000233" -> "1000237" 
  "1000234" -> "1000233" 
  "1000236" -> "1000232" 
  "1000237" -> "1000236" 
  "1000240" -> "1000247" 
  "1000242" -> "1000132" 
  "1000242" -> "1000245" 
  "1000245" -> "1000247" 
  "1000107" -> "1000118" 
}
