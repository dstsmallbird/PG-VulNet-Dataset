digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.logicalNot,!a2)" ]
"1000119" [label = "(RETURN,return a1;,return a1;)" ]
"1000121" [label = "(<operator>.assignment,v3 = *a2)" ]
"1000123" [label = "(<operator>.indirection,*a2)" ]
"1000126" [label = "(<operator>.logicalNot,!*a2)" ]
"1000127" [label = "(<operator>.indirection,*a2)" ]
"1000129" [label = "(RETURN,return a1;,return a1;)" ]
"1000134" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000136" [label = "(<operator>.addition,a1 + 1)" ]
"1000142" [label = "(<operator>.assignment,v5 = 0)" ]
"1000146" [label = "(<operator>.equals,v3 == 46)" ]
"1000152" [label = "(<operator>.preIncrement,++result)" ]
"1000154" [label = "(<operator>.preIncrement,++a2)" ]
"1000156" [label = "(<operator>.assignment,*(result - 1) = v3)" ]
"1000157" [label = "(<operator>.indirection,*(result - 1))" ]
"1000158" [label = "(<operator>.subtraction,result - 1)" ]
"1000162" [label = "(<operator>.preIncrement,++v5)" ]
"1000164" [label = "(<operator>.assignment,v3 = *a2)" ]
"1000166" [label = "(<operator>.indirection,*a2)" ]
"1000168" [label = "(<operator>.logicalAnd,*a2 != 46 && v3)" ]
"1000169" [label = "(<operator>.notEquals,*a2 != 46)" ]
"1000170" [label = "(<operator>.indirection,*a2)" ]
"1000174" [label = "(<operator>.assignment,v6 = result)" ]
"1000178" [label = "(<operator>.assignment,v7 = a2)" ]
"1000181" [label = "(<operator>.assignment,result = v6)" ]
"1000185" [label = "(<operator>.assignment,*a1 = v5)" ]
"1000186" [label = "(<operator>.indirection,*a1)" ]
"1000190" [label = "(<operator>.logicalNot,!*a2)" ]
"1000191" [label = "(<operator>.indirection,*a2)" ]
"1000193" [label = "(RETURN,return result;,return result;)" ]
"1000196" [label = "(<operator>.logicalNot,!++a2)" ]
"1000197" [label = "(<operator>.preIncrement,++a2)" ]
"1000199" [label = "(RETURN,return result;,return result;)" ]
"1000201" [label = "(<operator>.assignment,v3 = v7[1])" ]
"1000203" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000207" [label = "(<operator>.logicalNot,!v3)" ]
"1000209" [label = "(RETURN,return result;,return result;)" ]
"1000211" [label = "(<operator>.assignment,a1 = result)" ]
"1000215" [label = "(<operator>.lessThan,a3 < (unsigned __int64)result)" ]
"1000217" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000218" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000220" [label = "(RETURN,return a1;,return a1;)" ]
"1000222" [label = "(<operator>.assignment,v5 = 0)" ]
"1000226" [label = "(<operator>.equals,v3 == 46)" ]
"1000231" [label = "(<operator>.assignment,v7 = a2)" ]
"1000238" [label = "(<operator>.assignment,v6 = result + 1)" ]
"1000240" [label = "(<operator>.addition,result + 1)" ]
"1000244" [label = "(<operator>.greaterThan,(unsigned __int64)(result + 1) > a3)" ]
"1000245" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000246" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000247" [label = "(<operator>.addition,result + 1)" ]
"1000251" [label = "(RETURN,return result;,return result;)" ]
"1000253" [label = "(<operator>.preIncrement,++a2)" ]
"1000255" [label = "(<operator>.assignment,*result = v3)" ]
"1000256" [label = "(<operator>.indirection,*result)" ]
"1000259" [label = "(<operator>.preIncrement,++v5)" ]
"1000261" [label = "(<operator>.preIncrement,++result)" ]
"1000263" [label = "(<operator>.assignment,v3 = *a2)" ]
"1000265" [label = "(<operator>.indirection,*a2)" ]
"1000268" [label = "(<operator>.logicalOr,!*a2 || v3 == 46)" ]
"1000269" [label = "(<operator>.logicalNot,!*a2)" ]
"1000270" [label = "(<operator>.indirection,*a2)" ]
"1000272" [label = "(<operator>.equals,v3 == 46)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000276" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000119" 
  "1000117" -> "1000123" 
  "1000119" -> "1000276" 
  "1000121" -> "1000127" 
  "1000123" -> "1000121" 
  "1000126" -> "1000129" 
  "1000126" -> "1000136" 
  "1000126" -> "1000218" 
  "1000127" -> "1000126" 
  "1000129" -> "1000276" 
  "1000134" -> "1000218" 
  "1000134" -> "1000142" 
  "1000136" -> "1000134" 
  "1000142" -> "1000146" 
  "1000146" -> "1000231" 
  "1000146" -> "1000152" 
  "1000152" -> "1000154" 
  "1000154" -> "1000158" 
  "1000156" -> "1000162" 
  "1000157" -> "1000156" 
  "1000158" -> "1000157" 
  "1000162" -> "1000166" 
  "1000164" -> "1000170" 
  "1000166" -> "1000164" 
  "1000168" -> "1000152" 
  "1000168" -> "1000174" 
  "1000169" -> "1000168" 
  "1000169" -> "1000168" 
  "1000170" -> "1000169" 
  "1000174" -> "1000178" 
  "1000178" -> "1000181" 
  "1000181" -> "1000186" 
  "1000185" -> "1000191" 
  "1000186" -> "1000185" 
  "1000190" -> "1000193" 
  "1000190" -> "1000197" 
  "1000191" -> "1000190" 
  "1000193" -> "1000276" 
  "1000196" -> "1000199" 
  "1000196" -> "1000203" 
  "1000197" -> "1000196" 
  "1000199" -> "1000276" 
  "1000201" -> "1000207" 
  "1000203" -> "1000201" 
  "1000207" -> "1000209" 
  "1000207" -> "1000211" 
  "1000209" -> "1000276" 
  "1000211" -> "1000136" 
  "1000211" -> "1000218" 
  "1000215" -> "1000220" 
  "1000215" -> "1000222" 
  "1000217" -> "1000215" 
  "1000218" -> "1000217" 
  "1000220" -> "1000276" 
  "1000222" -> "1000226" 
  "1000226" -> "1000231" 
  "1000226" -> "1000276" 
  "1000226" -> "1000240" 
  "1000231" -> "1000186" 
  "1000238" -> "1000246" 
  "1000240" -> "1000238" 
  "1000244" -> "1000251" 
  "1000244" -> "1000253" 
  "1000245" -> "1000244" 
  "1000246" -> "1000247" 
  "1000247" -> "1000245" 
  "1000251" -> "1000276" 
  "1000253" -> "1000256" 
  "1000255" -> "1000259" 
  "1000256" -> "1000255" 
  "1000259" -> "1000261" 
  "1000261" -> "1000265" 
  "1000263" -> "1000270" 
  "1000265" -> "1000263" 
  "1000268" -> "1000276" 
  "1000268" -> "1000240" 
  "1000268" -> "1000178" 
  "1000269" -> "1000268" 
  "1000269" -> "1000272" 
  "1000270" -> "1000269" 
  "1000272" -> "1000268" 
  "1000106" -> "1000117" 
}
