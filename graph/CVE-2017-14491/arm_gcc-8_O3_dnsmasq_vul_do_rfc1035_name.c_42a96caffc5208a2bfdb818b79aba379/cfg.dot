digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.assignment,v2 = result)" ]
"1000123" [label = "(<operator>.assignment,v3 = (unsigned __int8)*a2)" ]
"1000125" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000126" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000127" [label = "(<operator>.indirection,*a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000133" [label = "(<operator>.preIncrement,++result)" ]
"1000136" [label = "(<operator>.equals,v3 == 46)" ]
"1000141" [label = "(<operator>.assignment,v4 = a2 + 1)" ]
"1000143" [label = "(<operator>.addition,a2 + 1)" ]
"1000148" [label = "(<operator>.assignment,*result++ = v3)" ]
"1000149" [label = "(<operator>.indirection,*result++)" ]
"1000150" [label = "(<operator>.postIncrement,result++)" ]
"1000153" [label = "(<operator>.assignment,v3 = (unsigned __int8)*v4)" ]
"1000155" [label = "(<operator>.cast,(unsigned __int8)*v4)" ]
"1000156" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000157" [label = "(<operator>.indirection,*v4)" ]
"1000159" [label = "(<operator>.assignment,v5 = v4)" ]
"1000162" [label = "(<operator>.assignment,v6 = v3 == 0)" ]
"1000164" [label = "(<operator>.equals,v3 == 0)" ]
"1000168" [label = "(<operator>.indirection,*v4)" ]
"1000170" [label = "(<operator>.assignment,v6 = v3 == 46)" ]
"1000172" [label = "(<operator>.equals,v3 == 46)" ]
"1000175" [label = "(<operator>.assignment,v7 = (_BYTE)result - 1 - (_BYTE)v2)" ]
"1000177" [label = "(<operator>.subtraction,(_BYTE)result - 1 - (_BYTE)v2)" ]
"1000178" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000179" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000181" [label = "(<operator>.subtraction,1 - (_BYTE)v2)" ]
"1000183" [label = "(<operator>.cast,(_BYTE)v2)" ]
"1000184" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000186" [label = "(<operator>.preIncrement,++v4)" ]
"1000188" [label = "(<operator>.logicalNot,!v6)" ]
"1000193" [label = "(<operator>.assignment,*v2 = v7)" ]
"1000194" [label = "(<operator>.indirection,*v2)" ]
"1000198" [label = "(<operator>.logicalNot,!*v5)" ]
"1000199" [label = "(<operator>.indirection,*v5)" ]
"1000202" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000204" [label = "(<operator>.addition,v5 + 1)" ]
"1000208" [label = "(<operator>.equals,v5 == (_BYTE *)-1)" ]
"1000210" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000211" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000212" [label = "(<operator>.minus,-1)" ]
"1000215" [label = "(<operator>.assignment,v3 = (unsigned __int8)v5[1])" ]
"1000217" [label = "(<operator>.cast,(unsigned __int8)v5[1])" ]
"1000218" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000219" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000223" [label = "(<operator>.logicalNot,!v5[1])" ]
"1000224" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000228" [label = "(<operator>.assignment,v2 = result++)" ]
"1000230" [label = "(<operator>.postIncrement,result++)" ]
"1000233" [label = "(<operator>.notEquals,v3 != 46)" ]
"1000238" [label = "(<operator>.assignment,v5 = a2)" ]
"1000241" [label = "(<operator>.assignment,v7 = 0)" ]
"1000244" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000246" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000126" 
  "1000117" -> "1000244" 
  "1000123" -> "1000130" 
  "1000125" -> "1000123" 
  "1000126" -> "1000127" 
  "1000127" -> "1000125" 
  "1000130" -> "1000133" 
  "1000130" -> "1000244" 
  "1000133" -> "1000136" 
  "1000136" -> "1000238" 
  "1000136" -> "1000143" 
  "1000141" -> "1000150" 
  "1000143" -> "1000141" 
  "1000148" -> "1000156" 
  "1000149" -> "1000148" 
  "1000150" -> "1000149" 
  "1000153" -> "1000159" 
  "1000155" -> "1000153" 
  "1000156" -> "1000157" 
  "1000157" -> "1000155" 
  "1000159" -> "1000164" 
  "1000162" -> "1000168" 
  "1000164" -> "1000162" 
  "1000168" -> "1000172" 
  "1000168" -> "1000179" 
  "1000170" -> "1000179" 
  "1000172" -> "1000170" 
  "1000175" -> "1000186" 
  "1000177" -> "1000175" 
  "1000178" -> "1000184" 
  "1000179" -> "1000178" 
  "1000181" -> "1000177" 
  "1000183" -> "1000181" 
  "1000184" -> "1000183" 
  "1000186" -> "1000188" 
  "1000188" -> "1000150" 
  "1000188" -> "1000194" 
  "1000188" -> "1000244" 
  "1000193" -> "1000199" 
  "1000194" -> "1000193" 
  "1000198" -> "1000244" 
  "1000198" -> "1000204" 
  "1000199" -> "1000198" 
  "1000202" -> "1000211" 
  "1000204" -> "1000202" 
  "1000208" -> "1000244" 
  "1000208" -> "1000218" 
  "1000210" -> "1000208" 
  "1000211" -> "1000212" 
  "1000212" -> "1000210" 
  "1000215" -> "1000224" 
  "1000217" -> "1000215" 
  "1000218" -> "1000219" 
  "1000219" -> "1000217" 
  "1000223" -> "1000244" 
  "1000223" -> "1000230" 
  "1000224" -> "1000223" 
  "1000228" -> "1000233" 
  "1000230" -> "1000228" 
  "1000233" -> "1000143" 
  "1000233" -> "1000238" 
  "1000238" -> "1000241" 
  "1000241" -> "1000194" 
  "1000241" -> "1000244" 
  "1000244" -> "1000246" 
  "1000107" -> "1000117" 
}
