digraph do_rfc1035_name {  
"1000112" [label = "(<operator>.logicalNot,!a2)" ]
"1000114" [label = "(RETURN,return a1;,return a1;)" ]
"1000116" [label = "(<operator>.assignment,v2 = (char)*a2)" ]
"1000118" [label = "(<operator>.cast,(char)*a2)" ]
"1000119" [label = "(UNKNOWN,char,char)" ]
"1000120" [label = "(<operator>.indirection,*a2)" ]
"1000123" [label = "(<operator>.logicalNot,!*a2)" ]
"1000124" [label = "(<operator>.indirection,*a2)" ]
"1000126" [label = "(RETURN,return a1;,return a1;)" ]
"1000128" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000130" [label = "(<operator>.addition,a1 + 1)" ]
"1000134" [label = "(<operator>.notEquals,v2 != 46)" ]
"1000139" [label = "(<operator>.assignment,*a1 = 0)" ]
"1000140" [label = "(<operator>.indirection,*a1)" ]
"1000144" [label = "(<operator>.assignment,i = a2)" ]
"1000147" [label = "(<operator>.indirection,*a2)" ]
"1000149" [label = "(<operator>.assignment,i = a2)" ]
"1000154" [label = "(<operator>.logicalNot,!++a2)" ]
"1000155" [label = "(<operator>.preIncrement,++a2)" ]
"1000158" [label = "(<operator>.assignment,v2 = (char)i[1])" ]
"1000160" [label = "(<operator>.cast,(char)i[1])" ]
"1000161" [label = "(UNKNOWN,char,char)" ]
"1000162" [label = "(<operator>.indirectIndexAccess,i[1])" ]
"1000165" [label = "(<operator>.assignment,a1 = result)" ]
"1000169" [label = "(<operator>.logicalNot,!i[1])" ]
"1000170" [label = "(<operator>.indirectIndexAccess,i[1])" ]
"1000174" [label = "(<operator>.preIncrement,++result)" ]
"1000177" [label = "(<operator>.equals,v2 == 46)" ]
"1000184" [label = "(<operator>.assignment,*result++ = v2)" ]
"1000185" [label = "(<operator>.indirection,*result++)" ]
"1000186" [label = "(<operator>.postIncrement,result++)" ]
"1000189" [label = "(<operator>.assignment,v2 = (char)*++a2)" ]
"1000191" [label = "(<operator>.cast,(char)*++a2)" ]
"1000192" [label = "(UNKNOWN,char,char)" ]
"1000193" [label = "(<operator>.indirection,*++a2)" ]
"1000194" [label = "(<operator>.preIncrement,++a2)" ]
"1000196" [label = "(<operator>.logicalAnd,*a2 && v2 != 46)" ]
"1000197" [label = "(<operator>.indirection,*a2)" ]
"1000199" [label = "(<operator>.notEquals,v2 != 46)" ]
"1000202" [label = "(<operator>.assignment,*a1 = (_BYTE)result - 1 - (_BYTE)a1)" ]
"1000203" [label = "(<operator>.indirection,*a1)" ]
"1000205" [label = "(<operator>.subtraction,(_BYTE)result - 1 - (_BYTE)a1)" ]
"1000206" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000207" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000209" [label = "(<operator>.subtraction,1 - (_BYTE)a1)" ]
"1000211" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000212" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000214" [label = "(RETURN,return result;,return result;)" ]
"1000104" [label = "(METHOD,do_rfc1035_name)" ]
"1000216" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000112" -> "1000114" 
  "1000112" -> "1000119" 
  "1000114" -> "1000216" 
  "1000116" -> "1000124" 
  "1000118" -> "1000116" 
  "1000119" -> "1000120" 
  "1000120" -> "1000118" 
  "1000123" -> "1000126" 
  "1000123" -> "1000130" 
  "1000124" -> "1000123" 
  "1000126" -> "1000216" 
  "1000128" -> "1000134" 
  "1000130" -> "1000128" 
  "1000134" -> "1000186" 
  "1000134" -> "1000140" 
  "1000139" -> "1000144" 
  "1000140" -> "1000139" 
  "1000144" -> "1000147" 
  "1000147" -> "1000155" 
  "1000147" -> "1000155" 
  "1000147" -> "1000214" 
  "1000149" -> "1000147" 
  "1000154" -> "1000214" 
  "1000154" -> "1000161" 
  "1000155" -> "1000154" 
  "1000158" -> "1000165" 
  "1000160" -> "1000158" 
  "1000161" -> "1000162" 
  "1000162" -> "1000160" 
  "1000165" -> "1000170" 
  "1000169" -> "1000214" 
  "1000169" -> "1000174" 
  "1000170" -> "1000169" 
  "1000174" -> "1000177" 
  "1000177" -> "1000140" 
  "1000177" -> "1000186" 
  "1000184" -> "1000192" 
  "1000185" -> "1000184" 
  "1000186" -> "1000185" 
  "1000189" -> "1000197" 
  "1000191" -> "1000189" 
  "1000192" -> "1000194" 
  "1000193" -> "1000191" 
  "1000194" -> "1000193" 
  "1000196" -> "1000186" 
  "1000196" -> "1000203" 
  "1000197" -> "1000196" 
  "1000197" -> "1000199" 
  "1000199" -> "1000196" 
  "1000202" -> "1000149" 
  "1000203" -> "1000207" 
  "1000205" -> "1000202" 
  "1000206" -> "1000212" 
  "1000207" -> "1000206" 
  "1000209" -> "1000205" 
  "1000211" -> "1000209" 
  "1000212" -> "1000211" 
  "1000214" -> "1000216" 
  "1000104" -> "1000112" 
}
