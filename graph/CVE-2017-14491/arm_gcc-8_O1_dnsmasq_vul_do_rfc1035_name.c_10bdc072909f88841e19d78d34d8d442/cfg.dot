digraph do_rfc1035_name {  
"1000121" [label = "(<operator>.assignment,v2 = result)" ]
"1000125" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000127" [label = "(<operator>.indirection,*a2)" ]
"1000133" [label = "(<operator>.assignment,result = v2 + 1)" ]
"1000135" [label = "(<operator>.addition,v2 + 1)" ]
"1000138" [label = "(<operator>.assignment,v5 = (unsigned __int8)*a2)" ]
"1000140" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000141" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000142" [label = "(<operator>.indirection,*a2)" ]
"1000144" [label = "(<operator>.assignment,v6 = v5 == 0)" ]
"1000146" [label = "(<operator>.equals,v5 == 0)" ]
"1000150" [label = "(<operator>.indirection,*a2)" ]
"1000152" [label = "(<operator>.assignment,v6 = v5 == 46)" ]
"1000154" [label = "(<operator>.equals,v5 == 46)" ]
"1000160" [label = "(<operator>.assignment,v3 = a2)" ]
"1000163" [label = "(<operator>.assignment,v4 = 0)" ]
"1000168" [label = "(<operator>.assignment,v7 = a2 + 1)" ]
"1000170" [label = "(<operator>.addition,a2 + 1)" ]
"1000175" [label = "(<operator>.assignment,*result++ = v5)" ]
"1000176" [label = "(<operator>.indirection,*result++)" ]
"1000177" [label = "(<operator>.postIncrement,result++)" ]
"1000180" [label = "(<operator>.assignment,v3 = v7)" ]
"1000183" [label = "(<operator>.assignment,v4 = (_BYTE)result - 1 - (_BYTE)v2)" ]
"1000185" [label = "(<operator>.subtraction,(_BYTE)result - 1 - (_BYTE)v2)" ]
"1000186" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000187" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000189" [label = "(<operator>.subtraction,1 - (_BYTE)v2)" ]
"1000191" [label = "(<operator>.cast,(_BYTE)v2)" ]
"1000192" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000194" [label = "(<operator>.assignment,v8 = *v7++)" ]
"1000196" [label = "(<operator>.indirection,*v7++)" ]
"1000197" [label = "(<operator>.postIncrement,v7++)" ]
"1000199" [label = "(<operator>.assignment,v5 = v8)" ]
"1000202" [label = "(<operator>.assignment,v9 = v8 == 0)" ]
"1000204" [label = "(<operator>.equals,v8 == 0)" ]
"1000209" [label = "(<operator>.assignment,v9 = v5 == 46)" ]
"1000211" [label = "(<operator>.equals,v5 == 46)" ]
"1000214" [label = "(<operator>.logicalNot,!v9)" ]
"1000216" [label = "(<operator>.assignment,*v2 = v4)" ]
"1000217" [label = "(<operator>.indirection,*v2)" ]
"1000221" [label = "(<operator>.logicalNot,!*v3)" ]
"1000222" [label = "(<operator>.indirection,*v3)" ]
"1000225" [label = "(<operator>.assignment,a2 = v3 + 1)" ]
"1000227" [label = "(<operator>.addition,v3 + 1)" ]
"1000231" [label = "(<operator>.logicalOr,v3 == (_BYTE *)-1 || !v3[1])" ]
"1000232" [label = "(<operator>.equals,v3 == (_BYTE *)-1)" ]
"1000234" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000235" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000236" [label = "(<operator>.minus,-1)" ]
"1000238" [label = "(<operator>.logicalNot,!v3[1])" ]
"1000239" [label = "(<operator>.indirectIndexAccess,v3[1])" ]
"1000243" [label = "(<operator>.assignment,v2 = result)" ]
"1000246" [label = "(RETURN,return result;,return result;)" ]
"1000109" [label = "(METHOD,do_rfc1035_name)" ]
"1000248" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000121" -> "1000125" 
  "1000121" -> "1000127" 
  "1000125" -> "1000135" 
  "1000125" -> "1000246" 
  "1000125" -> "1000246" 
  "1000127" -> "1000125" 
  "1000133" -> "1000141" 
  "1000135" -> "1000133" 
  "1000138" -> "1000146" 
  "1000140" -> "1000138" 
  "1000141" -> "1000142" 
  "1000142" -> "1000140" 
  "1000144" -> "1000150" 
  "1000146" -> "1000144" 
  "1000150" -> "1000154" 
  "1000150" -> "1000160" 
  "1000150" -> "1000170" 
  "1000152" -> "1000160" 
  "1000152" -> "1000170" 
  "1000154" -> "1000152" 
  "1000160" -> "1000163" 
  "1000163" -> "1000217" 
  "1000168" -> "1000177" 
  "1000170" -> "1000168" 
  "1000175" -> "1000180" 
  "1000176" -> "1000175" 
  "1000177" -> "1000176" 
  "1000180" -> "1000187" 
  "1000183" -> "1000197" 
  "1000185" -> "1000183" 
  "1000186" -> "1000192" 
  "1000187" -> "1000186" 
  "1000189" -> "1000185" 
  "1000191" -> "1000189" 
  "1000192" -> "1000191" 
  "1000194" -> "1000199" 
  "1000196" -> "1000194" 
  "1000197" -> "1000196" 
  "1000199" -> "1000204" 
  "1000202" -> "1000214" 
  "1000202" -> "1000211" 
  "1000204" -> "1000202" 
  "1000209" -> "1000214" 
  "1000211" -> "1000209" 
  "1000214" -> "1000177" 
  "1000214" -> "1000217" 
  "1000216" -> "1000222" 
  "1000217" -> "1000216" 
  "1000221" -> "1000246" 
  "1000221" -> "1000227" 
  "1000222" -> "1000221" 
  "1000225" -> "1000235" 
  "1000227" -> "1000225" 
  "1000231" -> "1000246" 
  "1000231" -> "1000243" 
  "1000232" -> "1000231" 
  "1000232" -> "1000239" 
  "1000234" -> "1000232" 
  "1000235" -> "1000236" 
  "1000236" -> "1000234" 
  "1000238" -> "1000231" 
  "1000239" -> "1000238" 
  "1000243" -> "1000135" 
  "1000243" -> "1000246" 
  "1000246" -> "1000248" 
  "1000109" -> "1000121" 
}
