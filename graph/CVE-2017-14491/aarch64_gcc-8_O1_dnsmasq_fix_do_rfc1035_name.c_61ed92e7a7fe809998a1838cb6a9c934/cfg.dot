digraph do_rfc1035_name {  
"1000122" [label = "(<operator>.assignment,v3 = result)" ]
"1000126" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000128" [label = "(<operator>.indirection,*a2)" ]
"1000135" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned __int64)(v3 + 1))" ]
"1000137" [label = "(<operator>.lessThan,a3 < (unsigned __int64)(v3 + 1))" ]
"1000139" [label = "(<operator>.cast,(unsigned __int64)(v3 + 1))" ]
"1000140" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000141" [label = "(<operator>.addition,v3 + 1)" ]
"1000144" [label = "(RETURN,return v3;,return v3;)" ]
"1000146" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000148" [label = "(<operator>.addition,v3 + 1)" ]
"1000151" [label = "(<operator>.assignment,v7 = (unsigned __int8)*a2)" ]
"1000153" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000154" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000155" [label = "(<operator>.indirection,*a2)" ]
"1000158" [label = "(<operator>.logicalAnd,v7 != 46 && v7 != 0)" ]
"1000159" [label = "(<operator>.notEquals,v7 != 46)" ]
"1000162" [label = "(<operator>.notEquals,v7 != 0)" ]
"1000166" [label = "(<operator>.assignment,v4 = a2)" ]
"1000169" [label = "(<operator>.assignment,v5 = 0)" ]
"1000173" [label = "(<operator>.assignment,*v3 = v5)" ]
"1000174" [label = "(<operator>.indirection,*v3)" ]
"1000178" [label = "(<operator>.logicalNot,!*v4)" ]
"1000179" [label = "(<operator>.indirection,*v4)" ]
"1000181" [label = "(RETURN,return result;,return result;)" ]
"1000183" [label = "(<operator>.assignment,a2 = v4 + 1)" ]
"1000185" [label = "(<operator>.addition,v4 + 1)" ]
"1000188" [label = "(RETURN,return result;,return result;)" ]
"1000190" [label = "(<operator>.assignment,v3 = result)" ]
"1000193" [label = "(<operator>.assignment,v6 = a2 + 1)" ]
"1000195" [label = "(<operator>.addition,a2 + 1)" ]
"1000198" [label = "(<operator>.assignment,v11 = 1 - (_BYTE)v6)" ]
"1000200" [label = "(<operator>.subtraction,1 - (_BYTE)v6)" ]
"1000202" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000203" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000206" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned __int64)(result + 1))" ]
"1000207" [label = "(<operator>.logicalNot,!a3)" ]
"1000209" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned __int64)(result + 1))" ]
"1000211" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000212" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000213" [label = "(<operator>.addition,result + 1)" ]
"1000217" [label = "(<operator>.assignment,*result++ = v7)" ]
"1000218" [label = "(<operator>.indirection,*result++)" ]
"1000219" [label = "(<operator>.postIncrement,result++)" ]
"1000222" [label = "(<operator>.assignment,v4 = v6)" ]
"1000225" [label = "(<operator>.assignment,v5 = v11 + (_BYTE)v6)" ]
"1000227" [label = "(<operator>.addition,v11 + (_BYTE)v6)" ]
"1000229" [label = "(<operator>.cast,(_BYTE)v6)" ]
"1000230" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000232" [label = "(<operator>.assignment,v8 = *v6++)" ]
"1000234" [label = "(<operator>.indirection,*v6++)" ]
"1000235" [label = "(<operator>.postIncrement,v6++)" ]
"1000237" [label = "(<operator>.assignment,v7 = v8)" ]
"1000241" [label = "(<operator>.equals,v8 == 46)" ]
"1000244" [label = "(<operator>.assignment,v9 = 1)" ]
"1000248" [label = "(<operator>.assignment,v9 = v7 == 0)" ]
"1000250" [label = "(<operator>.equals,v7 == 0)" ]
"1000256" [label = "(RETURN,return result;,return result;)" ]
"1000109" [label = "(METHOD,do_rfc1035_name)" ]
"1000258" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000122" -> "1000126" 
  "1000122" -> "1000128" 
  "1000126" -> "1000135" 
  "1000126" -> "1000140" 
  "1000126" -> "1000195" 
  "1000126" -> "1000256" 
  "1000128" -> "1000126" 
  "1000135" -> "1000144" 
  "1000135" -> "1000148" 
  "1000137" -> "1000135" 
  "1000139" -> "1000137" 
  "1000140" -> "1000141" 
  "1000141" -> "1000139" 
  "1000144" -> "1000258" 
  "1000146" -> "1000154" 
  "1000148" -> "1000146" 
  "1000151" -> "1000159" 
  "1000153" -> "1000151" 
  "1000154" -> "1000155" 
  "1000155" -> "1000153" 
  "1000158" -> "1000195" 
  "1000158" -> "1000166" 
  "1000159" -> "1000158" 
  "1000159" -> "1000162" 
  "1000162" -> "1000158" 
  "1000166" -> "1000169" 
  "1000169" -> "1000174" 
  "1000173" -> "1000179" 
  "1000174" -> "1000173" 
  "1000178" -> "1000181" 
  "1000178" -> "1000185" 
  "1000179" -> "1000178" 
  "1000181" -> "1000258" 
  "1000183" -> "1000188" 
  "1000185" -> "1000183" 
  "1000188" -> "1000258" 
  "1000190" -> "1000135" 
  "1000190" -> "1000140" 
  "1000190" -> "1000195" 
  "1000193" -> "1000203" 
  "1000195" -> "1000193" 
  "1000198" -> "1000207" 
  "1000200" -> "1000198" 
  "1000202" -> "1000200" 
  "1000203" -> "1000202" 
  "1000206" -> "1000219" 
  "1000206" -> "1000256" 
  "1000207" -> "1000206" 
  "1000207" -> "1000212" 
  "1000209" -> "1000206" 
  "1000211" -> "1000209" 
  "1000212" -> "1000213" 
  "1000213" -> "1000211" 
  "1000217" -> "1000222" 
  "1000218" -> "1000217" 
  "1000219" -> "1000218" 
  "1000222" -> "1000230" 
  "1000225" -> "1000235" 
  "1000227" -> "1000225" 
  "1000229" -> "1000227" 
  "1000230" -> "1000229" 
  "1000232" -> "1000237" 
  "1000234" -> "1000232" 
  "1000235" -> "1000234" 
  "1000237" -> "1000241" 
  "1000241" -> "1000244" 
  "1000241" -> "1000250" 
  "1000244" -> "1000207" 
  "1000244" -> "1000174" 
  "1000248" -> "1000207" 
  "1000248" -> "1000174" 
  "1000250" -> "1000248" 
  "1000256" -> "1000258" 
  "1000109" -> "1000122" 
}
