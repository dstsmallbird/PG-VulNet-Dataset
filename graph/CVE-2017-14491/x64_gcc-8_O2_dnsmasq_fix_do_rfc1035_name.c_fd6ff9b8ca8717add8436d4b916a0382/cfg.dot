digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000119" [label = "(<operator>.indirection,*a2)" ]
"1000125" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000127" [label = "(<operator>.addition,a1 + 1)" ]
"1000134" [label = "(<operator>.greaterThan,(unsigned __int64)result > a3)" ]
"1000135" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000136" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000140" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000142" [label = "(<operator>.indirection,*a2)" ]
"1000145" [label = "(<operator>.logicalAnd,*a2 != 46 && v4)" ]
"1000146" [label = "(<operator>.notEquals,*a2 != 46)" ]
"1000147" [label = "(<operator>.indirection,*a2)" ]
"1000152" [label = "(<operator>.assignment,v5 = 0)" ]
"1000158" [label = "(<operator>.assignment,v6 = result + 1)" ]
"1000160" [label = "(<operator>.addition,result + 1)" ]
"1000167" [label = "(<operator>.greaterThan,(unsigned __int64)v6 > a3)" ]
"1000168" [label = "(<operator>.cast,(unsigned __int64)v6)" ]
"1000169" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000172" [label = "(RETURN,return result;,return result;)" ]
"1000174" [label = "(<operator>.preIncrement,++a2)" ]
"1000176" [label = "(<operator>.assignment,*result = v4)" ]
"1000177" [label = "(<operator>.indirection,*result)" ]
"1000180" [label = "(<operator>.preIncrement,++v5)" ]
"1000182" [label = "(<operator>.preIncrement,++result)" ]
"1000184" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000186" [label = "(<operator>.indirection,*a2)" ]
"1000189" [label = "(<operator>.logicalOr,!*a2 || v4 == 46)" ]
"1000190" [label = "(<operator>.logicalNot,!*a2)" ]
"1000191" [label = "(<operator>.indirection,*a2)" ]
"1000193" [label = "(<operator>.equals,v4 == 46)" ]
"1000197" [label = "(<operator>.assignment,v7 = a2)" ]
"1000200" [label = "(<operator>.assignment,result = v6)" ]
"1000204" [label = "(<operator>.assignment,v7 = a2)" ]
"1000207" [label = "(<operator>.assignment,v5 = 0)" ]
"1000211" [label = "(<operator>.assignment,*a1 = v5)" ]
"1000212" [label = "(<operator>.indirection,*a1)" ]
"1000216" [label = "(<operator>.logicalNot,!*a2)" ]
"1000217" [label = "(<operator>.indirection,*a2)" ]
"1000219" [label = "(RETURN,return result;,return result;)" ]
"1000222" [label = "(<operator>.logicalOr,!++a2 || !v7[1])" ]
"1000223" [label = "(<operator>.logicalNot,!++a2)" ]
"1000224" [label = "(<operator>.preIncrement,++a2)" ]
"1000226" [label = "(<operator>.logicalNot,!v7[1])" ]
"1000227" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000230" [label = "(RETURN,return result;,return result;)" ]
"1000232" [label = "(<operator>.assignment,a1 = result)" ]
"1000235" [label = "(RETURN,return a1;,return a1;)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000237" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000127" 
  "1000117" -> "1000235" 
  "1000117" -> "1000235" 
  "1000119" -> "1000117" 
  "1000125" -> "1000136" 
  "1000125" -> "1000142" 
  "1000127" -> "1000125" 
  "1000134" -> "1000235" 
  "1000134" -> "1000142" 
  "1000135" -> "1000134" 
  "1000136" -> "1000135" 
  "1000140" -> "1000147" 
  "1000142" -> "1000140" 
  "1000145" -> "1000152" 
  "1000145" -> "1000204" 
  "1000146" -> "1000145" 
  "1000146" -> "1000145" 
  "1000147" -> "1000146" 
  "1000152" -> "1000160" 
  "1000152" -> "1000204" 
  "1000158" -> "1000169" 
  "1000158" -> "1000174" 
  "1000160" -> "1000158" 
  "1000167" -> "1000172" 
  "1000167" -> "1000174" 
  "1000168" -> "1000167" 
  "1000169" -> "1000168" 
  "1000172" -> "1000237" 
  "1000174" -> "1000177" 
  "1000176" -> "1000180" 
  "1000177" -> "1000176" 
  "1000180" -> "1000182" 
  "1000182" -> "1000186" 
  "1000184" -> "1000191" 
  "1000186" -> "1000184" 
  "1000189" -> "1000160" 
  "1000189" -> "1000204" 
  "1000189" -> "1000197" 
  "1000190" -> "1000189" 
  "1000190" -> "1000193" 
  "1000191" -> "1000190" 
  "1000193" -> "1000189" 
  "1000197" -> "1000200" 
  "1000200" -> "1000212" 
  "1000204" -> "1000207" 
  "1000207" -> "1000212" 
  "1000211" -> "1000217" 
  "1000212" -> "1000211" 
  "1000216" -> "1000219" 
  "1000216" -> "1000224" 
  "1000217" -> "1000216" 
  "1000219" -> "1000237" 
  "1000222" -> "1000230" 
  "1000222" -> "1000232" 
  "1000223" -> "1000222" 
  "1000223" -> "1000227" 
  "1000224" -> "1000223" 
  "1000226" -> "1000222" 
  "1000227" -> "1000226" 
  "1000230" -> "1000237" 
  "1000232" -> "1000127" 
  "1000232" -> "1000235" 
  "1000235" -> "1000237" 
  "1000106" -> "1000117" 
  "1000106" -> "1000119" 
}
