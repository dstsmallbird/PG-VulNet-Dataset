digraph do_rfc1035_name {  
"1000114" [label = "(<operator>.logicalNot,!sval)" ]
"1000116" [label = "(RETURN,return p;,return p;)" ]
"1000119" [label = "(<operator>.logicalNot,!*sval)" ]
"1000120" [label = "(<operator>.indirection,*sval)" ]
"1000122" [label = "(RETURN,return p;,return p;)" ]
"1000127" [label = "(<operator>.assignment,result = p + 1)" ]
"1000129" [label = "(<operator>.addition,p + 1)" ]
"1000132" [label = "(<operator>.assignment,v2 = *sval)" ]
"1000134" [label = "(<operator>.indirection,*sval)" ]
"1000137" [label = "(<operator>.logicalOr,!*sval || v2 == 46)" ]
"1000138" [label = "(<operator>.logicalNot,!*sval)" ]
"1000139" [label = "(<operator>.indirection,*sval)" ]
"1000141" [label = "(<operator>.equals,v2 == 46)" ]
"1000145" [label = "(<operator>.assignment,v3 = sval)" ]
"1000148" [label = "(<operator>.assignment,v4 = 0)" ]
"1000153" [label = "(<operator>.assignment,v3 = sval)" ]
"1000156" [label = "(<operator>.assignment,v4 = 0)" ]
"1000161" [label = "(<operator>.assignment,*result++ = v2)" ]
"1000162" [label = "(<operator>.indirection,*result++)" ]
"1000163" [label = "(<operator>.postIncrement,result++)" ]
"1000166" [label = "(<operator>.preIncrement,++v3)" ]
"1000168" [label = "(<operator>.preIncrement,++v4)" ]
"1000170" [label = "(<operator>.assignment,v2 = *v3)" ]
"1000172" [label = "(<operator>.indirection,*v3)" ]
"1000174" [label = "(<operator>.logicalAnd,*v3 && v2 != 46)" ]
"1000175" [label = "(<operator>.indirection,*v3)" ]
"1000177" [label = "(<operator>.notEquals,v2 != 46)" ]
"1000180" [label = "(<operator>.assignment,*p = v4)" ]
"1000181" [label = "(<operator>.indirection,*p)" ]
"1000185" [label = "(<operator>.logicalNot,!*v3)" ]
"1000186" [label = "(<operator>.indirection,*v3)" ]
"1000189" [label = "(<operator>.assignment,sval = v3 + 1)" ]
"1000191" [label = "(<operator>.addition,v3 + 1)" ]
"1000195" [label = "(<operator>.assignment,p = result)" ]
"1000198" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000200" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000114" -> "1000116" 
  "1000114" -> "1000120" 
  "1000116" -> "1000200" 
  "1000119" -> "1000122" 
  "1000119" -> "1000129" 
  "1000119" -> "1000198" 
  "1000120" -> "1000119" 
  "1000122" -> "1000200" 
  "1000127" -> "1000134" 
  "1000129" -> "1000127" 
  "1000132" -> "1000139" 
  "1000134" -> "1000132" 
  "1000137" -> "1000145" 
  "1000137" -> "1000153" 
  "1000138" -> "1000137" 
  "1000138" -> "1000141" 
  "1000139" -> "1000138" 
  "1000141" -> "1000137" 
  "1000145" -> "1000148" 
  "1000148" -> "1000181" 
  "1000153" -> "1000156" 
  "1000156" -> "1000163" 
  "1000161" -> "1000166" 
  "1000162" -> "1000161" 
  "1000163" -> "1000162" 
  "1000166" -> "1000168" 
  "1000168" -> "1000172" 
  "1000170" -> "1000175" 
  "1000172" -> "1000170" 
  "1000174" -> "1000163" 
  "1000174" -> "1000181" 
  "1000175" -> "1000174" 
  "1000175" -> "1000177" 
  "1000177" -> "1000174" 
  "1000180" -> "1000186" 
  "1000181" -> "1000180" 
  "1000185" -> "1000198" 
  "1000185" -> "1000191" 
  "1000186" -> "1000185" 
  "1000189" -> "1000198" 
  "1000191" -> "1000189" 
  "1000195" -> "1000129" 
  "1000195" -> "1000198" 
  "1000198" -> "1000200" 
  "1000105" -> "1000114" 
}
