digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000119" [label = "(<operator>.indirection,*a2)" ]
"1000125" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000127" [label = "(<operator>.addition,a1 + 1)" ]
"1000134" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000136" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000137" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000140" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000142" [label = "(<operator>.indirection,*a2)" ]
"1000144" [label = "(<operator>.assignment,v5 = a2)" ]
"1000148" [label = "(<operator>.indirection,*a2)" ]
"1000151" [label = "(<operator>.assignment,v6 = a1 + 2)" ]
"1000153" [label = "(<operator>.addition,a1 + 2)" ]
"1000157" [label = "(<operator>.notEquals,v4 != 46)" ]
"1000161" [label = "(<operator>.assignment,result = a1 + 2)" ]
"1000163" [label = "(<operator>.addition,a1 + 2)" ]
"1000167" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)v6)" ]
"1000168" [label = "(<operator>.logicalNot,!a3)" ]
"1000170" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)v6)" ]
"1000172" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000173" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000176" [label = "(<operator>.preIncrement,++v5)" ]
"1000178" [label = "(<operator>.assignment,*(v6++ - 1) = v4)" ]
"1000179" [label = "(<operator>.indirection,*(v6++ - 1))" ]
"1000180" [label = "(<operator>.subtraction,v6++ - 1)" ]
"1000181" [label = "(<operator>.postIncrement,v6++)" ]
"1000185" [label = "(<operator>.assignment,v4 = *v5)" ]
"1000187" [label = "(<operator>.indirection,*v5)" ]
"1000189" [label = "(<operator>.assignment,v7 = (_BYTE)v5 - (_BYTE)a2)" ]
"1000191" [label = "(<operator>.subtraction,(_BYTE)v5 - (_BYTE)a2)" ]
"1000192" [label = "(<operator>.cast,(_BYTE)v5)" ]
"1000193" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000195" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000196" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000199" [label = "(<operator>.logicalOr,!*v5 || v4 == 46)" ]
"1000200" [label = "(<operator>.logicalNot,!*v5)" ]
"1000201" [label = "(<operator>.indirection,*v5)" ]
"1000203" [label = "(<operator>.equals,v4 == 46)" ]
"1000207" [label = "(<operator>.assignment,result = v6)" ]
"1000210" [label = "(RETURN,return v6 - 1;,return v6 - 1;)" ]
"1000211" [label = "(<operator>.subtraction,v6 - 1)" ]
"1000214" [label = "(<operator>.assignment,v7 = 0)" ]
"1000217" [label = "(<operator>.assignment,v5 = a2)" ]
"1000222" [label = "(<operator>.assignment,v7 = 0)" ]
"1000226" [label = "(<operator>.assignment,*a1 = v7)" ]
"1000227" [label = "(<operator>.indirection,*a1)" ]
"1000230" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000232" [label = "(<operator>.addition,v5 + 1)" ]
"1000236" [label = "(<operator>.indirection,*v5)" ]
"1000240" [label = "(<operator>.notEquals,v5 != (char *)-1)" ]
"1000242" [label = "(<operator>.cast,(char *)-1)" ]
"1000243" [label = "(UNKNOWN,char *,char *)" ]
"1000244" [label = "(<operator>.minus,-1)" ]
"1000247" [label = "(<operator>.assignment,a1 = result)" ]
"1000251" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000255" [label = "(RETURN,return result;,return result;)" ]
"1000257" [label = "(RETURN,return a1;,return a1;)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000259" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000127" 
  "1000117" -> "1000257" 
  "1000117" -> "1000257" 
  "1000119" -> "1000117" 
  "1000125" -> "1000137" 
  "1000125" -> "1000142" 
  "1000127" -> "1000125" 
  "1000134" -> "1000257" 
  "1000134" -> "1000142" 
  "1000136" -> "1000134" 
  "1000137" -> "1000136" 
  "1000140" -> "1000144" 
  "1000142" -> "1000140" 
  "1000144" -> "1000148" 
  "1000148" -> "1000153" 
  "1000148" -> "1000222" 
  "1000151" -> "1000157" 
  "1000153" -> "1000151" 
  "1000157" -> "1000163" 
  "1000157" -> "1000214" 
  "1000161" -> "1000168" 
  "1000163" -> "1000161" 
  "1000167" -> "1000176" 
  "1000167" -> "1000211" 
  "1000168" -> "1000167" 
  "1000168" -> "1000173" 
  "1000170" -> "1000167" 
  "1000172" -> "1000170" 
  "1000173" -> "1000172" 
  "1000176" -> "1000181" 
  "1000178" -> "1000187" 
  "1000179" -> "1000178" 
  "1000180" -> "1000179" 
  "1000181" -> "1000180" 
  "1000185" -> "1000193" 
  "1000187" -> "1000185" 
  "1000189" -> "1000201" 
  "1000191" -> "1000189" 
  "1000192" -> "1000196" 
  "1000193" -> "1000192" 
  "1000195" -> "1000191" 
  "1000196" -> "1000195" 
  "1000199" -> "1000227" 
  "1000199" -> "1000207" 
  "1000200" -> "1000199" 
  "1000200" -> "1000203" 
  "1000201" -> "1000200" 
  "1000203" -> "1000199" 
  "1000207" -> "1000168" 
  "1000210" -> "1000259" 
  "1000211" -> "1000210" 
  "1000214" -> "1000217" 
  "1000217" -> "1000227" 
  "1000222" -> "1000227" 
  "1000226" -> "1000232" 
  "1000227" -> "1000226" 
  "1000230" -> "1000236" 
  "1000232" -> "1000230" 
  "1000236" -> "1000243" 
  "1000236" -> "1000255" 
  "1000240" -> "1000247" 
  "1000240" -> "1000255" 
  "1000242" -> "1000240" 
  "1000243" -> "1000244" 
  "1000244" -> "1000242" 
  "1000247" -> "1000251" 
  "1000251" -> "1000127" 
  "1000251" -> "1000257" 
  "1000251" -> "1000255" 
  "1000255" -> "1000259" 
  "1000257" -> "1000259" 
  "1000106" -> "1000117" 
  "1000106" -> "1000119" 
}
