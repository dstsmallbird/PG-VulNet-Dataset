digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.assignment,v3 = a2)" ]
"1000122" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000124" [label = "(<operator>.indirection,*a2)" ]
"1000130" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000132" [label = "(<operator>.addition,a1 + 1)" ]
"1000139" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000141" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000142" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000145" [label = "(<operator>.assignment,v5 = *v3)" ]
"1000147" [label = "(<operator>.indirection,*v3)" ]
"1000150" [label = "(<operator>.logicalAnd,*v3 != 46 && v5)" ]
"1000151" [label = "(<operator>.notEquals,*v3 != 46)" ]
"1000152" [label = "(<operator>.indirection,*v3)" ]
"1000157" [label = "(<operator>.assignment,v6 = a1 + 2)" ]
"1000159" [label = "(<operator>.addition,a1 + 2)" ]
"1000162" [label = "(<operator>.assignment,v7 = v3)" ]
"1000168" [label = "(<operator>.assignment,result = v6 - 1)" ]
"1000170" [label = "(<operator>.subtraction,v6 - 1)" ]
"1000177" [label = "(<operator>.lessThan,a3 < (unsigned int)v6)" ]
"1000179" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000180" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000182" [label = "(RETURN,return result;,return result;)" ]
"1000184" [label = "(<operator>.preIncrement,++v7)" ]
"1000186" [label = "(<operator>.assignment,*(v6 - 1) = v5)" ]
"1000187" [label = "(<operator>.indirection,*(v6 - 1))" ]
"1000188" [label = "(<operator>.subtraction,v6 - 1)" ]
"1000192" [label = "(<operator>.assignment,result = v6)" ]
"1000195" [label = "(<operator>.assignment,v5 = *v7)" ]
"1000197" [label = "(<operator>.indirection,*v7)" ]
"1000199" [label = "(<operator>.preIncrement,++v6)" ]
"1000202" [label = "(<operator>.logicalOr,!*v7 || v5 == 46)" ]
"1000203" [label = "(<operator>.logicalNot,!*v7)" ]
"1000204" [label = "(<operator>.indirection,*v7)" ]
"1000206" [label = "(<operator>.equals,v5 == 46)" ]
"1000210" [label = "(<operator>.assignment,v8 = (_BYTE)v7 - (_BYTE)v3)" ]
"1000212" [label = "(<operator>.subtraction,(_BYTE)v7 - (_BYTE)v3)" ]
"1000213" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000214" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000216" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000217" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000220" [label = "(<operator>.assignment,v7 = v3)" ]
"1000223" [label = "(<operator>.assignment,v8 = 0)" ]
"1000227" [label = "(<operator>.assignment,*a1 = v8)" ]
"1000228" [label = "(<operator>.indirection,*a1)" ]
"1000232" [label = "(<operator>.logicalNot,!*v7)" ]
"1000233" [label = "(<operator>.indirection,*v7)" ]
"1000235" [label = "(RETURN,return result;,return result;)" ]
"1000237" [label = "(<operator>.assignment,v3 = v7 + 1)" ]
"1000239" [label = "(<operator>.addition,v7 + 1)" ]
"1000243" [label = "(<operator>.logicalOr,v7 == (char *)-1 || !v7[1])" ]
"1000244" [label = "(<operator>.equals,v7 == (char *)-1)" ]
"1000246" [label = "(<operator>.cast,(char *)-1)" ]
"1000247" [label = "(UNKNOWN,char *,char *)" ]
"1000248" [label = "(<operator>.minus,-1)" ]
"1000250" [label = "(<operator>.logicalNot,!v7[1])" ]
"1000251" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000254" [label = "(RETURN,return result;,return result;)" ]
"1000256" [label = "(<operator>.assignment,a1 = result)" ]
"1000259" [label = "(RETURN,return a1;,return a1;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000261" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000118" -> "1000122" 
  "1000118" -> "1000124" 
  "1000122" -> "1000132" 
  "1000122" -> "1000259" 
  "1000122" -> "1000259" 
  "1000124" -> "1000122" 
  "1000130" -> "1000142" 
  "1000130" -> "1000147" 
  "1000132" -> "1000130" 
  "1000139" -> "1000259" 
  "1000139" -> "1000147" 
  "1000141" -> "1000139" 
  "1000142" -> "1000141" 
  "1000145" -> "1000152" 
  "1000147" -> "1000145" 
  "1000150" -> "1000159" 
  "1000150" -> "1000220" 
  "1000151" -> "1000150" 
  "1000151" -> "1000150" 
  "1000152" -> "1000151" 
  "1000157" -> "1000162" 
  "1000159" -> "1000157" 
  "1000162" -> "1000170" 
  "1000162" -> "1000220" 
  "1000168" -> "1000180" 
  "1000168" -> "1000184" 
  "1000170" -> "1000168" 
  "1000177" -> "1000182" 
  "1000177" -> "1000184" 
  "1000179" -> "1000177" 
  "1000180" -> "1000179" 
  "1000182" -> "1000261" 
  "1000184" -> "1000188" 
  "1000186" -> "1000192" 
  "1000187" -> "1000186" 
  "1000188" -> "1000187" 
  "1000192" -> "1000197" 
  "1000195" -> "1000199" 
  "1000197" -> "1000195" 
  "1000199" -> "1000204" 
  "1000202" -> "1000170" 
  "1000202" -> "1000220" 
  "1000202" -> "1000214" 
  "1000203" -> "1000202" 
  "1000203" -> "1000206" 
  "1000204" -> "1000203" 
  "1000206" -> "1000202" 
  "1000210" -> "1000228" 
  "1000212" -> "1000210" 
  "1000213" -> "1000217" 
  "1000214" -> "1000213" 
  "1000216" -> "1000212" 
  "1000217" -> "1000216" 
  "1000220" -> "1000223" 
  "1000223" -> "1000228" 
  "1000227" -> "1000233" 
  "1000228" -> "1000227" 
  "1000232" -> "1000235" 
  "1000232" -> "1000239" 
  "1000233" -> "1000232" 
  "1000235" -> "1000261" 
  "1000237" -> "1000247" 
  "1000239" -> "1000237" 
  "1000243" -> "1000254" 
  "1000243" -> "1000256" 
  "1000244" -> "1000243" 
  "1000244" -> "1000251" 
  "1000246" -> "1000244" 
  "1000247" -> "1000248" 
  "1000248" -> "1000246" 
  "1000250" -> "1000243" 
  "1000251" -> "1000250" 
  "1000254" -> "1000261" 
  "1000256" -> "1000132" 
  "1000256" -> "1000259" 
  "1000259" -> "1000261" 
  "1000107" -> "1000118" 
}
