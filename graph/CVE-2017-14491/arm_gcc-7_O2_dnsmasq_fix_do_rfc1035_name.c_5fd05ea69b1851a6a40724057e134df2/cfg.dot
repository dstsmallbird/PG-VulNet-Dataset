digraph do_rfc1035_name {  
"1000123" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000125" [label = "(<operator>.indirection,*a2)" ]
"1000131" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000133" [label = "(<operator>.addition,a1 + 1)" ]
"1000140" [label = "(<operator>.greaterThan,(unsigned int)result > a3)" ]
"1000141" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000142" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000146" [label = "(<operator>.assignment,v5 = (unsigned __int8)*a2)" ]
"1000148" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000149" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000150" [label = "(<operator>.indirection,*a2)" ]
"1000152" [label = "(<operator>.assignment,v6 = v5 == 46)" ]
"1000154" [label = "(<operator>.equals,v5 == 46)" ]
"1000158" [label = "(<operator>.notEquals,v5 != 46)" ]
"1000161" [label = "(<operator>.assignment,v6 = v5 == 0)" ]
"1000163" [label = "(<operator>.equals,v5 == 0)" ]
"1000167" [label = "(<operator>.logicalNot,!v6)" ]
"1000170" [label = "(<operator>.assignment,v8 = a2 + 1)" ]
"1000172" [label = "(<operator>.addition,a2 + 1)" ]
"1000178" [label = "(<operator>.assignment,v9 = result + 1)" ]
"1000180" [label = "(<operator>.addition,result + 1)" ]
"1000187" [label = "(<operator>.greaterThan,(unsigned int)v9 > a3)" ]
"1000188" [label = "(<operator>.cast,(unsigned int)v9)" ]
"1000189" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000192" [label = "(RETURN,return result;,return result;)" ]
"1000194" [label = "(<operator>.assignment,*result = v5)" ]
"1000195" [label = "(<operator>.indirection,*result)" ]
"1000198" [label = "(<operator>.assignment,v5 = (unsigned __int8)*v8)" ]
"1000200" [label = "(<operator>.cast,(unsigned __int8)*v8)" ]
"1000201" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000202" [label = "(<operator>.indirection,*v8)" ]
"1000204" [label = "(<operator>.assignment,v11 = v8)" ]
"1000207" [label = "(<operator>.assignment,v10 = v5 == 0)" ]
"1000209" [label = "(<operator>.equals,v5 == 0)" ]
"1000213" [label = "(<operator>.indirection,*v8)" ]
"1000215" [label = "(<operator>.assignment,v10 = v5 == 46)" ]
"1000217" [label = "(<operator>.equals,v5 == 46)" ]
"1000220" [label = "(<operator>.preIncrement,++v8)" ]
"1000222" [label = "(<operator>.assignment,v7 = (_BYTE)v9 + ~(_BYTE)a1)" ]
"1000224" [label = "(<operator>.addition,(_BYTE)v9 + ~(_BYTE)a1)" ]
"1000225" [label = "(<operator>.cast,(_BYTE)v9)" ]
"1000226" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000228" [label = "(<operator>.not,~(_BYTE)a1)" ]
"1000229" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000230" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000232" [label = "(<operator>.preIncrement,++result)" ]
"1000237" [label = "(<operator>.assignment,v7 = 0)" ]
"1000240" [label = "(<operator>.assignment,v11 = a2)" ]
"1000244" [label = "(<operator>.assignment,*a1 = v7)" ]
"1000245" [label = "(<operator>.indirection,*a1)" ]
"1000249" [label = "(<operator>.logicalNot,!*v11)" ]
"1000250" [label = "(<operator>.indirection,*v11)" ]
"1000252" [label = "(RETURN,return result;,return result;)" ]
"1000254" [label = "(<operator>.assignment,a2 = v11 + 1)" ]
"1000256" [label = "(<operator>.addition,v11 + 1)" ]
"1000260" [label = "(<operator>.logicalOr,v11 == (_BYTE *)-1 || !v11[1])" ]
"1000261" [label = "(<operator>.equals,v11 == (_BYTE *)-1)" ]
"1000263" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000264" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000265" [label = "(<operator>.minus,-1)" ]
"1000267" [label = "(<operator>.logicalNot,!v11[1])" ]
"1000268" [label = "(<operator>.indirectIndexAccess,v11[1])" ]
"1000271" [label = "(RETURN,return result;,return result;)" ]
"1000273" [label = "(<operator>.assignment,a1 = result)" ]
"1000276" [label = "(RETURN,return a1;,return a1;)" ]
"1000109" [label = "(METHOD,do_rfc1035_name)" ]
"1000278" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000123" -> "1000133" 
  "1000123" -> "1000276" 
  "1000123" -> "1000276" 
  "1000125" -> "1000123" 
  "1000131" -> "1000142" 
  "1000131" -> "1000149" 
  "1000133" -> "1000131" 
  "1000140" -> "1000276" 
  "1000140" -> "1000149" 
  "1000141" -> "1000140" 
  "1000142" -> "1000141" 
  "1000146" -> "1000154" 
  "1000148" -> "1000146" 
  "1000149" -> "1000150" 
  "1000150" -> "1000148" 
  "1000152" -> "1000158" 
  "1000154" -> "1000152" 
  "1000158" -> "1000163" 
  "1000158" -> "1000167" 
  "1000161" -> "1000167" 
  "1000163" -> "1000161" 
  "1000167" -> "1000172" 
  "1000167" -> "1000237" 
  "1000170" -> "1000180" 
  "1000170" -> "1000237" 
  "1000172" -> "1000170" 
  "1000178" -> "1000189" 
  "1000178" -> "1000195" 
  "1000180" -> "1000178" 
  "1000187" -> "1000192" 
  "1000187" -> "1000195" 
  "1000188" -> "1000187" 
  "1000189" -> "1000188" 
  "1000192" -> "1000278" 
  "1000194" -> "1000201" 
  "1000195" -> "1000194" 
  "1000198" -> "1000204" 
  "1000200" -> "1000198" 
  "1000201" -> "1000202" 
  "1000202" -> "1000200" 
  "1000204" -> "1000209" 
  "1000207" -> "1000213" 
  "1000209" -> "1000207" 
  "1000213" -> "1000217" 
  "1000213" -> "1000220" 
  "1000215" -> "1000220" 
  "1000217" -> "1000215" 
  "1000220" -> "1000226" 
  "1000222" -> "1000232" 
  "1000224" -> "1000222" 
  "1000225" -> "1000230" 
  "1000226" -> "1000225" 
  "1000228" -> "1000224" 
  "1000229" -> "1000228" 
  "1000230" -> "1000229" 
  "1000232" -> "1000180" 
  "1000232" -> "1000237" 
  "1000232" -> "1000245" 
  "1000237" -> "1000240" 
  "1000240" -> "1000245" 
  "1000244" -> "1000250" 
  "1000245" -> "1000244" 
  "1000249" -> "1000252" 
  "1000249" -> "1000256" 
  "1000250" -> "1000249" 
  "1000252" -> "1000278" 
  "1000254" -> "1000264" 
  "1000256" -> "1000254" 
  "1000260" -> "1000271" 
  "1000260" -> "1000273" 
  "1000261" -> "1000260" 
  "1000261" -> "1000268" 
  "1000263" -> "1000261" 
  "1000264" -> "1000265" 
  "1000265" -> "1000263" 
  "1000267" -> "1000260" 
  "1000268" -> "1000267" 
  "1000271" -> "1000278" 
  "1000273" -> "1000133" 
  "1000273" -> "1000276" 
  "1000276" -> "1000278" 
  "1000109" -> "1000123" 
  "1000109" -> "1000125" 
}
