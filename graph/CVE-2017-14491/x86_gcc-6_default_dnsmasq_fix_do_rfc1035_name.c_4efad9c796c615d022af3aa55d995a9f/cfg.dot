digraph do_rfc1035_name {  
"1000120" [label = "(<operator>.assignment,v3 = a2)" ]
"1000124" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000126" [label = "(<operator>.indirection,*a2)" ]
"1000132" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000134" [label = "(<operator>.addition,a1 + 1)" ]
"1000141" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000143" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000144" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000147" [label = "(<operator>.assignment,v5 = *v3)" ]
"1000149" [label = "(<operator>.indirection,*v3)" ]
"1000152" [label = "(<operator>.logicalAnd,*v3 && v5 != 46)" ]
"1000153" [label = "(<operator>.indirection,*v3)" ]
"1000155" [label = "(<operator>.notEquals,v5 != 46)" ]
"1000159" [label = "(<operator>.assignment,v6 = a1 + 2)" ]
"1000161" [label = "(<operator>.addition,a1 + 2)" ]
"1000164" [label = "(<operator>.assignment,v7 = v3)" ]
"1000170" [label = "(<operator>.assignment,result = v6 - 1)" ]
"1000172" [label = "(<operator>.subtraction,v6 - 1)" ]
"1000175" [label = "(<operator>.assignment,v8 = v6)" ]
"1000182" [label = "(<operator>.lessThan,a3 < (unsigned int)v6)" ]
"1000184" [label = "(<operator>.cast,(unsigned int)v6)" ]
"1000185" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000187" [label = "(RETURN,return result;,return result;)" ]
"1000189" [label = "(<operator>.preIncrement,++v7)" ]
"1000191" [label = "(<operator>.assignment,*(v6++ - 1) = v5)" ]
"1000192" [label = "(<operator>.indirection,*(v6++ - 1))" ]
"1000193" [label = "(<operator>.subtraction,v6++ - 1)" ]
"1000194" [label = "(<operator>.postIncrement,v6++)" ]
"1000198" [label = "(<operator>.assignment,v5 = *v7)" ]
"1000200" [label = "(<operator>.indirection,*v7)" ]
"1000203" [label = "(<operator>.logicalOr,!*v7 || v5 == 46)" ]
"1000204" [label = "(<operator>.logicalNot,!*v7)" ]
"1000205" [label = "(<operator>.indirection,*v7)" ]
"1000207" [label = "(<operator>.equals,v5 == 46)" ]
"1000211" [label = "(<operator>.assignment,v9 = (_BYTE)v7 - (_BYTE)v3)" ]
"1000213" [label = "(<operator>.subtraction,(_BYTE)v7 - (_BYTE)v3)" ]
"1000214" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000215" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000217" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000218" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000220" [label = "(<operator>.assignment,result = v8)" ]
"1000224" [label = "(<operator>.assignment,v7 = v3)" ]
"1000227" [label = "(<operator>.assignment,v9 = 0)" ]
"1000231" [label = "(<operator>.assignment,*a1 = v9)" ]
"1000232" [label = "(<operator>.indirection,*a1)" ]
"1000236" [label = "(<operator>.logicalNot,!*v7)" ]
"1000237" [label = "(<operator>.indirection,*v7)" ]
"1000239" [label = "(RETURN,return result;,return result;)" ]
"1000241" [label = "(<operator>.assignment,v3 = v7 + 1)" ]
"1000243" [label = "(<operator>.addition,v7 + 1)" ]
"1000247" [label = "(<operator>.logicalOr,v7 == (char *)-1 || !v7[1])" ]
"1000248" [label = "(<operator>.equals,v7 == (char *)-1)" ]
"1000250" [label = "(<operator>.cast,(char *)-1)" ]
"1000251" [label = "(UNKNOWN,char *,char *)" ]
"1000252" [label = "(<operator>.minus,-1)" ]
"1000254" [label = "(<operator>.logicalNot,!v7[1])" ]
"1000255" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000258" [label = "(RETURN,return result;,return result;)" ]
"1000260" [label = "(<operator>.assignment,a1 = result)" ]
"1000263" [label = "(RETURN,return a1;,return a1;)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000265" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000120" -> "1000124" 
  "1000120" -> "1000126" 
  "1000124" -> "1000134" 
  "1000124" -> "1000263" 
  "1000124" -> "1000263" 
  "1000126" -> "1000124" 
  "1000132" -> "1000144" 
  "1000132" -> "1000149" 
  "1000134" -> "1000132" 
  "1000141" -> "1000263" 
  "1000141" -> "1000149" 
  "1000143" -> "1000141" 
  "1000144" -> "1000143" 
  "1000147" -> "1000153" 
  "1000149" -> "1000147" 
  "1000152" -> "1000161" 
  "1000152" -> "1000224" 
  "1000153" -> "1000152" 
  "1000153" -> "1000155" 
  "1000155" -> "1000152" 
  "1000159" -> "1000164" 
  "1000161" -> "1000159" 
  "1000164" -> "1000172" 
  "1000164" -> "1000224" 
  "1000170" -> "1000175" 
  "1000172" -> "1000170" 
  "1000175" -> "1000185" 
  "1000175" -> "1000189" 
  "1000182" -> "1000187" 
  "1000182" -> "1000189" 
  "1000184" -> "1000182" 
  "1000185" -> "1000184" 
  "1000187" -> "1000265" 
  "1000189" -> "1000194" 
  "1000191" -> "1000200" 
  "1000192" -> "1000191" 
  "1000193" -> "1000192" 
  "1000194" -> "1000193" 
  "1000198" -> "1000205" 
  "1000200" -> "1000198" 
  "1000203" -> "1000172" 
  "1000203" -> "1000224" 
  "1000203" -> "1000215" 
  "1000204" -> "1000203" 
  "1000204" -> "1000207" 
  "1000205" -> "1000204" 
  "1000207" -> "1000203" 
  "1000211" -> "1000220" 
  "1000213" -> "1000211" 
  "1000214" -> "1000218" 
  "1000215" -> "1000214" 
  "1000217" -> "1000213" 
  "1000218" -> "1000217" 
  "1000220" -> "1000232" 
  "1000224" -> "1000227" 
  "1000227" -> "1000232" 
  "1000231" -> "1000237" 
  "1000232" -> "1000231" 
  "1000236" -> "1000239" 
  "1000236" -> "1000243" 
  "1000237" -> "1000236" 
  "1000239" -> "1000265" 
  "1000241" -> "1000251" 
  "1000243" -> "1000241" 
  "1000247" -> "1000258" 
  "1000247" -> "1000260" 
  "1000248" -> "1000247" 
  "1000248" -> "1000255" 
  "1000250" -> "1000248" 
  "1000251" -> "1000252" 
  "1000252" -> "1000250" 
  "1000254" -> "1000247" 
  "1000255" -> "1000254" 
  "1000258" -> "1000265" 
  "1000260" -> "1000134" 
  "1000260" -> "1000263" 
  "1000263" -> "1000265" 
  "1000108" -> "1000120" 
}
