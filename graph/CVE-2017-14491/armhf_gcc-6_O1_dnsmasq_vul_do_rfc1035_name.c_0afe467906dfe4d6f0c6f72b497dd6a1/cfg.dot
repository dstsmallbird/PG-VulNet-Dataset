digraph do_rfc1035_name {  
"1000126" [label = "(<operator>.assignment,v2 = a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000136" [label = "(<operator>.assignment,v5 = result + 1)" ]
"1000138" [label = "(<operator>.addition,result + 1)" ]
"1000141" [label = "(<operator>.assignment,v6 = (unsigned __int8)*v2)" ]
"1000143" [label = "(<operator>.cast,(unsigned __int8)*v2)" ]
"1000144" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000145" [label = "(<operator>.indirection,*v2)" ]
"1000147" [label = "(<operator>.assignment,v7 = v6 == 0)" ]
"1000149" [label = "(<operator>.equals,v6 == 0)" ]
"1000153" [label = "(<operator>.indirection,*v2)" ]
"1000155" [label = "(<operator>.assignment,v7 = v6 == 46)" ]
"1000157" [label = "(<operator>.equals,v6 == 46)" ]
"1000163" [label = "(<operator>.assignment,v3 = v2)" ]
"1000166" [label = "(<operator>.assignment,v4 = 0)" ]
"1000171" [label = "(<operator>.assignment,v8 = v2 + 1)" ]
"1000173" [label = "(<operator>.addition,v2 + 1)" ]
"1000178" [label = "(<operator>.assignment,*v5++ = v6)" ]
"1000179" [label = "(<operator>.indirection,*v5++)" ]
"1000180" [label = "(<operator>.postIncrement,v5++)" ]
"1000183" [label = "(<operator>.assignment,v3 = v8)" ]
"1000186" [label = "(<operator>.assignment,v4 = (_BYTE)v8 - (_BYTE)v2)" ]
"1000188" [label = "(<operator>.subtraction,(_BYTE)v8 - (_BYTE)v2)" ]
"1000189" [label = "(<operator>.cast,(_BYTE)v8)" ]
"1000190" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000192" [label = "(<operator>.cast,(_BYTE)v2)" ]
"1000193" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000195" [label = "(<operator>.assignment,v9 = *v8++)" ]
"1000197" [label = "(<operator>.indirection,*v8++)" ]
"1000198" [label = "(<operator>.postIncrement,v8++)" ]
"1000200" [label = "(<operator>.assignment,v6 = v9)" ]
"1000203" [label = "(<operator>.assignment,v10 = v9 == 0)" ]
"1000205" [label = "(<operator>.equals,v9 == 0)" ]
"1000210" [label = "(<operator>.assignment,v10 = v6 == 46)" ]
"1000212" [label = "(<operator>.equals,v6 == 46)" ]
"1000215" [label = "(<operator>.logicalNot,!v10)" ]
"1000217" [label = "(<operator>.assignment,*result = v4)" ]
"1000218" [label = "(<operator>.indirection,*result)" ]
"1000222" [label = "(<operator>.logicalNot,!*v3)" ]
"1000223" [label = "(<operator>.indirection,*v3)" ]
"1000226" [label = "(<operator>.assignment,v2 = v3 + 1)" ]
"1000228" [label = "(<operator>.addition,v3 + 1)" ]
"1000232" [label = "(<operator>.logicalOr,v3 == (_BYTE *)-1 || !v3[1])" ]
"1000233" [label = "(<operator>.equals,v3 == (_BYTE *)-1)" ]
"1000235" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000236" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000237" [label = "(<operator>.minus,-1)" ]
"1000239" [label = "(<operator>.logicalNot,!v3[1])" ]
"1000240" [label = "(<operator>.indirectIndexAccess,v3[1])" ]
"1000244" [label = "(<operator>.assignment,result = v5)" ]
"1000249" [label = "(<operator>.assignment,v5 = result)" ]
"1000252" [label = "(<operator>.assignment,result = v5)" ]
"1000255" [label = "(RETURN,return result;,return result;)" ]
"1000110" [label = "(METHOD,do_rfc1035_name)" ]
"1000257" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000126" -> "1000130" 
  "1000130" -> "1000138" 
  "1000130" -> "1000252" 
  "1000130" -> "1000249" 
  "1000136" -> "1000144" 
  "1000138" -> "1000136" 
  "1000141" -> "1000149" 
  "1000143" -> "1000141" 
  "1000144" -> "1000145" 
  "1000145" -> "1000143" 
  "1000147" -> "1000153" 
  "1000149" -> "1000147" 
  "1000153" -> "1000157" 
  "1000153" -> "1000163" 
  "1000153" -> "1000173" 
  "1000155" -> "1000163" 
  "1000155" -> "1000173" 
  "1000157" -> "1000155" 
  "1000163" -> "1000166" 
  "1000166" -> "1000218" 
  "1000171" -> "1000180" 
  "1000173" -> "1000171" 
  "1000178" -> "1000183" 
  "1000179" -> "1000178" 
  "1000180" -> "1000179" 
  "1000183" -> "1000190" 
  "1000186" -> "1000198" 
  "1000188" -> "1000186" 
  "1000189" -> "1000193" 
  "1000190" -> "1000189" 
  "1000192" -> "1000188" 
  "1000193" -> "1000192" 
  "1000195" -> "1000200" 
  "1000197" -> "1000195" 
  "1000198" -> "1000197" 
  "1000200" -> "1000205" 
  "1000203" -> "1000215" 
  "1000203" -> "1000212" 
  "1000205" -> "1000203" 
  "1000210" -> "1000215" 
  "1000212" -> "1000210" 
  "1000215" -> "1000180" 
  "1000215" -> "1000218" 
  "1000217" -> "1000223" 
  "1000218" -> "1000217" 
  "1000222" -> "1000252" 
  "1000222" -> "1000228" 
  "1000223" -> "1000222" 
  "1000226" -> "1000236" 
  "1000228" -> "1000226" 
  "1000232" -> "1000252" 
  "1000232" -> "1000244" 
  "1000233" -> "1000232" 
  "1000233" -> "1000240" 
  "1000235" -> "1000233" 
  "1000236" -> "1000237" 
  "1000237" -> "1000235" 
  "1000239" -> "1000232" 
  "1000240" -> "1000239" 
  "1000244" -> "1000138" 
  "1000244" -> "1000252" 
  "1000249" -> "1000252" 
  "1000252" -> "1000255" 
  "1000255" -> "1000257" 
  "1000110" -> "1000126" 
  "1000110" -> "1000255" 
}
