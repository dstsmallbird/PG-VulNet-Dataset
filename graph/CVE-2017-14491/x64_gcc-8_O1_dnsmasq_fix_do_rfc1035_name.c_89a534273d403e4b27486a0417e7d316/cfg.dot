digraph do_rfc1035_name {  
"1000119" [label = "(<operator>.logicalNot,!a2)" ]
"1000121" [label = "(RETURN,return a1;,return a1;)" ]
"1000124" [label = "(<operator>.logicalNot,!*a2)" ]
"1000125" [label = "(<operator>.indirection,*a2)" ]
"1000127" [label = "(RETURN,return a1;,return a1;)" ]
"1000133" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned __int64)(a1 + 1))" ]
"1000135" [label = "(<operator>.lessThan,a3 < (unsigned __int64)(a1 + 1))" ]
"1000137" [label = "(<operator>.cast,(unsigned __int64)(a1 + 1))" ]
"1000138" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000139" [label = "(<operator>.addition,a1 + 1)" ]
"1000142" [label = "(RETURN,return a1;,return a1;)" ]
"1000144" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000146" [label = "(<operator>.addition,a1 + 1)" ]
"1000149" [label = "(<operator>.assignment,v6 = *a2)" ]
"1000151" [label = "(<operator>.indirection,*a2)" ]
"1000154" [label = "(<operator>.indirection,*a2)" ]
"1000158" [label = "(<operator>.notEquals,v6 != 46)" ]
"1000162" [label = "(<operator>.assignment,v4 = a2)" ]
"1000165" [label = "(<operator>.assignment,v5 = 0)" ]
"1000169" [label = "(<operator>.assignment,*a1 = v5)" ]
"1000170" [label = "(<operator>.indirection,*a1)" ]
"1000174" [label = "(<operator>.logicalNot,!*v4)" ]
"1000175" [label = "(<operator>.indirection,*v4)" ]
"1000177" [label = "(RETURN,return result;,return result;)" ]
"1000179" [label = "(<operator>.assignment,a2 = v4 + 1)" ]
"1000181" [label = "(<operator>.addition,v4 + 1)" ]
"1000184" [label = "(RETURN,return result;,return result;)" ]
"1000186" [label = "(<operator>.assignment,a1 = result)" ]
"1000189" [label = "(<operator>.assignment,v7 = a2 + 1)" ]
"1000191" [label = "(<operator>.addition,a2 + 1)" ]
"1000194" [label = "(<operator>.assignment,v8 = -(int)a2)" ]
"1000196" [label = "(<operator>.minus,-(int)a2)" ]
"1000197" [label = "(<operator>.cast,(int)a2)" ]
"1000198" [label = "(UNKNOWN,int,int)" ]
"1000201" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned __int64)(result + 1))" ]
"1000202" [label = "(<operator>.logicalNot,!a3)" ]
"1000204" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned __int64)(result + 1))" ]
"1000206" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000207" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000208" [label = "(<operator>.addition,result + 1)" ]
"1000212" [label = "(<operator>.assignment,*result++ = v6)" ]
"1000213" [label = "(<operator>.indirection,*result++)" ]
"1000214" [label = "(<operator>.postIncrement,result++)" ]
"1000217" [label = "(<operator>.assignment,v4 = v7)" ]
"1000220" [label = "(<operator>.assignment,v5 = v8 + (_BYTE)v7)" ]
"1000222" [label = "(<operator>.addition,v8 + (_BYTE)v7)" ]
"1000224" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000225" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000227" [label = "(<operator>.assignment,v6 = *v7++)" ]
"1000229" [label = "(<operator>.indirection,*v7++)" ]
"1000230" [label = "(<operator>.postIncrement,v7++)" ]
"1000233" [label = "(<operator>.logicalOr,!v6 || v6 == 46)" ]
"1000234" [label = "(<operator>.logicalNot,!v6)" ]
"1000236" [label = "(<operator>.equals,v6 == 46)" ]
"1000240" [label = "(RETURN,return result;,return result;)" ]
"1000107" [label = "(METHOD,do_rfc1035_name)" ]
"1000242" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000119" -> "1000121" 
  "1000119" -> "1000125" 
  "1000121" -> "1000242" 
  "1000124" -> "1000127" 
  "1000124" -> "1000133" 
  "1000124" -> "1000138" 
  "1000124" -> "1000191" 
  "1000125" -> "1000124" 
  "1000127" -> "1000242" 
  "1000133" -> "1000142" 
  "1000133" -> "1000146" 
  "1000135" -> "1000133" 
  "1000137" -> "1000135" 
  "1000138" -> "1000139" 
  "1000139" -> "1000137" 
  "1000142" -> "1000242" 
  "1000144" -> "1000151" 
  "1000146" -> "1000144" 
  "1000149" -> "1000154" 
  "1000151" -> "1000149" 
  "1000154" -> "1000158" 
  "1000154" -> "1000162" 
  "1000158" -> "1000191" 
  "1000158" -> "1000162" 
  "1000162" -> "1000165" 
  "1000165" -> "1000170" 
  "1000169" -> "1000175" 
  "1000170" -> "1000169" 
  "1000174" -> "1000177" 
  "1000174" -> "1000181" 
  "1000175" -> "1000174" 
  "1000177" -> "1000242" 
  "1000179" -> "1000184" 
  "1000181" -> "1000179" 
  "1000184" -> "1000242" 
  "1000186" -> "1000133" 
  "1000186" -> "1000138" 
  "1000186" -> "1000191" 
  "1000189" -> "1000198" 
  "1000191" -> "1000189" 
  "1000194" -> "1000202" 
  "1000196" -> "1000194" 
  "1000197" -> "1000196" 
  "1000198" -> "1000197" 
  "1000201" -> "1000214" 
  "1000201" -> "1000240" 
  "1000202" -> "1000201" 
  "1000202" -> "1000207" 
  "1000204" -> "1000201" 
  "1000206" -> "1000204" 
  "1000207" -> "1000208" 
  "1000208" -> "1000206" 
  "1000212" -> "1000217" 
  "1000213" -> "1000212" 
  "1000214" -> "1000213" 
  "1000217" -> "1000225" 
  "1000220" -> "1000230" 
  "1000222" -> "1000220" 
  "1000224" -> "1000222" 
  "1000225" -> "1000224" 
  "1000227" -> "1000234" 
  "1000229" -> "1000227" 
  "1000230" -> "1000229" 
  "1000233" -> "1000202" 
  "1000233" -> "1000170" 
  "1000234" -> "1000233" 
  "1000234" -> "1000236" 
  "1000236" -> "1000233" 
  "1000240" -> "1000242" 
  "1000107" -> "1000119" 
}
