digraph do_rfc1035_name {  
"1000116" [label = "(<operator>.assignment,result = a1)" ]
"1000125" [label = "(<operator>.assignment,v4 = (_BYTE *)result)" ]
"1000127" [label = "(<operator>.cast,(_BYTE *)result)" ]
"1000128" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000130" [label = "(<operator>.assignment,v5 = *a2)" ]
"1000132" [label = "(<operator>.indirection,*a2)" ]
"1000135" [label = "(<operator>.logicalOr,!*a2 || a3 && (unsigned __int64)(v4 + 1) > a3)" ]
"1000136" [label = "(<operator>.logicalNot,!*a2)" ]
"1000137" [label = "(<operator>.indirection,*a2)" ]
"1000139" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)(v4 + 1) > a3)" ]
"1000141" [label = "(<operator>.greaterThan,(unsigned __int64)(v4 + 1) > a3)" ]
"1000142" [label = "(<operator>.cast,(unsigned __int64)(v4 + 1))" ]
"1000143" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000144" [label = "(<operator>.addition,v4 + 1)" ]
"1000154" [label = "(<operator>.notEquals,v5 != 46)" ]
"1000159" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)&v4[v6 + 2] > a3)" ]
"1000161" [label = "(<operator>.greaterThan,(unsigned __int64)&v4[v6 + 2] > a3)" ]
"1000162" [label = "(<operator>.cast,(unsigned __int64)&v4[v6 + 2])" ]
"1000163" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000164" [label = "(<operator>.addressOf,&v4[v6 + 2])" ]
"1000165" [label = "(<operator>.indirectIndexAccess,v4[v6 + 2])" ]
"1000167" [label = "(<operator>.addition,v6 + 2)" ]
"1000171" [label = "(RETURN,return (__int64)&v4[v6 + 1];,return (__int64)&v4[v6 + 1];)" ]
"1000172" [label = "(<operator>.cast,(__int64)&v4[v6 + 1])" ]
"1000173" [label = "(UNKNOWN,__int64,__int64)" ]
"1000174" [label = "(<operator>.addressOf,&v4[v6 + 1])" ]
"1000175" [label = "(<operator>.indirectIndexAccess,v4[v6 + 1])" ]
"1000177" [label = "(<operator>.addition,v6 + 1)" ]
"1000180" [label = "(<operator>.assignment,v4[v6 + 1] = v5)" ]
"1000181" [label = "(<operator>.indirectIndexAccess,v4[v6 + 1])" ]
"1000183" [label = "(<operator>.addition,v6 + 1)" ]
"1000187" [label = "(<operator>.assignment,v5 = a2[++v6])" ]
"1000189" [label = "(<operator>.indirectIndexAccess,a2[++v6])" ]
"1000191" [label = "(<operator>.preIncrement,++v6)" ]
"1000194" [label = "(<operator>.logicalNot,!v5)" ]
"1000197" [label = "(<operator>.assignment,*v4 = v6)" ]
"1000198" [label = "(<operator>.indirection,*v4)" ]
"1000201" [label = "(<operator>.assignment,v7 = (__int64)&a2[v6 + 1])" ]
"1000203" [label = "(<operator>.cast,(__int64)&a2[v6 + 1])" ]
"1000204" [label = "(UNKNOWN,__int64,__int64)" ]
"1000205" [label = "(<operator>.addressOf,&a2[v6 + 1])" ]
"1000206" [label = "(<operator>.indirectIndexAccess,a2[v6 + 1])" ]
"1000208" [label = "(<operator>.addition,v6 + 1)" ]
"1000212" [label = "(<operator>.logicalNot,!a2[v6])" ]
"1000213" [label = "(<operator>.indirectIndexAccess,a2[v6])" ]
"1000216" [label = "(<operator>.assignment,v7 = (__int64)&a2[v6])" ]
"1000218" [label = "(<operator>.cast,(__int64)&a2[v6])" ]
"1000219" [label = "(UNKNOWN,__int64,__int64)" ]
"1000220" [label = "(<operator>.addressOf,&a2[v6])" ]
"1000221" [label = "(<operator>.indirectIndexAccess,a2[v6])" ]
"1000224" [label = "(<operator>.assignment,result = (__int64)&v4[v6 + 1])" ]
"1000226" [label = "(<operator>.cast,(__int64)&v4[v6 + 1])" ]
"1000227" [label = "(UNKNOWN,__int64,__int64)" ]
"1000228" [label = "(<operator>.addressOf,&v4[v6 + 1])" ]
"1000229" [label = "(<operator>.indirectIndexAccess,v4[v6 + 1])" ]
"1000231" [label = "(<operator>.addition,v6 + 1)" ]
"1000234" [label = "(<operator>.assignment,a2 = (char *)v7)" ]
"1000236" [label = "(<operator>.cast,(char *)v7)" ]
"1000237" [label = "(UNKNOWN,char *,char *)" ]
"1000240" [label = "(<operator>.logicalNot,!v7)" ]
"1000242" [label = "(RETURN,return (__int64)&v4[v6 + 1];,return (__int64)&v4[v6 + 1];)" ]
"1000243" [label = "(<operator>.cast,(__int64)&v4[v6 + 1])" ]
"1000244" [label = "(UNKNOWN,__int64,__int64)" ]
"1000245" [label = "(<operator>.addressOf,&v4[v6 + 1])" ]
"1000246" [label = "(<operator>.indirectIndexAccess,v4[v6 + 1])" ]
"1000248" [label = "(<operator>.addition,v6 + 1)" ]
"1000251" [label = "(<operator>.assignment,result = (__int64)v4)" ]
"1000253" [label = "(<operator>.cast,(__int64)v4)" ]
"1000254" [label = "(UNKNOWN,__int64,__int64)" ]
"1000256" [label = "(RETURN,return result;,return result;)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000258" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000116" -> "1000128" 
  "1000116" -> "1000254" 
  "1000116" -> "1000256" 
  "1000125" -> "1000132" 
  "1000127" -> "1000125" 
  "1000128" -> "1000127" 
  "1000130" -> "1000137" 
  "1000132" -> "1000130" 
  "1000135" -> "1000254" 
  "1000135" -> "1000154" 
  "1000135" -> "1000198" 
  "1000136" -> "1000135" 
  "1000136" -> "1000143" 
  "1000136" -> "1000139" 
  "1000137" -> "1000136" 
  "1000139" -> "1000135" 
  "1000141" -> "1000139" 
  "1000142" -> "1000141" 
  "1000143" -> "1000144" 
  "1000144" -> "1000142" 
  "1000154" -> "1000163" 
  "1000154" -> "1000159" 
  "1000154" -> "1000198" 
  "1000159" -> "1000173" 
  "1000159" -> "1000183" 
  "1000161" -> "1000159" 
  "1000162" -> "1000161" 
  "1000163" -> "1000167" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000167" -> "1000165" 
  "1000171" -> "1000258" 
  "1000172" -> "1000171" 
  "1000173" -> "1000177" 
  "1000174" -> "1000172" 
  "1000175" -> "1000174" 
  "1000177" -> "1000175" 
  "1000180" -> "1000191" 
  "1000181" -> "1000180" 
  "1000183" -> "1000181" 
  "1000187" -> "1000194" 
  "1000189" -> "1000187" 
  "1000191" -> "1000189" 
  "1000194" -> "1000154" 
  "1000194" -> "1000198" 
  "1000194" -> "1000254" 
  "1000197" -> "1000204" 
  "1000198" -> "1000197" 
  "1000201" -> "1000213" 
  "1000203" -> "1000201" 
  "1000204" -> "1000208" 
  "1000205" -> "1000203" 
  "1000206" -> "1000205" 
  "1000208" -> "1000206" 
  "1000212" -> "1000219" 
  "1000212" -> "1000227" 
  "1000213" -> "1000212" 
  "1000216" -> "1000227" 
  "1000218" -> "1000216" 
  "1000219" -> "1000221" 
  "1000220" -> "1000218" 
  "1000221" -> "1000220" 
  "1000224" -> "1000237" 
  "1000226" -> "1000224" 
  "1000227" -> "1000231" 
  "1000228" -> "1000226" 
  "1000229" -> "1000228" 
  "1000231" -> "1000229" 
  "1000234" -> "1000240" 
  "1000236" -> "1000234" 
  "1000237" -> "1000236" 
  "1000240" -> "1000244" 
  "1000240" -> "1000128" 
  "1000240" -> "1000254" 
  "1000242" -> "1000258" 
  "1000243" -> "1000242" 
  "1000244" -> "1000248" 
  "1000245" -> "1000243" 
  "1000246" -> "1000245" 
  "1000248" -> "1000246" 
  "1000251" -> "1000256" 
  "1000253" -> "1000251" 
  "1000254" -> "1000253" 
  "1000256" -> "1000258" 
  "1000106" -> "1000116" 
}
