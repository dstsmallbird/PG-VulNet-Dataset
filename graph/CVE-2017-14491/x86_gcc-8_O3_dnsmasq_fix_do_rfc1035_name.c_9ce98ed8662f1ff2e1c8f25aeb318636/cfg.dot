digraph do_rfc1035_name {  
"1000120" [label = "(<operator>.assignment,v3 = a2)" ]
"1000124" [label = "(<operator>.logicalNot,!a2)" ]
"1000126" [label = "(RETURN,return a1;,return a1;)" ]
"1000128" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000133" [label = "(<operator>.logicalNot,!*a2)" ]
"1000134" [label = "(<operator>.indirection,*a2)" ]
"1000136" [label = "(RETURN,return a1;,return a1;)" ]
"1000141" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000143" [label = "(<operator>.addition,a1 + 1)" ]
"1000150" [label = "(<operator>.equals,v4 == 46)" ]
"1000156" [label = "(<operator>.preIncrement,++result)" ]
"1000158" [label = "(<operator>.preIncrement,++v3)" ]
"1000160" [label = "(<operator>.assignment,*(result - 1) = v4)" ]
"1000161" [label = "(<operator>.indirection,*(result - 1))" ]
"1000162" [label = "(<operator>.subtraction,result - 1)" ]
"1000166" [label = "(<operator>.assignment,v4 = *v3)" ]
"1000168" [label = "(<operator>.indirection,*v3)" ]
"1000170" [label = "(<operator>.assignment,v6 = (_BYTE)result - 1 - (_BYTE)a1)" ]
"1000172" [label = "(<operator>.subtraction,(_BYTE)result - 1 - (_BYTE)a1)" ]
"1000173" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000174" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000176" [label = "(<operator>.subtraction,1 - (_BYTE)a1)" ]
"1000178" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000179" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000181" [label = "(<operator>.logicalAnd,*v3 != 46 && v4)" ]
"1000182" [label = "(<operator>.notEquals,*v3 != 46)" ]
"1000183" [label = "(<operator>.indirection,*v3)" ]
"1000187" [label = "(<operator>.assignment,v7 = result)" ]
"1000191" [label = "(<operator>.assignment,v8 = v6)" ]
"1000194" [label = "(<operator>.assignment,result = v7)" ]
"1000197" [label = "(<operator>.assignment,v9 = v3)" ]
"1000201" [label = "(<operator>.assignment,*a1 = v8)" ]
"1000202" [label = "(<operator>.indirection,*a1)" ]
"1000206" [label = "(<operator>.logicalNot,!*v3)" ]
"1000207" [label = "(<operator>.indirection,*v3)" ]
"1000209" [label = "(RETURN,return result;,return result;)" ]
"1000212" [label = "(<operator>.logicalNot,!++v3)" ]
"1000213" [label = "(<operator>.preIncrement,++v3)" ]
"1000215" [label = "(RETURN,return result;,return result;)" ]
"1000217" [label = "(<operator>.assignment,v4 = v9[1])" ]
"1000219" [label = "(<operator>.indirectIndexAccess,v9[1])" ]
"1000223" [label = "(<operator>.logicalNot,!v4)" ]
"1000225" [label = "(RETURN,return result;,return result;)" ]
"1000227" [label = "(<operator>.assignment,a1 = result)" ]
"1000231" [label = "(<operator>.lessThan,a3 < (unsigned int)result)" ]
"1000233" [label = "(<operator>.cast,(unsigned int)result)" ]
"1000234" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000236" [label = "(RETURN,return a1;,return a1;)" ]
"1000239" [label = "(<operator>.equals,v4 == 46)" ]
"1000244" [label = "(<operator>.assignment,v9 = v3)" ]
"1000247" [label = "(<operator>.assignment,v8 = 0)" ]
"1000254" [label = "(<operator>.assignment,v7 = result + 1)" ]
"1000256" [label = "(<operator>.addition,result + 1)" ]
"1000260" [label = "(<operator>.greaterThan,(unsigned int)(result + 1) > a3)" ]
"1000261" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000262" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000263" [label = "(<operator>.addition,result + 1)" ]
"1000267" [label = "(RETURN,return result;,return result;)" ]
"1000269" [label = "(<operator>.preIncrement,++v3)" ]
"1000271" [label = "(<operator>.assignment,*result = v4)" ]
"1000272" [label = "(<operator>.indirection,*result)" ]
"1000275" [label = "(<operator>.assignment,v6 = (_BYTE)v7 + ~(_BYTE)a1)" ]
"1000277" [label = "(<operator>.addition,(_BYTE)v7 + ~(_BYTE)a1)" ]
"1000278" [label = "(<operator>.cast,(_BYTE)v7)" ]
"1000279" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000281" [label = "(<operator>.not,~(_BYTE)a1)" ]
"1000282" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000283" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000285" [label = "(<operator>.preIncrement,++result)" ]
"1000287" [label = "(<operator>.assignment,v4 = *v3)" ]
"1000289" [label = "(<operator>.indirection,*v3)" ]
"1000292" [label = "(<operator>.logicalOr,!*v3 || v4 == 46)" ]
"1000293" [label = "(<operator>.logicalNot,!*v3)" ]
"1000294" [label = "(<operator>.indirection,*v3)" ]
"1000296" [label = "(<operator>.equals,v4 == 46)" ]
"1000108" [label = "(METHOD,do_rfc1035_name)" ]
"1000300" [label = "(METHOD_RETURN,__cdecl)" ]
  "1000120" -> "1000124" 
  "1000124" -> "1000126" 
  "1000124" -> "1000130" 
  "1000126" -> "1000300" 
  "1000128" -> "1000134" 
  "1000130" -> "1000128" 
  "1000133" -> "1000136" 
  "1000133" -> "1000143" 
  "1000133" -> "1000234" 
  "1000134" -> "1000133" 
  "1000136" -> "1000300" 
  "1000141" -> "1000234" 
  "1000141" -> "1000150" 
  "1000143" -> "1000141" 
  "1000150" -> "1000244" 
  "1000150" -> "1000156" 
  "1000156" -> "1000158" 
  "1000158" -> "1000162" 
  "1000160" -> "1000168" 
  "1000161" -> "1000160" 
  "1000162" -> "1000161" 
  "1000166" -> "1000174" 
  "1000168" -> "1000166" 
  "1000170" -> "1000183" 
  "1000172" -> "1000170" 
  "1000173" -> "1000179" 
  "1000174" -> "1000173" 
  "1000176" -> "1000172" 
  "1000178" -> "1000176" 
  "1000179" -> "1000178" 
  "1000181" -> "1000156" 
  "1000181" -> "1000187" 
  "1000182" -> "1000181" 
  "1000182" -> "1000181" 
  "1000183" -> "1000182" 
  "1000187" -> "1000191" 
  "1000191" -> "1000194" 
  "1000194" -> "1000197" 
  "1000197" -> "1000202" 
  "1000201" -> "1000207" 
  "1000202" -> "1000201" 
  "1000206" -> "1000209" 
  "1000206" -> "1000213" 
  "1000207" -> "1000206" 
  "1000209" -> "1000300" 
  "1000212" -> "1000215" 
  "1000212" -> "1000219" 
  "1000213" -> "1000212" 
  "1000215" -> "1000300" 
  "1000217" -> "1000223" 
  "1000219" -> "1000217" 
  "1000223" -> "1000225" 
  "1000223" -> "1000227" 
  "1000225" -> "1000300" 
  "1000227" -> "1000143" 
  "1000227" -> "1000234" 
  "1000231" -> "1000236" 
  "1000231" -> "1000239" 
  "1000233" -> "1000231" 
  "1000234" -> "1000233" 
  "1000236" -> "1000300" 
  "1000239" -> "1000244" 
  "1000239" -> "1000300" 
  "1000239" -> "1000256" 
  "1000244" -> "1000247" 
  "1000247" -> "1000202" 
  "1000254" -> "1000262" 
  "1000256" -> "1000254" 
  "1000260" -> "1000267" 
  "1000260" -> "1000269" 
  "1000261" -> "1000260" 
  "1000262" -> "1000263" 
  "1000263" -> "1000261" 
  "1000267" -> "1000300" 
  "1000269" -> "1000272" 
  "1000271" -> "1000279" 
  "1000272" -> "1000271" 
  "1000275" -> "1000285" 
  "1000277" -> "1000275" 
  "1000278" -> "1000283" 
  "1000279" -> "1000278" 
  "1000281" -> "1000277" 
  "1000282" -> "1000281" 
  "1000283" -> "1000282" 
  "1000285" -> "1000289" 
  "1000287" -> "1000294" 
  "1000289" -> "1000287" 
  "1000292" -> "1000300" 
  "1000292" -> "1000256" 
  "1000292" -> "1000191" 
  "1000293" -> "1000292" 
  "1000293" -> "1000296" 
  "1000294" -> "1000293" 
  "1000296" -> "1000292" 
  "1000108" -> "1000120" 
}
