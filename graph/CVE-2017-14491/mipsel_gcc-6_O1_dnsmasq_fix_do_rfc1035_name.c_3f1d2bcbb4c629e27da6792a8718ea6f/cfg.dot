digraph do_rfc1035_name {  
"1000115" [label = "(<operator>.logicalNot,!a2)" ]
"1000117" [label = "(RETURN,return a1;,return a1;)" ]
"1000120" [label = "(<operator>.logicalNot,!*a2)" ]
"1000121" [label = "(<operator>.indirection,*a2)" ]
"1000123" [label = "(RETURN,return a1;,return a1;)" ]
"1000126" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(a1 + 1))" ]
"1000127" [label = "(<operator>.logicalNot,!a3)" ]
"1000129" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(a1 + 1))" ]
"1000131" [label = "(<operator>.cast,(unsigned int)(a1 + 1))" ]
"1000132" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000133" [label = "(<operator>.addition,a1 + 1)" ]
"1000137" [label = "(<operator>.assignment,v5 = (char)*a2)" ]
"1000139" [label = "(<operator>.cast,(char)*a2)" ]
"1000140" [label = "(UNKNOWN,char,char)" ]
"1000141" [label = "(<operator>.indirection,*a2)" ]
"1000143" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000145" [label = "(<operator>.addition,a1 + 1)" ]
"1000149" [label = "(<operator>.indirection,*a2)" ]
"1000153" [label = "(<operator>.notEquals,v5 != 46)" ]
"1000157" [label = "(<operator>.assignment,v4 = a2)" ]
"1000167" [label = "(<operator>.lessThan,a3 < (unsigned int)++result)" ]
"1000169" [label = "(<operator>.cast,(unsigned int)++result)" ]
"1000170" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000171" [label = "(<operator>.preIncrement,++result)" ]
"1000174" [label = "(<operator>.preDecrement,--result)" ]
"1000176" [label = "(RETURN,return result;,return result;)" ]
"1000180" [label = "(<operator>.preIncrement,++result)" ]
"1000182" [label = "(<operator>.assignment,*(result - 1) = v5)" ]
"1000183" [label = "(<operator>.indirection,*(result - 1))" ]
"1000184" [label = "(<operator>.subtraction,result - 1)" ]
"1000188" [label = "(<operator>.assignment,v5 = (char)*++v4)" ]
"1000190" [label = "(<operator>.cast,(char)*++v4)" ]
"1000191" [label = "(UNKNOWN,char,char)" ]
"1000192" [label = "(<operator>.indirection,*++v4)" ]
"1000193" [label = "(<operator>.preIncrement,++v4)" ]
"1000195" [label = "(<operator>.assignment,v6 = (_BYTE)v4 - (_BYTE)a2)" ]
"1000197" [label = "(<operator>.subtraction,(_BYTE)v4 - (_BYTE)a2)" ]
"1000198" [label = "(<operator>.cast,(_BYTE)v4)" ]
"1000199" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000201" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000202" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000205" [label = "(<operator>.logicalOr,!*v4 || v5 == 46)" ]
"1000206" [label = "(<operator>.logicalNot,!*v4)" ]
"1000207" [label = "(<operator>.indirection,*v4)" ]
"1000209" [label = "(<operator>.equals,v5 == 46)" ]
"1000213" [label = "(<operator>.assignment,v4 = a2)" ]
"1000216" [label = "(<operator>.assignment,v6 = 0)" ]
"1000221" [label = "(<operator>.assignment,v4 = a2)" ]
"1000224" [label = "(<operator>.assignment,v6 = 0)" ]
"1000228" [label = "(<operator>.assignment,*a1 = v6)" ]
"1000229" [label = "(<operator>.indirection,*a1)" ]
"1000232" [label = "(<operator>.assignment,a2 = v4 + 1)" ]
"1000234" [label = "(<operator>.addition,v4 + 1)" ]
"1000238" [label = "(<operator>.indirection,*v4)" ]
"1000242" [label = "(<operator>.notEquals,v4 != (_BYTE *)-1)" ]
"1000244" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000245" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000246" [label = "(<operator>.minus,-1)" ]
"1000249" [label = "(<operator>.assignment,a1 = result)" ]
"1000253" [label = "(<operator>.indirectIndexAccess,v4[1])" ]
"1000257" [label = "(RETURN,return result;,return result;)" ]
"1000259" [label = "(RETURN,return a1;,return a1;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000261" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000115" -> "1000117" 
  "1000115" -> "1000121" 
  "1000117" -> "1000261" 
  "1000120" -> "1000123" 
  "1000120" -> "1000127" 
  "1000121" -> "1000120" 
  "1000123" -> "1000261" 
  "1000126" -> "1000140" 
  "1000126" -> "1000259" 
  "1000127" -> "1000126" 
  "1000127" -> "1000132" 
  "1000129" -> "1000126" 
  "1000131" -> "1000129" 
  "1000132" -> "1000133" 
  "1000133" -> "1000131" 
  "1000137" -> "1000145" 
  "1000139" -> "1000137" 
  "1000140" -> "1000141" 
  "1000141" -> "1000139" 
  "1000143" -> "1000149" 
  "1000145" -> "1000143" 
  "1000149" -> "1000153" 
  "1000149" -> "1000221" 
  "1000153" -> "1000157" 
  "1000153" -> "1000213" 
  "1000157" -> "1000170" 
  "1000157" -> "1000180" 
  "1000157" -> "1000213" 
  "1000167" -> "1000174" 
  "1000167" -> "1000184" 
  "1000169" -> "1000167" 
  "1000170" -> "1000171" 
  "1000171" -> "1000169" 
  "1000174" -> "1000176" 
  "1000176" -> "1000261" 
  "1000180" -> "1000184" 
  "1000182" -> "1000191" 
  "1000183" -> "1000182" 
  "1000184" -> "1000183" 
  "1000188" -> "1000199" 
  "1000190" -> "1000188" 
  "1000191" -> "1000193" 
  "1000192" -> "1000190" 
  "1000193" -> "1000192" 
  "1000195" -> "1000207" 
  "1000197" -> "1000195" 
  "1000198" -> "1000202" 
  "1000199" -> "1000198" 
  "1000201" -> "1000197" 
  "1000202" -> "1000201" 
  "1000205" -> "1000170" 
  "1000205" -> "1000180" 
  "1000205" -> "1000213" 
  "1000205" -> "1000229" 
  "1000206" -> "1000205" 
  "1000206" -> "1000209" 
  "1000207" -> "1000206" 
  "1000209" -> "1000205" 
  "1000213" -> "1000216" 
  "1000216" -> "1000229" 
  "1000221" -> "1000224" 
  "1000224" -> "1000229" 
  "1000228" -> "1000234" 
  "1000229" -> "1000228" 
  "1000232" -> "1000238" 
  "1000234" -> "1000232" 
  "1000238" -> "1000245" 
  "1000238" -> "1000257" 
  "1000242" -> "1000249" 
  "1000242" -> "1000257" 
  "1000244" -> "1000242" 
  "1000245" -> "1000246" 
  "1000246" -> "1000244" 
  "1000249" -> "1000253" 
  "1000253" -> "1000127" 
  "1000253" -> "1000257" 
  "1000257" -> "1000261" 
  "1000259" -> "1000261" 
  "1000105" -> "1000115" 
}
