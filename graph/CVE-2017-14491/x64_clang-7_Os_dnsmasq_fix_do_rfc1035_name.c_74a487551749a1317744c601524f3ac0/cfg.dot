digraph do_rfc1035_name {  
"1000120" [label = "(<operator>.assignment,v3 = a1)" ]
"1000123" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000125" [label = "(<operator>.indirection,*a2)" ]
"1000128" [label = "(<operator>.logicalOr,!*a2 || a3 && (unsigned __int64)(a1 + 1) > a3)" ]
"1000129" [label = "(<operator>.logicalNot,!*a2)" ]
"1000130" [label = "(<operator>.indirection,*a2)" ]
"1000132" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)(a1 + 1) > a3)" ]
"1000134" [label = "(<operator>.greaterThan,(unsigned __int64)(a1 + 1) > a3)" ]
"1000135" [label = "(<operator>.cast,(unsigned __int64)(a1 + 1))" ]
"1000136" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000137" [label = "(<operator>.addition,a1 + 1)" ]
"1000144" [label = "(<operator>.logicalAnd,v4 && v4 != 46)" ]
"1000146" [label = "(<operator>.notEquals,v4 != 46)" ]
"1000151" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)&a1[v5 + 2] > a3)" ]
"1000153" [label = "(<operator>.greaterThan,(unsigned __int64)&a1[v5 + 2] > a3)" ]
"1000154" [label = "(<operator>.cast,(unsigned __int64)&a1[v5 + 2])" ]
"1000155" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000156" [label = "(<operator>.addressOf,&a1[v5 + 2])" ]
"1000157" [label = "(<operator>.indirectIndexAccess,a1[v5 + 2])" ]
"1000159" [label = "(<operator>.addition,v5 + 2)" ]
"1000163" [label = "(RETURN,return (__int64)&v3[v5 + 1];,return (__int64)&v3[v5 + 1];)" ]
"1000164" [label = "(<operator>.cast,(__int64)&v3[v5 + 1])" ]
"1000165" [label = "(UNKNOWN,__int64,__int64)" ]
"1000166" [label = "(<operator>.addressOf,&v3[v5 + 1])" ]
"1000167" [label = "(<operator>.indirectIndexAccess,v3[v5 + 1])" ]
"1000169" [label = "(<operator>.addition,v5 + 1)" ]
"1000172" [label = "(<operator>.assignment,a1[v5 + 1] = v4)" ]
"1000173" [label = "(<operator>.indirectIndexAccess,a1[v5 + 1])" ]
"1000175" [label = "(<operator>.addition,v5 + 1)" ]
"1000179" [label = "(<operator>.assignment,v4 = a2[++v5])" ]
"1000181" [label = "(<operator>.indirectIndexAccess,a2[++v5])" ]
"1000183" [label = "(<operator>.preIncrement,++v5)" ]
"1000185" [label = "(<operator>.assignment,*a1 = v5)" ]
"1000186" [label = "(<operator>.indirection,*a1)" ]
"1000189" [label = "(<operator>.assignment,v6 = (__int64)&a2[v5 + 1])" ]
"1000191" [label = "(<operator>.cast,(__int64)&a2[v5 + 1])" ]
"1000192" [label = "(UNKNOWN,__int64,__int64)" ]
"1000193" [label = "(<operator>.addressOf,&a2[v5 + 1])" ]
"1000194" [label = "(<operator>.indirectIndexAccess,a2[v5 + 1])" ]
"1000196" [label = "(<operator>.addition,v5 + 1)" ]
"1000199" [label = "(<operator>.assignmentPlus,a2 += v5)" ]
"1000203" [label = "(<operator>.indirection,*(_BYTE *)(v6 - 1))" ]
"1000204" [label = "(<operator>.cast,(_BYTE *)(v6 - 1))" ]
"1000205" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000206" [label = "(<operator>.subtraction,v6 - 1)" ]
"1000209" [label = "(<operator>.assignment,a2 = (char *)v6)" ]
"1000211" [label = "(<operator>.cast,(char *)v6)" ]
"1000212" [label = "(UNKNOWN,char *,char *)" ]
"1000214" [label = "(<operator>.assignmentPlus,a1 += v5 + 1)" ]
"1000216" [label = "(<operator>.addition,v5 + 1)" ]
"1000220" [label = "(<operator>.logicalNot,!a2)" ]
"1000222" [label = "(RETURN,return (__int64)&v3[v5 + 1];,return (__int64)&v3[v5 + 1];)" ]
"1000223" [label = "(<operator>.cast,(__int64)&v3[v5 + 1])" ]
"1000224" [label = "(UNKNOWN,__int64,__int64)" ]
"1000225" [label = "(<operator>.addressOf,&v3[v5 + 1])" ]
"1000226" [label = "(<operator>.indirectIndexAccess,v3[v5 + 1])" ]
"1000228" [label = "(<operator>.addition,v5 + 1)" ]
"1000231" [label = "(RETURN,return (__int64)a1;,return (__int64)a1;)" ]
"1000232" [label = "(<operator>.cast,(__int64)a1)" ]
"1000233" [label = "(UNKNOWN,__int64,__int64)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000235" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000120" -> "1000125" 
  "1000123" -> "1000130" 
  "1000125" -> "1000123" 
  "1000128" -> "1000233" 
  "1000128" -> "1000144" 
  "1000128" -> "1000146" 
  "1000129" -> "1000128" 
  "1000129" -> "1000136" 
  "1000129" -> "1000132" 
  "1000130" -> "1000129" 
  "1000132" -> "1000128" 
  "1000134" -> "1000132" 
  "1000135" -> "1000134" 
  "1000136" -> "1000137" 
  "1000137" -> "1000135" 
  "1000144" -> "1000155" 
  "1000144" -> "1000151" 
  "1000144" -> "1000186" 
  "1000146" -> "1000144" 
  "1000151" -> "1000165" 
  "1000151" -> "1000175" 
  "1000153" -> "1000151" 
  "1000154" -> "1000153" 
  "1000155" -> "1000159" 
  "1000156" -> "1000154" 
  "1000157" -> "1000156" 
  "1000159" -> "1000157" 
  "1000163" -> "1000235" 
  "1000164" -> "1000163" 
  "1000165" -> "1000169" 
  "1000166" -> "1000164" 
  "1000167" -> "1000166" 
  "1000169" -> "1000167" 
  "1000172" -> "1000183" 
  "1000173" -> "1000172" 
  "1000175" -> "1000173" 
  "1000179" -> "1000144" 
  "1000179" -> "1000146" 
  "1000181" -> "1000179" 
  "1000183" -> "1000181" 
  "1000185" -> "1000192" 
  "1000186" -> "1000185" 
  "1000189" -> "1000199" 
  "1000191" -> "1000189" 
  "1000192" -> "1000196" 
  "1000193" -> "1000191" 
  "1000194" -> "1000193" 
  "1000196" -> "1000194" 
  "1000199" -> "1000205" 
  "1000203" -> "1000212" 
  "1000203" -> "1000216" 
  "1000204" -> "1000203" 
  "1000205" -> "1000206" 
  "1000206" -> "1000204" 
  "1000209" -> "1000216" 
  "1000211" -> "1000209" 
  "1000212" -> "1000211" 
  "1000214" -> "1000220" 
  "1000216" -> "1000214" 
  "1000220" -> "1000224" 
  "1000220" -> "1000233" 
  "1000220" -> "1000120" 
  "1000222" -> "1000235" 
  "1000223" -> "1000222" 
  "1000224" -> "1000228" 
  "1000225" -> "1000223" 
  "1000226" -> "1000225" 
  "1000228" -> "1000226" 
  "1000231" -> "1000235" 
  "1000232" -> "1000231" 
  "1000233" -> "1000232" 
  "1000105" -> "1000233" 
  "1000105" -> "1000233" 
  "1000105" -> "1000120" 
}
