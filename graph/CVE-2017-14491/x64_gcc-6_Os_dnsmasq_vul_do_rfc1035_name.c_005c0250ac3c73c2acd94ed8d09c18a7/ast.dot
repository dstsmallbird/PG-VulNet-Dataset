digraph do_rfc1035_name {  
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000106" [label = "(PARAM,_BYTE *a1)" ]
"1000107" [label = "(PARAM,char *a2)" ]
"1000108" [label = "(BLOCK,,)" ]
"1000109" [label = "(LOCAL,result: _BYTE *)" ]
"1000110" [label = "(LOCAL,v3: _BYTE *)" ]
"1000111" [label = "(LOCAL,i: char *)" ]
"1000112" [label = "(LOCAL,v5: char)" ]
"1000113" [label = "(<operator>.assignment,result = a1)" ]
"1000114" [label = "(IDENTIFIER,result,result = a1)" ]
"1000115" [label = "(IDENTIFIER,a1,result = a1)" ]
"1000116" [label = "(CONTROL_STRUCTURE,while ( a2 && *a2 ),while ( a2 && *a2 ))" ]
"1000117" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000118" [label = "(IDENTIFIER,a2,a2 && *a2)" ]
"1000119" [label = "(<operator>.indirection,*a2)" ]
"1000120" [label = "(IDENTIFIER,a2,a2 && *a2)" ]
"1000121" [label = "(BLOCK,,)" ]
"1000122" [label = "(<operator>.assignment,v3 = result + 1)" ]
"1000123" [label = "(IDENTIFIER,v3,v3 = result + 1)" ]
"1000124" [label = "(<operator>.addition,result + 1)" ]
"1000125" [label = "(IDENTIFIER,result,result + 1)" ]
"1000126" [label = "(LITERAL,1,result + 1)" ]
"1000127" [label = "(CONTROL_STRUCTURE,for ( i = a2; ; ++i ),for ( i = a2; ; ++i ))" ]
"1000128" [label = "(<operator>.assignment,i = a2)" ]
"1000129" [label = "(IDENTIFIER,i,i = a2)" ]
"1000130" [label = "(IDENTIFIER,a2,i = a2)" ]
"1000131" [label = "(<operator>.preIncrement,++i)" ]
"1000132" [label = "(IDENTIFIER,i,++i)" ]
"1000133" [label = "(BLOCK,,)" ]
"1000134" [label = "(<operator>.assignment,v5 = *i)" ]
"1000135" [label = "(IDENTIFIER,v5,v5 = *i)" ]
"1000136" [label = "(<operator>.indirection,*i)" ]
"1000137" [label = "(IDENTIFIER,i,v5 = *i)" ]
"1000138" [label = "(CONTROL_STRUCTURE,if ( !*i || v5 == 46 ),if ( !*i || v5 == 46 ))" ]
"1000139" [label = "(<operator>.logicalOr,!*i || v5 == 46)" ]
"1000140" [label = "(<operator>.logicalNot,!*i)" ]
"1000141" [label = "(<operator>.indirection,*i)" ]
"1000142" [label = "(IDENTIFIER,i,!*i)" ]
"1000143" [label = "(<operator>.equals,v5 == 46)" ]
"1000144" [label = "(IDENTIFIER,v5,v5 == 46)" ]
"1000145" [label = "(LITERAL,46,v5 == 46)" ]
"1000146" [label = "(CONTROL_STRUCTURE,break;,break;)" ]
"1000147" [label = "(<operator>.assignment,*v3++ = v5)" ]
"1000148" [label = "(<operator>.indirection,*v3++)" ]
"1000149" [label = "(<operator>.postIncrement,v3++)" ]
"1000150" [label = "(IDENTIFIER,v3,v3++)" ]
"1000151" [label = "(IDENTIFIER,v5,*v3++ = v5)" ]
"1000152" [label = "(<operator>.assignment,*result = (_BYTE)i - (_BYTE)a2)" ]
"1000153" [label = "(<operator>.indirection,*result)" ]
"1000154" [label = "(IDENTIFIER,result,*result = (_BYTE)i - (_BYTE)a2)" ]
"1000155" [label = "(<operator>.subtraction,(_BYTE)i - (_BYTE)a2)" ]
"1000156" [label = "(<operator>.cast,(_BYTE)i)" ]
"1000157" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000158" [label = "(IDENTIFIER,i,(_BYTE)i)" ]
"1000159" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000160" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000161" [label = "(IDENTIFIER,a2,(_BYTE)a2)" ]
"1000162" [label = "(<operator>.assignment,result = v3)" ]
"1000163" [label = "(IDENTIFIER,result,result = v3)" ]
"1000164" [label = "(IDENTIFIER,v3,result = v3)" ]
"1000165" [label = "(<operator>.assignment,a2 = &i[-(*i == 0) + 1])" ]
"1000166" [label = "(IDENTIFIER,a2,a2 = &i[-(*i == 0) + 1])" ]
"1000167" [label = "(<operator>.addressOf,&i[-(*i == 0) + 1])" ]
"1000168" [label = "(<operator>.indirectIndexAccess,i[-(*i == 0) + 1])" ]
"1000169" [label = "(IDENTIFIER,i,a2 = &i[-(*i == 0) + 1])" ]
"1000170" [label = "(<operator>.addition,-(*i == 0) + 1)" ]
"1000171" [label = "(<operator>.minus,-(*i == 0))" ]
"1000172" [label = "(<operator>.equals,*i == 0)" ]
"1000173" [label = "(<operator>.indirection,*i)" ]
"1000174" [label = "(IDENTIFIER,i,*i == 0)" ]
"1000175" [label = "(LITERAL,0,*i == 0)" ]
"1000176" [label = "(LITERAL,1,-(*i == 0) + 1)" ]
"1000177" [label = "(RETURN,return result;,return result;)" ]
"1000178" [label = "(IDENTIFIER,result,return result;)" ]
"1000179" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000105" -> "1000106" 
  "1000105" -> "1000107" 
  "1000105" -> "1000108" 
  "1000105" -> "1000179" 
  "1000108" -> "1000109" 
  "1000108" -> "1000110" 
  "1000108" -> "1000111" 
  "1000108" -> "1000112" 
  "1000108" -> "1000113" 
  "1000108" -> "1000116" 
  "1000108" -> "1000177" 
  "1000113" -> "1000114" 
  "1000113" -> "1000115" 
  "1000116" -> "1000117" 
  "1000116" -> "1000121" 
  "1000117" -> "1000118" 
  "1000117" -> "1000119" 
  "1000119" -> "1000120" 
  "1000121" -> "1000122" 
  "1000121" -> "1000127" 
  "1000121" -> "1000152" 
  "1000121" -> "1000162" 
  "1000121" -> "1000165" 
  "1000122" -> "1000123" 
  "1000122" -> "1000124" 
  "1000124" -> "1000125" 
  "1000124" -> "1000126" 
  "1000127" -> "1000128" 
  "1000127" -> "1000131" 
  "1000127" -> "1000133" 
  "1000128" -> "1000129" 
  "1000128" -> "1000130" 
  "1000131" -> "1000132" 
  "1000133" -> "1000134" 
  "1000133" -> "1000138" 
  "1000133" -> "1000147" 
  "1000134" -> "1000135" 
  "1000134" -> "1000136" 
  "1000136" -> "1000137" 
  "1000138" -> "1000139" 
  "1000138" -> "1000146" 
  "1000139" -> "1000140" 
  "1000139" -> "1000143" 
  "1000140" -> "1000141" 
  "1000141" -> "1000142" 
  "1000143" -> "1000144" 
  "1000143" -> "1000145" 
  "1000147" -> "1000148" 
  "1000147" -> "1000151" 
  "1000148" -> "1000149" 
  "1000149" -> "1000150" 
  "1000152" -> "1000153" 
  "1000152" -> "1000155" 
  "1000153" -> "1000154" 
  "1000155" -> "1000156" 
  "1000155" -> "1000159" 
  "1000156" -> "1000157" 
  "1000156" -> "1000158" 
  "1000159" -> "1000160" 
  "1000159" -> "1000161" 
  "1000162" -> "1000163" 
  "1000162" -> "1000164" 
  "1000165" -> "1000166" 
  "1000165" -> "1000167" 
  "1000167" -> "1000168" 
  "1000168" -> "1000169" 
  "1000168" -> "1000170" 
  "1000170" -> "1000171" 
  "1000170" -> "1000176" 
  "1000171" -> "1000172" 
  "1000172" -> "1000173" 
  "1000172" -> "1000175" 
  "1000173" -> "1000174" 
  "1000177" -> "1000178" 
}
