digraph do_rfc1035_name {  
"1000115" [label = "(<operator>.logicalNot,!a2)" ]
"1000117" [label = "(RETURN,return a1;,return a1;)" ]
"1000120" [label = "(<operator>.logicalNot,!*a2)" ]
"1000121" [label = "(<operator>.indirection,*a2)" ]
"1000123" [label = "(RETURN,return a1;,return a1;)" ]
"1000126" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)(a1 + 1))" ]
"1000127" [label = "(<operator>.logicalNot,!a3)" ]
"1000129" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)(a1 + 1))" ]
"1000131" [label = "(<operator>.cast,(unsigned int)(a1 + 1))" ]
"1000132" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000133" [label = "(<operator>.addition,a1 + 1)" ]
"1000137" [label = "(<operator>.assignment,v4 = (char)*a2)" ]
"1000139" [label = "(<operator>.cast,(char)*a2)" ]
"1000140" [label = "(UNKNOWN,char,char)" ]
"1000141" [label = "(<operator>.indirection,*a2)" ]
"1000143" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000145" [label = "(<operator>.addition,a1 + 1)" ]
"1000149" [label = "(<operator>.indirection,*a2)" ]
"1000153" [label = "(<operator>.equals,v4 == 46)" ]
"1000157" [label = "(<operator>.assignment,v7 = a2)" ]
"1000160" [label = "(<operator>.assignment,v5 = 0)" ]
"1000172" [label = "(<operator>.lessThan,a3 < (unsigned int)++result)" ]
"1000174" [label = "(<operator>.cast,(unsigned int)++result)" ]
"1000175" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000176" [label = "(<operator>.preIncrement,++result)" ]
"1000179" [label = "(<operator>.preDecrement,--result)" ]
"1000181" [label = "(RETURN,return result;,return result;)" ]
"1000185" [label = "(<operator>.preIncrement,++result)" ]
"1000187" [label = "(<operator>.assignment,*(result - 1) = v4)" ]
"1000188" [label = "(<operator>.indirection,*(result - 1))" ]
"1000189" [label = "(<operator>.subtraction,result - 1)" ]
"1000193" [label = "(<operator>.assignment,v4 = (char)*++a2)" ]
"1000195" [label = "(<operator>.cast,(char)*++a2)" ]
"1000196" [label = "(UNKNOWN,char,char)" ]
"1000197" [label = "(<operator>.indirection,*++a2)" ]
"1000198" [label = "(<operator>.preIncrement,++a2)" ]
"1000200" [label = "(<operator>.assignment,v5 = (_BYTE)result + ~(_BYTE)a1)" ]
"1000202" [label = "(<operator>.addition,(_BYTE)result + ~(_BYTE)a1)" ]
"1000203" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000204" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000206" [label = "(<operator>.not,~(_BYTE)a1)" ]
"1000207" [label = "(<operator>.cast,(_BYTE)a1)" ]
"1000208" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000211" [label = "(<operator>.logicalNot,!*a2)" ]
"1000212" [label = "(<operator>.indirection,*a2)" ]
"1000216" [label = "(<operator>.equals,v4 == 46)" ]
"1000220" [label = "(<operator>.assignment,v7 = a2)" ]
"1000224" [label = "(<operator>.assignment,v7 = a2)" ]
"1000229" [label = "(<operator>.assignment,v7 = a2)" ]
"1000232" [label = "(<operator>.assignment,v5 = 0)" ]
"1000236" [label = "(<operator>.assignment,*a1 = v5)" ]
"1000237" [label = "(<operator>.indirection,*a1)" ]
"1000240" [label = "(<operator>.assignment,a2 = v7 + 1)" ]
"1000242" [label = "(<operator>.addition,v7 + 1)" ]
"1000246" [label = "(<operator>.indirection,*v7)" ]
"1000250" [label = "(<operator>.notEquals,v7 != (_BYTE *)-1)" ]
"1000252" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000253" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000254" [label = "(<operator>.minus,-1)" ]
"1000257" [label = "(<operator>.assignment,a1 = result)" ]
"1000261" [label = "(<operator>.indirectIndexAccess,v7[1])" ]
"1000265" [label = "(RETURN,return result;,return result;)" ]
"1000267" [label = "(RETURN,return a1;,return a1;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000269" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000115" -> "1000117" 
  "1000115" -> "1000121" 
  "1000117" -> "1000269" 
  "1000120" -> "1000123" 
  "1000120" -> "1000127" 
  "1000121" -> "1000120" 
  "1000123" -> "1000269" 
  "1000126" -> "1000140" 
  "1000126" -> "1000267" 
  "1000127" -> "1000126" 
  "1000127" -> "1000132" 
  "1000129" -> "1000126" 
  "1000131" -> "1000129" 
  "1000132" -> "1000133" 
  "1000133" -> "1000131" 
  "1000137" -> "1000145" 
  "1000139" -> "1000137" 
  "1000140" -> "1000141" 
  "1000141" -> "1000139" 
  "1000143" -> "1000149" 
  "1000145" -> "1000143" 
  "1000149" -> "1000153" 
  "1000149" -> "1000229" 
  "1000153" -> "1000157" 
  "1000153" -> "1000175" 
  "1000153" -> "1000185" 
  "1000153" -> "1000224" 
  "1000157" -> "1000160" 
  "1000160" -> "1000237" 
  "1000172" -> "1000179" 
  "1000172" -> "1000189" 
  "1000174" -> "1000172" 
  "1000175" -> "1000176" 
  "1000176" -> "1000174" 
  "1000179" -> "1000181" 
  "1000181" -> "1000269" 
  "1000185" -> "1000189" 
  "1000187" -> "1000196" 
  "1000188" -> "1000187" 
  "1000189" -> "1000188" 
  "1000193" -> "1000204" 
  "1000195" -> "1000193" 
  "1000196" -> "1000198" 
  "1000197" -> "1000195" 
  "1000198" -> "1000197" 
  "1000200" -> "1000212" 
  "1000202" -> "1000200" 
  "1000203" -> "1000208" 
  "1000204" -> "1000203" 
  "1000206" -> "1000202" 
  "1000207" -> "1000206" 
  "1000208" -> "1000207" 
  "1000211" -> "1000224" 
  "1000211" -> "1000267" 
  "1000211" -> "1000216" 
  "1000212" -> "1000211" 
  "1000216" -> "1000175" 
  "1000216" -> "1000185" 
  "1000216" -> "1000224" 
  "1000216" -> "1000220" 
  "1000220" -> "1000237" 
  "1000224" -> "1000237" 
  "1000229" -> "1000232" 
  "1000232" -> "1000237" 
  "1000236" -> "1000242" 
  "1000237" -> "1000236" 
  "1000240" -> "1000246" 
  "1000242" -> "1000240" 
  "1000246" -> "1000253" 
  "1000246" -> "1000265" 
  "1000250" -> "1000257" 
  "1000250" -> "1000265" 
  "1000252" -> "1000250" 
  "1000253" -> "1000254" 
  "1000254" -> "1000252" 
  "1000257" -> "1000261" 
  "1000261" -> "1000127" 
  "1000261" -> "1000265" 
  "1000265" -> "1000269" 
  "1000267" -> "1000269" 
  "1000105" -> "1000115" 
}
