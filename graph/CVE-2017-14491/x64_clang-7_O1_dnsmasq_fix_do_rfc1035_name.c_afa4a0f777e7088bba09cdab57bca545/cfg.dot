digraph do_rfc1035_name {  
"1000115" [label = "(<operator>.logicalNot,!a2)" ]
"1000117" [label = "(RETURN,return (__int64)a1;,return (__int64)a1;)" ]
"1000118" [label = "(<operator>.cast,(__int64)a1)" ]
"1000119" [label = "(UNKNOWN,__int64,__int64)" ]
"1000124" [label = "(<operator>.assignment,v3 = a1)" ]
"1000128" [label = "(<operator>.logicalNot,!*a2)" ]
"1000129" [label = "(<operator>.indirection,*a2)" ]
"1000131" [label = "(RETURN,return (__int64)a1;,return (__int64)a1;)" ]
"1000132" [label = "(<operator>.cast,(__int64)a1)" ]
"1000133" [label = "(UNKNOWN,__int64,__int64)" ]
"1000136" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)(a1 + 1) > a3)" ]
"1000138" [label = "(<operator>.greaterThan,(unsigned __int64)(a1 + 1) > a3)" ]
"1000139" [label = "(<operator>.cast,(unsigned __int64)(a1 + 1))" ]
"1000140" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000141" [label = "(<operator>.addition,a1 + 1)" ]
"1000148" [label = "(<operator>.assignment,v5 = a2[i])" ]
"1000150" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000154" [label = "(<operator>.logicalOr,!v5 || v5 == 46)" ]
"1000155" [label = "(<operator>.logicalNot,!v5)" ]
"1000157" [label = "(<operator>.equals,v5 == 46)" ]
"1000162" [label = "(<operator>.logicalAnd,a3 && (unsigned __int64)&a1[i + 2] > a3)" ]
"1000164" [label = "(<operator>.greaterThan,(unsigned __int64)&a1[i + 2] > a3)" ]
"1000165" [label = "(<operator>.cast,(unsigned __int64)&a1[i + 2])" ]
"1000166" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000167" [label = "(<operator>.addressOf,&a1[i + 2])" ]
"1000168" [label = "(<operator>.indirectIndexAccess,a1[i + 2])" ]
"1000170" [label = "(<operator>.addition,i + 2)" ]
"1000174" [label = "(RETURN,return (__int64)&v3[i + 1];,return (__int64)&v3[i + 1];)" ]
"1000175" [label = "(<operator>.cast,(__int64)&v3[i + 1])" ]
"1000176" [label = "(UNKNOWN,__int64,__int64)" ]
"1000177" [label = "(<operator>.addressOf,&v3[i + 1])" ]
"1000178" [label = "(<operator>.indirectIndexAccess,v3[i + 1])" ]
"1000180" [label = "(<operator>.addition,i + 1)" ]
"1000183" [label = "(<operator>.assignment,a1[i + 1] = v5)" ]
"1000184" [label = "(<operator>.indirectIndexAccess,a1[i + 1])" ]
"1000186" [label = "(<operator>.addition,i + 1)" ]
"1000190" [label = "(<operator>.assignment,*a1 = i)" ]
"1000191" [label = "(<operator>.indirection,*a1)" ]
"1000194" [label = "(<operator>.assignment,v6 = (__int64)&a2[i + 1])" ]
"1000196" [label = "(<operator>.cast,(__int64)&a2[i + 1])" ]
"1000197" [label = "(UNKNOWN,__int64,__int64)" ]
"1000198" [label = "(<operator>.addressOf,&a2[i + 1])" ]
"1000199" [label = "(<operator>.indirectIndexAccess,a2[i + 1])" ]
"1000201" [label = "(<operator>.addition,i + 1)" ]
"1000205" [label = "(<operator>.logicalNot,!a2[i])" ]
"1000206" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000209" [label = "(<operator>.assignment,v6 = (__int64)&a2[i])" ]
"1000211" [label = "(<operator>.cast,(__int64)&a2[i])" ]
"1000212" [label = "(UNKNOWN,__int64,__int64)" ]
"1000213" [label = "(<operator>.addressOf,&a2[i])" ]
"1000214" [label = "(<operator>.indirectIndexAccess,a2[i])" ]
"1000217" [label = "(<operator>.assignmentPlus,a1 += i + 1)" ]
"1000219" [label = "(<operator>.addition,i + 1)" ]
"1000222" [label = "(<operator>.assignment,a2 = (_BYTE *)v6)" ]
"1000224" [label = "(<operator>.cast,(_BYTE *)v6)" ]
"1000225" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000228" [label = "(<operator>.logicalNot,!v6)" ]
"1000230" [label = "(RETURN,return (__int64)&v3[i + 1];,return (__int64)&v3[i + 1];)" ]
"1000231" [label = "(<operator>.cast,(__int64)&v3[i + 1])" ]
"1000232" [label = "(UNKNOWN,__int64,__int64)" ]
"1000233" [label = "(<operator>.addressOf,&v3[i + 1])" ]
"1000234" [label = "(<operator>.indirectIndexAccess,v3[i + 1])" ]
"1000236" [label = "(<operator>.addition,i + 1)" ]
"1000239" [label = "(RETURN,return (__int64)a1;,return (__int64)a1;)" ]
"1000240" [label = "(<operator>.cast,(__int64)a1)" ]
"1000241" [label = "(UNKNOWN,__int64,__int64)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000243" [label = "(METHOD_RETURN,__int64 __fastcall)" ]
  "1000115" -> "1000119" 
  "1000115" -> "1000241" 
  "1000115" -> "1000124" 
  "1000117" -> "1000243" 
  "1000118" -> "1000117" 
  "1000119" -> "1000118" 
  "1000124" -> "1000129" 
  "1000128" -> "1000133" 
  "1000128" -> "1000140" 
  "1000128" -> "1000136" 
  "1000129" -> "1000128" 
  "1000131" -> "1000243" 
  "1000132" -> "1000131" 
  "1000133" -> "1000132" 
  "1000136" -> "1000241" 
  "1000136" -> "1000150" 
  "1000138" -> "1000136" 
  "1000139" -> "1000138" 
  "1000140" -> "1000141" 
  "1000141" -> "1000139" 
  "1000148" -> "1000155" 
  "1000150" -> "1000148" 
  "1000154" -> "1000241" 
  "1000154" -> "1000166" 
  "1000154" -> "1000162" 
  "1000155" -> "1000154" 
  "1000155" -> "1000157" 
  "1000157" -> "1000154" 
  "1000162" -> "1000176" 
  "1000162" -> "1000186" 
  "1000164" -> "1000162" 
  "1000165" -> "1000164" 
  "1000166" -> "1000170" 
  "1000167" -> "1000165" 
  "1000168" -> "1000167" 
  "1000170" -> "1000168" 
  "1000174" -> "1000243" 
  "1000175" -> "1000174" 
  "1000176" -> "1000180" 
  "1000177" -> "1000175" 
  "1000178" -> "1000177" 
  "1000180" -> "1000178" 
  "1000183" -> "1000191" 
  "1000184" -> "1000183" 
  "1000186" -> "1000184" 
  "1000190" -> "1000197" 
  "1000191" -> "1000190" 
  "1000194" -> "1000206" 
  "1000196" -> "1000194" 
  "1000197" -> "1000201" 
  "1000198" -> "1000196" 
  "1000199" -> "1000198" 
  "1000201" -> "1000199" 
  "1000205" -> "1000212" 
  "1000205" -> "1000219" 
  "1000206" -> "1000205" 
  "1000209" -> "1000219" 
  "1000211" -> "1000209" 
  "1000212" -> "1000214" 
  "1000213" -> "1000211" 
  "1000214" -> "1000213" 
  "1000217" -> "1000225" 
  "1000219" -> "1000217" 
  "1000222" -> "1000228" 
  "1000224" -> "1000222" 
  "1000225" -> "1000224" 
  "1000228" -> "1000232" 
  "1000228" -> "1000241" 
  "1000228" -> "1000124" 
  "1000230" -> "1000243" 
  "1000231" -> "1000230" 
  "1000232" -> "1000236" 
  "1000233" -> "1000231" 
  "1000234" -> "1000233" 
  "1000236" -> "1000234" 
  "1000239" -> "1000243" 
  "1000240" -> "1000239" 
  "1000241" -> "1000240" 
  "1000105" -> "1000115" 
}
