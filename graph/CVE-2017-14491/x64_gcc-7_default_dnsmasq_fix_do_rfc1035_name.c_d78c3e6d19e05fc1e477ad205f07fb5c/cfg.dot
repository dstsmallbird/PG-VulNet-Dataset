digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.logicalAnd,a2 && *a2)" ]
"1000119" [label = "(<operator>.indirection,*a2)" ]
"1000125" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000127" [label = "(<operator>.addition,a1 + 1)" ]
"1000134" [label = "(<operator>.greaterThan,(unsigned __int64)result > a3)" ]
"1000135" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000136" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000140" [label = "(<operator>.assignment,v4 = *a2)" ]
"1000142" [label = "(<operator>.indirection,*a2)" ]
"1000144" [label = "(<operator>.assignment,v5 = a2)" ]
"1000148" [label = "(<operator>.logicalAnd,*a2 != 46 && v4)" ]
"1000149" [label = "(<operator>.notEquals,*a2 != 46)" ]
"1000150" [label = "(<operator>.indirection,*a2)" ]
"1000158" [label = "(<operator>.assignment,v7 = result + 1)" ]
"1000160" [label = "(<operator>.addition,result + 1)" ]
"1000167" [label = "(<operator>.greaterThan,(unsigned __int64)v7 > a3)" ]
"1000168" [label = "(<operator>.cast,(unsigned __int64)v7)" ]
"1000169" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000172" [label = "(RETURN,return result;,return result;)" ]
"1000174" [label = "(<operator>.preIncrement,++v5)" ]
"1000176" [label = "(<operator>.assignment,*result++ = v4)" ]
"1000177" [label = "(<operator>.indirection,*result++)" ]
"1000178" [label = "(<operator>.postIncrement,result++)" ]
"1000181" [label = "(<operator>.assignment,v4 = *v5)" ]
"1000183" [label = "(<operator>.indirection,*v5)" ]
"1000185" [label = "(<operator>.assignment,v6 = (_BYTE)v5 - (_BYTE)a2)" ]
"1000187" [label = "(<operator>.subtraction,(_BYTE)v5 - (_BYTE)a2)" ]
"1000188" [label = "(<operator>.cast,(_BYTE)v5)" ]
"1000189" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000191" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000192" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000195" [label = "(<operator>.logicalOr,!*v5 || v4 == 46)" ]
"1000196" [label = "(<operator>.logicalNot,!*v5)" ]
"1000197" [label = "(<operator>.indirection,*v5)" ]
"1000199" [label = "(<operator>.equals,v4 == 46)" ]
"1000203" [label = "(<operator>.assignment,result = v7)" ]
"1000207" [label = "(<operator>.assignment,v6 = 0)" ]
"1000211" [label = "(<operator>.assignment,*a1 = v6)" ]
"1000212" [label = "(<operator>.indirection,*a1)" ]
"1000216" [label = "(<operator>.logicalNot,!*v5)" ]
"1000217" [label = "(<operator>.indirection,*v5)" ]
"1000219" [label = "(RETURN,return result;,return result;)" ]
"1000221" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000223" [label = "(<operator>.addition,v5 + 1)" ]
"1000226" [label = "(RETURN,return result;,return result;)" ]
"1000228" [label = "(<operator>.assignment,a1 = result)" ]
"1000231" [label = "(RETURN,return a1;,return a1;)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000233" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000127" 
  "1000117" -> "1000231" 
  "1000117" -> "1000231" 
  "1000119" -> "1000117" 
  "1000125" -> "1000136" 
  "1000125" -> "1000142" 
  "1000127" -> "1000125" 
  "1000134" -> "1000231" 
  "1000134" -> "1000142" 
  "1000135" -> "1000134" 
  "1000136" -> "1000135" 
  "1000140" -> "1000144" 
  "1000142" -> "1000140" 
  "1000144" -> "1000150" 
  "1000148" -> "1000160" 
  "1000148" -> "1000207" 
  "1000148" -> "1000207" 
  "1000149" -> "1000148" 
  "1000149" -> "1000148" 
  "1000150" -> "1000149" 
  "1000158" -> "1000169" 
  "1000158" -> "1000174" 
  "1000160" -> "1000158" 
  "1000167" -> "1000172" 
  "1000167" -> "1000174" 
  "1000168" -> "1000167" 
  "1000169" -> "1000168" 
  "1000172" -> "1000233" 
  "1000174" -> "1000178" 
  "1000176" -> "1000183" 
  "1000177" -> "1000176" 
  "1000178" -> "1000177" 
  "1000181" -> "1000189" 
  "1000183" -> "1000181" 
  "1000185" -> "1000197" 
  "1000187" -> "1000185" 
  "1000188" -> "1000192" 
  "1000189" -> "1000188" 
  "1000191" -> "1000187" 
  "1000192" -> "1000191" 
  "1000195" -> "1000160" 
  "1000195" -> "1000207" 
  "1000195" -> "1000203" 
  "1000196" -> "1000195" 
  "1000196" -> "1000199" 
  "1000197" -> "1000196" 
  "1000199" -> "1000195" 
  "1000203" -> "1000212" 
  "1000207" -> "1000212" 
  "1000211" -> "1000217" 
  "1000212" -> "1000211" 
  "1000216" -> "1000219" 
  "1000216" -> "1000223" 
  "1000217" -> "1000216" 
  "1000219" -> "1000233" 
  "1000221" -> "1000226" 
  "1000223" -> "1000221" 
  "1000226" -> "1000233" 
  "1000228" -> "1000127" 
  "1000228" -> "1000231" 
  "1000231" -> "1000233" 
  "1000106" -> "1000117" 
  "1000106" -> "1000119" 
}
