digraph do_rfc1035_name {  
"1000117" [label = "(<operator>.logicalNot,!a2)" ]
"1000119" [label = "(RETURN,return a1;,return a1;)" ]
"1000121" [label = "(<operator>.assignment,v3 = *a2)" ]
"1000123" [label = "(<operator>.indirection,*a2)" ]
"1000126" [label = "(<operator>.logicalNot,!*a2)" ]
"1000127" [label = "(<operator>.indirection,*a2)" ]
"1000129" [label = "(RETURN,return a1;,return a1;)" ]
"1000134" [label = "(<operator>.assignment,result = a1 + 1)" ]
"1000136" [label = "(<operator>.addition,a1 + 1)" ]
"1000142" [label = "(<operator>.assignment,v5 = a2)" ]
"1000146" [label = "(<operator>.equals,v3 == 46)" ]
"1000152" [label = "(<operator>.preIncrement,++v5)" ]
"1000154" [label = "(<operator>.assignment,*result++ = v3)" ]
"1000155" [label = "(<operator>.indirection,*result++)" ]
"1000156" [label = "(<operator>.postIncrement,result++)" ]
"1000159" [label = "(<operator>.assignment,v3 = *v5)" ]
"1000161" [label = "(<operator>.indirection,*v5)" ]
"1000163" [label = "(<operator>.assignment,v6 = (_BYTE)v5 - (_BYTE)a2)" ]
"1000165" [label = "(<operator>.subtraction,(_BYTE)v5 - (_BYTE)a2)" ]
"1000166" [label = "(<operator>.cast,(_BYTE)v5)" ]
"1000167" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000169" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000170" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000172" [label = "(<operator>.logicalAnd,*v5 != 46 && v3)" ]
"1000173" [label = "(<operator>.notEquals,*v5 != 46)" ]
"1000174" [label = "(<operator>.indirection,*v5)" ]
"1000178" [label = "(<operator>.assignment,v7 = result)" ]
"1000182" [label = "(<operator>.assignment,result = v7)" ]
"1000186" [label = "(<operator>.assignment,*a1 = v6)" ]
"1000187" [label = "(<operator>.indirection,*a1)" ]
"1000191" [label = "(<operator>.logicalNot,!*v5)" ]
"1000192" [label = "(<operator>.indirection,*v5)" ]
"1000194" [label = "(RETURN,return result;,return result;)" ]
"1000196" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000198" [label = "(<operator>.addition,v5 + 1)" ]
"1000201" [label = "(RETURN,return result;,return result;)" ]
"1000203" [label = "(<operator>.assignment,v3 = v5[1])" ]
"1000205" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000209" [label = "(<operator>.logicalNot,!v3)" ]
"1000211" [label = "(RETURN,return result;,return result;)" ]
"1000213" [label = "(<operator>.assignment,a1 = result)" ]
"1000217" [label = "(<operator>.greaterThan,(unsigned __int64)result > a3)" ]
"1000218" [label = "(<operator>.cast,(unsigned __int64)result)" ]
"1000219" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000222" [label = "(RETURN,return a1;,return a1;)" ]
"1000224" [label = "(<operator>.assignment,v5 = a2)" ]
"1000228" [label = "(<operator>.equals,v3 == 46)" ]
"1000233" [label = "(<operator>.assignment,v6 = 0)" ]
"1000240" [label = "(<operator>.assignment,v7 = result + 1)" ]
"1000242" [label = "(<operator>.addition,result + 1)" ]
"1000246" [label = "(<operator>.greaterThan,(unsigned __int64)(result + 1) > a3)" ]
"1000247" [label = "(<operator>.cast,(unsigned __int64)(result + 1))" ]
"1000248" [label = "(UNKNOWN,unsigned __int64,unsigned __int64)" ]
"1000249" [label = "(<operator>.addition,result + 1)" ]
"1000253" [label = "(RETURN,return result;,return result;)" ]
"1000255" [label = "(<operator>.preIncrement,++v5)" ]
"1000257" [label = "(<operator>.assignment,*result++ = v3)" ]
"1000258" [label = "(<operator>.indirection,*result++)" ]
"1000259" [label = "(<operator>.postIncrement,result++)" ]
"1000262" [label = "(<operator>.assignment,v3 = *v5)" ]
"1000264" [label = "(<operator>.indirection,*v5)" ]
"1000266" [label = "(<operator>.assignment,v6 = (_BYTE)v5 - (_BYTE)a2)" ]
"1000268" [label = "(<operator>.subtraction,(_BYTE)v5 - (_BYTE)a2)" ]
"1000269" [label = "(<operator>.cast,(_BYTE)v5)" ]
"1000270" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000272" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000273" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000276" [label = "(<operator>.logicalOr,!*v5 || v3 == 46)" ]
"1000277" [label = "(<operator>.logicalNot,!*v5)" ]
"1000278" [label = "(<operator>.indirection,*v5)" ]
"1000280" [label = "(<operator>.equals,v3 == 46)" ]
"1000106" [label = "(METHOD,do_rfc1035_name)" ]
"1000284" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000117" -> "1000119" 
  "1000117" -> "1000123" 
  "1000119" -> "1000284" 
  "1000121" -> "1000127" 
  "1000123" -> "1000121" 
  "1000126" -> "1000129" 
  "1000126" -> "1000219" 
  "1000126" -> "1000136" 
  "1000127" -> "1000126" 
  "1000129" -> "1000284" 
  "1000134" -> "1000219" 
  "1000134" -> "1000142" 
  "1000136" -> "1000134" 
  "1000142" -> "1000146" 
  "1000146" -> "1000233" 
  "1000146" -> "1000152" 
  "1000152" -> "1000156" 
  "1000154" -> "1000161" 
  "1000155" -> "1000154" 
  "1000156" -> "1000155" 
  "1000159" -> "1000167" 
  "1000161" -> "1000159" 
  "1000163" -> "1000174" 
  "1000165" -> "1000163" 
  "1000166" -> "1000170" 
  "1000167" -> "1000166" 
  "1000169" -> "1000165" 
  "1000170" -> "1000169" 
  "1000172" -> "1000152" 
  "1000172" -> "1000178" 
  "1000173" -> "1000172" 
  "1000173" -> "1000172" 
  "1000174" -> "1000173" 
  "1000178" -> "1000182" 
  "1000182" -> "1000187" 
  "1000186" -> "1000192" 
  "1000187" -> "1000186" 
  "1000191" -> "1000194" 
  "1000191" -> "1000198" 
  "1000192" -> "1000191" 
  "1000194" -> "1000284" 
  "1000196" -> "1000201" 
  "1000198" -> "1000196" 
  "1000201" -> "1000284" 
  "1000203" -> "1000209" 
  "1000205" -> "1000203" 
  "1000209" -> "1000211" 
  "1000209" -> "1000213" 
  "1000211" -> "1000284" 
  "1000213" -> "1000219" 
  "1000213" -> "1000136" 
  "1000217" -> "1000222" 
  "1000217" -> "1000224" 
  "1000218" -> "1000217" 
  "1000219" -> "1000218" 
  "1000222" -> "1000284" 
  "1000224" -> "1000228" 
  "1000228" -> "1000233" 
  "1000228" -> "1000284" 
  "1000228" -> "1000242" 
  "1000233" -> "1000187" 
  "1000240" -> "1000248" 
  "1000242" -> "1000240" 
  "1000246" -> "1000253" 
  "1000246" -> "1000255" 
  "1000247" -> "1000246" 
  "1000248" -> "1000249" 
  "1000249" -> "1000247" 
  "1000253" -> "1000284" 
  "1000255" -> "1000259" 
  "1000257" -> "1000264" 
  "1000258" -> "1000257" 
  "1000259" -> "1000258" 
  "1000262" -> "1000270" 
  "1000264" -> "1000262" 
  "1000266" -> "1000278" 
  "1000268" -> "1000266" 
  "1000269" -> "1000273" 
  "1000270" -> "1000269" 
  "1000272" -> "1000268" 
  "1000273" -> "1000272" 
  "1000276" -> "1000284" 
  "1000276" -> "1000242" 
  "1000276" -> "1000182" 
  "1000277" -> "1000276" 
  "1000277" -> "1000280" 
  "1000278" -> "1000277" 
  "1000280" -> "1000276" 
  "1000106" -> "1000117" 
}
