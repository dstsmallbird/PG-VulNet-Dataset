digraph do_rfc1035_name {  
"1000118" [label = "(<operator>.indirection,*a2)" ]
"1000121" [label = "(<operator>.assignment,v3 = result + 1)" ]
"1000123" [label = "(<operator>.addition,result + 1)" ]
"1000127" [label = "(<operator>.logicalOr,!a3 || a3 >= (unsigned int)v3)" ]
"1000128" [label = "(<operator>.logicalNot,!a3)" ]
"1000130" [label = "(<operator>.greaterEqualsThan,a3 >= (unsigned int)v3)" ]
"1000132" [label = "(<operator>.cast,(unsigned int)v3)" ]
"1000133" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000139" [label = "(<operator>.assignment,v6 = a2)" ]
"1000145" [label = "(<operator>.assignment,v4 = (unsigned __int8)*v6)" ]
"1000147" [label = "(<operator>.cast,(unsigned __int8)*v6)" ]
"1000148" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000149" [label = "(<operator>.indirection,*v6)" ]
"1000151" [label = "(<operator>.assignment,a2 = v6)" ]
"1000154" [label = "(<operator>.assignment,v5 = v4 == 0)" ]
"1000156" [label = "(<operator>.equals,v4 == 0)" ]
"1000160" [label = "(<operator>.indirection,*v6)" ]
"1000162" [label = "(<operator>.assignment,v5 = v4 == 46)" ]
"1000164" [label = "(<operator>.equals,v4 == 46)" ]
"1000167" [label = "(<operator>.preIncrement,++v6)" ]
"1000173" [label = "(<operator>.logicalAnd,a3 && a3 < (unsigned int)(v3 + 1))" ]
"1000175" [label = "(<operator>.lessThan,a3 < (unsigned int)(v3 + 1))" ]
"1000177" [label = "(<operator>.cast,(unsigned int)(v3 + 1))" ]
"1000178" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000179" [label = "(<operator>.addition,v3 + 1)" ]
"1000182" [label = "(RETURN,return v3;,return v3;)" ]
"1000184" [label = "(<operator>.assignment,*v3++ = v4)" ]
"1000185" [label = "(<operator>.indirection,*v3++)" ]
"1000186" [label = "(<operator>.postIncrement,v3++)" ]
"1000189" [label = "(<operator>.assignment,*result = ~(_BYTE)result + (_BYTE)v3)" ]
"1000190" [label = "(<operator>.indirection,*result)" ]
"1000192" [label = "(<operator>.addition,~(_BYTE)result + (_BYTE)v3)" ]
"1000193" [label = "(<operator>.not,~(_BYTE)result)" ]
"1000194" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000195" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000197" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000198" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000201" [label = "(<operator>.indirection,*a2)" ]
"1000203" [label = "(<operator>.assignment,a2 = v6)" ]
"1000206" [label = "(<operator>.assignment,result = v3)" ]
"1000210" [label = "(<operator>.logicalNot,!a2)" ]
"1000214" [label = "(<operator>.logicalNot,!*a2)" ]
"1000215" [label = "(<operator>.indirection,*a2)" ]
"1000218" [label = "(<operator>.preIncrement,++v3)" ]
"1000224" [label = "(<operator>.lessThan,a3 < (unsigned int)v3)" ]
"1000226" [label = "(<operator>.cast,(unsigned int)v3)" ]
"1000227" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000230" [label = "(RETURN,return result;,return result;)" ]
"1000105" [label = "(METHOD,do_rfc1035_name)" ]
"1000232" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000118" -> "1000123" 
  "1000118" -> "1000230" 
  "1000121" -> "1000128" 
  "1000123" -> "1000121" 
  "1000127" -> "1000139" 
  "1000127" -> "1000230" 
  "1000127" -> "1000230" 
  "1000128" -> "1000127" 
  "1000128" -> "1000133" 
  "1000130" -> "1000127" 
  "1000132" -> "1000130" 
  "1000133" -> "1000132" 
  "1000139" -> "1000148" 
  "1000139" -> "1000190" 
  "1000145" -> "1000151" 
  "1000147" -> "1000145" 
  "1000148" -> "1000149" 
  "1000149" -> "1000147" 
  "1000151" -> "1000156" 
  "1000154" -> "1000160" 
  "1000156" -> "1000154" 
  "1000160" -> "1000164" 
  "1000160" -> "1000167" 
  "1000162" -> "1000167" 
  "1000164" -> "1000162" 
  "1000167" -> "1000190" 
  "1000167" -> "1000230" 
  "1000167" -> "1000173" 
  "1000167" -> "1000178" 
  "1000173" -> "1000182" 
  "1000173" -> "1000186" 
  "1000175" -> "1000173" 
  "1000177" -> "1000175" 
  "1000178" -> "1000179" 
  "1000179" -> "1000177" 
  "1000182" -> "1000232" 
  "1000184" -> "1000148" 
  "1000184" -> "1000190" 
  "1000185" -> "1000184" 
  "1000186" -> "1000185" 
  "1000189" -> "1000201" 
  "1000190" -> "1000195" 
  "1000192" -> "1000189" 
  "1000193" -> "1000198" 
  "1000194" -> "1000193" 
  "1000195" -> "1000194" 
  "1000197" -> "1000192" 
  "1000198" -> "1000197" 
  "1000201" -> "1000203" 
  "1000201" -> "1000206" 
  "1000203" -> "1000206" 
  "1000206" -> "1000210" 
  "1000210" -> "1000230" 
  "1000210" -> "1000215" 
  "1000214" -> "1000230" 
  "1000214" -> "1000218" 
  "1000215" -> "1000214" 
  "1000218" -> "1000139" 
  "1000218" -> "1000230" 
  "1000218" -> "1000227" 
  "1000224" -> "1000139" 
  "1000224" -> "1000230" 
  "1000224" -> "1000230" 
  "1000226" -> "1000224" 
  "1000227" -> "1000226" 
  "1000230" -> "1000232" 
  "1000105" -> "1000118" 
  "1000105" -> "1000230" 
}
