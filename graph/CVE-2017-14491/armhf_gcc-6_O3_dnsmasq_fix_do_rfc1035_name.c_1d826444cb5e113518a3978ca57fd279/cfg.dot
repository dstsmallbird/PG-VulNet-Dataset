digraph do_rfc1035_name {  
"1000128" [label = "(<operator>.assignment,v3 = result)" ]
"1000132" [label = "(<operator>.logicalNot,!a2)" ]
"1000134" [label = "(RETURN,return result;,return result;)" ]
"1000136" [label = "(<operator>.assignment,v4 = (unsigned __int8)*a2)" ]
"1000138" [label = "(<operator>.cast,(unsigned __int8)*a2)" ]
"1000139" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000140" [label = "(<operator>.indirection,*a2)" ]
"1000143" [label = "(<operator>.logicalNot,!*a2)" ]
"1000144" [label = "(<operator>.indirection,*a2)" ]
"1000146" [label = "(RETURN,return v3;,return v3;)" ]
"1000149" [label = "(<operator>.logicalNot,!a3)" ]
"1000152" [label = "(<operator>.assignment,v10 = v3 + 1)" ]
"1000154" [label = "(<operator>.addition,v3 + 1)" ]
"1000158" [label = "(<operator>.equals,v4 == 46)" ]
"1000162" [label = "(<operator>.assignment,v5 = a2)" ]
"1000165" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000167" [label = "(<operator>.addition,v3 + 1)" ]
"1000170" [label = "(<operator>.assignment,v6 = 0)" ]
"1000175" [label = "(<operator>.assignment,v11 = a2 + 1)" ]
"1000177" [label = "(<operator>.addition,a2 + 1)" ]
"1000182" [label = "(<operator>.assignment,*v10++ = v4)" ]
"1000183" [label = "(<operator>.indirection,*v10++)" ]
"1000184" [label = "(<operator>.postIncrement,v10++)" ]
"1000187" [label = "(<operator>.assignment,v5 = v11)" ]
"1000190" [label = "(<operator>.assignment,v6 = (_BYTE)v11 - (_BYTE)a2)" ]
"1000192" [label = "(<operator>.subtraction,(_BYTE)v11 - (_BYTE)a2)" ]
"1000193" [label = "(<operator>.cast,(_BYTE)v11)" ]
"1000194" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000196" [label = "(<operator>.cast,(_BYTE)a2)" ]
"1000197" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000199" [label = "(<operator>.assignment,v12 = *v11++)" ]
"1000201" [label = "(<operator>.indirection,*v11++)" ]
"1000202" [label = "(<operator>.postIncrement,v11++)" ]
"1000204" [label = "(<operator>.assignment,v4 = v12)" ]
"1000207" [label = "(<operator>.assignment,v13 = v12 == 0)" ]
"1000209" [label = "(<operator>.equals,v12 == 0)" ]
"1000214" [label = "(<operator>.assignment,v13 = v4 == 46)" ]
"1000216" [label = "(<operator>.equals,v4 == 46)" ]
"1000219" [label = "(<operator>.logicalNot,!v13)" ]
"1000222" [label = "(<operator>.assignment,result = v10)" ]
"1000226" [label = "(<operator>.assignment,*v3 = v6)" ]
"1000227" [label = "(<operator>.indirection,*v3)" ]
"1000231" [label = "(<operator>.logicalNot,!*v5)" ]
"1000232" [label = "(<operator>.indirection,*v5)" ]
"1000234" [label = "(RETURN,return result;,return result;)" ]
"1000236" [label = "(<operator>.assignment,a2 = v5 + 1)" ]
"1000238" [label = "(<operator>.addition,v5 + 1)" ]
"1000242" [label = "(<operator>.equals,v5 == (_BYTE *)-1)" ]
"1000244" [label = "(<operator>.cast,(_BYTE *)-1)" ]
"1000245" [label = "(UNKNOWN,_BYTE *,_BYTE *)" ]
"1000246" [label = "(<operator>.minus,-1)" ]
"1000248" [label = "(RETURN,return result;,return result;)" ]
"1000250" [label = "(<operator>.assignment,v4 = (unsigned __int8)v5[1])" ]
"1000252" [label = "(<operator>.cast,(unsigned __int8)v5[1])" ]
"1000253" [label = "(UNKNOWN,unsigned __int8,unsigned __int8)" ]
"1000254" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000258" [label = "(<operator>.logicalNot,!v5[1])" ]
"1000259" [label = "(<operator>.indirectIndexAccess,v5[1])" ]
"1000262" [label = "(RETURN,return result;,return result;)" ]
"1000264" [label = "(<operator>.assignment,v3 = result)" ]
"1000268" [label = "(<operator>.lessThan,a3 < (unsigned int)(v3 + 1))" ]
"1000270" [label = "(<operator>.cast,(unsigned int)(v3 + 1))" ]
"1000271" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000272" [label = "(<operator>.addition,v3 + 1)" ]
"1000275" [label = "(RETURN,return v3;,return v3;)" ]
"1000278" [label = "(<operator>.equals,v4 == 46)" ]
"1000282" [label = "(<operator>.assignment,v5 = a2)" ]
"1000285" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000287" [label = "(<operator>.addition,v3 + 1)" ]
"1000290" [label = "(<operator>.assignment,v6 = 0)" ]
"1000294" [label = "(<operator>.assignment,v7 = a2 + 1)" ]
"1000296" [label = "(<operator>.addition,a2 + 1)" ]
"1000299" [label = "(<operator>.assignment,result = v3 + 1)" ]
"1000301" [label = "(<operator>.addition,v3 + 1)" ]
"1000307" [label = "(<operator>.assignment,v10 = result + 1)" ]
"1000309" [label = "(<operator>.addition,result + 1)" ]
"1000312" [label = "(<operator>.assignment,v5 = v7)" ]
"1000315" [label = "(<operator>.assignment,v6 = (_BYTE)result - (_BYTE)v3)" ]
"1000317" [label = "(<operator>.subtraction,(_BYTE)result - (_BYTE)v3)" ]
"1000318" [label = "(<operator>.cast,(_BYTE)result)" ]
"1000319" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000321" [label = "(<operator>.cast,(_BYTE)v3)" ]
"1000322" [label = "(UNKNOWN,_BYTE,_BYTE)" ]
"1000325" [label = "(<operator>.lessThan,a3 < (unsigned int)(result + 1))" ]
"1000327" [label = "(<operator>.cast,(unsigned int)(result + 1))" ]
"1000328" [label = "(UNKNOWN,unsigned int,unsigned int)" ]
"1000329" [label = "(<operator>.addition,result + 1)" ]
"1000332" [label = "(RETURN,return result;,return result;)" ]
"1000334" [label = "(<operator>.assignment,*result++ = v4)" ]
"1000335" [label = "(<operator>.indirection,*result++)" ]
"1000336" [label = "(<operator>.postIncrement,result++)" ]
"1000339" [label = "(<operator>.assignment,v8 = *v7++)" ]
"1000341" [label = "(<operator>.indirection,*v7++)" ]
"1000342" [label = "(<operator>.postIncrement,v7++)" ]
"1000344" [label = "(<operator>.assignment,v4 = v8)" ]
"1000347" [label = "(<operator>.assignment,v9 = v8 == 0)" ]
"1000349" [label = "(<operator>.equals,v8 == 0)" ]
"1000354" [label = "(<operator>.assignment,v9 = v4 == 46)" ]
"1000356" [label = "(<operator>.equals,v4 == 46)" ]
"1000112" [label = "(METHOD,do_rfc1035_name)" ]
"1000362" [label = "(METHOD_RETURN,__fastcall)" ]
  "1000128" -> "1000132" 
  "1000132" -> "1000134" 
  "1000132" -> "1000139" 
  "1000134" -> "1000362" 
  "1000136" -> "1000144" 
  "1000138" -> "1000136" 
  "1000139" -> "1000140" 
  "1000140" -> "1000138" 
  "1000143" -> "1000146" 
  "1000143" -> "1000149" 
  "1000144" -> "1000143" 
  "1000146" -> "1000362" 
  "1000149" -> "1000154" 
  "1000149" -> "1000271" 
  "1000152" -> "1000158" 
  "1000154" -> "1000152" 
  "1000158" -> "1000162" 
  "1000158" -> "1000177" 
  "1000162" -> "1000167" 
  "1000165" -> "1000170" 
  "1000167" -> "1000165" 
  "1000170" -> "1000227" 
  "1000175" -> "1000184" 
  "1000177" -> "1000175" 
  "1000182" -> "1000187" 
  "1000183" -> "1000182" 
  "1000184" -> "1000183" 
  "1000187" -> "1000194" 
  "1000190" -> "1000202" 
  "1000192" -> "1000190" 
  "1000193" -> "1000197" 
  "1000194" -> "1000193" 
  "1000196" -> "1000192" 
  "1000197" -> "1000196" 
  "1000199" -> "1000204" 
  "1000201" -> "1000199" 
  "1000202" -> "1000201" 
  "1000204" -> "1000209" 
  "1000207" -> "1000219" 
  "1000207" -> "1000216" 
  "1000209" -> "1000207" 
  "1000214" -> "1000219" 
  "1000216" -> "1000214" 
  "1000219" -> "1000184" 
  "1000219" -> "1000222" 
  "1000222" -> "1000227" 
  "1000226" -> "1000232" 
  "1000227" -> "1000226" 
  "1000231" -> "1000234" 
  "1000231" -> "1000238" 
  "1000232" -> "1000231" 
  "1000234" -> "1000362" 
  "1000236" -> "1000245" 
  "1000238" -> "1000236" 
  "1000242" -> "1000248" 
  "1000242" -> "1000253" 
  "1000244" -> "1000242" 
  "1000245" -> "1000246" 
  "1000246" -> "1000244" 
  "1000248" -> "1000362" 
  "1000250" -> "1000259" 
  "1000252" -> "1000250" 
  "1000253" -> "1000254" 
  "1000254" -> "1000252" 
  "1000258" -> "1000262" 
  "1000258" -> "1000264" 
  "1000259" -> "1000258" 
  "1000262" -> "1000362" 
  "1000264" -> "1000149" 
  "1000268" -> "1000275" 
  "1000268" -> "1000278" 
  "1000270" -> "1000268" 
  "1000271" -> "1000272" 
  "1000272" -> "1000270" 
  "1000275" -> "1000362" 
  "1000278" -> "1000282" 
  "1000278" -> "1000296" 
  "1000282" -> "1000287" 
  "1000285" -> "1000290" 
  "1000287" -> "1000285" 
  "1000290" -> "1000227" 
  "1000294" -> "1000301" 
  "1000296" -> "1000294" 
  "1000299" -> "1000362" 
  "1000299" -> "1000309" 
  "1000301" -> "1000299" 
  "1000307" -> "1000312" 
  "1000309" -> "1000307" 
  "1000312" -> "1000319" 
  "1000315" -> "1000328" 
  "1000317" -> "1000315" 
  "1000318" -> "1000322" 
  "1000319" -> "1000318" 
  "1000321" -> "1000317" 
  "1000322" -> "1000321" 
  "1000325" -> "1000332" 
  "1000325" -> "1000336" 
  "1000327" -> "1000325" 
  "1000328" -> "1000329" 
  "1000329" -> "1000327" 
  "1000332" -> "1000362" 
  "1000334" -> "1000342" 
  "1000335" -> "1000334" 
  "1000336" -> "1000335" 
  "1000339" -> "1000344" 
  "1000341" -> "1000339" 
  "1000342" -> "1000341" 
  "1000344" -> "1000349" 
  "1000347" -> "1000356" 
  "1000347" -> "1000362" 
  "1000347" -> "1000309" 
  "1000347" -> "1000222" 
  "1000349" -> "1000347" 
  "1000354" -> "1000362" 
  "1000354" -> "1000309" 
  "1000354" -> "1000222" 
  "1000356" -> "1000354" 
  "1000112" -> "1000128" 
}
