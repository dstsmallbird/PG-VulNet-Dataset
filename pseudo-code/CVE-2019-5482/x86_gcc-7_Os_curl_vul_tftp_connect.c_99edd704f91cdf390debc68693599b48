// bad sp value at call has been detected, the output may be wrong!
int __cdecl tftp_connect(int *a1, int a2)
{
  int v2; // eax
  int result; // eax
  int v4; // esi
  int v5; // edx
  int v6; // eax
  int v7; // eax
  int v8; // ecx
  int *v9; // eax
  int v10; // edx
  char v11; // al
  int v12; // [esp-Ch] [ebp-C0h]
  int v13; // [esp-8h] [ebp-BCh]
  int v14; // [esp-4h] [ebp-B8h]
  int v15; // [esp+0h] [ebp-B4h]
  int v16; // [esp+0h] [ebp-B4h]
  int v17; // [esp+0h] [ebp-B4h]
  _BYTE *v18; // [esp+4h] [ebp-B0h]
  int (__cdecl **v19)(int, int, int, int); // [esp+8h] [ebp-ACh]
  int v20; // [esp+8h] [ebp-ACh]
  int v21; // [esp+Ch] [ebp-A8h]
  int v22; // [esp+10h] [ebp-A4h]
  int v23; // [esp+14h] [ebp-A0h]
  int buf[35]; // [esp+18h] [ebp-9Ch] BYREF
  int v25; // [esp+A4h] [ebp-10h]

  buf[32] = __readgsdword(0x14u);
  v2 = Curl_ccalloc(
         1,
         336,
         v12,
         v13,
         v14,
         v15,
         a2,
         &Curl_ccalloc,
         v21,
         v22,
         v23,
         buf[0],
         buf[1],
         buf[2],
         buf[3],
         buf[4],
         buf[5],
         buf[6],
         buf[7],
         buf[8],
         buf[9],
         buf[10],
         buf[11],
         buf[12],
         buf[13],
         buf[14],
         buf[15],
         buf[16],
         buf[17],
         buf[18],
         buf[19],
         buf[20],
         buf[21],
         buf[22],
         buf[23],
         buf[24],
         buf[25],
         buf[26],
         buf[27],
         buf[28],
         buf[29],
         buf[30],
         buf[31]);
  a1[185] = v2;
  if ( !v2 )
    return 27;
  v4 = v2;
  result = *a1;
  v5 = *(_DWORD *)(*a1 + 1568);
  if ( v5 )
  {
    result = 71;
    if ( (unsigned int)(v5 - 8) > 0xFFB0 )
      return result;
  }
  else
  {
    v5 = 512;
  }
  if ( !*(_DWORD *)(v4 + 328) )
  {
    v16 = v5;
    result = (*v19)(1, v5 + 4, result, result);
    *(_DWORD *)(v4 + 328) = result;
    v5 = v16;
    if ( !result )
      return 27;
  }
  if ( !*(_DWORD *)(v4 + 332) )
  {
    v17 = v5;
    result = (*v19)(1, v5 + 4, result, result);
    *(_DWORD *)(v4 + 332) = result;
    v5 = v17;
    if ( !result )
      return 27;
  }
  v25 = result;
  buf[34] = result;
  v20 = v5;
  Curl_conncontrol(a1, 1);
  v6 = a1[103];
  *(_DWORD *)(v4 + 16) = a1;
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 8) = -100;
  *(_DWORD *)(v4 + 20) = v6;
  v7 = a1[18];
  *(_DWORD *)(v4 + 320) = v20;
  *(_DWORD *)(v4 + 324) = v20;
  *(_WORD *)(v4 + 52) = *(_DWORD *)(v7 + 4);
  tftp_set_timeouts();
  if ( (*((_BYTE *)a1 + 583) & 2) == 0 )
  {
    v25 = v8;
    if ( bind(*(_DWORD *)(v4 + 20), (const struct sockaddr *)(v4 + 52), *(_DWORD *)(a1[18] + 16)) )
    {
      v9 = __errno_location();
      v25 = v10;
      v11 = Curl_strerror(*v9, (char *)buf, 128);
      Curl_failf(*a1, "bind() failed; %s", v11);
      return 7;
    }
    *((_BYTE *)a1 + 583) |= 2u;
  }
  Curl_pgrsStartNow(*a1);
  *v18 = 1;
  return 0;
}
