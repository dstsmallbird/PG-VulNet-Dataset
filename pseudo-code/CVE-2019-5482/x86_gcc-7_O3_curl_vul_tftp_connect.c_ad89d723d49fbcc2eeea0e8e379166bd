int __cdecl tftp_connect(_DWORD *a1, _BYTE *a2)
{
  int v2; // eax
  int v3; // esi
  int v4; // ebp
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int result; // eax
  int *v9; // eax
  char v10; // al
  char buf[128]; // [esp+14h] [ebp-A0h] BYREF
  unsigned int v12; // [esp+94h] [ebp-20h]

  v12 = __readgsdword(0x14u);
  v2 = Curl_ccalloc(1, 336);
  a1[185] = v2;
  if ( !v2 )
    return 27;
  v3 = v2;
  v4 = *(_DWORD *)(*a1 + 1568);
  if ( v4 )
  {
    result = 71;
    if ( (unsigned int)(v4 - 8) > 0xFFB0 )
      return result;
  }
  else
  {
    v4 = 512;
  }
  if ( !*(_DWORD *)(v3 + 328) )
  {
    v5 = Curl_ccalloc(1, v4 + 4);
    *(_DWORD *)(v3 + 328) = v5;
    if ( !v5 )
      return 27;
  }
  if ( !*(_DWORD *)(v3 + 332) )
  {
    v6 = Curl_ccalloc(1, v4 + 4);
    *(_DWORD *)(v3 + 332) = v6;
    if ( !v6 )
      return 27;
  }
  Curl_conncontrol(a1, 1);
  v7 = a1[103];
  *(_DWORD *)(v3 + 16) = a1;
  *(_DWORD *)v3 = 0;
  *(_DWORD *)(v3 + 8) = -100;
  *(_DWORD *)(v3 + 320) = v4;
  *(_DWORD *)(v3 + 324) = v4;
  *(_DWORD *)(v3 + 20) = v7;
  *(_WORD *)(v3 + 52) = *(_DWORD *)(a1[18] + 4);
  tftp_set_timeouts();
  if ( (*((_BYTE *)a1 + 583) & 2) != 0 )
  {
LABEL_11:
    Curl_pgrsStartNow(*a1);
    *a2 = 1;
    return 0;
  }
  if ( !bind(*(_DWORD *)(v3 + 20), (const struct sockaddr *)(v3 + 52), *(_DWORD *)(a1[18] + 16)) )
  {
    *((_BYTE *)a1 + 583) |= 2u;
    goto LABEL_11;
  }
  v9 = __errno_location();
  v10 = Curl_strerror(*v9, buf, 128);
  Curl_failf(*a1, "bind() failed; %s", v10);
  return 7;
}
