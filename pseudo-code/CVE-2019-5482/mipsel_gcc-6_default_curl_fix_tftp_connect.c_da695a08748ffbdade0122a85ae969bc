int __fastcall tftp_connect(_DWORD *a1, _BYTE *a2)
{
  int v4; // $v0
  int v5; // $s0
  int v6; // $v0
  int v7; // $s2
  int v8; // $s6
  int v9; // $v0
  int v10; // $v1
  int v11; // $v0
  int result; // $v0
  int v13; // $v1
  int v14; // $v0
  int *v15; // $v0
  int v16; // $s0
  const char *v17; // $v0
  int v18; // $v0
  char v19[128]; // [sp+1Ch] [-84h] BYREF

  v4 = Curl_ccalloc(1, 336);
  a1[188] = v4;
  if ( !v4 )
    return 27;
  v5 = v4;
  v6 = *(_DWORD *)(*a1 + 1576);
  if ( v6 )
  {
    v13 = 512;
    if ( (unsigned int)(v6 - 8) >= 0xFFB1 )
      return 71;
    if ( v6 >= 512 )
      v13 = *(_DWORD *)(*a1 + 1576);
    v7 = *(_DWORD *)(*a1 + 1576);
    v8 = v13;
  }
  else
  {
    v7 = 512;
    v8 = 512;
  }
  if ( !*(_DWORD *)(v5 + 328) )
  {
    v14 = Curl_ccalloc(1, v8 + 4);
    *(_DWORD *)(v5 + 328) = v14;
    if ( !v14 )
      return 27;
  }
  if ( *(_DWORD *)(v5 + 332) || (v18 = Curl_ccalloc(1, v8 + 4), (*(_DWORD *)(v5 + 332) = v18) != 0) )
  {
    Curl_conncontrol(a1, 1);
    v9 = a1[20];
    v10 = a1[105];
    *(_DWORD *)(v5 + 16) = a1;
    *(_DWORD *)v5 = 0;
    *(_DWORD *)(v5 + 20) = v10;
    *(_DWORD *)(v5 + 324) = v7;
    *(_DWORD *)(v5 + 8) = -100;
    v11 = *(_DWORD *)(v9 + 4);
    *(_DWORD *)(v5 + 320) = 512;
    *(_WORD *)(v5 + 52) = v11;
    tftp_set_timeouts(v5);
    if ( ((a1[147] >> 25) & 1) == 0 )
    {
      if ( bind(*(_DWORD *)(v5 + 20), (const struct sockaddr *)(v5 + 52), *(_DWORD *)(a1[20] + 16)) )
      {
        v16 = *a1;
        v15 = _errno_location();
        v17 = (const char *)Curl_strerror(*v15, v19, 128);
        Curl_failf(v16, "bind() failed; %s", v17);
        return 7;
      }
      a1[147] = a1[147] & 0xFDFFFFFF | 0x2000000;
    }
    Curl_pgrsStartNow(*a1);
    result = 0;
    *a2 = 1;
    return result;
  }
  return 27;
}
