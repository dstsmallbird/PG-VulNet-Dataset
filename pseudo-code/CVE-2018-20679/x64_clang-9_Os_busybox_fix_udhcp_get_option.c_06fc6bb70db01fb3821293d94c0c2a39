__int64 __fastcall udhcp_get_option(__int64 a1, int a2, __int64 a3)
{
  __int64 v3; // rax
  __int64 v4; // r14
  __int64 v5; // r8
  __int64 v6; // r9
  int v7; // edi
  int v8; // er10
  __int64 v9; // rcx
  __int64 v10; // rbx
  int v11; // eax
  __int64 v12; // rbx
  __int64 v14; // [rsp-8h] [rbp-18h]

  v14 = v3;
  v4 = a1 + 240;
  v5 = a1 + 44;
  v6 = a1 + 108;
  v7 = 388;
  v8 = 0;
  while ( 2 )
  {
    LODWORD(v9) = 1;
    v10 = 0LL;
    while ( 1 )
    {
      v11 = *(unsigned __int8 *)(v4 + v10);
      if ( *(_BYTE *)(v4 + v10) )
        break;
      ++v10;
      LODWORD(v9) = v9 - 1;
      if ( (int)v9 + v7 < 2 )
        goto LABEL_19;
    }
    if ( (_BYTE)v11 == 0xFF )
    {
      if ( (v8 & 0x101) == 1 )
      {
        v8 |= 0x101u;
        v7 = 128;
        v4 = v6;
        goto LABEL_18;
      }
      if ( (v8 & 0x202) == 2 )
      {
        v8 |= 0x202u;
        v7 = 64;
        v4 = v5;
        goto LABEL_18;
      }
      v12 = 0LL;
      if ( (unsigned int)dhcp_verbose >= 3 )
        bb_error_msg((unsigned int)"option 0x%02x not found", a2, a3, v9, v5, v6, v14);
    }
    else
    {
      LODWORD(v9) = v7 - v10;
      if ( v7 - (int)v10 < 2 )
        goto LABEL_19;
      v9 = *(unsigned __int8 *)(v4 + v10 + 1);
      a3 = (unsigned int)-*(unsigned __int8 *)(v4 + v10 + 1);
      v7 = v7 - 2 - *(unsigned __int8 *)(v4 + v10 + 1) - v10;
      if ( v7 < 0 )
        goto LABEL_19;
      if ( v11 != a2 )
      {
        if ( (_BYTE)v11 == 52 && (_BYTE)v9 )
          v8 |= *(unsigned __int8 *)(v4 + v10 + 2);
        LODWORD(a3) = v10 + v4 + v9 + 2;
        v4 += v10 + v9 + 2;
LABEL_18:
        if ( v7 > 0 )
          continue;
        goto LABEL_19;
      }
      if ( !(_BYTE)v9 )
      {
LABEL_19:
        v12 = 0LL;
        bb_error_msg((unsigned int)"bad packet, malformed option field", a2, a3, v9, v5, v6, v14);
        return v12;
      }
      log_option("option found", v4 + v10, a3, v9, v5, v6, v14);
      v12 = v4 + v10 + 2;
    }
    return v12;
  }
}
