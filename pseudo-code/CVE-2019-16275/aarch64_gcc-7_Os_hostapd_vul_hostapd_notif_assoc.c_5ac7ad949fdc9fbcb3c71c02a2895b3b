int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v10; // x22
  size_t v11; // x23
  sta_info *v12; // x0
  sta_info *v13; // x19
  int v14; // w2
  int v15; // w22
  __int64 v16; // x2
  __int64 v17; // x3
  __int64 v18; // x4
  bool v19; // zf
  wpa_state_machine *v20; // x1
  unsigned int v21; // w0
  unsigned int v22; // w26
  u8 *v23; // x0
  int v25; // w0
  u32 v26; // w1
  unsigned int v27; // w2
  int v28; // w1
  int v29; // w21
  wpa_event v30; // w1
  ieee802_11_elems elems; // [xsp+68h] [xbp+58h] BYREF
  u8 buf[1064]; // [xsp+2F0h] [xbp+2E0h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie - 2;
    v11 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v10 = elems.rsn_ie - 2;
    v11 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v10 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v10 = elems.wpa_ie - 2;
      v11 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v11 = 0LL;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v12 = ap_get_sta(hapd, addr);
  v13 = v12;
  if ( v12 )
  {
    ap_sta_no_session_timeout(hapd, v12);
    accounting_sta_stop(hapd, v13);
    v13->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v13 = ap_sta_add(hapd, addr);
    if ( !v13 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v13->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v14 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v13->addr, v14);
    ap_free_sta(hapd, v13);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v13, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    if ( v10 )
      v19 = v11 == 0;
    else
      v19 = 1;
    if ( v19 )
    {
      wpa_printf(2, "No WPA/RSN IE from STA");
      v14 = 13;
      goto fail;
    }
    if ( !v13->wpa_sm )
      v13->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v13->addr, 0LL);
    v20 = v13->wpa_sm;
    if ( !v20 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine", v16, v17, v18);
      return -1;
    }
    v21 = wpa_validate_wpa_ie(
            hapd->wpa_auth,
            v20,
            hapd->iface->freq,
            v10,
            v11,
            elems.mdie,
            elems.mdie_len,
            elems.owe_dh,
            elems.owe_dh_len);
    v22 = v21;
    if ( v21 )
    {
      wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v21);
      wpa_hexdump(2, (const unsigned __int8 *)"IE", v10, v11);
      switch ( v22 )
      {
        case 2u:
          v14 = 18;
          break;
        case 3u:
          v14 = 19;
          break;
        case 4u:
          v14 = 20;
          break;
        case 8u:
          v14 = 24;
          break;
        default:
          v14 = 13;
          break;
      }
      goto fail;
    }
    if ( (v13->flags & 0x402) == 1026 && !v13->sa_query_timed_out && v13->sa_query_count > 0 )
      ap_check_sa_query_timeout(hapd, v13);
    if ( (v13->flags & 0x402) == 1026 )
    {
      v15 = v13->sa_query_timed_out;
      if ( !v15 && v13->auth_alg != 2 )
      {
        if ( !v13->sa_query_count )
          ap_sta_start_sa_query(hapd, v13);
        v23 = hostapd_eid_assoc_comeback_time(hapd, v13, buf);
        hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v23 - buf);
        return v15;
      }
    }
    v25 = wpa_auth_uses_mfp(v13->wpa_sm);
    v26 = v13->flags;
    v27 = v26 & 0xFFFFFBFF;
    v28 = v26 | 0x400;
    if ( !v25 )
      v28 = v27;
    v13->flags = v28;
  }
  v29 = v13->flags & 2;
  v13->flags = v13->flags & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v13);
  if ( reassoc && v13->auth_alg == 2 )
    v30 = WPA_ASSOC_FT;
  else
    v30 = WPA_ASSOC;
  v15 = 0;
  wpa_auth_sm_event(v13->wpa_sm, v30);
  hostapd_new_assoc_sta(hapd, v13, v29 != 0);
  ieee802_1x_notify_port_enabled(v13->eapol_sm, 1);
  return v15;
}
