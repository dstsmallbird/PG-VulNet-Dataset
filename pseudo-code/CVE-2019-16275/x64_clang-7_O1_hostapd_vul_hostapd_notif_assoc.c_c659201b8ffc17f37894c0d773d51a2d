int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v10; // r12
  size_t v11; // r13
  sta_info *v13; // rax
  sta_info *v14; // rbx
  wpa_state_machine *v15; // rsi
  __int64 v16; // rdx
  __int64 v17; // rcx
  __int64 v18; // r8
  unsigned int v19; // eax
  unsigned int v20; // ebp
  unsigned int v21; // ebp
  int v22; // edx
  int v23; // eax
  unsigned int v24; // ecx
  u32 v25; // ebp
  wpa_state_machine *v26; // rdi
  wpa_event v27; // esi
  u8 *v28; // rax
  int v29; // [rsp+4h] [rbp-6E4h]
  ieee802_11_elems elems; // [rsp+8h] [rbp-6E0h] BYREF
  u8 eid[1112]; // [rsp+290h] [rbp-458h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  v29 = reassoc;
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie - 2;
    v11 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v10 = elems.rsn_ie - 2;
    v11 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    v10 = elems.wpa_ie - 2;
    v11 = elems.wpa_ie_len + 2LL;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v10 = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    v11 = 0LL;
  }
  v13 = ap_get_sta(hapd, addr);
  if ( v13 )
  {
    v14 = v13;
    ap_sta_no_session_timeout(hapd, v13);
    accounting_sta_stop(hapd, v14);
    v14->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v14 = ap_sta_add(hapd, addr);
    if ( !v14 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v14->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v22 = 1;
    goto LABEL_25;
  }
  ap_copy_sta_supp_op_classes(v14, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
    goto LABEL_37;
  if ( !v10 || !v11 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v22 = 13;
LABEL_25:
    hostapd_drv_sta_disassoc(hapd, v14->addr, v22);
    ap_free_sta(hapd, v14);
    return -1;
  }
  v15 = v14->wpa_sm;
  if ( !v15 )
  {
    v15 = wpa_auth_sta_init(hapd->wpa_auth, v14->addr, 0LL);
    v14->wpa_sm = v15;
    if ( !v15 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine", v16, v17, v18);
      return -1;
    }
  }
  v19 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v15,
          hapd->iface->freq,
          v10,
          v11,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v19 )
  {
    v20 = v19;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v19);
    wpa_hexdump(2, "IE", v10, v11);
    v21 = v20 - 2;
    v22 = 13;
    if ( v21 < 7 )
      v22 = dword_47F5D0[v21];
    goto LABEL_25;
  }
  if ( (v14->flags & 0x402) == 1026 && !v14->sa_query_timed_out && v14->sa_query_count > 0 )
    ap_check_sa_query_timeout(hapd, v14);
  if ( (v14->flags & 0x402) == 1026 && !v14->sa_query_timed_out && v14->auth_alg != 2 )
  {
    if ( !v14->sa_query_count )
      ap_sta_start_sa_query(hapd, v14);
    v28 = hostapd_eid_assoc_comeback_time(hapd, v14, eid);
    hostapd_sta_assoc(hapd, addr, v29, 0x1Eu, eid, v28 - eid);
    return 0;
  }
  v23 = wpa_auth_uses_mfp(v14->wpa_sm);
  v24 = v14->flags & 0xFFFFFBFF;
  if ( v23 )
    v24 = v14->flags | 0x400;
  v14->flags = v24;
LABEL_37:
  v25 = v14->flags;
  v14->flags = v25 & 0xFFF7FFFC | 3;
  hostapd_set_sta_flags(hapd, v14);
  if ( v29 && v14->auth_alg == 2 )
  {
    v26 = v14->wpa_sm;
    v27 = WPA_ASSOC_FT;
  }
  else
  {
    v26 = v14->wpa_sm;
    v27 = WPA_ASSOC;
  }
  wpa_auth_sm_event(v26, v27);
  hostapd_new_assoc_sta(hapd, v14, (v25 >> 1) & 1);
  ieee802_1x_notify_port_enabled(v14->eapol_sm, 1);
  return 0;
}
