int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v5; // eax
  int v6; // esi
  u8 v7; // dh
  u8 v8; // bl
  u8 v9; // bh
  u8 v10; // cl
  const u8 *v11; // ebx
  sta_info *v13; // eax
  sta_info *v14; // esi
  sta_info *v15; // eax
  wpa_state_machine *v16; // eax
  int v17; // eax
  int v18; // ebp
  int v19; // eax
  unsigned int v20; // edi
  hostapd_data *v21; // ebx
  u32 v22; // eax
  int v23; // eax
  u32 v24; // edi
  u8 *v25; // eax
  int wpa_ie_len; // [esp+0h] [ebp-59Ch]
  ieee802_11_elems elems; // [esp+8h] [ebp-594h] BYREF
  u8 eid[1080]; // [esp+164h] [ebp-438h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  v5 = *addr;
  v6 = addr[1];
  if ( (v5 & 1) != 0 )
  {
    v10 = addr[2];
    v7 = addr[3];
    v8 = addr[4];
    v9 = addr[5];
  }
  else
  {
    v7 = addr[3];
    v8 = addr[4];
    v9 = addr[5];
    if ( v9 | (unsigned __int8)(v5 | v6 | v8 | v7 | addr[2]) )
    {
      v10 = addr[2];
      if ( *(_DWORD *)hapd->own_addr ^ *(_DWORD *)addr | (unsigned __int16)(*(_WORD *)&hapd->own_addr[4] ^ *((_WORD *)addr + 2)) )
      {
        random_add_randomness(addr, 6u);
        hostapd_logger(hapd, addr, 1u, 2, "associated");
        ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
        if ( elems.wps_ie )
        {
          v11 = elems.wps_ie - 2;
          wpa_ie_len = elems.wps_ie_len + 2;
          wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
        }
        else if ( elems.rsn_ie )
        {
          v11 = elems.rsn_ie - 2;
          wpa_ie_len = elems.rsn_ie_len + 2;
          wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
        }
        else if ( elems.wpa_ie )
        {
          v11 = elems.wpa_ie - 2;
          wpa_ie_len = elems.wpa_ie_len + 2;
          wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
        }
        else
        {
          wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
          v11 = 0;
          wpa_ie_len = 0;
        }
        v13 = ap_get_sta(hapd, addr);
        if ( v13 )
        {
          v14 = v13;
          ap_sta_no_session_timeout(hapd, v13);
          accounting_sta_stop(hapd, v14);
          v14->timeout_next = STA_NULLFUNC;
          v14->flags &= 0xFFFECFFF;
          if ( hapd->iface->drv_max_acl_mac_addrs )
            goto LABEL_23;
        }
        else
        {
          v15 = ap_sta_add(hapd, addr);
          v14 = v15;
          if ( !v15 )
          {
            hostapd_drv_sta_disassoc(hapd, addr, 5);
            return -1;
          }
          v15->flags &= 0xFFFECFFF;
          if ( hapd->iface->drv_max_acl_mac_addrs )
            goto LABEL_23;
        }
        if ( hostapd_check_acl(hapd, addr, 0) != 1 )
        {
          wpa_printf(
            3,
            "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
            *addr,
            addr[1],
            addr[2],
            addr[3],
            addr[4],
            addr[5]);
          v19 = 1;
          goto LABEL_39;
        }
LABEL_23:
        ap_copy_sta_supp_op_classes(v14, elems.supp_op_classes, elems.supp_op_classes_len);
        if ( !hapd->conf->wpa )
        {
          v20 = v14->flags;
          v21 = hapd;
          goto LABEL_32;
        }
        if ( v11 && wpa_ie_len )
        {
          v16 = v14->wpa_sm;
          if ( !v16 )
          {
            v16 = wpa_auth_sta_init(hapd->wpa_auth, v14->addr, 0);
            v14->wpa_sm = v16;
            if ( !v16 )
            {
              wpa_printf(5, "Failed to initialize WPA state machine");
              return -1;
            }
          }
          v17 = wpa_validate_wpa_ie(
                  hapd->wpa_auth,
                  v16,
                  hapd->iface->freq,
                  v11,
                  wpa_ie_len,
                  elems.mdie,
                  elems.mdie_len,
                  elems.owe_dh,
                  elems.owe_dh_len);
          if ( v17 )
          {
            v18 = v17;
            wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v17);
            wpa_hexdump(2, "IE", v11, wpa_ie_len);
            v19 = 13;
            if ( (unsigned int)(v18 - 2) < 7 )
              v19 = (int)*(&off_80CD628 + v18);
            goto LABEL_39;
          }
          v22 = v14->flags;
          if ( (v22 & 0x402) == 1026 )
          {
            v21 = hapd;
            if ( !v14->sa_query_timed_out && v14->sa_query_count > 0 )
            {
              ap_check_sa_query_timeout(hapd, v14);
              if ( (v14->flags & 0x402) != 1026 )
                goto LABEL_51;
              goto LABEL_49;
            }
          }
          else
          {
            v21 = hapd;
          }
          if ( (v22 & 0x402) != 1026 )
          {
LABEL_51:
            v23 = wpa_auth_uses_mfp(v14->wpa_sm);
            v24 = v14->flags;
            if ( v23 )
              v20 = v24 | 0x400;
            else
              v20 = v24 & 0xFFFFFBFF;
            v14->flags = v20;
LABEL_32:
            v14->flags = v20 & 0xFFF7FFFC | 3;
            hostapd_set_sta_flags(v21, v14);
            if ( reassoc && v14->auth_alg == 2 )
              wpa_auth_sm_event(v14->wpa_sm, WPA_ASSOC_FT);
            else
              wpa_auth_sm_event(v14->wpa_sm, WPA_ASSOC);
            hostapd_new_assoc_sta(v21, v14, (v20 >> 1) & 1);
            ieee802_1x_notify_port_enabled(v14->eapol_sm, 1);
            return 0;
          }
LABEL_49:
          if ( !v14->sa_query_timed_out && v14->auth_alg != 2 )
          {
            if ( !v14->sa_query_count )
              ap_sta_start_sa_query(v21, v14);
            v25 = hostapd_eid_assoc_comeback_time(v21, v14, eid);
            hostapd_sta_assoc(v21, addr, reassoc, 0x1Eu, eid, v25 - eid);
            return 0;
          }
          goto LABEL_51;
        }
        wpa_printf(2, "No WPA/RSN IE from STA");
        v19 = 13;
LABEL_39:
        hostapd_drv_sta_disassoc(hapd, v14->addr, v19);
        ap_free_sta(hapd, v14);
        return -1;
      }
    }
    else
    {
      v10 = addr[2];
    }
  }
  wpa_printf(
    2,
    "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
    "hostapd_notif_assoc",
    v5,
    v6,
    v10,
    v7,
    v8,
    v9);
  return 0;
}
