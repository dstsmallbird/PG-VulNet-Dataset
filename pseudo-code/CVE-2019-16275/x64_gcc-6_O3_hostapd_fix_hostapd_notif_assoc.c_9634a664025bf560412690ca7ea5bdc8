int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  u8 v5; // bp
  __int64 v8; // r8
  __int64 v9; // r9
  __int64 v10; // r10
  __int64 v11; // r11
  u8 v13; // al
  int v15; // er13
  const u8 *v17; // r13
  size_t v18; // r14
  sta_info *v19; // rax
  sta_info *v20; // rbp
  hostapd_iface *v21; // rax
  wpa_state_machine *v22; // rsi
  unsigned int v23; // eax
  bool v24; // zf
  u32 v25; // eax
  int v26; // ebx
  u8 *v27; // rax
  int v28; // edx
  u8 res; // [rsp+8h] [rbp-700h]
  int resa; // [rsp+8h] [rbp-700h]
  u8 v31; // [rsp+Ch] [rbp-6FCh]
  u8 v32; // [rsp+Dh] [rbp-6FBh]
  u8 v33; // [rsp+Eh] [rbp-6FAh]
  u8 v34; // [rsp+Fh] [rbp-6F9h]
  ieee802_11_elems elems; // [rsp+10h] [rbp-6F8h] BYREF
  u8 buf[1064]; // [rsp+2A0h] [rbp-468h] BYREF
  unsigned __int64 v37; // [rsp+6C8h] [rbp-40h]

  v37 = __readfsqword(0x28u);
  if ( !addr )
  {
    v15 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return v15;
  }
  v5 = *addr;
  if ( (*addr & 1) != 0 )
  {
    v8 = addr[1];
    v9 = addr[2];
    v10 = addr[3];
    v11 = addr[4];
    v13 = addr[5];
    goto LABEL_6;
  }
  v8 = addr[1];
  v9 = addr[2];
  v10 = addr[3];
  v11 = addr[4];
  res = addr[5];
  v13 = res | v11 | v10 | v9 | v8 | v5;
  if ( !v13 )
  {
LABEL_6:
    v15 = 0;
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      v8,
      v9,
      v10,
      v11,
      v13);
    return v15;
  }
  v34 = addr[4];
  v33 = addr[3];
  v32 = addr[2];
  v31 = addr[1];
  if ( !memcmp(addr, hapd->own_addr, 6uLL) )
  {
    v11 = v34;
    v10 = v33;
    v9 = v32;
    v8 = v31;
    v13 = res;
    goto LABEL_6;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v17 = elems.wps_ie - 2;
    v18 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v17 = elems.rsn_ie - 2;
    v18 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v17 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v17 = elems.wpa_ie - 2;
      v18 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v18 = 0LL;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v19 = ap_get_sta(hapd, addr);
  v20 = v19;
  if ( v19 )
  {
    ap_sta_no_session_timeout(hapd, v19);
    accounting_sta_stop(hapd, v20);
    v20->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v20 = ap_sta_add(hapd, addr);
    if ( !v20 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v21 = hapd->iface;
  v20->flags &= 0xFFFECFFF;
  if ( !v21->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v28 = 1;
fail:
    v15 = -1;
    hostapd_drv_sta_disassoc(hapd, v20->addr, v28);
    ap_free_sta(hapd, v20);
    return v15;
  }
  ap_copy_sta_supp_op_classes(v20, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v25 = v20->flags;
    goto LABEL_23;
  }
  if ( !v17 || !v18 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v28 = 13;
    goto fail;
  }
  v22 = v20->wpa_sm;
  if ( !v22 )
  {
    v22 = wpa_auth_sta_init(hapd->wpa_auth, v20->addr, 0LL);
    v20->wpa_sm = v22;
    if ( !v22 )
    {
      v15 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v15;
    }
  }
  v23 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v22,
          hapd->iface->freq,
          v17,
          v18,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v23 )
  {
    resa = v23;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v23);
    wpa_hexdump(2, "IE", v17, v18);
    v28 = 18;
    if ( resa != 2 )
    {
      v28 = 19;
      if ( resa != 3 )
      {
        v28 = 20;
        if ( resa != 4 )
        {
          v28 = 13;
          if ( resa == 8 )
            v28 = 24;
        }
      }
    }
    goto fail;
  }
  if ( (v20->flags & 0x402) == 1026 )
  {
    v15 = v20->sa_query_timed_out;
    if ( !v15 )
    {
      if ( v20->sa_query_count <= 0
        || (ap_check_sa_query_timeout(hapd, v20), (v20->flags & 0x402) == 1026) && !v20->sa_query_timed_out )
      {
        if ( v20->auth_alg != 2 )
        {
          if ( !v20->sa_query_count )
            ap_sta_start_sa_query(hapd, v20);
          v27 = hostapd_eid_assoc_comeback_time(hapd, v20, buf);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v27 - buf);
          return v15;
        }
      }
    }
  }
  v24 = wpa_auth_uses_mfp(v20->wpa_sm) == 0;
  v25 = v20->flags;
  if ( v24 )
    BYTE1(v25) &= 0xFBu;
  else
    BYTE1(v25) |= 4u;
LABEL_23:
  v26 = v25 & 2;
  v20->flags = v25 & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v20);
  if ( reassoc && v20->auth_alg == 2 )
    wpa_auth_sm_event(v20->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v20->wpa_sm, WPA_ASSOC);
  v15 = 0;
  hostapd_new_assoc_sta(hapd, v20, v26 != 0);
  ieee802_1x_notify_port_enabled(v20->eapol_sm, 1);
  return v15;
}
