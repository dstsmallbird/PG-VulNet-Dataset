int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v11; // x23
  size_t v12; // x24
  sta_info *v13; // x0
  sta_info *v14; // x22
  wpa_state_machine *v15; // x1
  __int64 v16; // x2
  __int64 v17; // x3
  __int64 v18; // x4
  unsigned int v19; // w0
  unsigned int v20; // w25
  int v21; // w2
  int v22; // w0
  u32 v23; // w8
  int v24; // w9
  unsigned int v25; // w8
  u32 v26; // w21
  wpa_event v27; // w1
  u8 *v28; // x0
  u8 eid[1064]; // [xsp+10h] [xbp-6F0h] BYREF
  ieee802_11_elems elems; // [xsp+438h] [xbp-2C8h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  if ( is_multicast_ether_addr(addr)
    || is_zero_ether_addr_0(addr)
    || !(*(_DWORD *)addr ^ *(_DWORD *)hapd->own_addr | *((unsigned __int16 *)addr + 2) ^ *(unsigned __int16 *)&hapd->own_addr[4]) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    return 0;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v11 = elems.wps_ie - 2;
    v12 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v11 = elems.rsn_ie - 2;
    v12 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    v11 = elems.wpa_ie - 2;
    v12 = elems.wpa_ie_len + 2LL;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v11 = 0LL;
    v12 = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  v13 = ap_get_sta(hapd, addr);
  if ( v13 )
  {
    v14 = v13;
    ap_sta_no_session_timeout(hapd, v13);
    accounting_sta_stop(hapd, v14);
    v14->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v14 = ap_sta_add(hapd, addr);
    if ( !v14 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v14->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v21 = 1;
    goto fail;
  }
  ap_copy_sta_supp_op_classes(v14, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
    goto LABEL_43;
  if ( !v11 || !v12 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    goto LABEL_29;
  }
  v15 = v14->wpa_sm;
  if ( !v15 )
  {
    v15 = wpa_auth_sta_init(hapd->wpa_auth, v14->addr, 0LL);
    v14->wpa_sm = v15;
    if ( !v15 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine", v16, v17, v18);
      return -1;
    }
  }
  v19 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v15,
          hapd->iface->freq,
          v11,
          v12,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v19 )
  {
    v20 = v19;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v19);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v11, v12);
    if ( v20 - 2 < 7 )
    {
      v21 = dword_47DB00[v20 - 2];
fail:
      hostapd_drv_sta_disassoc(hapd, v14->addr, v21);
      ap_free_sta(hapd, v14);
      return -1;
    }
LABEL_29:
    v21 = 13;
    goto fail;
  }
  if ( (~v14->flags & 0x402) == 0 && !v14->sa_query_timed_out && v14->sa_query_count >= 1 )
    ap_check_sa_query_timeout(hapd, v14);
  if ( (~v14->flags & 0x402) != 0 || v14->sa_query_timed_out || v14->auth_alg == 2 )
  {
    v22 = wpa_auth_uses_mfp(v14->wpa_sm);
    v23 = v14->flags;
    v24 = v23 | 0x400;
    v25 = v23 & 0xFFFFFBFF;
    if ( v22 )
      v25 = v24;
    v14->flags = v25;
LABEL_43:
    v26 = v14->flags;
    v14->flags = v26 & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v14);
    if ( reassoc && v14->auth_alg == 2 )
      v27 = WPA_ASSOC_FT;
    else
      v27 = WPA_ASSOC;
    wpa_auth_sm_event(v14->wpa_sm, v27);
    hostapd_new_assoc_sta(hapd, v14, (v26 >> 1) & 1);
    ieee802_1x_notify_port_enabled(v14->eapol_sm, 1);
    return 0;
  }
  if ( !v14->sa_query_count )
    ap_sta_start_sa_query(hapd, v14);
  v28 = hostapd_eid_assoc_comeback_time(hapd, v14, eid);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v28 - eid);
  return 0;
}
