int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v10; // x21
  size_t v11; // x25
  int v12; // w26
  sta_info *v13; // x0
  sta_info *v14; // x19
  hostapd_iface *v15; // x1
  bool v16; // zf
  wpa_state_machine *v17; // x1
  wpa_authenticator *v18; // x0
  unsigned int v19; // w0
  unsigned int v20; // w26
  unsigned int v21; // w0
  int v22; // w21
  wpa_state_machine *v23; // x0
  int v24; // w25
  u8 *v26; // x0
  const u8 *v27; // x21
  __int64 v28; // x25
  wpa_state_machine *v29; // x0
  int v30; // w2
  ieee802_11_elems elems; // [xsp+68h] [xbp+58h] BYREF
  u8 buf[1064]; // [xsp+2F0h] [xbp+2E0h] BYREF

  if ( !addr )
  {
    v24 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return v24;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie - 2;
    v11 = elems.wps_ie_len + 2LL;
    v12 = 0;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else
  {
    v27 = elems.rsn_ie;
    if ( elems.rsn_ie )
    {
      v28 = elems.rsn_ie_len;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
      v10 = v27 - 2;
      v11 = v28 + 2;
      v13 = ap_get_sta(hapd, addr);
      v12 = 0;
      v14 = v13;
      if ( v13 )
        goto LABEL_5;
      goto LABEL_36;
    }
    v10 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v11 = elems.wpa_ie_len + 2LL;
      v10 = elems.wpa_ie - 2;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
      v12 = 0;
    }
    else
    {
      v12 = 1;
      v11 = 0LL;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v13 = ap_get_sta(hapd, addr);
  v14 = v13;
  if ( v13 )
  {
LABEL_5:
    ap_sta_no_session_timeout(hapd, v13);
    accounting_sta_stop(hapd, v14);
    v14->timeout_next = STA_NULLFUNC;
    goto LABEL_6;
  }
LABEL_36:
  v14 = ap_sta_add(hapd, addr);
  if ( !v14 )
  {
    v24 = -1;
    hostapd_drv_sta_disassoc(hapd, addr, 5);
    return v24;
  }
LABEL_6:
  v15 = hapd->iface;
  v14->flags &= 0xFFFECFFF;
  if ( !v15->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v30 = 1;
    goto fail;
  }
  ap_copy_sta_supp_op_classes(v14, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v21 = v14->flags;
    goto LABEL_18;
  }
  if ( v10 )
    v16 = v12 == 0;
  else
    v16 = 0;
  if ( !v16 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v30 = 13;
fail:
    hostapd_drv_sta_disassoc(hapd, v14->addr, v30);
    v24 = -1;
    ap_free_sta(hapd, v14);
    return v24;
  }
  v17 = v14->wpa_sm;
  v18 = hapd->wpa_auth;
  if ( !v17 )
  {
    v29 = wpa_auth_sta_init(v18, v14->addr, 0LL);
    v14->wpa_sm = v29;
    v17 = v29;
    if ( !v29 )
    {
      v24 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v24;
    }
    v18 = hapd->wpa_auth;
  }
  v19 = wpa_validate_wpa_ie(
          v18,
          v17,
          hapd->iface->freq,
          v10,
          v11,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v20 = v19;
  if ( v19 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v19);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v10, v11);
    v30 = 18;
    if ( v20 != 2 )
    {
      v30 = 19;
      if ( v20 != 3 )
      {
        v30 = 20;
        if ( v20 != 4 )
        {
          if ( v20 == 8 )
            v30 = 24;
          else
            v30 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v14->flags & 0x402) != 1026
    || (v24 = v14->sa_query_timed_out) != 0
    || v14->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v14), (v14->flags & 0x402) != 1026) || v14->sa_query_timed_out)
    || v14->auth_alg == 2 )
  {
    if ( wpa_auth_uses_mfp(v14->wpa_sm) )
    {
      v22 = v14->flags & 2;
      v14->flags = (v14->flags | 0x400) & 0xFFF7FFFF | 3;
      hostapd_set_sta_flags(hapd, v14);
      if ( reassoc )
      {
LABEL_19:
        v23 = v14->wpa_sm;
        if ( v14->auth_alg == 2 )
        {
          wpa_auth_sm_event(v23, WPA_ASSOC_FT);
          goto LABEL_21;
        }
LABEL_20:
        wpa_auth_sm_event(v23, WPA_ASSOC);
LABEL_21:
        v24 = 0;
        hostapd_new_assoc_sta(hapd, v14, v22 != 0);
        ieee802_1x_notify_port_enabled(v14->eapol_sm, 1);
        return v24;
      }
LABEL_27:
      v23 = v14->wpa_sm;
      goto LABEL_20;
    }
    v21 = v14->flags & 0xFFFFFBFF;
LABEL_18:
    v22 = v21 & 2;
    v14->flags = v21 & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v14);
    if ( reassoc )
      goto LABEL_19;
    goto LABEL_27;
  }
  if ( !v14->sa_query_count )
    ap_sta_start_sa_query(hapd, v14);
  v26 = hostapd_eid_assoc_comeback_time(hapd, v14, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v26 - buf);
  return v24;
}
