int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  size_t v9; // $s5
  const u8 *v10; // $s4
  sta_info *v12; // $v0
  sta_info *v13; // $s1
  int v14; // $s3
  wpa_state_machine *v15; // $a1
  int v16; // $v0
  int v17; // $s6
  unsigned int v18; // $s2
  wpa_event v19; // $a1
  u32 v20; // $v0
  int v21; // $v0
  u32 v22; // $v1
  u8 *v23; // $v0
  u8 v24[1064]; // [sp+28h] [-588h] BYREF
  ieee802_11_elems mdie; // [sp+450h] [-160h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len);
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &mdie, 0);
  if ( mdie.wps_ie )
  {
    v9 = mdie.wps_ie_len + 2;
    v10 = mdie.wps_ie - 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( mdie.rsn_ie )
  {
    v9 = mdie.rsn_ie_len + 2;
    v10 = mdie.rsn_ie - 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( mdie.wpa_ie )
  {
    v9 = mdie.wpa_ie_len + 2;
    v10 = mdie.wpa_ie - 2;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v10 = 0;
    v9 = 0;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  v12 = ap_get_sta(hapd, addr);
  if ( v12 )
  {
    v13 = v12;
    ap_sta_no_session_timeout(hapd, v12);
    accounting_sta_stop(hapd, v13);
    v13->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v13 = ap_sta_add(hapd, addr);
    if ( !v13 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v13->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs )
  {
    v14 = 1;
    if ( hostapd_check_acl(hapd, addr, 0) != 1 )
    {
      wpa_printf(
        3,
        "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      goto fail;
    }
  }
  ap_copy_sta_supp_op_classes(v13, mdie.supp_op_classes, mdie.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v18 = v13->flags;
LABEL_24:
    v13->flags = v18 & 0xFFF7FFFC | 3;
    hostapd_set_sta_flags(hapd, v13);
    if ( !reassoc || (v19 = WPA_ASSOC_FT, v13->auth_alg != 2) )
      v19 = WPA_ASSOC;
    wpa_auth_sm_event(v13->wpa_sm, v19);
    hostapd_new_assoc_sta(hapd, v13, (v18 >> 1) & 1);
    ieee802_1x_notify_port_enabled(v13->eapol_sm, 1);
    return 0;
  }
  if ( !v10 || !v9 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v14 = 13;
fail:
    hostapd_drv_sta_disassoc(hapd, v13->addr, v14);
    ap_free_sta(hapd, v13);
    return -1;
  }
  v15 = v13->wpa_sm;
  if ( !v15 )
  {
    v15 = wpa_auth_sta_init(hapd->wpa_auth, v13->addr, 0);
    v13->wpa_sm = v15;
    if ( !v15 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v16 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v15,
          hapd->iface->freq,
          v10,
          v9,
          mdie.mdie,
          mdie.mdie_len,
          mdie.owe_dh,
          mdie.owe_dh_len);
  if ( v16 )
  {
    v17 = v16;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v16);
    wpa_hexdump(2, "IE", v10, v9);
    v14 = 13;
    if ( (unsigned int)(v17 - 2) < 7 )
      v14 = dword_49A5D8[v17 - 2];
    goto fail;
  }
  v20 = v13->flags;
  if ( (v20 & 0x402) == 1026 && !v13->sa_query_timed_out && v13->sa_query_count > 0 )
  {
    ap_check_sa_query_timeout(hapd, v13);
    v20 = v13->flags;
  }
  if ( (v20 & 0x402) != 1026 || v13->sa_query_timed_out || v13->auth_alg == 2 )
  {
    v21 = wpa_auth_uses_mfp(v13->wpa_sm);
    v22 = v13->flags;
    if ( v21 )
    {
      v18 = v22 | 0x400;
      v13->flags = v22 | 0x400;
    }
    else
    {
      v18 = v22 & 0xFFFFFBFF;
      v13->flags = v22 & 0xFFFFFBFF;
    }
    goto LABEL_24;
  }
  if ( !v13->sa_query_count )
    ap_sta_start_sa_query(hapd, v13);
  v23 = hostapd_eid_assoc_comeback_time(hapd, v13, v24);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, v24, v23 - v24);
  return 0;
}
