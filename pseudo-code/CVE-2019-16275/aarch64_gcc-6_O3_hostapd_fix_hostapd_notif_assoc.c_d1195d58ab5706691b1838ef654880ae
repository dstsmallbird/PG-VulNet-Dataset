int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v7; // w21
  unsigned int v8; // w26
  unsigned int v10; // w27
  unsigned int v11; // w28
  __int64 v12; // x7
  int v13; // w3
  int v16; // w0
  int v17; // w23
  const u8 *v19; // x25
  size_t v20; // x23
  sta_info *v21; // x0
  sta_info *v22; // x21
  hostapd_iface *v23; // x1
  bool v24; // zf
  wpa_state_machine *v25; // x1
  unsigned int v26; // w0
  unsigned int v27; // w26
  unsigned int v28; // w0
  int v29; // w19
  u8 *v30; // x0
  wpa_state_machine *v31; // x0
  int v32; // w2
  int v33; // [xsp+78h] [xbp+68h]
  unsigned int v34; // [xsp+7Ch] [xbp+6Ch]
  ieee802_11_elems elems; // [xsp+88h] [xbp+78h] BYREF
  u8 buf[1064]; // [xsp+310h] [xbp+300h] BYREF

  if ( !addr )
  {
    v17 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return v17;
  }
  v7 = *addr;
  if ( (v7 & 1) != 0 )
  {
    v8 = addr[1];
    v10 = addr[2];
    v11 = addr[3];
    v12 = addr[4];
    v13 = addr[5];
LABEL_5:
    v17 = 0;
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v7,
      v8,
      v10,
      v11,
      v12,
      v13);
    return v17;
  }
  v8 = addr[1];
  v10 = addr[2];
  v11 = addr[3];
  v12 = addr[4];
  v13 = addr[5];
  if ( !(v10 | v11 | v7 | v8 | (unsigned int)v12 | v13) )
    goto LABEL_5;
  v33 = addr[5];
  v34 = addr[4];
  v16 = memcmp(addr, hapd->own_addr, 6uLL);
  v13 = v33;
  v12 = v34;
  if ( !v16 )
    goto LABEL_5;
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v19 = elems.wps_ie - 2;
    v20 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v19 = elems.rsn_ie - 2;
    v20 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v19 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v19 = elems.wpa_ie - 2;
      v20 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v20 = 0LL;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v21 = ap_get_sta(hapd, addr);
  v22 = v21;
  if ( v21 )
  {
    ap_sta_no_session_timeout(hapd, v21);
    accounting_sta_stop(hapd, v22);
    v22->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v22 = ap_sta_add(hapd, addr);
    if ( !v22 )
    {
      v17 = -1;
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return v17;
    }
  }
  v23 = hapd->iface;
  v22->flags &= 0xFFFECFFF;
  if ( !v23->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v32 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v22->addr, v32);
    v17 = -1;
    ap_free_sta(hapd, v22);
    return v17;
  }
  ap_copy_sta_supp_op_classes(v22, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v28 = v22->flags;
    goto LABEL_24;
  }
  if ( v19 )
    v24 = v20 == 0;
  else
    v24 = 1;
  if ( v24 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v32 = 13;
    goto fail;
  }
  v25 = v22->wpa_sm;
  if ( !v25 )
  {
    v31 = wpa_auth_sta_init(hapd->wpa_auth, v22->addr, 0LL);
    v22->wpa_sm = v31;
    v25 = v31;
    if ( !v31 )
    {
      v17 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v17;
    }
  }
  v26 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v25,
          hapd->iface->freq,
          v19,
          v20,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v27 = v26;
  if ( v26 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v26);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v19, v20);
    v32 = 18;
    if ( v27 != 2 )
    {
      v32 = 19;
      if ( v27 != 3 )
      {
        v32 = 20;
        if ( v27 != 4 )
        {
          if ( v27 == 8 )
            v32 = 24;
          else
            v32 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v22->flags & 0x402) == 1026 )
  {
    v17 = v22->sa_query_timed_out;
    if ( !v17 )
    {
      if ( v22->sa_query_count <= 0
        || (ap_check_sa_query_timeout(hapd, v22), (v22->flags & 0x402) == 1026) && !v22->sa_query_timed_out )
      {
        if ( v22->auth_alg != 2 )
        {
          if ( !v22->sa_query_count )
            ap_sta_start_sa_query(hapd, v22);
          v30 = hostapd_eid_assoc_comeback_time(hapd, v22, buf);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v30 - buf);
          return v17;
        }
      }
    }
  }
  if ( wpa_auth_uses_mfp(v22->wpa_sm) )
    v28 = v22->flags | 0x400;
  else
    v28 = v22->flags & 0xFFFFFBFF;
LABEL_24:
  v29 = v28 & 2;
  v22->flags = v28 & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v22);
  if ( reassoc && v22->auth_alg == 2 )
    wpa_auth_sm_event(v22->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v22->wpa_sm, WPA_ASSOC);
  v17 = 0;
  hostapd_new_assoc_sta(hapd, v22, v29 != 0);
  ieee802_1x_notify_port_enabled(v22->eapol_sm, 1);
  return v17;
}
