int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v5; // $s2
  int v6; // $s5
  u8 v8; // $s0
  u8 v9; // $fp
  u8 v10; // $s7
  u8 v11; // $s6
  const u8 *v14; // $s0
  int v15; // $s2
  size_t v16; // $s4
  const u8 *v17; // $s5
  sta_info *v18; // $v0
  sta_info *v19; // $s2
  const u8 *v21; // $s0
  int v22; // $s2
  int v23; // $s3
  wpa_state_machine *v24; // $a1
  int v25; // $v0
  int v26; // $s6
  unsigned int v27; // $s1
  const u8 *v28; // $s0
  int v29; // $s2
  u32 v30; // $v0
  int v31; // $v0
  u32 v32; // $v1
  u8 *v33; // $v0
  u8 v35[1064]; // [sp+30h] [-588h] BYREF
  ieee802_11_elems mdie; // [sp+458h] [-160h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len);
    return -1;
  }
  v5 = *addr;
  v6 = addr[1];
  if ( (v5 & 1) != 0 )
  {
    v11 = addr[5];
    v10 = addr[4];
    v9 = addr[3];
    v8 = addr[2];
LABEL_10:
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      v6,
      v8,
      v9,
      v10,
      v11);
    return 0;
  }
  v8 = addr[2];
  v9 = addr[3];
  v10 = addr[4];
  v11 = addr[5];
  if ( !((unsigned __int8)(v6 | v5 | v8 | v9 | v10) | v11) || !memcmp(addr, hapd->own_addr, 6u) )
    goto LABEL_10;
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &mdie, 0);
  v14 = mdie.wps_ie;
  if ( mdie.wps_ie )
  {
    v15 = mdie.wps_ie_len;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    v16 = v15 + 2;
    v17 = v14 - 2;
    v18 = ap_get_sta(hapd, addr);
    if ( v18 )
    {
LABEL_7:
      v19 = v18;
      ap_sta_no_session_timeout(hapd, v18);
      accounting_sta_stop(hapd, v19);
      v19->timeout_next = STA_NULLFUNC;
      goto LABEL_14;
    }
  }
  else
  {
    v21 = mdie.rsn_ie;
    if ( mdie.rsn_ie )
    {
      v22 = mdie.rsn_ie_len;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
      v16 = v22 + 2;
      v17 = v21 - 2;
      v18 = ap_get_sta(hapd, addr);
      if ( v18 )
        goto LABEL_7;
    }
    else
    {
      v28 = mdie.wpa_ie;
      if ( mdie.wpa_ie )
      {
        v29 = mdie.wpa_ie_len;
        wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
        v16 = v29 + 2;
        v17 = v28 - 2;
        v18 = ap_get_sta(hapd, addr);
        if ( v18 )
          goto LABEL_7;
      }
      else
      {
        wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
        v17 = 0;
        v16 = 0;
        v18 = ap_get_sta(hapd, addr);
        if ( v18 )
          goto LABEL_7;
      }
    }
  }
  v19 = ap_sta_add(hapd, addr);
  if ( !v19 )
  {
    hostapd_drv_sta_disassoc(hapd, addr, 5);
    return -1;
  }
LABEL_14:
  v19->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs )
  {
    v23 = 1;
    if ( hostapd_check_acl(hapd, addr, 0) != 1 )
    {
      wpa_printf(
        3,
        "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      goto LABEL_32;
    }
  }
  ap_copy_sta_supp_op_classes(v19, mdie.supp_op_classes, mdie.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v27 = v19->flags;
LABEL_25:
    v19->flags = v27 & 0xFFF7FFFC | 3;
    hostapd_set_sta_flags(hapd, v19);
    if ( reassoc && v19->auth_alg == 2 )
      wpa_auth_sm_event(v19->wpa_sm, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v19->wpa_sm, WPA_ASSOC);
    hostapd_new_assoc_sta(hapd, v19, (v27 >> 1) & 1);
    ieee802_1x_notify_port_enabled(v19->eapol_sm, 1);
    return 0;
  }
  if ( !v17 || !v16 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v23 = 13;
LABEL_32:
    hostapd_drv_sta_disassoc(hapd, v19->addr, v23);
    ap_free_sta(hapd, v19);
    return -1;
  }
  v24 = v19->wpa_sm;
  if ( !v24 )
  {
    v24 = wpa_auth_sta_init(hapd->wpa_auth, v19->addr, 0);
    v19->wpa_sm = v24;
    if ( !v24 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v25 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v24,
          hapd->iface->freq,
          v17,
          v16,
          mdie.mdie,
          mdie.mdie_len,
          mdie.owe_dh,
          mdie.owe_dh_len);
  if ( v25 )
  {
    v26 = v25;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v25);
    wpa_hexdump(2, "IE", v17, v16);
    v23 = 13;
    if ( (unsigned int)(v26 - 2) < 7 )
      v23 = dword_4A2ED0[v26 - 2];
    goto LABEL_32;
  }
  v30 = v19->flags;
  if ( (v30 & 0x402) == 1026 && !v19->sa_query_timed_out && v19->sa_query_count > 0 )
  {
    ap_check_sa_query_timeout(hapd, v19);
    v30 = v19->flags;
  }
  if ( (v30 & 0x402) != 1026 || v19->sa_query_timed_out || v19->auth_alg == 2 )
  {
    v31 = wpa_auth_uses_mfp(v19->wpa_sm);
    v32 = v19->flags;
    if ( v31 )
    {
      v27 = v32 | 0x400;
      v19->flags = v32 | 0x400;
    }
    else
    {
      v27 = v32 & 0xFFFFFBFF;
      v19->flags = v32 & 0xFFFFFBFF;
    }
    goto LABEL_25;
  }
  if ( !v19->sa_query_count )
    ap_sta_start_sa_query(hapd, v19);
  v33 = hostapd_eid_assoc_comeback_time(hapd, v19, v35);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, v35, v33 - v35);
  return 0;
}
