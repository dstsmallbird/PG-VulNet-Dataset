int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v9; // $s5
  const u8 *v10; // $s2
  size_t v11; // $s5
  sta_info *v12; // $v0
  sta_info *v13; // $s0
  unsigned int v14; // $a0
  wpa_state_machine *v15; // $a1
  int v16; // $v0
  int v17; // $v0
  u32 v18; // $a2
  unsigned int v19; // $a2
  int v20; // $s2
  int v21; // $s5
  int v23; // $a2
  int v24; // $s5
  u8 *v25; // $v0
  int v26; // $s5
  int res; // [sp+34h] [-590h]
  ieee802_11_elems elems; // [sp+38h] [-58Ch] BYREF
  u8 buf[1064]; // [sp+194h] [-430h] BYREF

  if ( !addr )
  {
    v21 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len);
    return v21;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v9 = elems.wps_ie_len;
    v10 = elems.wps_ie - 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    v11 = v9 + 2;
  }
  else
  {
    if ( elems.rsn_ie )
    {
      v24 = elems.rsn_ie_len;
      v10 = elems.rsn_ie - 2;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
      v11 = v24 + 2;
      v12 = ap_get_sta(hapd, addr);
      v13 = v12;
      if ( v12 )
        goto LABEL_5;
      goto LABEL_26;
    }
    v10 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v26 = elems.wpa_ie_len;
      v10 = elems.wpa_ie - 2;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
      v11 = v26 + 2;
    }
    else
    {
      v11 = 0;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v12 = ap_get_sta(hapd, addr);
  v13 = v12;
  if ( v12 )
  {
LABEL_5:
    ap_sta_no_session_timeout(hapd, v12);
    accounting_sta_stop(hapd, v13);
    v13->timeout_next = STA_NULLFUNC;
    goto LABEL_6;
  }
LABEL_26:
  v13 = ap_sta_add(hapd, addr);
  if ( !v13 )
  {
    hostapd_drv_sta_disassoc(hapd, addr, 5);
    return -1;
  }
LABEL_6:
  v14 = hapd->iface->drv_max_acl_mac_addrs;
  v13->flags &= 0xFFFECFFF;
  if ( !v14 && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v23 = 1;
fail:
    v21 = -1;
    hostapd_drv_sta_disassoc(hapd, v13->addr, v23);
    ap_free_sta(hapd, v13);
    return v21;
  }
  ap_copy_sta_supp_op_classes(v13, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    if ( !v10 || !v11 )
    {
      wpa_printf(2, "No WPA/RSN IE from STA");
      v23 = 13;
      goto fail;
    }
    v15 = v13->wpa_sm;
    if ( !v15 )
    {
      v15 = wpa_auth_sta_init(hapd->wpa_auth, v13->addr, 0);
      v13->wpa_sm = v15;
      if ( !v15 )
      {
        v21 = -1;
        wpa_printf(5, "Failed to initialize WPA state machine");
        return v21;
      }
    }
    v16 = wpa_validate_wpa_ie(
            hapd->wpa_auth,
            v15,
            hapd->iface->freq,
            v10,
            v11,
            elems.mdie,
            elems.mdie_len,
            elems.owe_dh,
            elems.owe_dh_len);
    if ( v16 )
    {
      res = v16;
      wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v16);
      wpa_hexdump(2, "IE", v10, v11);
      switch ( res )
      {
        case 2:
          v23 = 18;
          break;
        case 3:
          v23 = 19;
          break;
        case 4:
          v23 = 20;
          break;
        default:
          v23 = 24;
          if ( res != 8 )
            v23 = 13;
          break;
      }
      goto fail;
    }
    if ( (v13->flags & 0x402) == 1026 )
    {
      v21 = v13->sa_query_timed_out;
      if ( !v21 )
      {
        if ( v13->sa_query_count <= 0
          || (ap_check_sa_query_timeout(hapd, v13), (v13->flags & 0x402) == 1026) && !v13->sa_query_timed_out )
        {
          if ( v13->auth_alg != 2 )
          {
            if ( !v13->sa_query_count )
              ap_sta_start_sa_query(hapd, v13);
            v25 = hostapd_eid_assoc_comeback_time(hapd, v13, buf);
            hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v25 - buf);
            return v21;
          }
        }
      }
    }
    v17 = wpa_auth_uses_mfp(v13->wpa_sm);
    v18 = v13->flags;
    if ( v17 )
      v19 = v18 | 0x400;
    else
      v19 = v18 & 0xFFFFFBFF;
  }
  else
  {
    v19 = v13->flags;
  }
  v13->flags = v19 & 0xFFF7FFFF | 3;
  v20 = v19 & 2;
  hostapd_set_sta_flags(hapd, v13);
  if ( reassoc && v13->auth_alg == 2 )
    wpa_auth_sm_event(v13->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v13->wpa_sm, WPA_ASSOC);
  hostapd_new_assoc_sta(hapd, v13, v20 != 0);
  v21 = 0;
  ieee802_1x_notify_port_enabled(v13->eapol_sm, 1);
  return v21;
}
