int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v10; // w24
  int v11; // w22
  const u8 *v13; // x24
  size_t v14; // x22
  sta_info *v15; // x0
  sta_info *v16; // x21
  bool v17; // zf
  wpa_state_machine *v18; // x1
  unsigned int v19; // w0
  unsigned int v20; // w25
  unsigned int v21; // w0
  int v22; // w19
  int v23; // w2
  u8 *v24; // x0
  ieee802_11_elems elems; // [xsp+68h] [xbp+58h] BYREF
  u8 buf[1064]; // [xsp+2F0h] [xbp+2E0h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  v10 = *addr;
  if ( (v10 & 1) != 0
    || !((unsigned __int8)(addr[2] | addr[3] | v10 | addr[1]) | (unsigned __int8)(addr[4] | addr[5]))
    || !memcmp(addr, hapd->own_addr, 6uLL) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v10,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    return 0;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v13 = elems.wps_ie - 2;
    v14 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v13 = elems.rsn_ie - 2;
    v14 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v13 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v13 = elems.wpa_ie - 2;
      v14 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      v14 = 0LL;
    }
  }
  v15 = ap_get_sta(hapd, addr);
  v16 = v15;
  if ( v15 )
  {
    register_sysctl(hapd, v15);
    accounting_sta_stop(hapd, v16);
    v16->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v16 = ap_sta_add(hapd, addr);
    if ( !v16 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v16->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v23 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v16->addr, v23);
    ap_free_sta(hapd, v16);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v16, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
    goto LABEL_25;
  if ( v13 )
    v17 = v14 == 0;
  else
    v17 = 1;
  if ( v17 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v23 = 13;
    goto fail;
  }
  v18 = v16->wpa_sm;
  if ( !v18 )
  {
    v18 = wpa_auth_sta_init(hapd->wpa_auth, v16->addr, 0LL);
    v16->wpa_sm = v18;
    if ( !v18 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v19 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v18,
          hapd->iface->freq,
          v13,
          v14,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v20 = v19;
  if ( v19 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v19);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v13, v14);
    v23 = 18;
    if ( v20 != 2 )
    {
      v23 = 19;
      if ( v20 != 3 )
      {
        v23 = 20;
        if ( v20 != 4 )
        {
          if ( v20 == 8 )
            v23 = 24;
          else
            v23 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v16->flags & 0x402) == 1026 )
  {
    v11 = v16->sa_query_timed_out;
    if ( !v11 )
    {
      if ( v16->sa_query_count <= 0
        || (ap_check_sa_query_timeout(hapd, v16), (v16->flags & 0x402) == 1026) && !v16->sa_query_timed_out )
      {
        if ( v16->auth_alg != 2 )
        {
          if ( !v16->sa_query_count )
            ap_sta_start_sa_query(hapd, v16);
          v24 = hostapd_eid_assoc_comeback_time(hapd, v16, buf);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v24 - buf);
          return v11;
        }
      }
    }
  }
  if ( wpa_auth_uses_mfp(v16->wpa_sm) )
    v21 = v16->flags | 0x400;
  else
    v21 = v16->flags & 0xFFFFFBFF;
  v16->flags = v21;
LABEL_25:
  v22 = v16->flags & 2;
  v16->flags = v16->flags & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v16);
  if ( reassoc && v16->auth_alg == 2 )
    wpa_auth_sm_event(v16->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v16->wpa_sm, WPA_ASSOC);
  hostapd_new_assoc_sta(hapd, v16, v22 != 0);
  ieee802_1x_notify_port_enabled(v16->eapol_sm, 1);
  return 0;
}
