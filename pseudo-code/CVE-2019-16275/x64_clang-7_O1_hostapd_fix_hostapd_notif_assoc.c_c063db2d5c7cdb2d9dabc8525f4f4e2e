int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v10; // ebx
  const u8 *v12; // rbp
  size_t v13; // rbx
  sta_info *v14; // rax
  sta_info *v15; // r15
  wpa_state_machine *v16; // rsi
  __int64 v17; // rdx
  __int64 v18; // rcx
  __int64 v19; // r8
  unsigned int v20; // eax
  unsigned int v21; // er14
  unsigned int v22; // er14
  int v23; // edx
  int v24; // eax
  unsigned int v25; // ecx
  u32 v26; // ebx
  wpa_state_machine *v27; // rdi
  wpa_event v28; // esi
  u8 *v29; // rax
  ieee802_11_elems elems; // [rsp+8h] [rbp-6E0h] BYREF
  u8 eid[1112]; // [rsp+290h] [rbp-458h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  if ( !is_multicast_ether_addr(addr)
    && !is_zero_ether_addr_0(addr)
    && *(_DWORD *)hapd->own_addr ^ *(_DWORD *)addr | (unsigned __int16)(*(_WORD *)&hapd->own_addr[4] ^ *((_WORD *)addr + 2)) )
  {
    random_add_randomness(addr, 6uLL);
    hostapd_logger(hapd, addr, 1u, 2, "associated");
    ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
    if ( elems.wps_ie )
    {
      v12 = elems.wps_ie - 2;
      v13 = elems.wps_ie_len + 2LL;
      wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    }
    else if ( elems.rsn_ie )
    {
      v12 = elems.rsn_ie - 2;
      v13 = elems.rsn_ie_len + 2LL;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    }
    else if ( elems.wpa_ie )
    {
      v12 = elems.wpa_ie - 2;
      v13 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v12 = 0LL;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      v13 = 0LL;
    }
    v14 = ap_get_sta(hapd, addr);
    if ( v14 )
    {
      v15 = v14;
      ap_sta_no_session_timeout(hapd, v14);
      accounting_sta_stop(hapd, v15);
      v15->timeout_next = STA_NULLFUNC;
    }
    else
    {
      v15 = ap_sta_add(hapd, addr);
      if ( !v15 )
      {
        hostapd_drv_sta_disassoc(hapd, addr, 5);
        return -1;
      }
    }
    v15->flags &= 0xFFFECFFF;
    if ( hapd->iface->drv_max_acl_mac_addrs || hostapd_check_acl(hapd, addr, 0LL) == 1 )
    {
      ap_copy_sta_supp_op_classes(v15, elems.supp_op_classes, elems.supp_op_classes_len);
      if ( !hapd->conf->wpa )
        goto LABEL_42;
      if ( v12 && v13 )
      {
        v16 = v15->wpa_sm;
        if ( !v16 )
        {
          v16 = wpa_auth_sta_init(hapd->wpa_auth, v15->addr, 0LL);
          v15->wpa_sm = v16;
          if ( !v16 )
          {
            wpa_printf(5, "Failed to initialize WPA state machine", v17, v18, v19);
            return -1;
          }
        }
        v20 = wpa_validate_wpa_ie(
                hapd->wpa_auth,
                v16,
                hapd->iface->freq,
                v12,
                v13,
                elems.mdie,
                elems.mdie_len,
                elems.owe_dh,
                elems.owe_dh_len);
        if ( v20 )
        {
          v21 = v20;
          wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v20);
          wpa_hexdump(2, "IE", v12, v13);
          v22 = v21 - 2;
          v23 = 13;
          if ( v22 < 7 )
            v23 = dword_47F730[v22];
          goto LABEL_30;
        }
        if ( (v15->flags & 0x402) == 1026 && !v15->sa_query_timed_out && v15->sa_query_count > 0 )
          ap_check_sa_query_timeout(hapd, v15);
        if ( (v15->flags & 0x402) == 1026 && !v15->sa_query_timed_out && v15->auth_alg != 2 )
        {
          if ( !v15->sa_query_count )
            ap_sta_start_sa_query(hapd, v15);
          v29 = hostapd_eid_assoc_comeback_time(hapd, v15, eid);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v29 - eid);
          return 0;
        }
        v24 = wpa_auth_uses_mfp(v15->wpa_sm);
        v25 = v15->flags & 0xFFFFFBFF;
        if ( v24 )
          v25 = v15->flags | 0x400;
        v15->flags = v25;
LABEL_42:
        v26 = v15->flags;
        v15->flags = v26 & 0xFFF7FFFC | 3;
        hostapd_set_sta_flags(hapd, v15);
        if ( reassoc && v15->auth_alg == 2 )
        {
          v27 = v15->wpa_sm;
          v28 = WPA_ASSOC_FT;
        }
        else
        {
          v27 = v15->wpa_sm;
          v28 = WPA_ASSOC;
        }
        wpa_auth_sm_event(v27, v28);
        hostapd_new_assoc_sta(hapd, v15, (v26 >> 1) & 1);
        ieee802_1x_notify_port_enabled(v15->eapol_sm, 1);
        return 0;
      }
      wpa_printf(2, "No WPA/RSN IE from STA");
      v23 = 13;
    }
    else
    {
      wpa_printf(
        3,
        "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      v23 = 1;
    }
LABEL_30:
    hostapd_drv_sta_disassoc(hapd, v15->addr, v23);
    ap_free_sta(hapd, v15);
    return -1;
  }
  v10 = 0;
  wpa_printf(
    2,
    "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
    "hostapd_notif_assoc",
    *addr,
    addr[1],
    addr[2],
    addr[3],
    addr[4],
    addr[5]);
  return v10;
}
