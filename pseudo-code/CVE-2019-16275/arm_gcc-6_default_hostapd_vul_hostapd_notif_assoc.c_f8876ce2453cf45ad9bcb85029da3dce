int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v9; // r9
  size_t v10; // r8
  sta_info *v11; // r0
  sta_info *v12; // r4
  unsigned int v13; // r2
  unsigned int v14; // r2
  bool v15; // zf
  wpa_state_machine *v16; // r1
  int v17; // r10
  int v18; // r0
  u32 v19; // r2
  int v20; // r6
  int v21; // r2
  int v22; // r9
  int v24; // r2
  u8 *v25; // r0
  unsigned __int8 *fmt; // [sp+0h] [bp-5C0h]
  unsigned __int8 *fmta; // [sp+0h] [bp-5C0h]
  unsigned __int8 *fmtb; // [sp+0h] [bp-5C0h]
  unsigned __int8 *fmtc; // [sp+0h] [bp-5C0h]
  ieee802_11_elems elems; // [sp+18h] [bp-5A8h] BYREF
  u8 buf[1064]; // [sp+174h] [bp-44Ch] BYREF

  if ( !addr )
  {
    wpa_printf(2, fmt);
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v9 = elems.wps_ie - 2;
    v10 = elems.wps_ie_len + 2;
    wpa_printf(2, fmta);
  }
  else if ( elems.rsn_ie )
  {
    v9 = elems.rsn_ie - 2;
    v10 = elems.rsn_ie_len + 2;
    wpa_printf(2, fmta);
  }
  else
  {
    v9 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v9 = elems.wpa_ie - 2;
      v10 = elems.wpa_ie_len + 2;
      wpa_printf(2, fmta);
    }
    else
    {
      wpa_printf(2, fmta);
      v10 = 0;
    }
  }
  v11 = ap_get_sta(hapd, addr);
  v12 = v11;
  if ( v11 )
  {
    ap_sta_no_session_timeout(hapd, v11);
    accounting_sta_stop(hapd, v12);
    v12->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v12 = ap_sta_add(hapd, addr);
    if ( !v12 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v13 = hapd->iface->drv_max_acl_mac_addrs;
  v12->flags &= 0xFFFECFFF;
  if ( !v13 && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(3, (const unsigned __int8 *)addr[2], addr[3], addr[4], addr[5]);
    v24 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v12->addr, v24);
    ap_free_sta(hapd, v12);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v12, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v14 = v12->flags;
LABEL_18:
    v12->flags = v14 & 0xFFF7FFFF | 3;
    v20 = v14 & 2;
    hostapd_set_sta_flags(hapd, v12);
    if ( reassoc && v12->auth_alg == 2 )
      wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC);
    v21 = v20;
    if ( v20 )
      v21 = 1;
    hostapd_new_assoc_sta(hapd, v12, v21);
    ieee802_1x_notify_port_enabled(v12->eapol_sm, 1);
    return 0;
  }
  v15 = v10 == 0;
  if ( v10 )
    v15 = v9 == 0;
  if ( v15 )
  {
    wpa_printf(2, fmtb);
    v24 = 13;
    goto fail;
  }
  v16 = v12->wpa_sm;
  if ( !v16 )
  {
    v16 = wpa_auth_sta_init(hapd->wpa_auth, v12->addr, 0);
    v12->wpa_sm = v16;
    if ( !v16 )
    {
      wpa_printf(5, fmtb);
      return -1;
    }
  }
  v17 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v16,
          hapd->iface->freq,
          v9,
          v10,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v17 )
  {
    wpa_printf(2, fmtc);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v9, v10);
    switch ( v17 )
    {
      case 2:
        v24 = 18;
        break;
      case 3:
        v24 = 19;
        break;
      case 4:
        v24 = 20;
        break;
      case 8:
        v24 = 24;
        break;
      default:
        v24 = 13;
        break;
    }
    goto fail;
  }
  if ( (v12->flags & 0x402) != 1026
    || (v22 = v12->sa_query_timed_out) != 0
    || v12->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v12), (~v12->flags & 0x402) != 0) || v12->sa_query_timed_out)
    || v12->auth_alg == 2 )
  {
    v18 = wpa_auth_uses_mfp(v12->wpa_sm);
    v19 = v12->flags;
    if ( v18 )
      v14 = v19 | 0x400;
    else
      v14 = v19 & 0xFFFFFBFF;
    goto LABEL_18;
  }
  if ( !v12->sa_query_count )
    ap_sta_start_sa_query(hapd, v12);
  v25 = hostapd_eid_assoc_comeback_time(hapd, v12, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v25 - buf);
  return v22;
}
