int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  __int64 v10; // x9
  const u8 *v11; // x23
  const char *v12; // x1
  size_t v13; // x24
  sta_info *v14; // x0
  sta_info *v15; // x22
  wpa_state_machine *v16; // x1
  unsigned int v17; // w0
  unsigned int v18; // w25
  int v19; // w2
  int v21; // w0
  u32 v22; // w8
  int v23; // w9
  unsigned int v24; // w8
  u32 v25; // w21
  wpa_state_machine *v26; // x0
  wpa_event v27; // w1
  u8 *v28; // x0
  u8 eid[1064]; // [xsp+10h] [xbp-6F0h] BYREF
  ieee802_11_elems elems; // [xsp+438h] [xbp-2C8h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie_len;
    v11 = elems.wps_ie - 2;
    v12 = "STA included WPS IE in (Re)AssocReq";
LABEL_9:
    v13 = v10 + 2;
    wpa_printf(2, (const unsigned __int8 *)v12);
    goto LABEL_10;
  }
  if ( elems.rsn_ie )
  {
    v10 = elems.rsn_ie_len;
    v11 = elems.rsn_ie - 2;
    v12 = "STA included RSN IE in (Re)AssocReq";
    goto LABEL_9;
  }
  if ( elems.wpa_ie )
  {
    v10 = elems.wpa_ie_len;
    v11 = elems.wpa_ie - 2;
    v12 = "STA included WPA IE in (Re)AssocReq";
    goto LABEL_9;
  }
  wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  v11 = 0LL;
  v13 = 0LL;
LABEL_10:
  v14 = ap_get_sta(hapd, addr);
  if ( v14 )
  {
    v15 = v14;
    ap_sta_no_session_timeout(hapd, v14);
    accounting_sta_stop(hapd, v15);
    v15->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v15 = ap_sta_add(hapd, addr);
    if ( !v15 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v15->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v19 = 1;
    goto LABEL_26;
  }
  ap_copy_sta_supp_op_classes(v15, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
    goto LABEL_39;
  if ( !v11 || !v13 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    goto LABEL_24;
  }
  v16 = v15->wpa_sm;
  if ( !v16 )
  {
    v16 = wpa_auth_sta_init(hapd->wpa_auth, v15->addr, 0LL);
    v15->wpa_sm = v16;
    if ( !v16 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v17 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v16,
          hapd->iface->freq,
          v11,
          v13,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v17 )
  {
    v18 = v17;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v17);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v11, v13);
    if ( v18 - 2 < 7 )
    {
      v19 = dword_47D4F0[v18 - 2];
LABEL_26:
      hostapd_drv_sta_disassoc(hapd, v15->addr, v19);
      ap_free_sta(hapd, v15);
      return -1;
    }
LABEL_24:
    v19 = 13;
    goto LABEL_26;
  }
  if ( (~v15->flags & 0x402) == 0 && !v15->sa_query_timed_out && v15->sa_query_count >= 1 )
    ap_check_sa_query_timeout(hapd, v15);
  if ( (~v15->flags & 0x402) != 0 || v15->sa_query_timed_out || v15->auth_alg == 2 )
  {
    v21 = wpa_auth_uses_mfp(v15->wpa_sm);
    v22 = v15->flags;
    v23 = v22 | 0x400;
    v24 = v22 & 0xFFFFFBFF;
    if ( v21 )
      v24 = v23;
    v15->flags = v24;
LABEL_39:
    v25 = v15->flags;
    v15->flags = v25 & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v15);
    if ( reassoc && v15->auth_alg == 2 )
    {
      v26 = v15->wpa_sm;
      v27 = WPA_ASSOC_FT;
    }
    else
    {
      v26 = v15->wpa_sm;
      v27 = WPA_ASSOC;
    }
    wpa_auth_sm_event(v26, v27);
    hostapd_new_assoc_sta(hapd, v15, (v25 >> 1) & 1);
    ieee802_1x_notify_port_enabled(v15->eapol_sm, 1);
    return 0;
  }
  if ( !v15->sa_query_count )
    ap_sta_start_sa_query(hapd, v15);
  v28 = hostapd_eid_assoc_comeback_time(hapd, v15, eid);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v28 - eid);
  return 0;
}
