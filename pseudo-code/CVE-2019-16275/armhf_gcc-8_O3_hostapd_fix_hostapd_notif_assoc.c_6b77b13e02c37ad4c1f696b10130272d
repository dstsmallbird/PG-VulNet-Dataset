int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v6; // r5
  const unsigned __int8 *v8; // r7
  int v9; // r8
  int v10; // r9
  int v11; // r10
  int v12; // r3
  int v13; // r0
  int v14; // r5
  const u8 *v16; // r8
  const u8 *v17; // r10
  size_t v18; // r9
  sta_info *v19; // r0
  sta_info *v20; // r7
  unsigned int v21; // r2
  int v22; // r3
  wpa_state_machine *v23; // r1
  wpa_authenticator *v24; // r0
  int v25; // r5
  int v26; // r0
  u32 v27; // r3
  unsigned int v28; // r4
  int v29; // r4
  wpa_state_machine *v30; // r0
  int v31; // r2
  u8 *v32; // r0
  int v33; // r2
  unsigned __int8 *fmt; // [sp+0h] [bp-5D8h]
  unsigned __int8 *fmta; // [sp+0h] [bp-5D8h]
  unsigned __int8 *fmtb; // [sp+0h] [bp-5D8h]
  unsigned __int8 *fmtc; // [sp+0h] [bp-5D8h]
  int v38; // [sp+14h] [bp-5C4h]
  int v41; // [sp+24h] [bp-5B4h]
  ieee802_11_elems elems; // [sp+28h] [bp-5B0h] BYREF
  u8 buf[1064]; // [sp+184h] [bp-454h] BYREF

  if ( !addr )
  {
    v14 = -1;
    wpa_printf(2, fmt);
    return v14;
  }
  v6 = *addr;
  v8 = (const unsigned __int8 *)addr[1];
  v9 = addr[2];
  v10 = addr[3];
  v11 = addr[4];
  v12 = addr[5];
  if ( (v6 & 1) != 0
    || !(v11 | v10 | v9 | v6 | (unsigned int)v8 | v12)
    || (v41 = addr[5], v13 = memcmp(addr, hapd->own_addr, 6u), v12 = v41, !v13) )
  {
    v14 = 0;
    wpa_printf(2, v8, v9, v10, v11, v12, v38, &_stack_chk_guard, req_ies, req_ies_len);
    return v14;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v16 = elems.wps_ie - 2;
    v17 = 0;
    v18 = elems.wps_ie_len + 2;
    wpa_printf(2, fmta);
  }
  else if ( elems.rsn_ie )
  {
    v16 = elems.rsn_ie - 2;
    v17 = elems.wps_ie;
    v18 = elems.rsn_ie_len + 2;
    wpa_printf(2, fmta);
  }
  else
  {
    v16 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v16 = elems.wpa_ie - 2;
      v17 = elems.rsn_ie;
      v18 = elems.wpa_ie_len + 2;
    }
    else
    {
      v17 = (_BYTE *)(&dword_0 + 1);
      v18 = 0;
    }
    wpa_printf(2, fmta);
  }
  v19 = ap_get_sta(hapd, addr);
  v20 = v19;
  if ( v19 )
  {
    ap_sta_no_session_timeout(hapd, v19);
    accounting_sta_stop(hapd, v20);
    v20->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v20 = ap_sta_add(hapd, addr);
    if ( !v20 )
    {
      v14 = -1;
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return v14;
    }
  }
  v21 = hapd->iface->drv_max_acl_mac_addrs;
  v20->flags &= 0xFFFECFFF;
  if ( !v21 && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(3, (const unsigned __int8 *)addr[2], addr[3], addr[4], addr[5]);
    v33 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v20->addr, v33);
    v14 = -1;
    ap_free_sta(hapd, v20);
    return v14;
  }
  ap_copy_sta_supp_op_classes(v20, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v28 = v20->flags;
    goto LABEL_23;
  }
  if ( v16 )
    v22 = (int)v17;
  else
    v22 = 1;
  if ( v22 )
  {
    wpa_printf(2, fmtb);
    v33 = 13;
    goto fail;
  }
  v23 = v20->wpa_sm;
  v24 = hapd->wpa_auth;
  if ( !v23 )
  {
    v23 = wpa_auth_sta_init(v24, v20->addr, 0);
    v20->wpa_sm = v23;
    if ( !v23 )
    {
      v14 = -1;
      wpa_printf(5, fmtb);
      return v14;
    }
    v24 = hapd->wpa_auth;
  }
  v25 = wpa_validate_wpa_ie(
          v24,
          v23,
          hapd->iface->freq,
          v16,
          v18,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v25 )
  {
    wpa_printf(2, fmtc);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v16, v18);
    switch ( v25 )
    {
      case 2:
        v33 = 18;
        break;
      case 3:
        v33 = 19;
        break;
      case 4:
        v33 = 20;
        break;
      case 8:
        v33 = 24;
        break;
      default:
        v33 = 13;
        break;
    }
    goto fail;
  }
  if ( (v20->flags & 0x402) != 1026
    || (v14 = v20->sa_query_timed_out) != 0
    || v20->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v20), (~v20->flags & 0x402) != 0) || v20->sa_query_timed_out)
    || v20->auth_alg == 2 )
  {
    v26 = wpa_auth_uses_mfp(v20->wpa_sm);
    v27 = v20->flags;
    v28 = v27 | 0x400;
    if ( !v26 )
      v28 = v27 & 0xFFFFFBFF;
LABEL_23:
    v20->flags = v28 & 0xFFF7FFFF | 3;
    v29 = v28 & 2;
    hostapd_set_sta_flags(hapd, v20);
    if ( reassoc )
    {
      v30 = v20->wpa_sm;
      if ( v20->auth_alg == 2 )
      {
        wpa_auth_sm_event(v30, WPA_ASSOC_FT);
        goto LABEL_26;
      }
    }
    else
    {
      v30 = v20->wpa_sm;
    }
    wpa_auth_sm_event(v30, WPA_ASSOC);
LABEL_26:
    v31 = v29;
    v14 = 0;
    if ( v29 )
      v31 = 1;
    hostapd_new_assoc_sta(hapd, v20, v31);
    ieee802_1x_notify_port_enabled(v20->eapol_sm, 1);
    return v14;
  }
  if ( !v20->sa_query_count )
    ap_sta_start_sa_query(hapd, v20);
  v32 = hostapd_eid_assoc_comeback_time(hapd, v20, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v32 - buf);
  return v14;
}
