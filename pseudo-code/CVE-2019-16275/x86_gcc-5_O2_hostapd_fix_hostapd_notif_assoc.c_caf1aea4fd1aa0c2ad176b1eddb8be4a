int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  u8 v5; // bp
  int v6; // ecx
  u8 v7; // al
  sta_info *v10; // eax
  sta_info *v11; // ebp
  hostapd_iface *v12; // eax
  wpa_state_machine *v13; // eax
  int v14; // eax
  bool v15; // zf
  u32 v16; // eax
  int v17; // esi
  u8 *v18; // edx
  u8 *v19; // eax
  int v20; // ecx
  u8 p; // [esp+1Ch] [ebp-5C0h]
  u8 *pa; // [esp+1Ch] [ebp-5C0h]
  u8 *pb; // [esp+1Ch] [ebp-5C0h]
  u8 *pc; // [esp+1Ch] [ebp-5C0h]
  u8 ielen; // [esp+20h] [ebp-5BCh]
  int ielena; // [esp+20h] [ebp-5BCh]
  int ielenb; // [esp+20h] [ebp-5BCh]
  u8 res; // [esp+24h] [ebp-5B8h]
  int resa; // [esp+24h] [ebp-5B8h]
  u8 v30; // [esp+2Eh] [ebp-5AEh]
  u8 v31; // [esp+2Fh] [ebp-5ADh]
  ieee802_11_elems elems; // [esp+38h] [ebp-5A4h] BYREF
  u8 buf[1064]; // [esp+194h] [ebp-448h] BYREF
  unsigned int v34; // [esp+5BCh] [ebp-20h]

  v34 = __readgsdword(0x14u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  v5 = *addr;
  res = addr[1];
  if ( (*addr & 1) != 0 )
  {
    v6 = addr[3];
    p = addr[2];
    ielen = addr[4];
    v7 = addr[5];
    goto LABEL_6;
  }
  p = addr[2];
  v6 = addr[3];
  ielen = addr[4];
  v30 = addr[5];
  v7 = v30 | ielen | v6 | p | v5 | addr[1];
  if ( !v7 )
  {
LABEL_6:
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      res,
      p,
      v6,
      ielen,
      v7);
    return 0;
  }
  v31 = addr[3];
  if ( !memcmp(addr, hapd->own_addr, 6u) )
  {
    v7 = v30;
    v6 = v31;
    goto LABEL_6;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    pa = (u8 *)(elems.wps_ie - 2);
    ielena = elems.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    pa = (u8 *)(elems.rsn_ie - 2);
    ielena = elems.rsn_ie_len + 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    pa = (u8 *)(elems.wpa_ie - 2);
    ielena = elems.wpa_ie_len + 2;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    ielena = 0;
    pa = 0;
  }
  v10 = ap_get_sta(hapd, addr);
  v11 = v10;
  if ( v10 )
  {
    ap_sta_no_session_timeout(hapd, v10);
    accounting_sta_stop(hapd, v11);
    v11->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v11 = ap_sta_add(hapd, addr);
    if ( !v11 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v12 = hapd->iface;
  v11->flags &= 0xFFFECFFF;
  if ( !v12->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v20 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v11->addr, v20);
    ap_free_sta(hapd, v11);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v11, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v16 = v11->flags;
    goto LABEL_23;
  }
  if ( !pa || !ielena )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v20 = 13;
    goto fail;
  }
  v13 = v11->wpa_sm;
  if ( !v13 )
  {
    v13 = wpa_auth_sta_init(hapd->wpa_auth, v11->addr, 0);
    v11->wpa_sm = v13;
    if ( !v13 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine", 0, 0);
      return -1;
    }
  }
  v14 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v13,
          hapd->iface->freq,
          pa,
          ielena,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v14 )
  {
    resa = v14;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v14);
    wpa_hexdump(2, "IE", pa, ielena);
    v20 = 18;
    if ( resa != 2 )
    {
      v20 = 19;
      if ( resa != 3 )
      {
        v20 = 20;
        if ( resa != 4 )
        {
          v20 = 24;
          if ( resa != 8 )
            v20 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v11->flags & 0x402) == 1026 )
  {
    v18 = (u8 *)v11->sa_query_timed_out;
    if ( !v18 )
    {
      if ( v11->sa_query_count <= 0
        || (pb = (u8 *)v11->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v11), (v11->flags & 0x402) == 1026)
        && (v18 = pb, !v11->sa_query_timed_out) )
      {
        if ( v11->auth_alg != 2 )
        {
          if ( !v11->sa_query_count )
          {
            pc = v18;
            ap_sta_start_sa_query(hapd, v11);
            v18 = pc;
          }
          ielenb = (int)v18;
          v19 = hostapd_eid_assoc_comeback_time(hapd, v11, buf);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v19 - buf);
          return ielenb;
        }
      }
    }
  }
  v15 = wpa_auth_uses_mfp(v11->wpa_sm) == 0;
  v16 = v11->flags;
  if ( v15 )
    BYTE1(v16) &= 0xFBu;
  else
    BYTE1(v16) |= 4u;
LABEL_23:
  v17 = v16 & 2;
  v11->flags = v16 & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v11);
  if ( reassoc && v11->auth_alg == 2 )
    wpa_auth_sm_event(v11->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v11->wpa_sm, WPA_ASSOC);
  hostapd_new_assoc_sta(hapd, v11, v17 != 0);
  ieee802_1x_notify_port_enabled(v11->eapol_sm, 1);
  return 0;
}
