int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v9; // r0
  const u8 *v10; // r9
  const u8 *v11; // r6
  sta_info *v12; // r0
  sta_info *v13; // r4
  int v14; // r2
  wpa_state_machine *v15; // r1
  int v16; // r8
  int v17; // r6
  u8 *v18; // r0
  int v19; // r0
  u32 v20; // r3
  unsigned int v21; // r3
  int v22; // r6
  wpa_event v23; // r1
  int v24; // r2
  unsigned __int8 *fmt; // [sp+0h] [bp-5C8h]
  unsigned __int8 *fmta; // [sp+0h] [bp-5C8h]
  unsigned __int8 *fmtb; // [sp+0h] [bp-5C8h]
  ieee802_11_elems elems; // [sp+18h] [bp-5B0h] BYREF
  u8 buf[1064]; // [sp+174h] [bp-454h] BYREF

  if ( !addr )
  {
    v9 = 2;
LABEL_26:
    wpa_printf(v9, fmt);
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie - 2;
    v11 = (const u8 *)(elems.wps_ie_len + 2);
LABEL_7:
    wpa_printf(2, fmta);
    goto LABEL_11;
  }
  if ( elems.rsn_ie )
  {
    v10 = elems.rsn_ie - 2;
    v11 = (const u8 *)(elems.rsn_ie_len + 2);
    goto LABEL_7;
  }
  v11 = elems.wpa_ie;
  if ( elems.wpa_ie )
  {
    v10 = elems.wpa_ie - 2;
    v11 = (const u8 *)(elems.wpa_ie_len + 2);
    goto LABEL_7;
  }
  v10 = 0;
  wpa_printf(2, fmta);
LABEL_11:
  v12 = ap_get_sta(hapd, addr);
  v13 = v12;
  if ( v12 )
  {
    ap_sta_no_session_timeout(hapd, v12);
    accounting_sta_stop(hapd, v13);
    v13->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v13 = ap_sta_add(hapd, addr);
    if ( !v13 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v13->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(3, (const unsigned __int8 *)addr[2], addr[3], addr[4], addr[5]);
    v14 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v13->addr, v14);
    ap_free_sta(hapd, v13);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v13, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    if ( !v10 || !v11 )
    {
      wpa_printf(2, fmt);
      v14 = 13;
      goto fail;
    }
    if ( !v13->wpa_sm )
      v13->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v13->addr, 0);
    v15 = v13->wpa_sm;
    if ( !v15 )
    {
      v9 = 5;
      goto LABEL_26;
    }
    v16 = wpa_validate_wpa_ie(
            hapd->wpa_auth,
            v15,
            hapd->iface->freq,
            v10,
            (size_t)v11,
            elems.mdie,
            elems.mdie_len,
            elems.owe_dh,
            elems.owe_dh_len);
    if ( v16 )
    {
      wpa_printf(2, fmtb);
      wpa_hexdump(2, (const unsigned __int8 *)"IE", v10, (size_t)v11);
      switch ( v16 )
      {
        case 2:
          v14 = 18;
          break;
        case 3:
          v14 = 19;
          break;
        case 4:
          v14 = 20;
          break;
        case 8:
          v14 = 24;
          break;
        default:
          v14 = 13;
          break;
      }
      goto fail;
    }
    if ( (~v13->flags & 0x402) == 0 && !v13->sa_query_timed_out && v13->sa_query_count > 0 )
      ap_check_sa_query_timeout(hapd, v13);
    if ( (~v13->flags & 0x402) == 0 )
    {
      v17 = v13->sa_query_timed_out;
      if ( !v17 && v13->auth_alg != 2 )
      {
        if ( !v13->sa_query_count )
          ap_sta_start_sa_query(hapd, v13);
        v18 = hostapd_eid_assoc_comeback_time(hapd, v13, buf);
        hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v18 - buf);
        return v17;
      }
    }
    v19 = wpa_auth_uses_mfp(v13->wpa_sm);
    v20 = v13->flags;
    if ( v19 )
      v21 = v20 | 0x400;
    else
      v21 = v20 & 0xFFFFFBFF;
    v13->flags = v21;
  }
  v22 = v13->flags & 2;
  v13->flags = v13->flags & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v13);
  if ( reassoc && v13->auth_alg == 2 )
    v23 = WPA_ASSOC_FT;
  else
    v23 = WPA_ASSOC;
  wpa_auth_sm_event(v13->wpa_sm, v23);
  v24 = v22;
  if ( v22 )
    v24 = 1;
  v17 = 0;
  hostapd_new_assoc_sta(hapd, v13, v24);
  ieee802_1x_notify_port_enabled(v13->eapol_sm, 1);
  return v17;
}
