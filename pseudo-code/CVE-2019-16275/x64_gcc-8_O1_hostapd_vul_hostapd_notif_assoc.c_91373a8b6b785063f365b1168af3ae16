int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v9; // r12
  size_t v10; // r14
  sta_info *v11; // rax
  sta_info *v12; // rbx
  wpa_state_machine *v13; // rsi
  unsigned int v14; // eax
  int v15; // er12
  int v16; // er12
  unsigned __int16 v18; // ax
  unsigned int v19; // er15
  u8 *v20; // rax
  ieee802_11_elems elems; // [rsp+0h] [rbp-6F8h] BYREF
  u8 buf[1064]; // [rsp+290h] [rbp-468h] BYREF
  unsigned __int64 v23; // [rsp+6B8h] [rbp-40h]

  v23 = __readfsqword(0x28u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v9 = elems.wps_ie - 2;
    v10 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v9 = elems.rsn_ie - 2;
    v10 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v9 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v9 = elems.wpa_ie - 2;
      v10 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      v10 = 0LL;
    }
  }
  v11 = ap_get_sta(hapd, addr);
  v12 = v11;
  if ( v11 )
  {
    ap_sta_no_session_timeout(hapd, v11);
    accounting_sta_stop(hapd, v12);
    v12->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v12 = ap_sta_add(hapd, addr);
    if ( !v12 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v12->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v18 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v12->addr, v18);
    ap_free_sta(hapd, v12);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v12, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
    goto LABEL_16;
  if ( !v9 || !v10 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v18 = 13;
    goto fail;
  }
  v13 = v12->wpa_sm;
  if ( !v13 )
  {
    v13 = wpa_auth_sta_init(hapd->wpa_auth, v12->addr, 0LL);
    v12->wpa_sm = v13;
    if ( !v13 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v14 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v13,
          hapd->iface->freq,
          v9,
          v10,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v14 )
  {
    v19 = v14;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v14);
    wpa_hexdump(2, "IE", v9, v10);
    v18 = 18;
    if ( v19 != 2 )
    {
      v18 = 19;
      if ( v19 != 3 )
      {
        v18 = 20;
        if ( v19 != 4 )
        {
          v18 = 24;
          if ( v19 != 8 )
            v18 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v12->flags & 0x402) == 1026 )
  {
    v16 = v12->sa_query_timed_out;
    if ( !v16 )
    {
      if ( v12->sa_query_count <= 0
        || (ap_check_sa_query_timeout(hapd, v12), (v12->flags & 0x402) == 1026) && !v12->sa_query_timed_out )
      {
        if ( v12->auth_alg != 2 )
        {
          if ( !v12->sa_query_count )
            ap_sta_start_sa_query(hapd, v12);
          v20 = hostapd_eid_assoc_comeback_time(hapd, v12, buf);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v20 - buf);
          return v16;
        }
      }
    }
  }
  if ( wpa_auth_uses_mfp(v12->wpa_sm) )
    v12->flags |= 0x400u;
  else
    v12->flags &= 0xFFFFFBFF;
LABEL_16:
  v15 = v12->flags & 2;
  v12->flags = v12->flags & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v12);
  if ( reassoc && v12->auth_alg == 2 )
    wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC);
  hostapd_new_assoc_sta(hapd, v12, v15 != 0);
  ieee802_1x_notify_port_enabled(v12->eapol_sm, 1);
  return 0;
}
