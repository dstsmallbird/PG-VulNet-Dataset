int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v9; // r8
  size_t v10; // r10
  sta_info *v11; // r0
  sta_info *v12; // r4
  unsigned int v13; // r2
  bool v14; // zf
  wpa_state_machine *v15; // r1
  int v16; // r6
  int v17; // r0
  u32 v18; // r2
  unsigned int v19; // r2
  int v20; // r6
  int v21; // r2
  int v22; // r8
  int v24; // r2
  u8 *v25; // r0
  unsigned __int8 *fmt; // [sp+0h] [bp-5C0h]
  unsigned __int8 *fmta; // [sp+0h] [bp-5C0h]
  unsigned __int8 *fmtb; // [sp+0h] [bp-5C0h]
  unsigned __int8 *fmtc; // [sp+0h] [bp-5C0h]
  ieee802_11_elems elems; // [sp+18h] [bp-5A8h] BYREF
  u8 buf[1064]; // [sp+174h] [bp-44Ch] BYREF

  if ( !addr )
  {
    v22 = -1;
    wpa_printf(2, fmt);
    return v22;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v9 = elems.wps_ie - 2;
    v10 = elems.wps_ie_len + 2;
    wpa_printf(2, fmta);
  }
  else
  {
    if ( elems.rsn_ie )
    {
      v9 = elems.rsn_ie - 2;
      v10 = elems.rsn_ie_len + 2;
      wpa_printf(2, fmta);
      v11 = ap_get_sta(hapd, addr);
      v12 = v11;
      if ( v11 )
        goto LABEL_5;
      goto LABEL_29;
    }
    if ( elems.wpa_ie )
    {
      v9 = elems.wpa_ie - 2;
      v10 = elems.wpa_ie_len + 2;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    wpa_printf(2, fmta);
  }
  v11 = ap_get_sta(hapd, addr);
  v12 = v11;
  if ( v11 )
  {
LABEL_5:
    ap_sta_no_session_timeout(hapd, v11);
    accounting_sta_stop(hapd, v12);
    v12->timeout_next = STA_NULLFUNC;
    goto LABEL_6;
  }
LABEL_29:
  v12 = ap_sta_add(hapd, addr);
  if ( !v12 )
  {
    v22 = -1;
    hostapd_drv_sta_disassoc(hapd, addr, 5);
    return v22;
  }
LABEL_6:
  v13 = hapd->iface->drv_max_acl_mac_addrs;
  v12->flags &= 0xFFFECFFF;
  if ( !v13 && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(3, (const unsigned __int8 *)addr[2], addr[3], addr[4], addr[5]);
    v24 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v12->addr, v24);
    v22 = -1;
    ap_free_sta(hapd, v12);
    return v22;
  }
  ap_copy_sta_supp_op_classes(v12, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    v14 = v10 == 0;
    if ( v10 )
      v14 = v9 == 0;
    if ( v14 )
    {
      wpa_printf(2, fmtb);
      v24 = 13;
      goto fail;
    }
    v15 = v12->wpa_sm;
    if ( !v15 )
    {
      v15 = wpa_auth_sta_init(hapd->wpa_auth, v12->addr, 0);
      v12->wpa_sm = v15;
      if ( !v15 )
      {
        v22 = -1;
        wpa_printf(5, fmtb);
        return v22;
      }
    }
    v16 = wpa_validate_wpa_ie(
            hapd->wpa_auth,
            v15,
            hapd->iface->freq,
            v9,
            v10,
            elems.mdie,
            elems.mdie_len,
            elems.owe_dh,
            elems.owe_dh_len);
    if ( v16 )
    {
      wpa_printf(2, fmtc);
      wpa_hexdump(2, (const unsigned __int8 *)"IE", v9, v10);
      switch ( v16 )
      {
        case 2:
          v24 = 18;
          break;
        case 3:
          v24 = 19;
          break;
        case 4:
          v24 = 20;
          break;
        case 8:
          v24 = 24;
          break;
        default:
          v24 = 13;
          break;
      }
      goto fail;
    }
    if ( (v12->flags & 0x402) == 1026 )
    {
      v22 = v12->sa_query_timed_out;
      if ( !v22 )
      {
        if ( v12->sa_query_count <= 0
          || (ap_check_sa_query_timeout(hapd, v12), (~v12->flags & 0x402) == 0) && !v12->sa_query_timed_out )
        {
          if ( v12->auth_alg != 2 )
          {
            if ( !v12->sa_query_count )
              ap_sta_start_sa_query(hapd, v12);
            v25 = hostapd_eid_assoc_comeback_time(hapd, v12, buf);
            hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v25 - buf);
            return v22;
          }
        }
      }
    }
    v17 = wpa_auth_uses_mfp(v12->wpa_sm);
    v18 = v12->flags;
    if ( v17 )
      v19 = v18 | 0x400;
    else
      v19 = v18 & 0xFFFFFBFF;
  }
  else
  {
    v19 = v12->flags;
  }
  v12->flags = v19 & 0xFFF7FFFF | 3;
  v20 = v19 & 2;
  hostapd_set_sta_flags(hapd, v12);
  if ( reassoc && v12->auth_alg == 2 )
    wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC);
  v21 = v20;
  v22 = 0;
  if ( v20 )
    v21 = 1;
  hostapd_new_assoc_sta(hapd, v12, v21);
  ieee802_1x_notify_port_enabled(v12->eapol_sm, 1);
  return v22;
}
