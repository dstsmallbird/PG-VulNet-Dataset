int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v9; // r5
  int v10; // r7
  const u8 *v12; // r10
  size_t v13; // r9
  sta_info *v14; // r0
  sta_info *v15; // r5
  bool v16; // zf
  int v17; // r2
  unsigned int v18; // r6
  wpa_state_machine *v19; // r0
  wpa_event v20; // r1
  wpa_state_machine *v21; // r1
  int v22; // r0
  int v23; // r7
  _DWORD *v24; // r1
  u32 v25; // r0
  bool v26; // zf
  int v27; // r0
  bool v28; // zf
  int v29; // r0
  u32 v30; // r1
  u8 *v31; // r0
  u8 eid[1064]; // [sp+14h] [bp-5A4h] BYREF
  ieee802_11_elems elems; // [sp+43Ch] [bp-17Ch] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  v9 = elems.wps_ie;
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie_len;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
LABEL_9:
    v12 = v9 - 2;
    v13 = v10 + 2;
    goto LABEL_10;
  }
  v9 = elems.rsn_ie;
  if ( elems.rsn_ie )
  {
    v10 = elems.rsn_ie_len;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    goto LABEL_9;
  }
  v9 = elems.wpa_ie;
  if ( elems.wpa_ie )
  {
    v10 = elems.wpa_ie_len;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    goto LABEL_9;
  }
  wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  v12 = 0;
  v13 = 0;
LABEL_10:
  v14 = ap_get_sta(hapd, addr);
  if ( v14 )
  {
    v15 = v14;
    ap_sta_no_session_timeout(hapd, v14);
    accounting_sta_stop(hapd, v15);
    v15->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v15 = ap_sta_add(hapd, addr);
    if ( !v15 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v15->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v17 = 1;
    goto LABEL_36;
  }
  ap_copy_sta_supp_op_classes(v15, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v18 = v15->flags;
    goto LABEL_22;
  }
  v16 = v12 == 0;
  if ( v12 )
    v16 = v13 == 0;
  if ( v16 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v17 = 13;
LABEL_36:
    hostapd_drv_sta_disassoc(hapd, v15->addr, v17);
    ap_free_sta(hapd, v15);
    return -1;
  }
  v21 = v15->wpa_sm;
  if ( !v21 )
  {
    v21 = wpa_auth_sta_init(hapd->wpa_auth, v15->addr, 0);
    v15->wpa_sm = v21;
    if ( !v21 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v22 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v21,
          hapd->iface->freq,
          v12,
          v13,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v22 )
  {
    v23 = v22;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v22);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v12, v13);
    if ( (unsigned int)(v23 - 2) < 7 )
      v24 = &unk_9D25C;
    v17 = 13;
    if ( (unsigned int)(v23 - 2) < 7 )
      v17 = v24[v23 - 2];
    goto LABEL_36;
  }
  v25 = v15->flags;
  v26 = (v25 & 0x402) == 1026;
  if ( (v25 & 0x402) == 1026 )
    v26 = v15->sa_query_timed_out == 0;
  if ( v26 && v15->sa_query_count >= 1 )
  {
    ap_check_sa_query_timeout(hapd, v15);
    v25 = v15->flags;
  }
  v27 = v25 & 0x402;
  v28 = v27 == 1026;
  if ( v27 == 1026 )
    v28 = v15->sa_query_timed_out == 0;
  if ( !v28 || v15->auth_alg == 2 )
  {
    v29 = wpa_auth_uses_mfp(v15->wpa_sm);
    v30 = v15->flags;
    if ( v29 )
      v18 = v30 | 0x400;
    else
      v18 = v30 & 0xFFFFFBFF;
    v15->flags = v18;
LABEL_22:
    v15->flags = v18 & 0xFFF7FFFC | 3;
    hostapd_set_sta_flags(hapd, v15);
    if ( reassoc && v15->auth_alg == 2 )
    {
      v19 = v15->wpa_sm;
      v20 = WPA_ASSOC_FT;
    }
    else
    {
      v19 = v15->wpa_sm;
      v20 = WPA_ASSOC;
    }
    wpa_auth_sm_event(v19, v20);
    hostapd_new_assoc_sta(hapd, v15, (v18 >> 1) & 1);
    ieee802_1x_notify_port_enabled(v15->eapol_sm, 1);
    return 0;
  }
  if ( !v15->sa_query_count )
    ap_sta_start_sa_query(hapd, v15);
  v31 = hostapd_eid_assoc_comeback_time(hapd, v15, eid);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v31 - eid);
  return 0;
}
