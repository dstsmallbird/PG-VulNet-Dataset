int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v5; // edx
  int v6; // ecx
  int v7; // eax
  sta_info *v8; // eax
  sta_info *v9; // edi
  hostapd_iface *v10; // eax
  int v11; // edx
  int v12; // ecx
  hostapd_bss_config *v13; // eax
  wpa_state_machine *v14; // eax
  int v15; // eax
  int v16; // edx
  int v17; // ecx
  u8 *v18; // eax
  int v20; // ecx
  u8 v22; // [esp+0h] [ebp-5B8h]
  u8 v23; // [esp+1h] [ebp-5B7h]
  u8 v24; // [esp+2h] [ebp-5B6h]
  u8 v25; // [esp+3h] [ebp-5B5h]
  u8 ielen; // [esp+4h] [ebp-5B4h]
  int ielena; // [esp+4h] [ebp-5B4h]
  int ielenb; // [esp+4h] [ebp-5B4h]
  u8 p; // [esp+8h] [ebp-5B0h]
  u8 *pa; // [esp+8h] [ebp-5B0h]
  int res; // [esp+Ch] [ebp-5ACh]
  int resa; // [esp+Ch] [ebp-5ACh]
  ieee802_11_elems elems; // [esp+18h] [ebp-5A0h] BYREF
  u8 buf[1064]; // [esp+174h] [ebp-444h] BYREF
  unsigned int v35; // [esp+59Ch] [ebp-1Ch]

  v35 = __readgsdword(0x14u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", hapd, hapd);
    return -1;
  }
  v5 = *addr;
  ielen = addr[1];
  v25 = addr[2];
  p = addr[3];
  v24 = addr[4];
  v6 = addr[5];
  if ( (v5 & 1) != 0
    || !((unsigned __int8)v6 | (unsigned __int8)(v24 | p | v25 | v5 | ielen))
    || (v22 = addr[5], v23 = *addr, v7 = memcmp(addr, hapd->own_addr, 6u), v5 = v23, v6 = v22, !v7) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      ielen,
      v25,
      p,
      v24,
      v6);
    return 0;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    pa = (u8 *)(elems.wps_ie - 2);
    ielena = elems.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq", ielena, ielena);
  }
  else if ( elems.rsn_ie )
  {
    pa = (u8 *)(elems.rsn_ie - 2);
    ielena = elems.rsn_ie_len + 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq", ielena, ielena);
  }
  else
  {
    pa = (u8 *)elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      pa = (u8 *)(elems.wpa_ie - 2);
      ielena = elems.wpa_ie_len + 2;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq", ielena, ielena);
    }
    else
    {
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq", 0, 0);
      ielena = 0;
    }
  }
  v8 = ap_get_sta(hapd, addr);
  v9 = v8;
  if ( v8 )
  {
    ap_sta_no_session_timeout(hapd, v8);
    accounting_sta_stop(hapd, v9);
    v9->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v9 = ap_sta_add(hapd, addr);
    if ( !v9 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v10 = hapd->iface;
  v9->flags &= 0xFFFECFFF;
  if ( !v10->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v11 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v9->addr, v11);
    ap_free_sta(hapd, v9);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v9, elems.supp_op_classes, elems.supp_op_classes_len);
  v13 = hapd->conf;
  if ( !v13->wpa )
  {
LABEL_51:
    v20 = v9->flags & 2;
    v9->flags = v9->flags & 0xFFF7FFFF | 3;
    resa = v20;
    hostapd_set_sta_flags(hapd, v9);
    if ( reassoc && v9->auth_alg == 2 )
      wpa_auth_sm_event(v9->wpa_sm, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v9->wpa_sm, WPA_ASSOC);
    hostapd_new_assoc_sta(hapd, v9, resa != 0);
    ieee802_1x_notify_port_enabled(v9->eapol_sm, 1);
    return 0;
  }
  if ( !pa || !ielena )
  {
    wpa_printf(2, "No WPA/RSN IE from STA", v13, hapd->conf);
    v11 = 13;
    goto fail;
  }
  if ( !v9->wpa_sm )
    v9->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v9->addr, 0);
  v14 = v9->wpa_sm;
  if ( !v14 )
  {
    wpa_printf(5, "Failed to initialize WPA state machine", v12, v12);
    return -1;
  }
  v15 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v14,
          hapd->iface->freq,
          pa,
          ielena,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v15 )
  {
    res = v15;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v15, v16);
    wpa_hexdump(2, "IE", pa, ielena);
    v11 = 18;
    if ( res != 2 )
    {
      v11 = 19;
      if ( res != 3 )
      {
        v11 = 20;
        if ( res != 4 )
        {
          v11 = 13;
          if ( res == 8 )
            v11 = 24;
        }
      }
    }
    goto fail;
  }
  if ( (v9->flags & 0x402) == 1026 && !v9->sa_query_timed_out && v9->sa_query_count > 0 )
    ap_check_sa_query_timeout(hapd, v9);
  if ( (v9->flags & 0x402) != 1026 || (v17 = v9->sa_query_timed_out) != 0 || v9->auth_alg == 2 )
  {
    if ( wpa_auth_uses_mfp(v9->wpa_sm) )
      v9->flags |= 0x400u;
    else
      v9->flags &= 0xFFFFFBFF;
    goto LABEL_51;
  }
  if ( !v9->sa_query_count )
  {
    ap_sta_start_sa_query(hapd, v9);
    v17 = 0;
  }
  ielenb = v17;
  v18 = hostapd_eid_assoc_comeback_time(hapd, v9, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v18 - buf);
  return ielenb;
}
