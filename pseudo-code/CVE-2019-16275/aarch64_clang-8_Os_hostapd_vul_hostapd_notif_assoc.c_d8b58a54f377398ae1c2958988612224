int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  __int64 v10; // x9
  const u8 *v11; // x23
  const char *v12; // x1
  size_t v13; // x24
  sta_info *v14; // x0
  sta_info *v15; // x21
  wpa_state_machine *v16; // x1
  __int64 v17; // x2
  __int64 v18; // x3
  __int64 v19; // x4
  unsigned int v20; // w0
  unsigned int v21; // w25
  int v22; // w2
  unsigned int v23; // w22
  wpa_state_machine *v24; // x0
  wpa_event v25; // w1
  u32 v27; // w8
  int v28; // w0
  u32 v29; // w8
  u8 *v30; // x0
  u8 eid[1064]; // [xsp+10h] [xbp-6F0h] BYREF
  ieee802_11_elems elems; // [xsp+438h] [xbp-2C8h] BYREF

  if ( addr )
  {
    random_add_randomness(addr, 6uLL);
    hostapd_logger(hapd, addr, 1u, 2, "associated");
    ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
    if ( elems.wps_ie )
    {
      v10 = elems.wps_ie_len;
      v11 = elems.wps_ie - 2;
      v12 = "STA included WPS IE in (Re)AssocReq";
    }
    else if ( elems.rsn_ie )
    {
      v10 = elems.rsn_ie_len;
      v11 = elems.rsn_ie - 2;
      v12 = "STA included RSN IE in (Re)AssocReq";
    }
    else
    {
      if ( !elems.wpa_ie )
      {
        wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
        v11 = 0LL;
        v13 = 0LL;
LABEL_10:
        v14 = ap_get_sta(hapd, addr);
        if ( v14 )
        {
          v15 = v14;
          ap_sta_no_session_timeout(hapd, v14);
          accounting_sta_stop(hapd, v15);
          v15->timeout_next = STA_NULLFUNC;
        }
        else
        {
          v15 = ap_sta_add(hapd, addr);
          if ( !v15 )
          {
            hostapd_drv_sta_disassoc(hapd, addr, 5);
            return -1;
          }
        }
        v15->flags &= 0xFFFECFFF;
        if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
        {
          wpa_printf(
            3,
            "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
            *addr,
            addr[1],
            addr[2],
            addr[3],
            addr[4],
            addr[5]);
          v22 = 1;
          goto LABEL_33;
        }
        ap_copy_sta_supp_op_classes(v15, elems.supp_op_classes, elems.supp_op_classes_len);
        if ( hapd->conf->wpa )
        {
          if ( !v11 || !v13 )
          {
            wpa_printf(2, "No WPA/RSN IE from STA");
            goto LABEL_31;
          }
          v16 = v15->wpa_sm;
          if ( !v16 )
          {
            v16 = wpa_auth_sta_init(hapd->wpa_auth, v15->addr, 0LL);
            v15->wpa_sm = v16;
            if ( !v16 )
            {
              wpa_printf(5, "Failed to initialize WPA state machine", v17, v18, v19);
              return -1;
            }
          }
          v20 = wpa_validate_wpa_ie(
                  hapd->wpa_auth,
                  v16,
                  hapd->iface->freq,
                  v11,
                  v13,
                  elems.mdie,
                  elems.mdie_len,
                  elems.owe_dh,
                  elems.owe_dh_len);
          if ( v20 )
          {
            v21 = v20;
            wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v20);
            wpa_hexdump(2, (const unsigned __int8 *)"IE", v11, v13);
            if ( v21 - 2 < 7 )
            {
              v22 = dword_4743F0[v21 - 2];
LABEL_33:
              hostapd_drv_sta_disassoc(hapd, v15->addr, v22);
              ap_free_sta(hapd, v15);
              return -1;
            }
LABEL_31:
            v22 = 13;
            goto LABEL_33;
          }
          v27 = v15->flags;
          if ( (~v27 & 0x402) == 0 && !v15->sa_query_timed_out && v15->sa_query_count >= 1 )
          {
            ap_check_sa_query_timeout(hapd, v15);
            v27 = v15->flags;
          }
          if ( (~v27 & 0x402) == 0 && !v15->sa_query_timed_out && v15->auth_alg != 2 )
          {
            if ( !v15->sa_query_count )
              ap_sta_start_sa_query(hapd, v15);
            v30 = hostapd_eid_assoc_comeback_time(hapd, v15, eid);
            hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v30 - eid);
            return 0;
          }
          v28 = wpa_auth_uses_mfp(v15->wpa_sm);
          v29 = v15->flags;
          if ( v28 )
            v23 = v29 | 0x400;
          else
            v23 = v29 & 0xFFFFFBFF;
          v15->flags = v23;
        }
        else
        {
          v23 = v15->flags;
        }
        v15->flags = v23 & 0xFFF7FFFF | 3;
        hostapd_set_sta_flags(hapd, v15);
        if ( reassoc && v15->auth_alg == 2 )
        {
          v24 = v15->wpa_sm;
          v25 = WPA_ASSOC_FT;
        }
        else
        {
          v24 = v15->wpa_sm;
          v25 = WPA_ASSOC;
        }
        wpa_auth_sm_event(v24, v25);
        hostapd_new_assoc_sta(hapd, v15, (v23 >> 1) & 1);
        ieee802_1x_notify_port_enabled(v15->eapol_sm, 1);
        return 0;
      }
      v10 = elems.wpa_ie_len;
      v11 = elems.wpa_ie - 2;
      v12 = "STA included WPA IE in (Re)AssocReq";
    }
    v13 = v10 + 2;
    wpa_printf(2, (const unsigned __int8 *)v12);
    goto LABEL_10;
  }
  wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
  return -1;
}
