int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  wpa_state_machine *v5; // $v0
  unsigned __int16 v7; // [sp+70h] [+70h]
  u8 *eid; // [sp+74h] [+74h]
  u8 v9[1064]; // [sp+78h] [+78h] BYREF
  size_t v10; // [sp+4A0h] [+4A0h]
  u8 *wpa_ie; // [sp+4A4h] [+4A4h]
  ieee802_11_elems v12; // [sp+4A8h] [+4A8h] BYREF
  int v13; // [sp+608h] [+608h]
  _BOOL4 v14; // [sp+60Ch] [+60Ch]
  sta_info *sta; // [sp+610h] [+610h]
  size_t len; // [sp+614h] [+614h]
  u8 *start; // [sp+618h] [+618h]
  void *buf; // [sp+61Ch] [+61Ch]
  void *ctx; // [sp+620h] [+620h]

  ctx = hapd;
  buf = (void *)addr;
  start = (u8 *)req_ies;
  len = req_ies_len;
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  random_add_randomness(buf, 6u);
  hostapd_logger(ctx, (const u8 *)buf, 1u, 2, "associated");
  ieee802_11_parse_elems(start, len, &v12, 0);
  if ( v12.wps_ie )
  {
    wpa_ie = (u8 *)(v12.wps_ie - 2);
    v10 = v12.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( v12.rsn_ie )
  {
    wpa_ie = (u8 *)(v12.rsn_ie - 2);
    v10 = v12.rsn_ie_len + 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( v12.wpa_ie )
  {
    wpa_ie = (u8 *)(v12.wpa_ie - 2);
    v10 = v12.wpa_ie_len + 2;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    wpa_ie = 0;
    v10 = 0;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  sta = ap_get_sta((hostapd_data *)ctx, (const u8 *)buf);
  if ( sta )
  {
    ap_sta_no_session_timeout((hostapd_data *)ctx, sta);
    accounting_sta_stop((hostapd_data *)ctx, sta);
    sta->timeout_next = STA_NULLFUNC;
  }
  else
  {
    sta = ap_sta_add((hostapd_data *)ctx, (const u8 *)buf);
    if ( !sta )
    {
      hostapd_drv_sta_disassoc((hostapd_data *)ctx, (const u8 *)buf, 5);
      return -1;
    }
  }
  sta->flags &= 0xFFFECFFF;
  if ( !*(_DWORD *)(*(_DWORD *)ctx + 1108) && hostapd_check_acl((hostapd_data *)ctx, (const u8 *)buf, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *(unsigned __int8 *)buf,
      *((unsigned __int8 *)buf + 1),
      *((unsigned __int8 *)buf + 2),
      *((unsigned __int8 *)buf + 3),
      *((unsigned __int8 *)buf + 4),
      *((unsigned __int8 *)buf + 5));
    v7 = 1;
LABEL_55:
    hostapd_drv_sta_disassoc((hostapd_data *)ctx, sta->addr, v7);
    ap_free_sta((hostapd_data *)ctx, sta);
    return -1;
  }
  mbo_ap_check_sta_assoc((hostapd_data *)ctx, sta, &v12);
  ap_copy_sta_supp_op_classes(sta, v12.supp_op_classes, v12.supp_op_classes_len);
  if ( *(_DWORD *)(*((_DWORD *)ctx + 2) + 456) )
  {
    if ( !wpa_ie || !v10 )
    {
      wpa_printf(2, "No WPA/RSN IE from STA");
      v7 = 13;
      goto LABEL_55;
    }
    if ( !sta->wpa_sm )
    {
      v5 = wpa_auth_sta_init(*((wpa_authenticator **)ctx + 340), sta->addr, 0);
      sta->wpa_sm = v5;
    }
    if ( !sta->wpa_sm )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
    v13 = wpa_validate_wpa_ie(
            *((wpa_authenticator **)ctx + 340),
            sta->wpa_sm,
            *(_DWORD *)(*(_DWORD *)ctx + 1136),
            wpa_ie,
            v10,
            v12.mdie,
            v12.mdie_len,
            v12.owe_dh,
            v12.owe_dh_len);
    if ( v13 )
    {
      wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v13);
      wpa_hexdump(2, "IE", wpa_ie, v10);
      switch ( v13 )
      {
        case 2:
          v7 = 18;
          break;
        case 3:
          v7 = 19;
          break;
        case 4:
          v7 = 20;
          break;
        case 7:
          v7 = 13;
          break;
        case 8:
          v7 = 24;
          break;
        default:
          v7 = 13;
          break;
      }
      goto LABEL_55;
    }
    if ( (sta->flags & 0x402) == 1026 && !sta->sa_query_timed_out && sta->sa_query_count > 0 )
      ap_check_sa_query_timeout((hostapd_data *)ctx, sta);
    if ( (sta->flags & 0x402) == 1026 && !sta->sa_query_timed_out && sta->auth_alg != 2 )
    {
      if ( !sta->sa_query_count )
        ap_sta_start_sa_query((hostapd_data *)ctx, sta);
      eid = hostapd_eid_assoc_comeback_time((hostapd_data *)ctx, sta, v9);
      hostapd_sta_assoc((hostapd_data *)ctx, (const u8 *)buf, reassoc, 0x1Eu, v9, eid - v9);
      return 0;
    }
    if ( wpa_auth_uses_mfp(sta->wpa_sm) )
      sta->flags |= 0x400u;
    else
      sta->flags &= 0xFFFFFBFF;
  }
  v14 = (sta->flags & 2) == 0;
  sta->flags |= 3u;
  sta->flags &= 0xFFF7FFFF;
  hostapd_set_sta_flags((hostapd_data *)ctx, sta);
  if ( reassoc && sta->auth_alg == 2 )
    wpa_auth_sm_event(sta->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(sta->wpa_sm, WPA_ASSOC);
  hostapd_new_assoc_sta((hostapd_data *)ctx, sta, !v14);
  ieee802_1x_notify_port_enabled(sta->eapol_sm, 1);
  return 0;
}
