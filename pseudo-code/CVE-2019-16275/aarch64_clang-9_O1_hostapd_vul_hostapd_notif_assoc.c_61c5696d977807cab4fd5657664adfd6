int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v10; // x23
  size_t v11; // x24
  sta_info *v12; // x0
  sta_info *v13; // x22
  wpa_state_machine *v14; // x1
  unsigned int v15; // w0
  unsigned int v16; // w25
  int v17; // w2
  int v19; // w0
  u32 v20; // w8
  int v21; // w9
  unsigned int v22; // w8
  u32 v23; // w21
  wpa_event v24; // w1
  u8 *v25; // x0
  u8 eid[1064]; // [xsp+10h] [xbp-6F0h] BYREF
  ieee802_11_elems elems; // [xsp+438h] [xbp-2C8h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie - 2;
    v11 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v10 = elems.rsn_ie - 2;
    v11 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    v10 = elems.wpa_ie - 2;
    v11 = elems.wpa_ie_len + 2LL;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v10 = 0LL;
    v11 = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  v12 = ap_get_sta(hapd, addr);
  if ( v12 )
  {
    v13 = v12;
    ap_sta_no_session_timeout(hapd, v12);
    accounting_sta_stop(hapd, v13);
    v13->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v13 = ap_sta_add(hapd, addr);
    if ( !v13 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v13->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v17 = 1;
    goto fail;
  }
  ap_copy_sta_supp_op_classes(v13, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
    goto LABEL_39;
  if ( !v10 || !v11 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    goto LABEL_24;
  }
  v14 = v13->wpa_sm;
  if ( !v14 )
  {
    v14 = wpa_auth_sta_init(hapd->wpa_auth, v13->addr, 0LL);
    v13->wpa_sm = v14;
    if ( !v14 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v15 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v14,
          hapd->iface->freq,
          v10,
          v11,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v15 )
  {
    v16 = v15;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v15);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v10, v11);
    if ( v16 - 2 < 7 )
    {
      v17 = dword_47D9A8[v16 - 2];
fail:
      hostapd_drv_sta_disassoc(hapd, v13->addr, v17);
      ap_free_sta(hapd, v13);
      return -1;
    }
LABEL_24:
    v17 = 13;
    goto fail;
  }
  if ( (~v13->flags & 0x402) == 0 && !v13->sa_query_timed_out && v13->sa_query_count >= 1 )
    ap_check_sa_query_timeout(hapd, v13);
  if ( (~v13->flags & 0x402) != 0 || v13->sa_query_timed_out || v13->auth_alg == 2 )
  {
    v19 = wpa_auth_uses_mfp(v13->wpa_sm);
    v20 = v13->flags;
    v21 = v20 | 0x400;
    v22 = v20 & 0xFFFFFBFF;
    if ( v19 )
      v22 = v21;
    v13->flags = v22;
LABEL_39:
    v23 = v13->flags;
    v13->flags = v23 & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v13);
    if ( reassoc && v13->auth_alg == 2 )
      v24 = WPA_ASSOC_FT;
    else
      v24 = WPA_ASSOC;
    wpa_auth_sm_event(v13->wpa_sm, v24);
    hostapd_new_assoc_sta(hapd, v13, (v23 >> 1) & 1);
    ieee802_1x_notify_port_enabled(v13->eapol_sm, 1);
    return 0;
  }
  if ( !v13->sa_query_count )
    ap_sta_start_sa_query(hapd, v13);
  v25 = hostapd_eid_assoc_comeback_time(hapd, v13, eid);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v25 - eid);
  return 0;
}
