int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v5; // r6
  int v7; // r7
  int v8; // r4
  int v9; // r10
  int v10; // r8
  int v11; // r9
  hostapd_data *v12; // r4
  const u8 *v13; // r10
  size_t v14; // r9
  sta_info *v16; // r0
  sta_info *v17; // r6
  bool v18; // zf
  int v19; // r2
  unsigned int v20; // r4
  wpa_event v21; // r1
  wpa_state_machine *v22; // r1
  int v23; // r0
  int v24; // r4
  unsigned int v25; // r0
  u32 v26; // r0
  bool v27; // zf
  int v28; // r0
  bool v29; // zf
  int v30; // r0
  u32 v31; // r1
  u8 *v32; // r0
  u8 eid[1064]; // [sp+24h] [bp-5A4h] BYREF
  ieee802_11_elems elems; // [sp+44Ch] [bp-17Ch] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  v5 = *addr;
  v7 = addr[1];
  if ( (v5 & 1) != 0 )
  {
    v8 = addr[2];
    v9 = addr[3];
    v10 = addr[4];
    v11 = addr[5];
  }
  else
  {
    v8 = addr[2];
    v9 = addr[3];
    v10 = addr[4];
    v11 = addr[5];
    if ( v7 | v5 | v8 | v9 | v10 | v11 && bcmp(addr, hapd->own_addr, 6u) )
    {
      random_add_randomness(addr, 6u);
      v12 = hapd;
      hostapd_logger(hapd, addr, 1u, 2, "associated");
      ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
      if ( elems.wps_ie )
      {
        v13 = elems.wps_ie - 2;
        v14 = elems.wps_ie_len + 2;
        wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
      }
      else if ( elems.rsn_ie )
      {
        v13 = elems.rsn_ie - 2;
        v14 = elems.rsn_ie_len + 2;
        wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
      }
      else if ( elems.wpa_ie )
      {
        v13 = elems.wpa_ie - 2;
        v14 = elems.wpa_ie_len + 2;
        wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
      }
      else
      {
        v13 = 0;
        v14 = 0;
        wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      }
      v16 = ap_get_sta(hapd, addr);
      if ( v16 )
      {
        v17 = v16;
        ap_sta_no_session_timeout(hapd, v16);
        accounting_sta_stop(hapd, v17);
        v17->timeout_next = STA_NULLFUNC;
      }
      else
      {
        v17 = ap_sta_add(hapd, addr);
        if ( !v17 )
        {
          hostapd_drv_sta_disassoc(hapd, addr, 5);
          return -1;
        }
      }
      v17->flags &= 0xFFFECFFF;
      if ( hapd->iface->drv_max_acl_mac_addrs || hostapd_check_acl(hapd, addr, 0) == 1 )
      {
        ap_copy_sta_supp_op_classes(v17, elems.supp_op_classes, elems.supp_op_classes_len);
        if ( !hapd->conf->wpa )
        {
          v20 = v17->flags;
          goto LABEL_29;
        }
        v18 = v13 == 0;
        if ( v13 )
          v18 = v14 == 0;
        if ( !v18 )
        {
          v22 = v17->wpa_sm;
          if ( !v22 )
          {
            v22 = wpa_auth_sta_init(hapd->wpa_auth, v17->addr, 0);
            v17->wpa_sm = v22;
            if ( !v22 )
            {
              wpa_printf(5, "Failed to initialize WPA state machine");
              return -1;
            }
          }
          v23 = wpa_validate_wpa_ie(
                  hapd->wpa_auth,
                  v22,
                  hapd->iface->freq,
                  v13,
                  v14,
                  elems.mdie,
                  elems.mdie_len,
                  elems.owe_dh,
                  elems.owe_dh_len);
          if ( v23 )
          {
            v24 = v23;
            wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v23);
            Delegate_CreateDelegate(2, (const unsigned __int8 *)"IE", v13, v14);
            v25 = v24 - 2;
            v12 = hapd;
            v19 = 13;
            if ( v25 < 7 )
              v19 = dword_88200[v25];
            goto fail;
          }
          v26 = v17->flags;
          v27 = (v26 & 0x402) == 1026;
          if ( (v26 & 0x402) == 1026 )
            v27 = v17->sa_query_timed_out == 0;
          if ( v27 && v17->sa_query_count >= 1 )
          {
            ap_check_sa_query_timeout(hapd, v17);
            v26 = v17->flags;
          }
          v28 = v26 & 0x402;
          v29 = v28 == 1026;
          if ( v28 == 1026 )
            v29 = v17->sa_query_timed_out == 0;
          if ( v29 && v17->auth_alg != 2 )
          {
            if ( !v17->sa_query_count )
              ap_sta_start_sa_query(hapd, v17);
            v32 = hostapd_eid_assoc_comeback_time(hapd, v17, eid);
            hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v32 - eid);
            return 0;
          }
          v30 = wpa_auth_uses_mfp(v17->wpa_sm);
          v31 = v17->flags;
          if ( v30 )
            v20 = v31 | 0x400;
          else
            v20 = v31 & 0xFFFFFBFF;
          v17->flags = v20;
LABEL_29:
          v17->flags = v20 & 0xFFF7FFFC | 3;
          hostapd_set_sta_flags(hapd, v17);
          if ( reassoc )
          {
            v21 = WPA_ASSOC_FT;
            if ( v17->auth_alg != 2 )
              v21 = WPA_ASSOC;
          }
          else
          {
            v21 = WPA_ASSOC;
          }
          wpa_auth_sm_event(v17->wpa_sm, v21);
          hostapd_new_assoc_sta(hapd, v17, (v20 >> 1) & 1);
          ieee802_1x_notify_port_enabled(v17->eapol_sm, 1);
          return 0;
        }
        wpa_printf(2, "No WPA/RSN IE from STA");
        v19 = 13;
      }
      else
      {
        wpa_printf(
          3,
          "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
          *addr,
          addr[1],
          addr[2],
          addr[3],
          addr[4],
          addr[5]);
        v19 = 1;
      }
fail:
      hostapd_drv_sta_disassoc(v12, v17->addr, v19);
      ap_free_sta(v12, v17);
      return -1;
    }
  }
  wpa_printf(
    2,
    "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
    "hostapd_notif_assoc",
    v5,
    v7,
    v8,
    v9,
    v10,
    v11);
  return 0;
}
