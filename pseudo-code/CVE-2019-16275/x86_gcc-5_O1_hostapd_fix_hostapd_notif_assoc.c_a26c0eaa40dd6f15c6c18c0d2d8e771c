int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  u8 v5; // bp
  sta_info *v6; // eax
  sta_info *v7; // ebp
  unsigned __int16 v8; // ax
  wpa_state_machine *v9; // eax
  int v10; // eax
  int v11; // esi
  u8 *v12; // eax
  int v13; // esi
  const u8 *ie; // [esp+18h] [ebp-5B4h]
  const u8 *iea; // [esp+18h] [ebp-5B4h]
  u8 *p; // [esp+1Ch] [ebp-5B0h]
  ieee802_11_elems elems; // [esp+28h] [ebp-5A4h] BYREF
  u8 buf[1064]; // [esp+184h] [ebp-448h] BYREF
  unsigned int v20; // [esp+5ACh] [ebp-20h]

  v20 = __readgsdword(0x14u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  v5 = *addr;
  if ( (*addr & 1) != 0
    || !(addr[5] | (unsigned __int8)(addr[4] | addr[3] | addr[2] | addr[1] | v5))
    || !memcmp(addr, hapd->own_addr, 6u) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    return 0;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    iea = elems.wps_ie - 2;
    p = (u8 *)(elems.wps_ie_len + 2);
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    iea = elems.rsn_ie - 2;
    p = (u8 *)(elems.rsn_ie_len + 2);
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    iea = elems.wpa_ie - 2;
    p = (u8 *)(elems.wpa_ie_len + 2);
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    p = 0;
    iea = 0;
  }
  v6 = ap_get_sta(hapd, addr);
  v7 = v6;
  if ( v6 )
  {
    ap_sta_no_session_timeout(hapd, v6);
    accounting_sta_stop(hapd, v7);
    v7->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v7 = ap_sta_add(hapd, addr);
    if ( !v7 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v7->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v8 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v7->addr, v8);
    ap_free_sta(hapd, v7);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v7, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
    goto LABEL_47;
  if ( !iea || !p )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v8 = 13;
    goto fail;
  }
  v9 = v7->wpa_sm;
  if ( !v9 )
  {
    v9 = wpa_auth_sta_init(hapd->wpa_auth, v7->addr, 0);
    v7->wpa_sm = v9;
    if ( !v9 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v10 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v9,
          hapd->iface->freq,
          iea,
          (size_t)p,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v10 )
  {
    v11 = v10;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v10);
    wpa_hexdump(2, "IE", iea, (size_t)p);
    v8 = 18;
    if ( v11 != 2 )
    {
      v8 = 19;
      if ( v11 != 3 )
      {
        v8 = 20;
        if ( v11 != 4 )
        {
          v8 = 24;
          if ( v11 != 8 )
            v8 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v7->flags & 0x402) != 1026
    || (ie = (const u8 *)v7->sa_query_timed_out) != 0
    || v7->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v7), (v7->flags & 0x402) != 1026) || v7->sa_query_timed_out)
    || v7->auth_alg == 2 )
  {
    if ( wpa_auth_uses_mfp(v7->wpa_sm) )
      v7->flags |= 0x400u;
    else
      v7->flags &= 0xFFFFFBFF;
LABEL_47:
    v13 = v7->flags & 2;
    v7->flags = v7->flags & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v7);
    if ( reassoc && v7->auth_alg == 2 )
      wpa_auth_sm_event(v7->wpa_sm, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v7->wpa_sm, WPA_ASSOC);
    hostapd_new_assoc_sta(hapd, v7, v13 != 0);
    ieee802_1x_notify_port_enabled(v7->eapol_sm, 1);
    return 0;
  }
  if ( !v7->sa_query_count )
    ap_sta_start_sa_query(hapd, v7);
  v12 = hostapd_eid_assoc_comeback_time(hapd, v7, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v12 - buf);
  return (int)ie;
}
