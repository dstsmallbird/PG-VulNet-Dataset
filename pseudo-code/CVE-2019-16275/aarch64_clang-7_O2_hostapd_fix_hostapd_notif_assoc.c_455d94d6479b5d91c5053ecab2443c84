int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v5; // w22
  unsigned int v6; // w23
  unsigned int v8; // w25
  unsigned int v9; // w27
  unsigned int v10; // w28
  int v11; // w20
  __int64 v15; // x9
  const u8 *v16; // x23
  const char *v17; // x1
  size_t v19; // x24
  sta_info *v20; // x0
  sta_info *v21; // x22
  wpa_state_machine *v22; // x1
  __int64 v23; // x2
  __int64 v24; // x3
  __int64 v25; // x4
  unsigned int v26; // w0
  unsigned int v27; // w25
  int v28; // w2
  unsigned int v29; // w21
  wpa_state_machine *v30; // x0
  wpa_event v31; // w1
  u32 v32; // w8
  int v33; // w0
  u32 v34; // w8
  u8 *v35; // x0
  u8 eid[1064]; // [xsp+18h] [xbp-708h] BYREF
  ieee802_11_elems elems; // [xsp+440h] [xbp-2E0h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  v5 = *addr;
  v6 = addr[1];
  if ( (v5 & 1) != 0 )
  {
    v8 = addr[2];
    v9 = addr[3];
    v10 = addr[4];
    v11 = addr[5];
LABEL_10:
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      v6,
      v8,
      v9,
      v10,
      v11);
    return 0;
  }
  v8 = addr[2];
  v9 = addr[3];
  v10 = addr[4];
  v11 = addr[5];
  if ( !(v6 | v5 | v8 | v9 | v10 | v11) || !memcmp(addr, hapd->own_addr, 6uLL) )
    goto LABEL_10;
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v15 = elems.wps_ie_len;
    v16 = elems.wps_ie - 2;
    v17 = "STA included WPS IE in (Re)AssocReq";
  }
  else if ( elems.rsn_ie )
  {
    v15 = elems.rsn_ie_len;
    v16 = elems.rsn_ie - 2;
    v17 = "STA included RSN IE in (Re)AssocReq";
  }
  else
  {
    if ( !elems.wpa_ie )
    {
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      v16 = 0LL;
      v19 = 0LL;
      goto LABEL_17;
    }
    v15 = elems.wpa_ie_len;
    v16 = elems.wpa_ie - 2;
    v17 = "STA included WPA IE in (Re)AssocReq";
  }
  v19 = v15 + 2;
  wpa_printf(2, (const unsigned __int8 *)v17);
LABEL_17:
  v20 = ap_get_sta(hapd, addr);
  if ( v20 )
  {
    v21 = v20;
    ap_sta_no_session_timeout(hapd, v20);
    accounting_sta_stop(hapd, v21);
    v21->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v21 = ap_sta_add(hapd, addr);
    if ( !v21 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v21->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v28 = 1;
    goto LABEL_39;
  }
  ap_copy_sta_supp_op_classes(v21, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    if ( !v16 || !v19 )
    {
      wpa_printf(2, "No WPA/RSN IE from STA");
      goto LABEL_37;
    }
    v22 = v21->wpa_sm;
    if ( !v22 )
    {
      v22 = wpa_auth_sta_init(hapd->wpa_auth, v21->addr, 0LL);
      v21->wpa_sm = v22;
      if ( !v22 )
      {
        wpa_printf(5, "Failed to initialize WPA state machine", v23, v24, v25);
        return -1;
      }
    }
    v26 = wpa_validate_wpa_ie(
            hapd->wpa_auth,
            v22,
            hapd->iface->freq,
            v16,
            v19,
            elems.mdie,
            elems.mdie_len,
            elems.owe_dh,
            elems.owe_dh_len);
    if ( v26 )
    {
      v27 = v26;
      wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v26);
      wpa_hexdump(2, (const unsigned __int8 *)"IE", v16, v19);
      if ( v27 - 2 < 7 )
      {
        v28 = dword_47CEC0[v27 - 2];
LABEL_39:
        hostapd_drv_sta_disassoc(hapd, v21->addr, v28);
        ap_free_sta(hapd, v21);
        return -1;
      }
LABEL_37:
      v28 = 13;
      goto LABEL_39;
    }
    v32 = v21->flags;
    if ( (~v32 & 0x402) == 0 && !v21->sa_query_timed_out && v21->sa_query_count >= 1 )
    {
      ap_check_sa_query_timeout(hapd, v21);
      v32 = v21->flags;
    }
    if ( (~v32 & 0x402) == 0 && !v21->sa_query_timed_out && v21->auth_alg != 2 )
    {
      if ( !v21->sa_query_count )
        ap_sta_start_sa_query(hapd, v21);
      v35 = hostapd_eid_assoc_comeback_time(hapd, v21, eid);
      hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v35 - eid);
      return 0;
    }
    v33 = wpa_auth_uses_mfp(v21->wpa_sm);
    v34 = v21->flags;
    if ( v33 )
      v29 = v34 | 0x400;
    else
      v29 = v34 & 0xFFFFFBFF;
    v21->flags = v29;
  }
  else
  {
    v29 = v21->flags;
  }
  v21->flags = v29 & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v21);
  if ( reassoc && v21->auth_alg == 2 )
  {
    v30 = v21->wpa_sm;
    v31 = WPA_ASSOC_FT;
  }
  else
  {
    v30 = v21->wpa_sm;
    v31 = WPA_ASSOC;
  }
  wpa_auth_sm_event(v30, v31);
  hostapd_new_assoc_sta(hapd, v21, (v29 >> 1) & 1);
  ieee802_1x_notify_port_enabled(v21->eapol_sm, 1);
  return 0;
}
