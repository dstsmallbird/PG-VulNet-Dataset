int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v9; // rbx
  size_t v10; // r13
  sta_info *v11; // rax
  sta_info *v12; // rbp
  wpa_state_machine *v13; // rsi
  __int64 v14; // rdx
  __int64 v15; // rcx
  __int64 v16; // r8
  unsigned int v17; // eax
  unsigned int v18; // er14
  unsigned int v19; // er14
  int v20; // edx
  unsigned int v21; // ebx
  int v22; // er14
  wpa_event v23; // esi
  u32 v25; // eax
  int v26; // eax
  u32 v27; // ebx
  u8 *v28; // rax
  int v29; // [rsp+4h] [rbp-6E4h]
  ieee802_11_elems elems; // [rsp+8h] [rbp-6E0h] BYREF
  u8 eid[1112]; // [rsp+290h] [rbp-458h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  v29 = reassoc;
  if ( elems.wps_ie )
  {
    v9 = elems.wps_ie - 2;
    v10 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v9 = elems.rsn_ie - 2;
    v10 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    v9 = elems.wpa_ie - 2;
    v10 = elems.wpa_ie_len + 2LL;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v9 = 0LL;
    v10 = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  v11 = ap_get_sta(hapd, addr);
  if ( v11 )
  {
    v12 = v11;
    ap_sta_no_session_timeout(hapd, v11);
    accounting_sta_stop(hapd, v12);
    v12->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v12 = ap_sta_add(hapd, addr);
    if ( !v12 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v12->flags &= 0xFFFECFFF;
  if ( hapd->iface->drv_max_acl_mac_addrs || hostapd_check_acl(hapd, addr, 0LL) == 1 )
  {
    ap_copy_sta_supp_op_classes(v12, elems.supp_op_classes, elems.supp_op_classes_len);
    if ( !hapd->conf->wpa )
    {
      v21 = v12->flags;
      v22 = v29;
      goto LABEL_25;
    }
    if ( v9 && v10 )
    {
      v13 = v12->wpa_sm;
      if ( !v13 )
      {
        v13 = wpa_auth_sta_init(hapd->wpa_auth, v12->addr, 0LL);
        v12->wpa_sm = v13;
        if ( !v13 )
        {
          wpa_printf(5, "Failed to initialize WPA state machine", v14, v15, v16);
          return -1;
        }
      }
      v17 = wpa_validate_wpa_ie(
              hapd->wpa_auth,
              v13,
              hapd->iface->freq,
              v9,
              v10,
              elems.mdie,
              elems.mdie_len,
              elems.owe_dh,
              elems.owe_dh_len);
      if ( v17 )
      {
        v18 = v17;
        wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v17);
        wpa_hexdump(2, "IE", v9, v10);
        v19 = v18 - 2;
        v20 = 13;
        if ( v19 < 7 )
          v20 = dword_474CD0[v19];
        goto fail;
      }
      v25 = v12->flags;
      if ( (v25 & 0x402) == 1026 && !v12->sa_query_timed_out )
      {
        v22 = v29;
        if ( v12->sa_query_count > 0 )
        {
          ap_check_sa_query_timeout(hapd, v12);
          v25 = v12->flags;
        }
      }
      else
      {
        v22 = v29;
      }
      if ( (v25 & 0x402) == 1026 && !v12->sa_query_timed_out && v12->auth_alg != 2 )
      {
        if ( !v12->sa_query_count )
          ap_sta_start_sa_query(hapd, v12);
        v28 = hostapd_eid_assoc_comeback_time(hapd, v12, eid);
        hostapd_sta_assoc(hapd, addr, v22, 0x1Eu, eid, v28 - eid);
        return 0;
      }
      v26 = wpa_auth_uses_mfp(v12->wpa_sm);
      v27 = v12->flags;
      if ( v26 )
        v21 = v27 | 0x400;
      else
        v21 = v27 & 0xFFFFFBFF;
      v12->flags = v21;
LABEL_25:
      v12->flags = v21 & 0xFFF7FFFC | 3;
      hostapd_set_sta_flags(hapd, v12);
      if ( !v22 || (v23 = WPA_ASSOC_FT, v12->auth_alg != 2) )
        v23 = WPA_ASSOC;
      wpa_auth_sm_event(v12->wpa_sm, v23);
      hostapd_new_assoc_sta(hapd, v12, (v21 >> 1) & 1);
      ieee802_1x_notify_port_enabled(v12->eapol_sm, 1);
      return 0;
    }
    wpa_printf(2, "No WPA/RSN IE from STA");
    v20 = 13;
  }
  else
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v20 = 1;
  }
fail:
  hostapd_drv_sta_disassoc(hapd, v12->addr, v20);
  ap_free_sta(hapd, v12);
  return -1;
}
