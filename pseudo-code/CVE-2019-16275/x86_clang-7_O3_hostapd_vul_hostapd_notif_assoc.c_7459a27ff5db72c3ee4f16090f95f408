int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v5; // ebx
  hostapd_data *v6; // edi
  sta_info *v7; // eax
  sta_info *v8; // esi
  sta_info *v9; // eax
  int v10; // ebp
  wpa_state_machine *v11; // eax
  int v12; // eax
  int v13; // edi
  int v14; // eax
  unsigned int v15; // edi
  u32 v17; // eax
  hostapd_data *v18; // edi
  const u8 *v19; // ebp
  u8 *v20; // eax
  int v21; // eax
  u32 v22; // edi
  int wpa_ie_len; // [esp+4h] [ebp-598h]
  ieee802_11_elems elems; // [esp+8h] [ebp-594h] BYREF
  u8 eid[1080]; // [esp+164h] [ebp-438h] BYREF

  if ( addr )
  {
    random_add_randomness(addr, 6u);
    hostapd_logger(hapd, addr, 1u, 2, "associated");
    ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
    if ( elems.wps_ie )
    {
      v5 = elems.wps_ie - 2;
      wpa_ie_len = elems.wps_ie_len + 2;
      wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    }
    else
    {
      if ( !elems.rsn_ie )
      {
        v6 = hapd;
        if ( elems.wpa_ie )
        {
          v5 = elems.wpa_ie - 2;
          wpa_ie_len = elems.wpa_ie_len + 2;
          wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
        }
        else
        {
          wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
          v5 = 0;
          wpa_ie_len = 0;
        }
LABEL_8:
        v7 = ap_get_sta(v6, addr);
        if ( v7 )
        {
          v8 = v7;
          ap_sta_no_session_timeout(v6, v7);
          accounting_sta_stop(v6, v8);
          v8->timeout_next = STA_NULLFUNC;
          v8->flags &= 0xFFFECFFF;
          if ( v6->iface->drv_max_acl_mac_addrs )
            goto LABEL_14;
        }
        else
        {
          v9 = ap_sta_add(v6, addr);
          v8 = v9;
          if ( !v9 )
          {
            hostapd_drv_sta_disassoc(v6, addr, 5);
            return -1;
          }
          v9->flags &= 0xFFFECFFF;
          if ( v6->iface->drv_max_acl_mac_addrs )
            goto LABEL_14;
        }
        if ( hostapd_check_acl(v6, addr, 0) != 1 )
        {
          wpa_printf(
            3,
            "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
            *addr,
            addr[1],
            addr[2],
            addr[3],
            addr[4],
            addr[5]);
          v14 = 1;
          goto LABEL_31;
        }
LABEL_14:
        v10 = reassoc;
        ap_copy_sta_supp_op_classes(v8, elems.supp_op_classes, elems.supp_op_classes_len);
        if ( !v6->conf->wpa )
        {
          v15 = v8->flags;
          goto LABEL_23;
        }
        if ( v5 && wpa_ie_len )
        {
          v11 = v8->wpa_sm;
          if ( !v11 )
          {
            v11 = wpa_auth_sta_init(v6->wpa_auth, v8->addr, 0);
            v8->wpa_sm = v11;
            if ( !v11 )
            {
              wpa_printf(5, "Failed to initialize WPA state machine");
              return -1;
            }
          }
          v12 = wpa_validate_wpa_ie(
                  hapd->wpa_auth,
                  v11,
                  v6->iface->freq,
                  v5,
                  wpa_ie_len,
                  elems.mdie,
                  elems.mdie_len,
                  elems.owe_dh,
                  elems.owe_dh_len);
          if ( v12 )
          {
            v13 = v12;
            wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v12);
            wpa_hexdump(2, "IE", v5, wpa_ie_len);
            v14 = 13;
            if ( (unsigned int)(v13 - 2) < 7 )
              v14 = (int)*(&off_80CE588 + v13);
            goto LABEL_31;
          }
          v17 = v8->flags;
          if ( (v17 & 0x402) == 1026 && !v8->sa_query_timed_out )
          {
            v18 = hapd;
            v19 = addr;
            if ( v8->sa_query_count > 0 )
            {
              ap_check_sa_query_timeout(hapd, v8);
              if ( (v8->flags & 0x402) == 1026 )
                goto LABEL_40;
              goto LABEL_49;
            }
          }
          else
          {
            v18 = hapd;
            v19 = addr;
          }
          if ( (v17 & 0x402) == 1026 )
          {
LABEL_40:
            if ( !v8->sa_query_timed_out && v8->auth_alg != 2 )
            {
              if ( !v8->sa_query_count )
                ap_sta_start_sa_query(v18, v8);
              v20 = hostapd_eid_assoc_comeback_time(v18, v8, eid);
              hostapd_sta_assoc(v18, v19, reassoc, 0x1Eu, eid, v20 - eid);
              return 0;
            }
          }
LABEL_49:
          v21 = wpa_auth_uses_mfp(v8->wpa_sm);
          v22 = v8->flags;
          if ( v21 )
            v15 = v22 | 0x400;
          else
            v15 = v22 & 0xFFFFFBFF;
          v10 = reassoc;
          v8->flags = v15;
LABEL_23:
          v8->flags = v15 & 0xFFF7FFFC | 3;
          hostapd_set_sta_flags(hapd, v8);
          if ( v10 && v8->auth_alg == 2 )
            wpa_auth_sm_event(v8->wpa_sm, WPA_ASSOC_FT);
          else
            wpa_auth_sm_event(v8->wpa_sm, WPA_ASSOC);
          hostapd_new_assoc_sta(hapd, v8, (v15 >> 1) & 1);
          ieee802_1x_notify_port_enabled(v8->eapol_sm, 1);
          return 0;
        }
        wpa_printf(2, "No WPA/RSN IE from STA");
        v14 = 13;
LABEL_31:
        hostapd_drv_sta_disassoc(hapd, v8->addr, v14);
        ap_free_sta(hapd, v8);
        return -1;
      }
      v5 = elems.rsn_ie - 2;
      wpa_ie_len = elems.rsn_ie_len + 2;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    }
    v6 = hapd;
    goto LABEL_8;
  }
  wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
  return -1;
}
