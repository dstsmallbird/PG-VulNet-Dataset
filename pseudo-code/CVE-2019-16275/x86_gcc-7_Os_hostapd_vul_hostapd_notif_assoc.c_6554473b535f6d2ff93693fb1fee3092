int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  sta_info *v5; // eax
  sta_info *v6; // edi
  hostapd_iface *v7; // eax
  int v8; // edx
  int v9; // ecx
  hostapd_bss_config *v10; // eax
  wpa_state_machine *v11; // eax
  int v12; // eax
  int v13; // edx
  int v14; // ecx
  u8 *v15; // eax
  int v17; // ecx
  int ielen; // [esp+0h] [ebp-5B4h]
  int ielena; // [esp+0h] [ebp-5B4h]
  u8 *p; // [esp+4h] [ebp-5B0h]
  int res; // [esp+8h] [ebp-5ACh]
  int resa; // [esp+8h] [ebp-5ACh]
  ieee802_11_elems elems; // [esp+14h] [ebp-5A0h] BYREF
  u8 buf[1064]; // [esp+170h] [ebp-444h] BYREF
  unsigned int v26; // [esp+598h] [ebp-1Ch]

  v26 = __readgsdword(0x14u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    p = (u8 *)(elems.wps_ie - 2);
    ielen = elems.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq", ielen, ielen);
  }
  else if ( elems.rsn_ie )
  {
    p = (u8 *)(elems.rsn_ie - 2);
    ielen = elems.rsn_ie_len + 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq", ielen, ielen);
  }
  else
  {
    p = (u8 *)elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      p = (u8 *)(elems.wpa_ie - 2);
      ielen = elems.wpa_ie_len + 2;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq", ielen, ielen);
    }
    else
    {
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq", 0, 0);
      ielen = 0;
    }
  }
  v5 = ap_get_sta(hapd, addr);
  v6 = v5;
  if ( v5 )
  {
    ap_sta_no_session_timeout(hapd, v5);
    accounting_sta_stop(hapd, v6);
    v6->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v6 = ap_sta_add(hapd, addr);
    if ( !v6 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v7 = hapd->iface;
  v6->flags &= 0xFFFECFFF;
  if ( !v7->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v8 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v6->addr, v8);
    ap_free_sta(hapd, v6);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v6, elems.supp_op_classes, elems.supp_op_classes_len);
  v10 = hapd->conf;
  if ( !v10->wpa )
    goto LABEL_47;
  if ( !p || !ielen )
  {
    wpa_printf(2, "No WPA/RSN IE from STA", v10, hapd->conf);
    v8 = 13;
    goto fail;
  }
  if ( !v6->wpa_sm )
    v6->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v6->addr, 0);
  v11 = v6->wpa_sm;
  if ( !v11 )
  {
    wpa_printf(5, "Failed to initialize WPA state machine", v9, v9);
    return -1;
  }
  v12 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v11,
          hapd->iface->freq,
          p,
          ielen,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v12 )
  {
    res = v12;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v12, v13);
    wpa_hexdump(2, "IE", p, ielen);
    v8 = 18;
    if ( res != 2 )
    {
      v8 = 19;
      if ( res != 3 )
      {
        v8 = 20;
        if ( res != 4 )
        {
          v8 = 13;
          if ( res == 8 )
            v8 = 24;
        }
      }
    }
    goto fail;
  }
  if ( (v6->flags & 0x402) == 1026 && !v6->sa_query_timed_out && v6->sa_query_count > 0 )
    ap_check_sa_query_timeout(hapd, v6);
  if ( (v6->flags & 0x402) != 1026 || (v14 = v6->sa_query_timed_out) != 0 || v6->auth_alg == 2 )
  {
    if ( wpa_auth_uses_mfp(v6->wpa_sm) )
      v6->flags |= 0x400u;
    else
      v6->flags &= 0xFFFFFBFF;
LABEL_47:
    v17 = v6->flags & 2;
    v6->flags = v6->flags & 0xFFF7FFFF | 3;
    resa = v17;
    hostapd_set_sta_flags(hapd, v6);
    if ( reassoc && v6->auth_alg == 2 )
      wpa_auth_sm_event(v6->wpa_sm, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v6->wpa_sm, WPA_ASSOC);
    hostapd_new_assoc_sta(hapd, v6, resa != 0);
    ieee802_1x_notify_port_enabled(v6->eapol_sm, 1);
    return 0;
  }
  if ( !v6->sa_query_count )
  {
    ap_sta_start_sa_query(hapd, v6);
    v14 = 0;
  }
  ielena = v14;
  v15 = hostapd_eid_assoc_comeback_time(hapd, v6, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v15 - buf);
  return ielena;
}
