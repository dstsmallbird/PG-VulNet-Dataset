int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v10; // rbp
  char v11; // r14
  sta_info *v12; // rax
  sta_info *v13; // r15
  hostapd_iface *v14; // rax
  wpa_state_machine *v15; // rsi
  wpa_authenticator *v16; // rdi
  unsigned int v17; // eax
  unsigned int v18; // er14
  bool v19; // zf
  u32 v20; // eax
  int v21; // ebp
  wpa_state_machine *v22; // rdi
  _BOOL8 v23; // rdx
  int v24; // ebp
  int v26; // edx
  u8 *v27; // rax
  __int64 ielen; // [rsp+8h] [rbp-700h]
  ieee802_11_elems elems; // [rsp+10h] [rbp-6F8h] BYREF
  u8 buf[1064]; // [rsp+2A0h] [rbp-468h] BYREF
  unsigned __int64 v31; // [rsp+6C8h] [rbp-40h]

  v31 = __readfsqword(0x28u);
  if ( !addr )
  {
    v24 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return v24;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v10 = elems.wps_ie - 2;
    v11 = 0;
    ielen = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v10 = elems.rsn_ie - 2;
    v11 = 0;
    ielen = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v10 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v10 = elems.wpa_ie - 2;
      v11 = 0;
      ielen = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v11 = 1;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      ielen = 0LL;
    }
  }
  v12 = ap_get_sta(hapd, addr);
  v13 = v12;
  if ( v12 )
  {
    ap_sta_no_session_timeout(hapd, v12);
    accounting_sta_stop(hapd, v13);
    v13->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v13 = ap_sta_add(hapd, addr);
    if ( !v13 )
    {
      v24 = -1;
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return v24;
    }
  }
  v14 = hapd->iface;
  v13->flags &= 0xFFFECFFF;
  if ( !v14->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v26 = 1;
fail:
    v24 = -1;
    hostapd_drv_sta_disassoc(hapd, v13->addr, v26);
    ap_free_sta(hapd, v13);
    return v24;
  }
  ap_copy_sta_supp_op_classes(v13, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v20 = v13->flags;
LABEL_15:
    v21 = v20 & 2;
    v13->flags = v20 & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v13);
    v22 = v13->wpa_sm;
    if ( reassoc && v13->auth_alg == 2 )
      wpa_auth_sm_event(v22, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v22, WPA_ASSOC);
    v23 = v21 != 0;
    v24 = 0;
    hostapd_new_assoc_sta(hapd, v13, v23);
    ieee802_1x_notify_port_enabled(v13->eapol_sm, 1);
    return v24;
  }
  if ( !v10 || v11 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v26 = 13;
    goto fail;
  }
  v15 = v13->wpa_sm;
  v16 = hapd->wpa_auth;
  if ( !v15 )
  {
    v15 = wpa_auth_sta_init(v16, v13->addr, 0LL);
    v13->wpa_sm = v15;
    if ( !v15 )
    {
      v24 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v24;
    }
    v16 = hapd->wpa_auth;
  }
  v17 = wpa_validate_wpa_ie(
          v16,
          v15,
          hapd->iface->freq,
          v10,
          ielen,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v18 = v17;
  if ( v17 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v17);
    wpa_hexdump(2, "IE", v10, ielen);
    v26 = 18;
    if ( v18 != 2 )
    {
      v26 = 19;
      if ( v18 != 3 )
      {
        v26 = 20;
        if ( v18 != 4 )
        {
          v26 = 24;
          if ( v18 != 8 )
            v26 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v13->flags & 0x402) != 1026
    || (v24 = v13->sa_query_timed_out) != 0
    || v13->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v13), (v13->flags & 0x402) != 1026) || v13->sa_query_timed_out)
    || v13->auth_alg == 2 )
  {
    v19 = wpa_auth_uses_mfp(v13->wpa_sm) == 0;
    v20 = v13->flags;
    if ( v19 )
      BYTE1(v20) &= 0xFBu;
    else
      BYTE1(v20) |= 4u;
    goto LABEL_15;
  }
  if ( !v13->sa_query_count )
    ap_sta_start_sa_query(hapd, v13);
  v27 = hostapd_eid_assoc_comeback_time(hapd, v13, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v27 - buf);
  return v24;
}
