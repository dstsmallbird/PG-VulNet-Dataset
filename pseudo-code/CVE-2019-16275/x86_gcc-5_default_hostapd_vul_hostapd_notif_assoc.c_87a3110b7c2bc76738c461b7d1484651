int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  sta_info *v5; // eax
  sta_info *v6; // edi
  hostapd_iface *v7; // eax
  wpa_state_machine *v8; // eax
  int v9; // eax
  bool v10; // zf
  u32 v11; // eax
  int v12; // ebp
  int v15; // ecx
  u8 *v16; // edx
  u8 *v17; // eax
  u8 *p; // [esp+14h] [ebp-5B8h]
  u8 *pa; // [esp+14h] [ebp-5B8h]
  u8 *pb; // [esp+14h] [ebp-5B8h]
  int ielen; // [esp+18h] [ebp-5B4h]
  int ielena; // [esp+18h] [ebp-5B4h]
  int res; // [esp+1Ch] [ebp-5B0h]
  ieee802_11_elems elems; // [esp+28h] [ebp-5A4h] BYREF
  u8 buf[1064]; // [esp+184h] [ebp-448h] BYREF
  unsigned int v26; // [esp+5ACh] [ebp-20h]

  v26 = __readgsdword(0x14u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    p = (u8 *)(elems.wps_ie - 2);
    ielen = elems.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    p = (u8 *)(elems.rsn_ie - 2);
    ielen = elems.rsn_ie_len + 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    p = (u8 *)(elems.wpa_ie - 2);
    ielen = elems.wpa_ie_len + 2;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    ielen = 0;
    p = 0;
  }
  v5 = ap_get_sta(hapd, addr);
  v6 = v5;
  if ( v5 )
  {
    ap_sta_no_session_timeout(hapd, v5);
    accounting_sta_stop(hapd, v6);
    v6->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v6 = ap_sta_add(hapd, addr);
    if ( !v6 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v7 = hapd->iface;
  v6->flags &= 0xFFFECFFF;
  if ( !v7->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v15 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v6->addr, v15);
    ap_free_sta(hapd, v6);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v6, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    if ( !p || !ielen )
    {
      wpa_printf(2, "No WPA/RSN IE from STA");
      v15 = 13;
      goto fail;
    }
    v8 = v6->wpa_sm;
    if ( !v8 )
    {
      v8 = wpa_auth_sta_init(hapd->wpa_auth, v6->addr, 0);
      v6->wpa_sm = v8;
      if ( !v8 )
      {
        wpa_printf(5, "Failed to initialize WPA state machine");
        return -1;
      }
    }
    v9 = wpa_validate_wpa_ie(
           hapd->wpa_auth,
           v8,
           hapd->iface->freq,
           p,
           ielen,
           elems.mdie,
           elems.mdie_len,
           elems.owe_dh,
           elems.owe_dh_len);
    if ( v9 )
    {
      res = v9;
      wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v9);
      wpa_hexdump(2, "IE", p, ielen);
      v15 = 18;
      if ( res != 2 )
      {
        v15 = 19;
        if ( res != 3 )
        {
          v15 = 20;
          if ( res != 4 )
          {
            v15 = 24;
            if ( res != 8 )
              v15 = 13;
          }
        }
      }
      goto fail;
    }
    if ( (v6->flags & 0x402) == 1026 )
    {
      v16 = (u8 *)v6->sa_query_timed_out;
      if ( !v16 )
      {
        if ( v6->sa_query_count <= 0
          || (pa = (u8 *)v6->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v6), (v6->flags & 0x402) == 1026)
          && (v16 = pa, !v6->sa_query_timed_out) )
        {
          if ( v6->auth_alg != 2 )
          {
            if ( !v6->sa_query_count )
            {
              pb = v16;
              ap_sta_start_sa_query(hapd, v6);
              v16 = pb;
            }
            ielena = (int)v16;
            v17 = hostapd_eid_assoc_comeback_time(hapd, v6, buf);
            hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v17 - buf);
            return ielena;
          }
        }
      }
    }
    v10 = wpa_auth_uses_mfp(v6->wpa_sm) == 0;
    v11 = v6->flags;
    if ( v10 )
      BYTE1(v11) &= 0xFBu;
    else
      BYTE1(v11) |= 4u;
  }
  else
  {
    v11 = v6->flags;
  }
  v12 = v11 & 2;
  v6->flags = v11 & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v6);
  if ( reassoc && v6->auth_alg == 2 )
    wpa_auth_sm_event(v6->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v6->wpa_sm, WPA_ASSOC);
  hostapd_new_assoc_sta(hapd, v6, v12 != 0);
  ieee802_1x_notify_port_enabled(v6->eapol_sm, 1);
  return 0;
}
