int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v9; // r13
  size_t v10; // r15
  sta_info *v11; // rax
  sta_info *v12; // rbx
  hostapd_iface *v13; // rax
  wpa_state_machine *v14; // rsi
  unsigned int v15; // eax
  bool v16; // zf
  u32 v17; // eax
  int v18; // er13
  _BOOL8 v19; // rdx
  int v20; // er13
  int v22; // edx
  u8 *v23; // rax
  int res; // [rsp+Ch] [rbp-6FCh]
  ieee802_11_elems elems; // [rsp+10h] [rbp-6F8h] BYREF
  u8 buf[1064]; // [rsp+2A0h] [rbp-468h] BYREF
  unsigned __int64 v27; // [rsp+6C8h] [rbp-40h]

  v27 = __readfsqword(0x28u);
  if ( !addr )
  {
    v20 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return v20;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v9 = elems.wps_ie - 2;
    v10 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v9 = elems.rsn_ie - 2;
    v10 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    v9 = elems.wpa_ie - 2;
    v10 = elems.wpa_ie_len + 2LL;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v10 = 0LL;
    v9 = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  v11 = ap_get_sta(hapd, addr);
  v12 = v11;
  if ( v11 )
  {
    ap_sta_no_session_timeout(hapd, v11);
    accounting_sta_stop(hapd, v12);
    v12->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v12 = ap_sta_add(hapd, addr);
    if ( !v12 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v13 = hapd->iface;
  v12->flags &= 0xFFFECFFF;
  if ( !v13->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v22 = 1;
fail:
    v20 = -1;
    hostapd_drv_sta_disassoc(hapd, v12->addr, v22);
    ap_free_sta(hapd, v12);
    return v20;
  }
  ap_copy_sta_supp_op_classes(v12, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    if ( !v9 || !v10 )
    {
      wpa_printf(2, "No WPA/RSN IE from STA");
      v22 = 13;
      goto fail;
    }
    v14 = v12->wpa_sm;
    if ( !v14 )
    {
      v14 = wpa_auth_sta_init(hapd->wpa_auth, v12->addr, 0LL);
      v12->wpa_sm = v14;
      if ( !v14 )
      {
        v20 = -1;
        wpa_printf(5, "Failed to initialize WPA state machine");
        return v20;
      }
    }
    v15 = wpa_validate_wpa_ie(
            hapd->wpa_auth,
            v14,
            hapd->iface->freq,
            v9,
            v10,
            elems.mdie,
            elems.mdie_len,
            elems.owe_dh,
            elems.owe_dh_len);
    if ( v15 )
    {
      res = v15;
      wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v15);
      wpa_hexdump(2, "IE", v9, v10);
      v22 = 18;
      if ( res != 2 )
      {
        v22 = 19;
        if ( res != 3 )
        {
          v22 = 20;
          if ( res != 4 )
          {
            v22 = 24;
            if ( res != 8 )
              v22 = 13;
          }
        }
      }
      goto fail;
    }
    if ( (v12->flags & 0x402) == 1026 )
    {
      v20 = v12->sa_query_timed_out;
      if ( !v20 )
      {
        if ( v12->sa_query_count <= 0
          || (ap_check_sa_query_timeout(hapd, v12), (v12->flags & 0x402) == 1026) && !v12->sa_query_timed_out )
        {
          if ( v12->auth_alg != 2 )
          {
            if ( !v12->sa_query_count )
              ap_sta_start_sa_query(hapd, v12);
            v23 = hostapd_eid_assoc_comeback_time(hapd, v12, buf);
            hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v23 - buf);
            return v20;
          }
        }
      }
    }
    v16 = wpa_auth_uses_mfp(v12->wpa_sm) == 0;
    v17 = v12->flags;
    if ( v16 )
      BYTE1(v17) &= 0xFBu;
    else
      BYTE1(v17) |= 4u;
  }
  else
  {
    v17 = v12->flags;
  }
  v18 = v17 & 2;
  v12->flags = v17 & 0xFFF7FFFF | 3;
  hostapd_set_sta_flags(hapd, v12);
  if ( reassoc && v12->auth_alg == 2 )
    wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v12->wpa_sm, WPA_ASSOC);
  v19 = v18 != 0;
  v20 = 0;
  hostapd_new_assoc_sta(hapd, v12, v19);
  ieee802_1x_notify_port_enabled(v12->eapol_sm, 1);
  return v20;
}
