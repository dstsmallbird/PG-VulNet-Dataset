int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v9; // r5
  int v10; // r7
  size_t v11; // r9
  const u8 *v12; // r10
  sta_info *v13; // r0
  sta_info *v14; // r5
  bool v15; // zf
  int v16; // r2
  unsigned int v17; // r6
  wpa_state_machine *v18; // r0
  wpa_event v19; // r1
  wpa_state_machine *v21; // r1
  int v22; // r0
  int v23; // r7
  u32 v24; // r0
  bool v25; // zf
  int v26; // r0
  bool v27; // zf
  int v28; // r0
  u32 v29; // r1
  u8 *v30; // r0
  u8 eid[1064]; // [sp+14h] [bp-5A4h] BYREF
  ieee802_11_elems elems; // [sp+43Ch] [bp-17Ch] BYREF

  if ( addr )
  {
    random_add_randomness(addr, 6u);
    hostapd_logger(hapd, addr, 1u, 2, "associated");
    ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
    v9 = elems.wps_ie;
    if ( elems.wps_ie )
    {
      v10 = elems.wps_ie_len;
      wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    }
    else
    {
      v9 = elems.rsn_ie;
      if ( elems.rsn_ie )
      {
        v10 = elems.rsn_ie_len;
        wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
      }
      else
      {
        v9 = elems.wpa_ie;
        if ( !elems.wpa_ie )
        {
          wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
          v12 = 0;
          v11 = 0;
LABEL_10:
          v13 = ap_get_sta(hapd, addr);
          if ( v13 )
          {
            v14 = v13;
            ap_sta_no_session_timeout(hapd, v13);
            accounting_sta_stop(hapd, v14);
            v14->timeout_next = STA_NULLFUNC;
          }
          else
          {
            v14 = ap_sta_add(hapd, addr);
            if ( !v14 )
            {
              hostapd_drv_sta_disassoc(hapd, addr, 5);
              return -1;
            }
          }
          v14->flags &= 0xFFFECFFF;
          if ( hapd->iface->drv_max_acl_mac_addrs || hostapd_check_acl(hapd, addr, 0) == 1 )
          {
            ap_copy_sta_supp_op_classes(v14, elems.supp_op_classes, elems.supp_op_classes_len);
            if ( !hapd->conf->wpa )
            {
              v17 = v14->flags;
              goto LABEL_22;
            }
            v15 = v12 == 0;
            if ( v12 )
              v15 = v11 == 0;
            if ( !v15 )
            {
              v21 = v14->wpa_sm;
              if ( !v21 )
              {
                v21 = wpa_auth_sta_init(hapd->wpa_auth, v14->addr, 0);
                v14->wpa_sm = v21;
                if ( !v21 )
                {
                  wpa_printf(5, "Failed to initialize WPA state machine");
                  return -1;
                }
              }
              v22 = wpa_validate_wpa_ie(
                      hapd->wpa_auth,
                      v21,
                      hapd->iface->freq,
                      v12,
                      v11,
                      elems.mdie,
                      elems.mdie_len,
                      elems.owe_dh,
                      elems.owe_dh_len);
              if ( v22 )
              {
                v23 = v22;
                wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v22);
                wpa_hexdump(2, (const unsigned __int8 *)"IE", v12, v11);
                v16 = 13;
                if ( (unsigned int)(v23 - 2) < 7 )
                  v16 = dword_8AED4[v23 - 2];
                goto LABEL_35;
              }
              v24 = v14->flags;
              v25 = (v24 & 0x402) == 1026;
              if ( (v24 & 0x402) == 1026 )
                v25 = v14->sa_query_timed_out == 0;
              if ( v25 && v14->sa_query_count >= 1 )
              {
                ap_check_sa_query_timeout(hapd, v14);
                v24 = v14->flags;
              }
              v26 = v24 & 0x402;
              v27 = v26 == 1026;
              if ( v26 == 1026 )
                v27 = v14->sa_query_timed_out == 0;
              if ( v27 && v14->auth_alg != 2 )
              {
                if ( !v14->sa_query_count )
                  ap_sta_start_sa_query(hapd, v14);
                v30 = hostapd_eid_assoc_comeback_time(hapd, v14, eid);
                hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v30 - eid);
                return 0;
              }
              v28 = wpa_auth_uses_mfp(v14->wpa_sm);
              v29 = v14->flags;
              if ( v28 )
                v17 = v29 | 0x400;
              else
                v17 = v29 & 0xFFFFFBFF;
              v14->flags = v17;
LABEL_22:
              v14->flags = v17 & 0xFFF7FFFC | 3;
              hostapd_set_sta_flags(hapd, v14);
              if ( reassoc && v14->auth_alg == 2 )
              {
                v18 = v14->wpa_sm;
                v19 = WPA_ASSOC_FT;
              }
              else
              {
                v18 = v14->wpa_sm;
                v19 = WPA_ASSOC;
              }
              wpa_auth_sm_event(v18, v19);
              hostapd_new_assoc_sta(hapd, v14, (v17 >> 1) & 1);
              ieee802_1x_notify_port_enabled(v14->eapol_sm, 1);
              return 0;
            }
            wpa_printf(2, "No WPA/RSN IE from STA");
            v16 = 13;
          }
          else
          {
            wpa_printf(
              3,
              "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
              *addr,
              addr[1],
              addr[2],
              addr[3],
              addr[4],
              addr[5]);
            v16 = 1;
          }
LABEL_35:
          hostapd_drv_sta_disassoc(hapd, v14->addr, v16);
          ap_free_sta(hapd, v14);
          return -1;
        }
        v10 = elems.wpa_ie_len;
        wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
      }
    }
    v11 = v10 + 2;
    v12 = v9 - 2;
    goto LABEL_10;
  }
  wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
  return -1;
}
