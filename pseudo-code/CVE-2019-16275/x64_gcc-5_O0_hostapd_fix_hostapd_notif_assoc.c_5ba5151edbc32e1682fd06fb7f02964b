int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  u32 v6; // eax
  u16 reason; // [rsp+3Ch] [rbp-6F4h]
  unsigned int res; // [rsp+40h] [rbp-6F0h]
  int new_assoc; // [rsp+44h] [rbp-6ECh]
  sta_info *sta; // [rsp+48h] [rbp-6E8h]
  const u8 *ie; // [rsp+50h] [rbp-6E0h]
  size_t ielen; // [rsp+58h] [rbp-6D8h]
  u8 *p; // [rsp+60h] [rbp-6D0h]
  ieee802_11_elems elems; // [rsp+70h] [rbp-6C0h] BYREF
  u8 buf[1064]; // [rsp+300h] [rbp-430h] BYREF
  unsigned __int64 v19; // [rsp+728h] [rbp-8h]

  v19 = __readfsqword(0x28u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  if ( is_multicast_ether_addr(addr) || is_zero_ether_addr_0(addr) || !memcmp(addr, hapd->own_addr, 6uLL) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    return 0;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    ie = elems.wps_ie - 2;
    ielen = elems.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    ie = elems.rsn_ie - 2;
    ielen = elems.rsn_ie_len + 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    ie = elems.wpa_ie - 2;
    ielen = elems.wpa_ie_len + 2;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    ie = 0LL;
    ielen = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  sta = ap_get_sta(hapd, addr);
  if ( sta )
  {
    ap_sta_no_session_timeout(hapd, sta);
    accounting_sta_stop(hapd, sta);
    sta->timeout_next = STA_NULLFUNC;
  }
  else
  {
    sta = ap_sta_add(hapd, addr);
    if ( !sta )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  sta->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    reason = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, sta->addr, reason);
    ap_free_sta(hapd, sta);
    return -1;
  }
  mbo_ap_check_sta_assoc(hapd, sta, &elems);
  ap_copy_sta_supp_op_classes(sta, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( hapd->conf->wpa )
  {
    if ( !ie || !ielen )
    {
      wpa_printf(2, "No WPA/RSN IE from STA");
      reason = 13;
      goto fail;
    }
    if ( !sta->wpa_sm )
      sta->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, sta->addr, 0LL);
    if ( !sta->wpa_sm )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
    res = wpa_validate_wpa_ie(
            hapd->wpa_auth,
            sta->wpa_sm,
            hapd->iface->freq,
            ie,
            ielen,
            elems.mdie,
            elems.mdie_len,
            elems.owe_dh,
            elems.owe_dh_len);
    if ( res )
    {
      wpa_printf(2, "WPA/RSN information element rejected? (res %u)", res);
      wpa_hexdump(2, "IE", ie, ielen);
      switch ( res )
      {
        case 2u:
          reason = 18;
          break;
        case 3u:
          reason = 19;
          break;
        case 4u:
          reason = 20;
          break;
        case 7u:
          reason = 13;
          break;
        case 8u:
          reason = 24;
          break;
        default:
          reason = 13;
          break;
      }
      goto fail;
    }
    if ( (sta->flags & 0x402) == 1026 && !sta->sa_query_timed_out && sta->sa_query_count > 0 )
      ap_check_sa_query_timeout(hapd, sta);
    if ( (sta->flags & 0x402) == 1026 && !sta->sa_query_timed_out && sta->auth_alg != 2 )
    {
      if ( !sta->sa_query_count )
        ZNSaISt13_Rb_tree_nodeISt4pairIKjlEEEC2ERKS4__0(hapd, sta);
      p = hostapd_eid_assoc_comeback_time(hapd, sta, buf);
      hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, p - buf);
      return 0;
    }
    if ( wpa_auth_uses_mfp(sta->wpa_sm) )
    {
      v6 = sta->flags;
      BYTE1(v6) |= 4u;
    }
    else
    {
      v6 = sta->flags;
      BYTE1(v6) &= 0xFBu;
    }
    sta->flags = v6;
  }
  new_assoc = (sta->flags & 2) == 0;
  sta->flags |= 3u;
  sta->flags &= 0xFFF7FFFF;
  hostapd_set_sta_flags(hapd, sta);
  if ( reassoc && sta->auth_alg == 2 )
    wpa_auth_sm_event(sta->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(sta->wpa_sm, WPA_ASSOC);
  hostapd_new_assoc_sta(hapd, sta, new_assoc == 0);
  ieee802_1x_notify_port_enabled(sta->eapol_sm, 1);
  return 0;
}
