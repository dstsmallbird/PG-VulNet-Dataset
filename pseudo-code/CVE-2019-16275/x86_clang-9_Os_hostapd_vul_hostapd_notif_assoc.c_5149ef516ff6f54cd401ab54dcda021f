int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v5; // ebx
  const char *v6; // eax
  hostapd_data *v7; // edi
  sta_info *v8; // eax
  sta_info *v9; // esi
  int v10; // ebp
  wpa_state_machine *v11; // eax
  int v12; // eax
  int v13; // edi
  int v14; // eax
  unsigned int v15; // edi
  wpa_event v16; // eax
  u32 v18; // eax
  const u8 *v19; // ebx
  int v20; // eax
  u32 v21; // edi
  u8 *v22; // eax
  int wpa_ie_len; // [esp+4h] [ebp-598h]
  ieee802_11_elems elems; // [esp+8h] [ebp-594h] BYREF
  u8 eid[1080]; // [esp+164h] [ebp-438h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v5 = elems.wps_ie - 2;
    wpa_ie_len = elems.wps_ie_len + 2;
    v6 = "STA included WPS IE in (Re)AssocReq";
LABEL_8:
    v7 = hapd;
    wpa_printf(2, v6);
    goto LABEL_9;
  }
  if ( elems.rsn_ie )
  {
    v5 = elems.rsn_ie - 2;
    wpa_ie_len = elems.rsn_ie_len + 2;
    v6 = "STA included RSN IE in (Re)AssocReq";
    goto LABEL_8;
  }
  v7 = hapd;
  if ( elems.wpa_ie )
  {
    v5 = elems.wpa_ie - 2;
    wpa_ie_len = elems.wpa_ie_len + 2;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v5 = 0;
    wpa_ie_len = 0;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
LABEL_9:
  v8 = ap_get_sta(v7, addr);
  if ( v8 )
  {
    v9 = v8;
    ap_sta_no_session_timeout(v7, v8);
    accounting_sta_stop(v7, v9);
    v9->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v9 = ap_sta_add(v7, addr);
    if ( !v9 )
    {
      hostapd_drv_sta_disassoc(v7, addr, 5);
      return -1;
    }
  }
  v9->flags &= 0xFFFECFFF;
  if ( v7->iface->drv_max_acl_mac_addrs || hostapd_check_acl(v7, addr, 0) == 1 )
  {
    v10 = reassoc;
    ap_copy_sta_supp_op_classes(v9, elems.supp_op_classes, elems.supp_op_classes_len);
    if ( !v7->conf->wpa )
    {
      v15 = v9->flags;
      goto LABEL_23;
    }
    if ( v5 && wpa_ie_len )
    {
      v11 = v9->wpa_sm;
      if ( !v11 )
      {
        v11 = wpa_auth_sta_init(v7->wpa_auth, v9->addr, 0);
        v9->wpa_sm = v11;
        if ( !v11 )
        {
          wpa_printf(5, "Failed to initialize WPA state machine");
          return -1;
        }
      }
      v12 = wpa_validate_wpa_ie(
              hapd->wpa_auth,
              v11,
              v7->iface->freq,
              v5,
              wpa_ie_len,
              elems.mdie,
              elems.mdie_len,
              elems.owe_dh,
              elems.owe_dh_len);
      if ( v12 )
      {
        v13 = v12;
        wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v12);
        wpa_hexdump(2, "IE", v5, wpa_ie_len);
        v14 = 13;
        if ( (unsigned int)(v13 - 2) < 7 )
          v14 = (int)*(&off_80B77F8 + v13);
        goto fail;
      }
      v18 = v9->flags;
      if ( (v18 & 0x402) == 1026 && !v9->sa_query_timed_out )
      {
        v19 = addr;
        v10 = reassoc;
        if ( v9->sa_query_count > 0 )
        {
          ap_check_sa_query_timeout(hapd, v9);
          v18 = v9->flags;
        }
      }
      else
      {
        v19 = addr;
        v10 = reassoc;
      }
      if ( (v18 & 0x402) == 1026 && !v9->sa_query_timed_out && v9->auth_alg != 2 )
      {
        if ( !v9->sa_query_count )
          ap_sta_start_sa_query(hapd, v9);
        v22 = hostapd_eid_assoc_comeback_time(hapd, v9, eid);
        hostapd_sta_assoc(hapd, v19, v10, 0x1Eu, eid, v22 - eid);
        return 0;
      }
      v20 = wpa_auth_uses_mfp(v9->wpa_sm);
      v21 = v9->flags;
      if ( v20 )
        v15 = v21 | 0x400;
      else
        v15 = v21 & 0xFFFFFBFF;
      v9->flags = v15;
LABEL_23:
      v9->flags = v15 & 0xFFF7FFFC | 3;
      hostapd_set_sta_flags(hapd, v9);
      if ( !v10 || (v16 = WPA_ASSOC_FT, v9->auth_alg != 2) )
        v16 = WPA_ASSOC;
      wpa_auth_sm_event(v9->wpa_sm, v16);
      hostapd_new_assoc_sta(hapd, v9, (v15 >> 1) & 1);
      ieee802_1x_notify_port_enabled(v9->eapol_sm, 1);
      return 0;
    }
    wpa_printf(2, "No WPA/RSN IE from STA");
    v14 = 13;
  }
  else
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v14 = 1;
  }
fail:
  hostapd_drv_sta_disassoc(hapd, v9->addr, v14);
  ap_free_sta(hapd, v9);
  return -1;
}
