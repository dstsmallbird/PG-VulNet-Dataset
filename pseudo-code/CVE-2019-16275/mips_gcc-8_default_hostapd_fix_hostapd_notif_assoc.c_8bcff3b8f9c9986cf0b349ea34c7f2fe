int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v5; // $s5
  int v8; // $s6
  int v9; // $s7
  int v10; // $fp
  int v11; // $v1
  int v12; // $a3
  int v15; // $v0
  int v16; // $s4
  int v18; // $s5
  const u8 *v19; // $s4
  size_t v20; // $s5
  sta_info *v21; // $v0
  sta_info *v22; // $s3
  unsigned int v23; // $a0
  wpa_state_machine *v24; // $a1
  wpa_authenticator *v25; // $a0
  int v26; // $v0
  int v27; // $v0
  u32 v28; // $v1
  unsigned int v29; // $v1
  int v30; // $s0
  wpa_state_machine *v31; // $a0
  int v32; // $s5
  u8 *v33; // $v0
  int v34; // $s5
  int v35; // $a2
  int resa; // [sp+30h] [-590h]
  int res; // [sp+30h] [-590h]
  int v38; // [sp+34h] [-58Ch]
  ieee802_11_elems elems; // [sp+38h] [-588h] BYREF
  u8 buf[1064]; // [sp+194h] [-42Ch] BYREF

  if ( !addr )
  {
    v16 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len);
    return v16;
  }
  v5 = *addr;
  v8 = addr[1];
  v9 = addr[2];
  v10 = addr[3];
  v11 = addr[4];
  v12 = addr[5];
  if ( (v5 & 1) != 0
    || !(v12 | v11 | v10 | v9 | v5 | v8)
    || (v38 = addr[5], resa = addr[4], v15 = memcmp(addr, hapd->own_addr, 6u), v11 = resa, v12 = v38, !v15) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      v8,
      v9,
      v10,
      v11,
      v12);
    return 0;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v18 = elems.wps_ie_len;
    v19 = elems.wps_ie - 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    v20 = v18 + 2;
  }
  else if ( elems.rsn_ie )
  {
    v32 = elems.rsn_ie_len;
    v19 = elems.rsn_ie - 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    v20 = v32 + 2;
  }
  else
  {
    v19 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v34 = elems.wpa_ie_len;
      v19 = elems.wpa_ie - 2;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
      v20 = v34 + 2;
    }
    else
    {
      v20 = 0;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v21 = ap_get_sta(hapd, addr);
  v22 = v21;
  if ( v21 )
  {
    ap_sta_no_session_timeout(hapd, v21);
    accounting_sta_stop(hapd, v22);
    v22->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v22 = ap_sta_add(hapd, addr);
    if ( !v22 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v23 = hapd->iface->drv_max_acl_mac_addrs;
  v22->flags &= 0xFFFECFFF;
  if ( !v23 && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v35 = 1;
    goto fail;
  }
  ap_copy_sta_supp_op_classes(v22, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v29 = v22->flags;
    goto LABEL_21;
  }
  if ( !v19 || !v20 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v35 = 13;
fail:
    v16 = -1;
    hostapd_drv_sta_disassoc(hapd, v22->addr, v35);
    ap_free_sta(hapd, v22);
    return v16;
  }
  v24 = v22->wpa_sm;
  v25 = hapd->wpa_auth;
  if ( !v24 )
  {
    v24 = wpa_auth_sta_init(v25, v22->addr, 0);
    v22->wpa_sm = v24;
    if ( !v24 )
    {
      v16 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v16;
    }
    v25 = hapd->wpa_auth;
  }
  v26 = wpa_validate_wpa_ie(
          v25,
          v24,
          hapd->iface->freq,
          v19,
          v20,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v26 )
  {
    res = v26;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v26);
    wpa_hexdump(2, "IE", v19, v20);
    switch ( res )
    {
      case 2:
        v35 = 18;
        break;
      case 3:
        v35 = 19;
        break;
      case 4:
        v35 = 20;
        break;
      default:
        v35 = 13;
        if ( res == 8 )
          v35 = 24;
        break;
    }
    goto fail;
  }
  if ( (v22->flags & 0x402) != 1026
    || (v16 = v22->sa_query_timed_out) != 0
    || v22->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v22), (v22->flags & 0x402) != 1026) || v22->sa_query_timed_out)
    || v22->auth_alg == 2 )
  {
    v27 = wpa_auth_uses_mfp(v22->wpa_sm);
    v28 = v22->flags;
    if ( v27 )
      v29 = v28 | 0x400;
    else
      v29 = v28 & 0xFFFFFBFF;
LABEL_21:
    v22->flags = v29 & 0xFFF7FFFF | 3;
    v30 = v29 & 2;
    hostapd_set_sta_flags(hapd, v22);
    if ( reassoc )
    {
      v31 = v22->wpa_sm;
      if ( v22->auth_alg == 2 )
      {
        wpa_auth_sm_event(v31, WPA_ASSOC_FT);
        goto LABEL_24;
      }
    }
    else
    {
      v31 = v22->wpa_sm;
    }
    wpa_auth_sm_event(v31, WPA_ASSOC);
LABEL_24:
    hostapd_new_assoc_sta(hapd, v22, v30 != 0);
    v16 = 0;
    ieee802_1x_notify_port_enabled(v22->eapol_sm, 1);
    return v16;
  }
  if ( !v22->sa_query_count )
    ap_sta_start_sa_query(hapd, v22);
  v33 = hostapd_eid_assoc_comeback_time(hapd, v22, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v33 - buf);
  return v16;
}
