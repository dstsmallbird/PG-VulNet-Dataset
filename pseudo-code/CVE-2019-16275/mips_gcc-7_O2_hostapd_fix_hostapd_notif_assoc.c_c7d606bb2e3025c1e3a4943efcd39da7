int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v5; // $s3
  u8 *v6; // $s4
  int v7; // $s5
  int v8; // $s6
  int v9; // $s7
  int v10; // $a3
  int v14; // $v0
  int v15; // $s4
  int v17; // $s5
  const u8 *v18; // $s4
  size_t v19; // $s5
  sta_info *v20; // $v0
  sta_info *v21; // $s3
  unsigned int v22; // $a0
  wpa_state_machine *v23; // $a1
  wpa_authenticator *v24; // $a0
  int v25; // $v0
  int v26; // $v0
  u32 v27; // $v1
  unsigned int v28; // $v1
  int v29; // $s0
  wpa_state_machine *v30; // $a0
  int v31; // $s5
  int v32; // $s5
  u8 *v33; // $v0
  int v34; // $a2
  u8 *mdie; // [sp+14h] [-5ACh]
  int resa; // [sp+30h] [-590h]
  int v38; // [sp+34h] [-58Ch]
  ieee802_11_elems elems; // [sp+38h] [-588h] BYREF
  u8 buf[1064]; // [sp+194h] [-42Ch] BYREF

  if ( !addr )
  {
    v15 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len);
    return v15;
  }
  v5 = addr[1];
  v6 = (u8 *)addr[2];
  v7 = addr[3];
  v8 = addr[4];
  v9 = addr[5];
  v10 = *addr;
  if ( (v10 & 1) != 0
    || !(v9 | v8 | v7 | (unsigned int)v6 | v10 | v5)
    || (v38 = *addr, v14 = memcmp(addr, hapd->own_addr, 6u), v10 = v38, !v14) )
  {
    mdie = v6;
    v15 = 0;
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v10,
      v5,
      mdie,
      v7,
      v8,
      v9);
    return v15;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v17 = elems.wps_ie_len;
    v18 = elems.wps_ie - 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    v19 = v17 + 2;
  }
  else if ( elems.rsn_ie )
  {
    v31 = elems.rsn_ie_len;
    v18 = elems.rsn_ie - 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    v19 = v31 + 2;
  }
  else
  {
    v18 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v32 = elems.wpa_ie_len;
      v18 = elems.wpa_ie - 2;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
      v19 = v32 + 2;
    }
    else
    {
      v19 = 0;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v20 = ap_get_sta(hapd, addr);
  v21 = v20;
  if ( v20 )
  {
    ap_sta_no_session_timeout(hapd, v20);
    accounting_sta_stop(hapd, v21);
    v21->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v21 = ap_sta_add(hapd, addr);
    if ( !v21 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v22 = hapd->iface->drv_max_acl_mac_addrs;
  v21->flags &= 0xFFFECFFF;
  if ( !v22 && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v34 = 1;
    goto fail;
  }
  ap_copy_sta_supp_op_classes(v21, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v28 = v21->flags;
    goto LABEL_21;
  }
  if ( !v18 || !v19 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v34 = 13;
fail:
    v15 = -1;
    hostapd_drv_sta_disassoc(hapd, v21->addr, v34);
    ap_free_sta(hapd, v21);
    return v15;
  }
  v23 = v21->wpa_sm;
  v24 = hapd->wpa_auth;
  if ( !v23 )
  {
    v23 = wpa_auth_sta_init(v24, v21->addr, 0);
    v21->wpa_sm = v23;
    if ( !v23 )
    {
      v15 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v15;
    }
    v24 = hapd->wpa_auth;
  }
  v25 = wpa_validate_wpa_ie(
          v24,
          v23,
          hapd->iface->freq,
          v18,
          v19,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v25 )
  {
    resa = v25;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v25);
    wpa_hexdump(2, "IE", v18, v19);
    switch ( resa )
    {
      case 2:
        v34 = 18;
        break;
      case 3:
        v34 = 19;
        break;
      case 4:
        v34 = 20;
        break;
      default:
        v34 = 24;
        if ( resa != 8 )
          v34 = 13;
        break;
    }
    goto fail;
  }
  if ( (v21->flags & 0x402) != 1026
    || (v15 = v21->sa_query_timed_out) != 0
    || v21->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v21), (v21->flags & 0x402) != 1026) || v21->sa_query_timed_out)
    || v21->auth_alg == 2 )
  {
    v26 = wpa_auth_uses_mfp(v21->wpa_sm);
    v27 = v21->flags;
    if ( v26 )
      v28 = v27 | 0x400;
    else
      v28 = v27 & 0xFFFFFBFF;
LABEL_21:
    v21->flags = v28 & 0xFFF7FFFF | 3;
    v29 = v28 & 2;
    hostapd_set_sta_flags(hapd, v21);
    if ( reassoc )
    {
      v30 = v21->wpa_sm;
      if ( v21->auth_alg == 2 )
      {
        wpa_auth_sm_event(v30, WPA_ASSOC_FT);
        goto LABEL_24;
      }
    }
    else
    {
      v30 = v21->wpa_sm;
    }
    wpa_auth_sm_event(v30, WPA_ASSOC);
LABEL_24:
    hostapd_new_assoc_sta(hapd, v21, v29 != 0);
    v15 = 0;
    ieee802_1x_notify_port_enabled(v21->eapol_sm, 1);
    return v15;
  }
  if ( !v21->sa_query_count )
    ap_sta_start_sa_query(hapd, v21);
  v33 = hostapd_eid_assoc_comeback_time(hapd, v21, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v33 - buf);
  return v15;
}
