int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  __int64 v6; // rcx
  __int64 v11; // r9
  __int64 v12; // r8
  __int64 v13; // rdx
  __int64 v14; // rdi
  __int64 v15; // rsi
  const u8 *v16; // r13
  char v17; // r15
  sta_info *v18; // rax
  sta_info *v19; // r14
  hostapd_iface *v20; // rax
  wpa_state_machine *v21; // rsi
  wpa_authenticator *v22; // rdi
  unsigned int v23; // eax
  unsigned int v24; // er15
  bool v25; // zf
  u32 v26; // eax
  int v27; // ebx
  wpa_state_machine *v28; // rdi
  int v29; // er13
  u8 *v31; // rax
  int v32; // edx
  __int64 ielen; // [rsp+8h] [rbp-700h]
  ieee802_11_elems elems; // [rsp+10h] [rbp-6F8h] BYREF
  u8 buf[1064]; // [rsp+2A0h] [rbp-468h] BYREF
  unsigned __int64 v36; // [rsp+6C8h] [rbp-40h]

  v36 = __readfsqword(0x28u);
  if ( !addr )
  {
    v29 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return v29;
  }
  v6 = *addr;
  v11 = addr[2];
  v12 = addr[1];
  v13 = addr[3];
  v14 = addr[5];
  v15 = addr[4];
  if ( (v6 & 1) != 0
    || !((unsigned __int8)v14 | (unsigned __int8)(v15 | v13 | v11 | v12 | v6))
    || *(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4] )
  {
    v29 = 0;
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v6,
      v12,
      v11,
      v13,
      v15,
      v14);
    return v29;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v16 = elems.wps_ie - 2;
    v17 = 0;
    ielen = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v16 = elems.rsn_ie - 2;
    v17 = 0;
    ielen = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v16 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v16 = elems.wpa_ie - 2;
      v17 = 0;
      ielen = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v17 = 1;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      ielen = 0LL;
    }
  }
  v18 = ap_get_sta(hapd, addr);
  v19 = v18;
  if ( v18 )
  {
    ap_sta_no_session_timeout(hapd, v18);
    accounting_sta_stop(hapd, v19);
    v19->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v19 = ap_sta_add(hapd, addr);
    if ( !v19 )
    {
      v29 = -1;
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return v29;
    }
  }
  v20 = hapd->iface;
  v19->flags &= 0xFFFECFFF;
  if ( !v20->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v32 = 1;
fail:
    v29 = -1;
    hostapd_drv_sta_disassoc(hapd, v19->addr, v32);
    ap_free_sta(hapd, v19);
    return v29;
  }
  ap_copy_sta_supp_op_classes(v19, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v26 = v19->flags;
LABEL_19:
    v27 = v26 & 2;
    v19->flags = v26 & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v19);
    v28 = v19->wpa_sm;
    if ( reassoc && v19->auth_alg == 2 )
      wpa_auth_sm_event(v28, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v28, WPA_ASSOC);
    v29 = 0;
    hostapd_new_assoc_sta(hapd, v19, v27 != 0);
    ieee802_1x_notify_port_enabled(v19->eapol_sm, 1);
    return v29;
  }
  if ( !v16 || v17 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v32 = 13;
    goto fail;
  }
  v21 = v19->wpa_sm;
  v22 = hapd->wpa_auth;
  if ( !v21 )
  {
    v21 = wpa_auth_sta_init(v22, v19->addr, 0LL);
    v19->wpa_sm = v21;
    if ( !v21 )
    {
      v29 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v29;
    }
    v22 = hapd->wpa_auth;
  }
  v23 = wpa_validate_wpa_ie(
          v22,
          v21,
          hapd->iface->freq,
          v16,
          ielen,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v24 = v23;
  if ( v23 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v23);
    wpa_hexdump(2, "IE", v16, ielen);
    switch ( v24 )
    {
      case 2u:
        v32 = 18;
        break;
      case 3u:
        v32 = 19;
        break;
      case 4u:
        v32 = 20;
        break;
      default:
        v32 = 24;
        if ( v24 != 8 )
          v32 = 13;
        break;
    }
    goto fail;
  }
  if ( (v19->flags & 0x402) != 1026
    || (v29 = v19->sa_query_timed_out) != 0
    || v19->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v19), (v19->flags & 0x402) != 1026) || v19->sa_query_timed_out)
    || v19->auth_alg == 2 )
  {
    v25 = wpa_auth_uses_mfp(v19->wpa_sm) == 0;
    v26 = v19->flags;
    if ( v25 )
      BYTE1(v26) &= 0xFBu;
    else
      BYTE1(v26) |= 4u;
    goto LABEL_19;
  }
  if ( !v19->sa_query_count )
    ap_sta_start_sa_query(hapd, v19);
  v31 = hostapd_eid_assoc_comeback_time(hapd, v19, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v31 - buf);
  return v29;
}
