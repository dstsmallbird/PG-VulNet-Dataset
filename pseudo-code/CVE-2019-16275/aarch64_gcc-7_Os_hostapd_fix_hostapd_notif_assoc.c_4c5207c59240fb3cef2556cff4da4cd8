int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v7; // w19
  unsigned int v9; // w26
  unsigned int v10; // w27
  unsigned int v11; // w28
  __int64 v12; // x7
  int v13; // w3
  int v16; // w0
  int v17; // w22
  const u8 *v18; // x22
  size_t v19; // x23
  sta_info *v20; // x0
  sta_info *v21; // x19
  int v22; // w2
  __int64 v23; // x2
  __int64 v24; // x3
  __int64 v25; // x4
  bool v26; // zf
  wpa_state_machine *v27; // x1
  unsigned int v28; // w0
  unsigned int v29; // w26
  u8 *v30; // x0
  int v32; // w0
  u32 v33; // w1
  unsigned int v34; // w2
  int v35; // w1
  int v36; // w21
  wpa_event v37; // w1
  unsigned int v38; // [xsp+78h] [xbp+68h]
  int v39; // [xsp+7Ch] [xbp+6Ch]
  ieee802_11_elems elems; // [xsp+88h] [xbp+78h] BYREF
  u8 buf[1064]; // [xsp+310h] [xbp+300h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  v7 = *addr;
  v9 = addr[1];
  v10 = addr[2];
  v11 = addr[3];
  v12 = addr[4];
  v13 = addr[5];
  if ( (v7 & 1) != 0
    || !(v13 | (unsigned int)v12 | v11 | v10 | v7 | v9)
    || (v38 = addr[4], v39 = addr[5], v16 = memcmp(addr, hapd->own_addr, 6uLL), v12 = v38, v13 = v39, !v16) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      (const char *)_func___14783,
      v7,
      v9,
      v10,
      v11,
      v12,
      v13);
    return 0;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v18 = elems.wps_ie - 2;
    v19 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v18 = elems.rsn_ie - 2;
    v19 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v18 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v18 = elems.wpa_ie - 2;
      v19 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v19 = 0LL;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v20 = ap_get_sta(hapd, addr);
  v21 = v20;
  if ( v20 )
  {
    ap_sta_no_session_timeout(hapd, v20);
    accounting_sta_stop(hapd, v21);
    v21->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v21 = ap_sta_add(hapd, addr);
    if ( !v21 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v21->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v22 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v21->addr, v22);
    ap_free_sta(hapd, v21);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v21, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
LABEL_56:
    v36 = v21->flags & 2;
    v21->flags = v21->flags & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v21);
    if ( reassoc && v21->auth_alg == 2 )
      v37 = WPA_ASSOC_FT;
    else
      v37 = WPA_ASSOC;
    wpa_auth_sm_event(v21->wpa_sm, v37);
    hostapd_new_assoc_sta(hapd, v21, v36 != 0);
    ieee802_1x_notify_port_enabled(v21->eapol_sm, 1);
    return 0;
  }
  if ( v18 )
    v26 = v19 == 0;
  else
    v26 = 1;
  if ( v26 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v22 = 13;
    goto fail;
  }
  if ( !v21->wpa_sm )
    v21->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v21->addr, 0LL);
  v27 = v21->wpa_sm;
  if ( !v27 )
  {
    wpa_printf(5, "Failed to initialize WPA state machine", v23, v24, v25);
    return -1;
  }
  v28 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v27,
          hapd->iface->freq,
          v18,
          v19,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v29 = v28;
  if ( v28 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v28);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v18, v19);
    switch ( v29 )
    {
      case 2u:
        v22 = 18;
        break;
      case 3u:
        v22 = 19;
        break;
      case 4u:
        v22 = 20;
        break;
      case 8u:
        v22 = 24;
        break;
      default:
        v22 = 13;
        break;
    }
    goto fail;
  }
  if ( (v21->flags & 0x402) == 1026 && !v21->sa_query_timed_out && v21->sa_query_count > 0 )
    ap_check_sa_query_timeout(hapd, v21);
  if ( (v21->flags & 0x402) != 1026 || (v17 = v21->sa_query_timed_out) != 0 || v21->auth_alg == 2 )
  {
    v32 = wpa_auth_uses_mfp(v21->wpa_sm);
    v33 = v21->flags;
    v34 = v33 & 0xFFFFFBFF;
    v35 = v33 | 0x400;
    if ( !v32 )
      v35 = v34;
    v21->flags = v35;
    goto LABEL_56;
  }
  if ( !v21->sa_query_count )
    ap_sta_start_sa_query(hapd, v21);
  v30 = hostapd_eid_assoc_comeback_time(hapd, v21, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v30 - buf);
  return v17;
}
