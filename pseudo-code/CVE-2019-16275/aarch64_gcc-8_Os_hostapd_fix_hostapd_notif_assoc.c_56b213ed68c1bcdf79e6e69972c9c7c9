int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v7; // w19
  unsigned int v8; // w22
  unsigned int v9; // w23
  unsigned int v10; // w26
  unsigned int v11; // w27
  int v12; // w28
  int v16; // w22
  const u8 *v17; // x22
  size_t v18; // x23
  sta_info *v19; // x0
  sta_info *v20; // x19
  int v21; // w2
  __int64 v22; // x2
  __int64 v23; // x3
  __int64 v24; // x4
  bool v25; // zf
  wpa_state_machine *v26; // x1
  unsigned int v27; // w0
  unsigned int v28; // w26
  int v29; // w0
  u32 v30; // w1
  unsigned int v31; // w2
  int v32; // w1
  int v33; // w21
  wpa_event v34; // w1
  u8 *v35; // x0
  ieee802_11_elems elems; // [xsp+88h] [xbp+78h] BYREF
  u8 buf[1064]; // [xsp+310h] [xbp+300h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  v7 = *addr;
  v8 = addr[1];
  v9 = addr[2];
  v10 = addr[3];
  v11 = addr[4];
  v12 = addr[5];
  if ( (v7 & 1) != 0 || !(v12 | v11 | v7 | v8 | v10 | v9) || !memcmp(addr, hapd->own_addr, 6uLL) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v7,
      v8,
      v9,
      v10,
      v11,
      v12);
    return 0;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v17 = elems.wps_ie - 2;
    v18 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v17 = elems.rsn_ie - 2;
    v18 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else
  {
    v17 = elems.wpa_ie;
    if ( elems.wpa_ie )
    {
      v17 = elems.wpa_ie - 2;
      v18 = elems.wpa_ie_len + 2LL;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      v18 = 0LL;
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
    }
  }
  v19 = ap_get_sta(hapd, addr);
  v20 = v19;
  if ( v19 )
  {
    ap_sta_no_session_timeout(hapd, v19);
    accounting_sta_stop(hapd, v20);
    v20->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v20 = ap_sta_add(hapd, addr);
    if ( !v20 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v20->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v21 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v20->addr, v21);
    ap_free_sta(hapd, v20);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v20, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
LABEL_47:
    v33 = v20->flags & 2;
    v20->flags = v20->flags & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v20);
    if ( reassoc && v20->auth_alg == 2 )
      v34 = WPA_ASSOC_FT;
    else
      v34 = WPA_ASSOC;
    wpa_auth_sm_event(v20->wpa_sm, v34);
    hostapd_new_assoc_sta(hapd, v20, v33 != 0);
    ieee802_1x_notify_port_enabled(v20->eapol_sm, 1);
    return 0;
  }
  if ( v17 )
    v25 = v18 == 0;
  else
    v25 = 1;
  if ( v25 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v21 = 13;
    goto fail;
  }
  if ( !v20->wpa_sm )
    v20->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v20->addr, 0LL);
  v26 = v20->wpa_sm;
  if ( !v26 )
  {
    wpa_printf(5, "Failed to initialize WPA state machine", v22, v23, v24);
    return -1;
  }
  v27 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v26,
          hapd->iface->freq,
          v17,
          v18,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v28 = v27;
  if ( v27 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v27);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v17, v18);
    switch ( v28 )
    {
      case 2u:
        v21 = 18;
        break;
      case 3u:
        v21 = 19;
        break;
      case 4u:
        v21 = 20;
        break;
      case 8u:
        v21 = 24;
        break;
      default:
        v21 = 13;
        break;
    }
    goto fail;
  }
  if ( (v20->flags & 0x402) != 1026
    || (v16 = v20->sa_query_timed_out) != 0
    || v20->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v20), (v20->flags & 0x402) != 1026) || v20->sa_query_timed_out)
    || v20->auth_alg == 2 )
  {
    v29 = wpa_auth_uses_mfp(v20->wpa_sm);
    v30 = v20->flags;
    v31 = v30 & 0xFFFFFBFF;
    v32 = v30 | 0x400;
    if ( !v29 )
      v32 = v31;
    v20->flags = v32;
    goto LABEL_47;
  }
  if ( !v20->sa_query_count )
    ap_sta_start_sa_query(hapd, v20);
  v35 = hostapd_eid_assoc_comeback_time(hapd, v20, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v35 - buf);
  return v16;
}
