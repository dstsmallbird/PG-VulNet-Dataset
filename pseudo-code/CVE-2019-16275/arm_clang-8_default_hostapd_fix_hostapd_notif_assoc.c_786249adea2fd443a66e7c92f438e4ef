int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v5; // r6
  int v6; // r7
  int v8; // r4
  int v9; // r10
  int v10; // r8
  int v11; // r9
  hostapd_data *v12; // r7
  const u8 *v13; // r4
  int v14; // r6
  size_t v16; // r9
  const u8 *v17; // r10
  sta_info *v18; // r0
  sta_info *v19; // r6
  bool v20; // zf
  int v21; // r2
  unsigned int v22; // r4
  wpa_state_machine *v23; // r0
  wpa_event v24; // r1
  wpa_state_machine *v25; // r1
  int v26; // r0
  int v27; // r4
  u32 v28; // r0
  int v29; // r0
  bool v30; // zf
  int v31; // r0
  u32 v32; // r1
  u8 *v33; // r0
  u8 eid[1064]; // [sp+24h] [bp-5A4h] BYREF
  ieee802_11_elems elems; // [sp+44Ch] [bp-17Ch] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  v5 = *addr;
  v6 = addr[1];
  if ( (v5 & 1) != 0 )
  {
    v8 = addr[2];
    v9 = addr[3];
    v10 = addr[4];
    v11 = addr[5];
LABEL_10:
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      v6,
      v8,
      v9,
      v10,
      v11);
    return 0;
  }
  v8 = addr[2];
  v9 = addr[3];
  v10 = addr[4];
  v11 = addr[5];
  if ( !(v6 | v5 | v8 | v9 | v10 | v11) || !memcmp(addr, hapd->own_addr, 6u) )
    goto LABEL_10;
  random_add_randomness(addr, 6u);
  v12 = hapd;
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  v13 = elems.wps_ie;
  if ( elems.wps_ie )
  {
    v14 = elems.wps_ie_len;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
LABEL_16:
    v16 = v14 + 2;
    v17 = v13 - 2;
    goto LABEL_17;
  }
  v13 = elems.rsn_ie;
  if ( elems.rsn_ie )
  {
    v14 = elems.rsn_ie_len;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    goto LABEL_16;
  }
  v13 = elems.wpa_ie;
  if ( elems.wpa_ie )
  {
    v14 = elems.wpa_ie_len;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    goto LABEL_16;
  }
  wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  v17 = 0;
  v16 = 0;
LABEL_17:
  v18 = ap_get_sta(hapd, addr);
  if ( v18 )
  {
    v19 = v18;
    ap_sta_no_session_timeout(hapd, v18);
    accounting_sta_stop(hapd, v19);
    v19->timeout_next = STA_NULLFUNC;
LABEL_20:
    v19->flags &= 0xFFFECFFF;
    if ( hapd->iface->drv_max_acl_mac_addrs || hostapd_check_acl(hapd, addr, 0) == 1 )
    {
      ap_copy_sta_supp_op_classes(v19, elems.supp_op_classes, elems.supp_op_classes_len);
      if ( !hapd->conf->wpa )
      {
        v22 = v19->flags;
        goto LABEL_29;
      }
      v20 = v17 == 0;
      if ( v17 )
        v20 = v16 == 0;
      if ( !v20 )
      {
        v25 = v19->wpa_sm;
        if ( v25 || (v25 = wpa_auth_sta_init(hapd->wpa_auth, v19->addr, 0), (v19->wpa_sm = v25) != 0) )
        {
          v26 = wpa_validate_wpa_ie(
                  hapd->wpa_auth,
                  v25,
                  hapd->iface->freq,
                  v17,
                  v16,
                  elems.mdie,
                  elems.mdie_len,
                  elems.owe_dh,
                  elems.owe_dh_len);
          if ( v26 )
          {
            v27 = v26;
            wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v26);
            wpa_hexdump(2, (const unsigned __int8 *)"IE", v17, v16);
            v21 = 13;
            v12 = hapd;
            if ( (unsigned int)(v27 - 2) < 7 )
              v21 = dword_956C8[v27 - 2];
            goto LABEL_41;
          }
          v28 = v19->flags;
          if ( (v28 & 0x402) == 1026 )
          {
            v12 = hapd;
            if ( !v19->sa_query_timed_out && v19->sa_query_count >= 1 )
            {
              ap_check_sa_query_timeout(hapd, v19);
              v28 = v19->flags;
            }
          }
          else
          {
            v12 = hapd;
          }
          v29 = v28 & 0x402;
          v30 = v29 == 1026;
          if ( v29 == 1026 )
            v30 = v19->sa_query_timed_out == 0;
          if ( v30 && v19->auth_alg != 2 )
          {
            if ( !v19->sa_query_count )
              ap_sta_start_sa_query(v12, v19);
            v33 = hostapd_eid_assoc_comeback_time(v12, v19, eid);
            hostapd_sta_assoc(v12, addr, reassoc, 0x1Eu, eid, v33 - eid);
            return 0;
          }
          v31 = wpa_auth_uses_mfp(v19->wpa_sm);
          v32 = v19->flags;
          if ( v31 )
            v22 = v32 | 0x400;
          else
            v22 = v32 & 0xFFFFFBFF;
          v19->flags = v22;
LABEL_29:
          v19->flags = v22 & 0xFFF7FFFC | 3;
          hostapd_set_sta_flags(v12, v19);
          if ( reassoc && v19->auth_alg == 2 )
          {
            v23 = v19->wpa_sm;
            v24 = WPA_ASSOC_FT;
          }
          else
          {
            v23 = v19->wpa_sm;
            v24 = WPA_ASSOC;
          }
          wpa_auth_sm_event(v23, v24);
          hostapd_new_assoc_sta(v12, v19, (v22 >> 1) & 1);
          ieee802_1x_notify_port_enabled(v19->eapol_sm, 1);
          return 0;
        }
        wpa_printf(5, "Failed to initialize WPA state machine");
        return -1;
      }
      wpa_printf(2, "No WPA/RSN IE from STA");
      v21 = 13;
    }
    else
    {
      v12 = hapd;
      wpa_printf(
        3,
        "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      v21 = 1;
    }
LABEL_41:
    hostapd_drv_sta_disassoc(v12, v19->addr, v21);
    ap_free_sta(v12, v19);
    return -1;
  }
  v19 = ap_sta_add(hapd, addr);
  if ( v19 )
    goto LABEL_20;
  hostapd_drv_sta_disassoc(hapd, addr, 5);
  return -1;
}
