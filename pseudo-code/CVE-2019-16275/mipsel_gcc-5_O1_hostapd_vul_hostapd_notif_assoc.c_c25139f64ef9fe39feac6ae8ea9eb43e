int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v10; // $s4
  int v11; // $s3
  size_t v12; // $s3
  int v13; // $s3
  int v14; // $s3
  sta_info *v15; // $v0
  sta_info *v16; // $s0
  size_t v17; // $a2
  int v18; // $a2
  wpa_state_machine *v19; // $a1
  int v20; // $v0
  int v21; // $s5
  const u8 *v22; // $a1
  u8 *v23; // $v0
  unsigned int v25; // $v0
  int v26; // $s2
  int v27; // $a2
  ieee802_11_elems elems; // [sp+30h] [-58Ch] BYREF
  u8 buf[1064]; // [sp+18Ch] [-430h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len);
    return -1;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  v10 = elems.wps_ie - 2;
  if ( elems.wps_ie )
  {
    v11 = elems.wps_ie_len;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    v12 = v11 + 2;
  }
  else
  {
    v10 = elems.rsn_ie - 2;
    if ( elems.rsn_ie )
    {
      v13 = elems.rsn_ie_len;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
      v12 = v13 + 2;
    }
    else
    {
      v10 = elems.wpa_ie - 2;
      if ( elems.wpa_ie )
      {
        v14 = elems.wpa_ie_len;
        wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
        v12 = v14 + 2;
      }
      else
      {
        wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
        v12 = 0;
        v10 = 0;
      }
    }
  }
  v15 = ap_get_sta(hapd, addr);
  v16 = v15;
  if ( v15 )
  {
    ap_sta_no_session_timeout(hapd, v15);
    accounting_sta_stop(hapd, v16);
    v16->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v16 = ap_sta_add(hapd, addr);
    if ( !v16 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v16->flags &= 0xFFFECFFF;
  v17 = elems.supp_op_classes_len;
  if ( !hapd->iface->drv_max_acl_mac_addrs )
  {
    if ( hostapd_check_acl(hapd, addr, 0) != 1 )
    {
      wpa_printf(
        3,
        "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      v18 = 1;
      goto fail;
    }
    v17 = elems.supp_op_classes_len;
  }
  ap_copy_sta_supp_op_classes(v16, elems.supp_op_classes, v17);
  if ( !hapd->conf->wpa )
  {
LABEL_44:
    v26 = v16->flags & 2;
    v16->flags = v16->flags & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v16);
    if ( reassoc && v16->auth_alg == 2 )
    {
      wpa_auth_sm_event(v16->wpa_sm, WPA_ASSOC_FT);
      v27 = v26 != 0;
    }
    else
    {
      wpa_auth_sm_event(v16->wpa_sm, WPA_ASSOC);
      v27 = v26 != 0;
    }
    hostapd_new_assoc_sta(hapd, v16, v27);
    ieee802_1x_notify_port_enabled(v16->eapol_sm, 1);
    return 0;
  }
  if ( !v10 || !v12 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v18 = 13;
    goto fail;
  }
  v19 = v16->wpa_sm;
  if ( !v19 )
  {
    v19 = wpa_auth_sta_init(hapd->wpa_auth, v16->addr, 0);
    v16->wpa_sm = v19;
    if ( !v19 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v20 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v19,
          hapd->iface->freq,
          v10,
          v12,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v21 = v20;
  if ( v20 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v20);
    wpa_hexdump(2, "IE", v10, v12);
    switch ( v21 )
    {
      case 2:
        v18 = 18;
        break;
      case 3:
        v18 = 19;
        break;
      case 4:
        v18 = 20;
        break;
      default:
        v18 = 13;
        if ( v21 != 8 )
        {
          v22 = v16->addr;
LABEL_54:
          hostapd_drv_sta_disassoc(hapd, v22, v18);
          ap_free_sta(hapd, v16);
          return -1;
        }
        v18 = 24;
        break;
    }
fail:
    v22 = v16->addr;
    goto LABEL_54;
  }
  if ( (v16->flags & 0x402) != 1026
    || v16->sa_query_timed_out
    || v16->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v16), (v16->flags & 0x402) != 1026) || v16->sa_query_timed_out)
    || v16->auth_alg == 2 )
  {
    if ( wpa_auth_uses_mfp(v16->wpa_sm) )
      v25 = v16->flags | 0x400;
    else
      v25 = v16->flags & 0xFFFFFBFF;
    v16->flags = v25;
    goto LABEL_44;
  }
  if ( !v16->sa_query_count )
    ap_sta_start_sa_query(hapd, v16);
  v23 = hostapd_eid_assoc_comeback_time(hapd, v16, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v23 - buf);
  return 0;
}
