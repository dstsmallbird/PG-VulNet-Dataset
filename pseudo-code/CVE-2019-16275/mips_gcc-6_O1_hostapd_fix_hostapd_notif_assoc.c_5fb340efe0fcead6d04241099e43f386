int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v8; // $s1
  const u8 *v12; // $s4
  size_t v13; // $s3
  sta_info *v14; // $v0
  sta_info *v15; // $s1
  size_t v16; // $a2
  wpa_state_machine *v17; // $a1
  int v18; // $v0
  int v19; // $s5
  unsigned int v20; // $v0
  int v21; // $s0
  int v22; // $a2
  int v23; // $s3
  int v24; // $s3
  int v25; // $a2
  int v26; // $v0
  u8 *v27; // $v0
  ieee802_11_elems elems; // [sp+30h] [-58Ch] BYREF
  u8 buf[1064]; // [sp+18Ch] [-430h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len);
    return -1;
  }
  v8 = *addr;
  if ( (v8 & 1) != 0
    || !((unsigned __int8)(v8 | addr[1] | addr[2] | addr[3] | addr[4]) | addr[5])
    || !memcmp(addr, hapd->own_addr, 6u) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v8,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    return 0;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  v12 = elems.wps_ie - 2;
  if ( elems.wps_ie )
  {
    v13 = elems.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else
  {
    v12 = elems.rsn_ie - 2;
    if ( elems.rsn_ie )
    {
      v23 = elems.rsn_ie_len;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
      v13 = v23 + 2;
    }
    else
    {
      v12 = elems.wpa_ie;
      if ( elems.wpa_ie )
      {
        v12 = elems.wpa_ie - 2;
        v24 = elems.wpa_ie_len;
        wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
        v13 = v24 + 2;
      }
      else
      {
        wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
        v13 = 0;
      }
    }
  }
  v14 = ap_get_sta(hapd, addr);
  v15 = v14;
  if ( v14 )
  {
    ap_sta_no_session_timeout(hapd, v14);
    accounting_sta_stop(hapd, v15);
    v15->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v15 = ap_sta_add(hapd, addr);
    if ( !v15 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v15->flags &= 0xFFFECFFF;
  v16 = elems.supp_op_classes_len;
  if ( !hapd->iface->drv_max_acl_mac_addrs )
  {
    if ( hostapd_check_acl(hapd, addr, 0) != 1 )
    {
      wpa_printf(
        3,
        "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      v25 = 1;
fail:
      hostapd_drv_sta_disassoc(hapd, v15->addr, v25);
      ap_free_sta(hapd, v15);
      return -1;
    }
    v16 = elems.supp_op_classes_len;
  }
  ap_copy_sta_supp_op_classes(v15, elems.supp_op_classes, v16);
  if ( !hapd->conf->wpa )
    goto LABEL_24;
  if ( !v12 || !v13 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v25 = 13;
    goto fail;
  }
  v17 = v15->wpa_sm;
  if ( !v17 )
  {
    v17 = wpa_auth_sta_init(hapd->wpa_auth, v15->addr, 0);
    v15->wpa_sm = v17;
    if ( !v17 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine");
      return -1;
    }
  }
  v18 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v17,
          hapd->iface->freq,
          v12,
          v13,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v19 = v18;
  if ( v18 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v18);
    wpa_hexdump(2, "IE", v12, v13);
    if ( v19 == 2 )
    {
      v25 = 18;
    }
    else if ( v19 == 3 )
    {
      v25 = 19;
    }
    else
    {
      v26 = 13;
      if ( v19 == 4 )
      {
        v25 = 20;
      }
      else
      {
        if ( v19 == 8 )
          v26 = 24;
        v25 = v26;
      }
    }
    goto fail;
  }
  if ( (v15->flags & 0x402) != 1026
    || v15->sa_query_timed_out
    || v15->sa_query_count > 0
    && ((ap_check_sa_query_timeout(hapd, v15), (v15->flags & 0x402) != 1026) || v15->sa_query_timed_out)
    || v15->auth_alg == 2 )
  {
    if ( wpa_auth_uses_mfp(v15->wpa_sm) )
      v20 = v15->flags | 0x400;
    else
      v20 = v15->flags & 0xFFFFFBFF;
    v15->flags = v20;
LABEL_24:
    v21 = v15->flags & 2;
    v15->flags = v15->flags & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v15);
    if ( reassoc && v15->auth_alg == 2 )
    {
      wpa_auth_sm_event(v15->wpa_sm, WPA_ASSOC_FT);
      v22 = v21 != 0;
    }
    else
    {
      wpa_auth_sm_event(v15->wpa_sm, WPA_ASSOC);
      v22 = v21 != 0;
    }
    hostapd_new_assoc_sta(hapd, v15, v22);
    ieee802_1x_notify_port_enabled(v15->eapol_sm, 1);
    return 0;
  }
  if ( !v15->sa_query_count )
    ap_sta_start_sa_query(hapd, v15);
  v27 = hostapd_eid_assoc_comeback_time(hapd, v15, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v27 - buf);
  return 0;
}
