int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v7; // w23
  const u8 *v11; // x22
  size_t v12; // x23
  sta_info *v13; // x0
  sta_info *v14; // x19
  int v15; // w2
  __int64 v16; // x2
  __int64 v17; // x3
  __int64 v18; // x4
  bool v19; // zf
  wpa_state_machine *v20; // x1
  unsigned int v21; // w0
  unsigned int v22; // w26
  int v23; // w22
  u8 *v24; // x0
  int v25; // w0
  u32 v26; // w1
  unsigned int v27; // w1
  int v28; // w20
  wpa_event v29; // w1
  ieee802_11_elems elems; // [xsp+68h] [xbp+58h] BYREF
  u8 buf[1064]; // [xsp+2F0h] [xbp+2E0h] BYREF

  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return -1;
  }
  v7 = *addr;
  if ( (v7 & 1) != 0
    || !((unsigned __int8)(addr[2] | addr[3] | v7 | addr[1]) | (unsigned __int8)(addr[4] | addr[5]))
    || !memcmp(addr, hapd->own_addr, 6uLL) )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      (const char *)_func___14476,
      v7,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    return 0;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v11 = elems.wps_ie - 2;
    v12 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v11 = elems.rsn_ie - 2;
    v12 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    v11 = elems.wpa_ie - 2;
    v12 = elems.wpa_ie_len + 2LL;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v12 = 0LL;
    v11 = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  v13 = ap_get_sta(hapd, addr);
  v14 = v13;
  if ( v13 )
  {
    ap_sta_no_session_timeout(hapd, v13);
    accounting_sta_stop(hapd, v14);
    v14->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v14 = ap_sta_add(hapd, addr);
    if ( !v14 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v14->flags &= 0xFFFECFFF;
  if ( !hapd->iface->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v15 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v14->addr, v15);
    ap_free_sta(hapd, v14);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v14, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
LABEL_55:
    v28 = v14->flags & 2;
    v14->flags = v14->flags & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v14);
    if ( !reassoc || (v29 = WPA_ASSOC_FT, v14->auth_alg != 2) )
      v29 = WPA_ASSOC;
    wpa_auth_sm_event(v14->wpa_sm, v29);
    hostapd_new_assoc_sta(hapd, v14, v28 != 0);
    ieee802_1x_notify_port_enabled(v14->eapol_sm, 1);
    return 0;
  }
  if ( v11 )
    v19 = v12 == 0;
  else
    v19 = 1;
  if ( v19 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v15 = 13;
    goto fail;
  }
  if ( !v14->wpa_sm )
    v14->wpa_sm = wpa_auth_sta_init(hapd->wpa_auth, v14->addr, 0LL);
  v20 = v14->wpa_sm;
  if ( !v20 )
  {
    wpa_printf(5, "Failed to initialize WPA state machine", v16, v17, v18);
    return -1;
  }
  v21 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v20,
          hapd->iface->freq,
          v11,
          v12,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v22 = v21;
  if ( v21 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v21);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v11, v12);
    v15 = 18;
    if ( v22 != 2 )
    {
      v15 = 19;
      if ( v22 != 3 )
      {
        v15 = 20;
        if ( v22 != 4 )
        {
          if ( v22 == 8 )
            v15 = 24;
          else
            v15 = 13;
        }
      }
    }
    goto fail;
  }
  if ( (v14->flags & 0x402) == 1026 && !v14->sa_query_timed_out && v14->sa_query_count > 0 )
    ap_check_sa_query_timeout(hapd, v14);
  if ( (v14->flags & 0x402) != 1026 || (v23 = v14->sa_query_timed_out) != 0 || v14->auth_alg == 2 )
  {
    v25 = wpa_auth_uses_mfp(v14->wpa_sm);
    v26 = v14->flags;
    if ( v25 )
      v27 = v26 | 0x400;
    else
      v27 = v26 & 0xFFFFFBFF;
    v14->flags = v27;
    goto LABEL_55;
  }
  if ( !v14->sa_query_count )
    ap_sta_start_sa_query(hapd, v14);
  v24 = hostapd_eid_assoc_comeback_time(hapd, v14, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v24 - buf);
  return v23;
}
