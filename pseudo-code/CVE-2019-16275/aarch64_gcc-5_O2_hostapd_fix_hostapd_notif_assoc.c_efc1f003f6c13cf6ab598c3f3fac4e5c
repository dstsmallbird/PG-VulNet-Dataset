int __fastcall hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  unsigned int v7; // w21
  unsigned int v8; // w27
  unsigned int v9; // w28
  __int64 v10; // x6
  __int64 v11; // x7
  int v12; // w26
  int v16; // w0
  int v17; // w23
  const u8 *v19; // x24
  size_t v20; // x23
  sta_info *v21; // x0
  sta_info *v22; // x21
  hostapd_iface *v23; // x1
  bool v24; // zf
  wpa_state_machine *v25; // x1
  unsigned int v26; // w0
  unsigned int v27; // w26
  int v28; // w0
  u32 v29; // w2
  unsigned int v30; // w2
  int v31; // w19
  u8 *v32; // x0
  wpa_state_machine *v33; // x0
  int v34; // w2
  unsigned int v35; // [xsp+78h] [xbp+68h]
  unsigned int v36; // [xsp+7Ch] [xbp+6Ch]
  ieee802_11_elems elems; // [xsp+88h] [xbp+78h] BYREF
  u8 buf[1064]; // [xsp+310h] [xbp+300h] BYREF

  if ( !addr )
  {
    v17 = -1;
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address", req_ies, req_ies_len, reassoc);
    return v17;
  }
  v7 = *addr;
  v8 = addr[1];
  v9 = addr[2];
  v10 = addr[3];
  v11 = addr[4];
  v12 = addr[5];
  if ( (v7 & 1) != 0
    || !(v7 | v8 | v9 | (unsigned int)v10 | (unsigned int)v11 | v12)
    || (v35 = addr[4], v36 = addr[3], v16 = memcmp(addr, hapd->own_addr, 6uLL), v11 = v35, v10 = v36, !v16) )
  {
    v17 = 0;
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      (const char *)_func___14564,
      v7,
      v8,
      v9,
      v10,
      v11,
      v12);
    return v17;
  }
  random_add_randomness(addr, 6uLL);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    v19 = elems.wps_ie - 2;
    v20 = elems.wps_ie_len + 2LL;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
  }
  else if ( elems.rsn_ie )
  {
    v19 = elems.rsn_ie - 2;
    v20 = elems.rsn_ie_len + 2LL;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
  }
  else if ( elems.wpa_ie )
  {
    v19 = elems.wpa_ie - 2;
    v20 = elems.wpa_ie_len + 2LL;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
  }
  else
  {
    v20 = 0LL;
    v19 = 0LL;
    wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  }
  v21 = ap_get_sta(hapd, addr);
  v22 = v21;
  if ( v21 )
  {
    ap_sta_no_session_timeout(hapd, v21);
    accounting_sta_stop(hapd, v22);
    v22->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v22 = ap_sta_add(hapd, addr);
    if ( !v22 )
    {
      v17 = -1;
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return v17;
    }
  }
  v23 = hapd->iface;
  v22->flags &= 0xFFFECFFF;
  if ( !v23->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0LL) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v34 = 1;
fail:
    v17 = -1;
    hostapd_drv_sta_disassoc(hapd, v22->addr, v34);
    ap_free_sta(hapd, v22);
    return v17;
  }
  ap_copy_sta_supp_op_classes(v22, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v30 = v22->flags;
    goto LABEL_23;
  }
  if ( v19 )
    v24 = v20 == 0;
  else
    v24 = 1;
  if ( v24 )
  {
    wpa_printf(2, "No WPA/RSN IE from STA");
    v34 = 13;
    goto fail;
  }
  v25 = v22->wpa_sm;
  if ( !v25 )
  {
    v33 = wpa_auth_sta_init(hapd->wpa_auth, v22->addr, 0LL);
    v22->wpa_sm = v33;
    v25 = v33;
    if ( !v33 )
    {
      v17 = -1;
      wpa_printf(5, "Failed to initialize WPA state machine");
      return v17;
    }
  }
  v26 = wpa_validate_wpa_ie(
          hapd->wpa_auth,
          v25,
          hapd->iface->freq,
          v19,
          v20,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  v27 = v26;
  if ( v26 )
  {
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v26);
    wpa_hexdump(2, (const unsigned __int8 *)"IE", v19, v20);
    switch ( v27 )
    {
      case 2u:
        v34 = 18;
        break;
      case 3u:
        v34 = 19;
        break;
      case 4u:
        v34 = 20;
        break;
      case 8u:
        v34 = 24;
        break;
      default:
        v34 = 13;
        break;
    }
    goto fail;
  }
  if ( (v22->flags & 0x402) == 1026 )
  {
    v17 = v22->sa_query_timed_out;
    if ( !v17 )
    {
      if ( v22->sa_query_count <= 0
        || (ap_check_sa_query_timeout(hapd, v22), (v22->flags & 0x402) == 1026) && !v22->sa_query_timed_out )
      {
        if ( v22->auth_alg != 2 )
        {
          if ( !v22->sa_query_count )
            ap_sta_start_sa_query(hapd, v22);
          v32 = hostapd_eid_assoc_comeback_time(hapd, v22, buf);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v32 - buf);
          return v17;
        }
      }
    }
  }
  v28 = wpa_auth_uses_mfp(v22->wpa_sm);
  v29 = v22->flags;
  if ( v28 )
    v30 = v29 | 0x400;
  else
    v30 = v29 & 0xFFFFFBFF;
LABEL_23:
  v22->flags = v30 & 0xFFF7FFFF | 3;
  v31 = v30 & 2;
  hostapd_set_sta_flags(hapd, v22);
  if ( reassoc && v22->auth_alg == 2 )
    wpa_auth_sm_event(v22->wpa_sm, WPA_ASSOC_FT);
  else
    wpa_auth_sm_event(v22->wpa_sm, WPA_ASSOC);
  v17 = 0;
  hostapd_new_assoc_sta(hapd, v22, v31 != 0);
  ieee802_1x_notify_port_enabled(v22->eapol_sm, 1);
  return v17;
}
