int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  int v5; // edx
  u8 v6; // di
  sta_info *v7; // eax
  sta_info *v8; // edi
  hostapd_iface *v9; // eax
  wpa_state_machine *v10; // eax
  wpa_authenticator *v11; // ecx
  int v12; // eax
  int v13; // edx
  bool v14; // zf
  u32 v15; // eax
  int v16; // esi
  wpa_state_machine *v17; // eax
  u8 *v20; // ecx
  u8 *v21; // eax
  int v22; // ecx
  int v23; // eax
  u8 p; // [esp+1Ch] [ebp-5C0h]
  u8 *pa; // [esp+1Ch] [ebp-5C0h]
  u8 *pb; // [esp+1Ch] [ebp-5C0h]
  u8 *pc; // [esp+1Ch] [ebp-5C0h]
  u8 ielen; // [esp+20h] [ebp-5BCh]
  int ielena; // [esp+20h] [ebp-5BCh]
  int ielenb; // [esp+20h] [ebp-5BCh]
  char res; // [esp+24h] [ebp-5B8h]
  int resa; // [esp+24h] [ebp-5B8h]
  ieee802_11_elems elems; // [esp+38h] [ebp-5A4h] BYREF
  u8 buf[1064]; // [esp+194h] [ebp-448h] BYREF
  unsigned int v35; // [esp+5BCh] [ebp-20h]

  v35 = __readgsdword(0x14u);
  if ( !addr )
  {
    wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
    return -1;
  }
  v5 = *addr;
  v6 = addr[4];
  p = addr[2];
  ielen = addr[3];
  if ( (v5 & 1) != 0
    || !(addr[5] | (unsigned __int8)(v6 | ielen | p | v5 | addr[1]))
    || *(_DWORD *)addr == *(_DWORD *)hapd->own_addr && *((_WORD *)addr + 2) == *(_WORD *)&hapd->own_addr[4] )
  {
    wpa_printf(
      2,
      "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
      "hostapd_notif_assoc",
      v5,
      addr[1],
      p,
      ielen,
      v6,
      addr[5]);
    return 0;
  }
  random_add_randomness(addr, 6u);
  hostapd_logger(hapd, addr, 1u, 2, "associated");
  ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
  if ( elems.wps_ie )
  {
    pa = (u8 *)(elems.wps_ie - 2);
    ielena = elems.wps_ie_len + 2;
    wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
LABEL_7:
    res = 0;
    goto LABEL_8;
  }
  if ( elems.rsn_ie )
  {
    pa = (u8 *)(elems.rsn_ie - 2);
    ielena = elems.rsn_ie_len + 2;
    wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    goto LABEL_7;
  }
  pa = (u8 *)elems.wpa_ie;
  if ( elems.wpa_ie )
  {
    pa = (u8 *)(elems.wpa_ie - 2);
    ielena = elems.wpa_ie_len + 2;
    wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    goto LABEL_7;
  }
  wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
  res = 1;
  ielena = 0;
LABEL_8:
  v7 = ap_get_sta(hapd, addr);
  v8 = v7;
  if ( v7 )
  {
    ap_sta_no_session_timeout(hapd, v7);
    accounting_sta_stop(hapd, v8);
    v8->timeout_next = STA_NULLFUNC;
  }
  else
  {
    v8 = ap_sta_add(hapd, addr);
    if ( !v8 )
    {
      hostapd_drv_sta_disassoc(hapd, addr, 5);
      return -1;
    }
  }
  v9 = hapd->iface;
  v8->flags &= 0xFFFECFFF;
  if ( !v9->drv_max_acl_mac_addrs && hostapd_check_acl(hapd, addr, 0) != 1 )
  {
    wpa_printf(
      3,
      "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
      *addr,
      addr[1],
      addr[2],
      addr[3],
      addr[4],
      addr[5]);
    v23 = 1;
fail:
    hostapd_drv_sta_disassoc(hapd, v8->addr, v23);
    ap_free_sta(hapd, v8);
    return -1;
  }
  ap_copy_sta_supp_op_classes(v8, elems.supp_op_classes, elems.supp_op_classes_len);
  if ( !hapd->conf->wpa )
  {
    v15 = v8->flags;
LABEL_20:
    v16 = v15 & 2;
    v8->flags = v15 & 0xFFF7FFFF | 3;
    hostapd_set_sta_flags(hapd, v8);
    v17 = v8->wpa_sm;
    if ( reassoc && v8->auth_alg == 2 )
      wpa_auth_sm_event(v17, WPA_ASSOC_FT);
    else
      wpa_auth_sm_event(v17, WPA_ASSOC);
    hostapd_new_assoc_sta(hapd, v8, v16 != 0);
    ieee802_1x_notify_port_enabled(v8->eapol_sm, 1);
    return 0;
  }
  if ( !pa || res )
  {
    wpa_printf(2, "No WPA/RSN IE from STA", addr, addr);
    v23 = 13;
    goto fail;
  }
  v10 = v8->wpa_sm;
  v11 = hapd->wpa_auth;
  if ( !v10 )
  {
    v10 = wpa_auth_sta_init(v11, v8->addr, 0);
    v8->wpa_sm = v10;
    if ( !v10 )
    {
      wpa_printf(5, "Failed to initialize WPA state machine", v22, v22);
      return -1;
    }
    v11 = hapd->wpa_auth;
  }
  v12 = wpa_validate_wpa_ie(
          v11,
          v10,
          hapd->iface->freq,
          pa,
          ielena,
          elems.mdie,
          elems.mdie_len,
          elems.owe_dh,
          elems.owe_dh_len);
  if ( v12 )
  {
    resa = v12;
    wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v12, v13);
    wpa_hexdump(2, "IE", pa, ielena);
    switch ( resa )
    {
      case 2:
        v23 = 18;
        break;
      case 3:
        v23 = 19;
        break;
      case 4:
        v23 = 20;
        break;
      default:
        v23 = 24;
        if ( resa != 8 )
          v23 = 13;
        break;
    }
    goto fail;
  }
  if ( (v8->flags & 0x402) != 1026
    || (v20 = (u8 *)v8->sa_query_timed_out) != 0
    || v8->sa_query_count > 0
    && ((pb = (u8 *)v8->sa_query_timed_out, ap_check_sa_query_timeout(hapd, v8), (v8->flags & 0x402) != 1026)
     || (v20 = pb, v8->sa_query_timed_out))
    || v8->auth_alg == 2 )
  {
    v14 = wpa_auth_uses_mfp(v8->wpa_sm) == 0;
    v15 = v8->flags;
    if ( v14 )
      BYTE1(v15) &= 0xFBu;
    else
      BYTE1(v15) |= 4u;
    goto LABEL_20;
  }
  if ( !v8->sa_query_count )
  {
    pc = v20;
    ap_sta_start_sa_query(hapd, v8);
    v20 = pc;
  }
  ielenb = (int)v20;
  v21 = hostapd_eid_assoc_comeback_time(hapd, v8, buf);
  hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, buf, v21 - buf);
  return ielenb;
}
