int __cdecl hostapd_notif_assoc(hostapd_data *hapd, const u8 *addr, const u8 *req_ies, size_t req_ies_len, int reassoc)
{
  const u8 *v6; // ebx
  hostapd_data *v7; // ebp
  sta_info *v8; // eax
  sta_info *v9; // edi
  int v10; // ebx
  wpa_state_machine *v11; // eax
  int v12; // eax
  int v13; // esi
  int v14; // eax
  int v15; // eax
  unsigned int v16; // ecx
  u32 v17; // esi
  u8 *v18; // eax
  int wpa_ie_len; // [esp+Ch] [ebp-5A0h]
  u8 *wpa_ie; // [esp+14h] [ebp-598h]
  ieee802_11_elems elems; // [esp+18h] [ebp-594h] BYREF
  u8 eid[1080]; // [esp+174h] [ebp-438h] BYREF

  if ( addr )
  {
    if ( is_multicast_ether_addr(addr)
      || is_zero_ether_addr_0(addr)
      || !(*(_DWORD *)hapd->own_addr ^ *(_DWORD *)addr | (unsigned __int16)(*(_WORD *)&hapd->own_addr[4] ^ *((_WORD *)addr + 2))) )
    {
      wpa_printf(
        2,
        "%s: Invalid SA=%02x:%02x:%02x:%02x:%02x:%02x in received indication - ignore this indication silently",
        "hostapd_notif_assoc",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      return 0;
    }
    random_add_randomness(addr, 6u);
    hostapd_logger(hapd, addr, 1u, 2, "associated");
    ieee802_11_parse_elems(req_ies, req_ies_len, &elems, 0);
    if ( elems.wps_ie )
    {
      v6 = elems.wps_ie - 2;
      wpa_ie_len = elems.wps_ie_len + 2;
      wpa_printf(2, "STA included WPS IE in (Re)AssocReq");
    }
    else if ( elems.rsn_ie )
    {
      v6 = elems.rsn_ie - 2;
      wpa_ie_len = elems.rsn_ie_len + 2;
      wpa_printf(2, "STA included RSN IE in (Re)AssocReq");
    }
    else if ( elems.wpa_ie )
    {
      v6 = elems.wpa_ie - 2;
      wpa_ie_len = elems.wpa_ie_len + 2;
      wpa_printf(2, "STA included WPA IE in (Re)AssocReq");
    }
    else
    {
      wpa_printf(2, "STA did not include WPS/RSN/WPA IE in (Re)AssocReq");
      v6 = 0;
      wpa_ie_len = 0;
    }
    v7 = hapd;
    v8 = ap_get_sta(hapd, addr);
    if ( v8 )
    {
      v9 = v8;
      ap_sta_no_session_timeout(hapd, v8);
      accounting_sta_stop(hapd, v9);
      v9->timeout_next = STA_NULLFUNC;
    }
    else
    {
      v9 = ap_sta_add(hapd, addr);
      if ( !v9 )
      {
        hostapd_drv_sta_disassoc(hapd, addr, 5);
        return -1;
      }
    }
    v9->flags &= 0xFFFECFFF;
    if ( hapd->iface->drv_max_acl_mac_addrs || hostapd_check_acl(hapd, addr, 0) == 1 )
    {
      wpa_ie = (u8 *)v6;
      v10 = reassoc;
      ap_copy_sta_supp_op_classes(v9, elems.supp_op_classes, elems.supp_op_classes_len);
      if ( !hapd->conf->wpa )
      {
LABEL_42:
        v17 = v9->flags;
        v9->flags = v17 & 0xFFF7FFFC | 3;
        hostapd_set_sta_flags(v7, v9);
        if ( v10 && v9->auth_alg == 2 )
          wpa_auth_sm_event(v9->wpa_sm, WPA_ASSOC_FT);
        else
          wpa_auth_sm_event(v9->wpa_sm, WPA_ASSOC);
        hostapd_new_assoc_sta(v7, v9, (v17 >> 1) & 1);
        ieee802_1x_notify_port_enabled(v9->eapol_sm, 1);
        return 0;
      }
      if ( wpa_ie && wpa_ie_len )
      {
        v11 = v9->wpa_sm;
        if ( !v11 )
        {
          v11 = wpa_auth_sta_init(hapd->wpa_auth, v9->addr, 0);
          v9->wpa_sm = v11;
          if ( !v11 )
          {
            wpa_printf(5, "Failed to initialize WPA state machine");
            return -1;
          }
        }
        v12 = wpa_validate_wpa_ie(
                hapd->wpa_auth,
                v11,
                hapd->iface->freq,
                wpa_ie,
                wpa_ie_len,
                elems.mdie,
                elems.mdie_len,
                elems.owe_dh,
                elems.owe_dh_len);
        if ( v12 )
        {
          v13 = v12;
          wpa_printf(2, "WPA/RSN information element rejected? (res %u)", v12);
          wpa_hexdump(2, "IE", wpa_ie, wpa_ie_len);
          v14 = 13;
          if ( (unsigned int)(v13 - 2) < 7 )
            v14 = (int)*(&off_80C1AF8 + v13);
          goto LABEL_30;
        }
        v7 = hapd;
        if ( (v9->flags & 0x402) == 1026 && !v9->sa_query_timed_out && v9->sa_query_count > 0 )
          ap_check_sa_query_timeout(hapd, v9);
        if ( (v9->flags & 0x402) == 1026 && !v9->sa_query_timed_out && v9->auth_alg != 2 )
        {
          if ( !v9->sa_query_count )
            ap_sta_start_sa_query(hapd, v9);
          v18 = hostapd_eid_assoc_comeback_time(hapd, v9, eid);
          hostapd_sta_assoc(hapd, addr, reassoc, 0x1Eu, eid, v18 - eid);
          return 0;
        }
        v15 = wpa_auth_uses_mfp(v9->wpa_sm);
        v16 = v9->flags & 0xFFFFFBFF;
        if ( v15 )
          v16 = v9->flags | 0x400;
        v9->flags = v16;
        v10 = reassoc;
        goto LABEL_42;
      }
      wpa_printf(2, "No WPA/RSN IE from STA");
      v14 = 13;
    }
    else
    {
      wpa_printf(
        3,
        "STA %02x:%02x:%02x:%02x:%02x:%02x not allowed to connect",
        *addr,
        addr[1],
        addr[2],
        addr[3],
        addr[4],
        addr[5]);
      v14 = 1;
    }
LABEL_30:
    hostapd_drv_sta_disassoc(hapd, v9->addr, v14);
    ap_free_sta(hapd, v9);
    return -1;
  }
  wpa_printf(2, "hostapd_notif_assoc: Skip event with no address");
  return -1;
}
