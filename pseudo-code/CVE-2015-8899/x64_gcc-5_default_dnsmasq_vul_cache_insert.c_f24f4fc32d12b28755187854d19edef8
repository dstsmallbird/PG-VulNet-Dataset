__int64 __fastcall cache_insert(char *src, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  __int64 result; // rax
  int v10; // ecx
  int v11; // er8
  unsigned __int64 v12; // rax
  int v13; // er9
  int v14; // er10
  __int64 v15; // rbx
  unsigned __int16 v16; // ax
  __int64 v17; // rdi
  __int64 v18; // rdi
  __int64 v19; // rax
  __int64 *v20; // rdx
  __int64 v21; // rcx
  __int16 v22; // r8
  char *v23; // rdi
  __int64 v24; // rdx
  __int64 v25; // rax
  _BYTE *v26; // rax
  int v27; // [rsp+4h] [rbp-64h]
  __int64 v28[11]; // [rsp+10h] [rbp-58h] BYREF

  v28[3] = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, src, a2, 0LL);
    v12 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( a4 <= v12 || !v12 )
      v12 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( !a4 || v12 >= a4 )
      a4 = v12;
  }
  result = 0LL;
  if ( !insert_error )
  {
    result = cache_scan_free(src, a2, a3, a5);
    if ( result )
    {
      if ( (a5 & 0x180) != 0
        && (a5 & 8) != 0
        && ((a5 & 0x80u) != 0 && *(char *)(result + 52) < 0 && *(_DWORD *)(result + 24) == *a2
         || (a5 & 0x100) != 0
         && (*(_BYTE *)(result + 53) & 1) != 0
         && *(_DWORD *)(result + 24) == *a2
         && *(_DWORD *)(result + 28) == a2[1]
         && *(_DWORD *)(result + 32) == a2[2]
         && *(_DWORD *)(result + 36) == a2[3]) )
      {
        return result;
      }
LABEL_12:
      insert_error = 1;
      return 0LL;
    }
    v13 = 0;
    v14 = a5 & 4;
LABEL_21:
    v15 = cache_tail;
    if ( !cache_tail )
      goto LABEL_12;
    while ( 1 )
    {
      v16 = *(_WORD *)(v15 + 52);
      if ( (v16 & 0xC) == 0 )
        break;
      if ( v13 )
      {
        if ( !warned_8730 )
        {
          my_syslog(3, (unsigned int)"Internal error in cache.", warned_8730, v10, v11, v13);
          warned_8730 = 1;
        }
        goto LABEL_12;
      }
      if ( !v14 )
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v14 = 1;
        v13 = 0;
        goto LABEL_21;
      }
      v17 = *(_QWORD *)(v15 + 32);
      v28[0] = *(_QWORD *)(v15 + 24);
      v28[1] = v17;
      if ( (v16 & 0x200) != 0 || (v18 = v15 + 56, (v16 & 2) != 0) )
        v18 = *(_QWORD *)(v15 + 56);
      v27 = v14;
      cache_scan_free(v18, v28, a3, v16);
      v15 = cache_tail;
      ++cache_live_freed;
      v13 = 1;
      v14 = v27;
      if ( !cache_tail )
        goto LABEL_12;
    }
    if ( src && strlen(src) > 0x31 )
    {
      v19 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_12;
        v19 = whine_malloc(1032LL);
        if ( !v19 )
          goto LABEL_12;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v19 = 0LL;
    }
    v20 = *(__int64 **)(v15 + 8);
    v21 = *(_QWORD *)v15;
    if ( v20 )
    {
      *v20 = v21;
      v21 = *(_QWORD *)v15;
    }
    else
    {
      cache_head = *(_QWORD *)v15;
    }
    if ( v21 )
      *(_QWORD *)(v21 + 8) = v20;
    else
      cache_tail = (__int64)v20;
    *(_WORD *)(v15 + 52) = a5;
    if ( v19 )
    {
      *(_QWORD *)(v15 + 56) = v19;
      v22 = a5 | 0x200;
      *(_WORD *)(v15 + 52) = a5 | 0x200;
    }
    else
    {
      v22 = a5;
    }
    if ( src )
    {
      if ( (v22 & 0x200) != 0 || (v23 = (char *)(v15 + 56), (v22 & 2) != 0) )
        v23 = *(char **)(v15 + 56);
      strcpy(v23, src);
    }
    else
    {
      if ( (v22 & 0x200) != 0 || (v26 = (_BYTE *)(v15 + 56), (v22 & 2) != 0) )
        v26 = *(_BYTE **)(v15 + 56);
      *v26 = 0;
    }
    if ( a2 )
    {
      v24 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(v15 + 24) = *(_QWORD *)a2;
      *(_QWORD *)(v15 + 32) = v24;
    }
    v25 = new_chain;
    new_chain = v15;
    *(_QWORD *)(v15 + 40) = a4 + a3;
    *(_QWORD *)v15 = v25;
    result = v15;
  }
  return result;
}
