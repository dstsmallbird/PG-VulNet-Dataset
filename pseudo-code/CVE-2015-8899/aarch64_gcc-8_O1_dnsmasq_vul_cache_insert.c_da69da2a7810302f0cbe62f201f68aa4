__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v9; // w20
  int v10; // w22
  __int64 v11; // x19
  __int64 v12; // x0
  unsigned __int64 v14; // x0
  bool v15; // cf
  unsigned __int64 v17; // x0
  bool v18; // cc
  int v20; // w28
  __int64 v21; // x24
  unsigned int v22; // w27
  __int64 v23; // x1
  __int64 v24; // x0
  char *v25; // x0
  __int64 v26; // x1
  __int64 v27; // x0
  __int64 v28[2]; // [xsp+88h] [xbp+88h] BYREF

  v9 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    v14 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v14 )
      v15 = v14 >= a4;
    else
      v15 = 1;
    if ( !v15 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    v17 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( v17 )
      v18 = v17 > a4;
    else
      v18 = 0;
    if ( v18 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  v10 = insert_error;
  v11 = 0LL;
  if ( !insert_error )
  {
    v12 = cache_scan_free(a1, a2, a3, v9);
    v11 = v12;
    if ( v12 )
    {
      if ( (v9 & 0x180) == 0
        || (v9 & 8) == 0
        || ((v9 & 0x80) == 0 || (*(_WORD *)(v12 + 52) & 0x80) == 0 || *(_DWORD *)(v12 + 24) != *a2)
        && ((v9 & 0x100) == 0
         || (*(_WORD *)(v12 + 52) & 0x100) == 0
         || *(_DWORD *)(v12 + 24) != *a2
         || *(_DWORD *)(v12 + 28) != a2[1]
         || *(_DWORD *)(v12 + 32) != a2[2]
         || *(_DWORD *)(v12 + 36) != a2[3]) )
      {
        insert_error = 1;
        v11 = 0LL;
      }
      return v11;
    }
    v20 = v9 & 4;
    while ( 1 )
    {
      v21 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0LL;
      }
      v22 = *(unsigned __int16 *)(cache_tail + 52);
      if ( (v22 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_10207 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_10207 = 1;
        }
        insert_error = 1;
        return v11;
      }
      if ( v20 )
      {
        v23 = *(_QWORD *)(cache_tail + 32);
        v28[0] = *(_QWORD *)(cache_tail + 24);
        v28[1] = v23;
        v24 = cache_get_name(cache_tail);
        cache_scan_free(v24, v28, a3, v22);
        ++cache_live_freed;
        v10 = 1;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v10 = 0;
        v20 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      v11 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (v9 & 0x5000) == 0 || (v27 = whine_malloc(1032LL)) == 0 )
        {
          insert_error = 1;
          return v11;
        }
        v11 = v27;
        if ( bignames_left )
          --bignames_left;
      }
      cache_unlink(v21);
      *(_QWORD *)(v21 + 56) = v11;
      *(_WORD *)(v21 + 52) = v9 | 0x200;
    }
    else
    {
      cache_unlink(v21);
      *(_WORD *)(v21 + 52) = v9;
      if ( !a1 )
      {
        *(_BYTE *)cache_get_name(v21) = 0;
        goto LABEL_51;
      }
    }
    v25 = (char *)cache_get_name(v21);
    strcpy(v25, a1);
LABEL_51:
    if ( a2 )
    {
      v26 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(v21 + 24) = *(_QWORD *)a2;
      *(_QWORD *)(v21 + 32) = v26;
    }
    *(_QWORD *)(v21 + 40) = a4 + a3;
    *(_QWORD *)v21 = new_chain;
    new_chain = v21;
    v11 = v21;
  }
  return v11;
}
