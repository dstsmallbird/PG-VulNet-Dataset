__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  __int64 result; // rax
  int v6; // edx
  int v7; // ecx
  int v8; // er8
  int v9; // er9
  int v10; // eax
  __int64 v11; // rdx
  unsigned int v12; // ebx
  __int64 v13; // rax
  __int16 v14; // ax
  char *v15; // rax
  __int64 v16; // rdx
  int v20; // [rsp+38h] [rbp-58h]
  int v21; // [rsp+3Ch] [rbp-54h]
  __int64 v22; // [rsp+40h] [rbp-50h]
  __int64 v23; // [rsp+48h] [rbp-48h]
  __int64 v24; // [rsp+48h] [rbp-48h]
  __int64 v25[6]; // [rsp+60h] [rbp-30h] BYREF

  v25[3] = __readfsqword(0x28u);
  v22 = 0LL;
  v20 = a5 & 4;
  v21 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    if ( *((_QWORD *)dnsmasq_daemon + 57) && *((_QWORD *)dnsmasq_daemon + 57) < a4 )
      a4 = *((_QWORD *)dnsmasq_daemon + 57);
    if ( *((_QWORD *)dnsmasq_daemon + 56) && *((_QWORD *)dnsmasq_daemon + 56) > a4 )
      a4 = *((_QWORD *)dnsmasq_daemon + 56);
  }
  if ( insert_error )
    return 0LL;
  v23 = cache_scan_free(a1, a2, a3, a5);
  if ( v23 )
  {
    if ( (a5 & 0x180) == 0 || (a5 & 8) == 0 || !a2 )
      goto LABEL_28;
    if ( (a5 & 0x80) != 0 && (*(_WORD *)(v23 + 52) & 0x80) != 0 && *(_DWORD *)(v23 + 24) == *a2 )
      return v23;
    if ( (a5 & 0x100) != 0
      && (*(_WORD *)(v23 + 52) & 0x100) != 0
      && (*(_DWORD *)(v23 + 24) != *a2
       || *(_DWORD *)(v23 + 28) != a2[1]
       || *(_DWORD *)(v23 + 32) != a2[2]
       || *(_DWORD *)(v23 + 36) != a2[3] ? (v10 = 0) : (v10 = 1),
          v10) )
    {
      result = v23;
    }
    else
    {
LABEL_28:
      insert_error = 1;
      result = 0LL;
    }
  }
  else
  {
    while ( 1 )
    {
      v24 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0LL;
      }
      if ( (*(_WORD *)(cache_tail + 52) & 0xC) == 0 )
        break;
      if ( v21 )
      {
        if ( !warned_7808 )
        {
          my_syslog(3, (unsigned int)"Internal error in cache.", v6, v7, v8, v9);
          warned_7808 = 1;
        }
        insert_error = 1;
        return 0LL;
      }
      if ( v20 )
      {
        v11 = *(_QWORD *)(cache_tail + 32);
        v25[0] = *(_QWORD *)(cache_tail + 24);
        v25[1] = v11;
        v21 = 1;
        v12 = *(unsigned __int16 *)(cache_tail + 52);
        v13 = cache_get_name(cache_tail);
        cache_scan_free(v13, v25, a3, v12);
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v20 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      if ( big_free )
      {
        v22 = big_free;
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v22 = whine_malloc(1032LL)) == 0 )
        {
          insert_error = 1;
          return 0LL;
        }
        if ( bignames_left )
          --bignames_left;
      }
    }
    cache_unlink(v24);
    *(_WORD *)(v24 + 52) = a5;
    if ( v22 )
    {
      *(_QWORD *)(v24 + 56) = v22;
      v14 = *(_WORD *)(v24 + 52);
      HIBYTE(v14) |= 2u;
      *(_WORD *)(v24 + 52) = v14;
    }
    if ( a1 )
    {
      v15 = (char *)cache_get_name(v24);
      strcpy(v15, a1);
    }
    else
    {
      *(_BYTE *)cache_get_name(v24) = 0;
    }
    if ( a2 )
    {
      v16 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(v24 + 24) = *(_QWORD *)a2;
      *(_QWORD *)(v24 + 32) = v16;
    }
    *(_QWORD *)(v24 + 40) = a3 + a4;
    *(_QWORD *)v24 = new_chain;
    new_chain = v24;
    result = v24;
  }
  return result;
}
