__int64 __fastcall cache_insert(const char *a1, void *cp, time_t time1, unsigned __int64 a4, unsigned __int16 a5)
{
  int v10; // w24
  __int64 v11; // x0
  __int64 v12; // x19
  unsigned __int64 v14; // x0
  bool v15; // cf
  bool v16; // cc
  int v17; // w5
  __int16 v18; // w3
  __int64 v19; // x1
  __int64 v20; // x0
  __int64 v21; // x0
  __int64 v22; // x1
  __int64 *v23; // x2
  char *v24; // x0
  __int64 v25; // x1
  _BYTE *v26; // x0
  int v27; // [xsp+6Ch] [xbp+6Ch]
  __int64 v28[2]; // [xsp+78h] [xbp+78h] BYREF

  if ( (a5 & 0x980) == 0 )
  {
    v10 = insert_error;
    if ( !insert_error )
      goto LABEL_3;
    return 0LL;
  }
  log_query(a5 | 0x10000, (int)a1, cp);
  v10 = insert_error;
  v14 = *(_QWORD *)(dnsmasq_daemon + 456);
  if ( v14 )
    v15 = v14 >= a4;
  else
    v15 = 1;
  if ( v15 )
    v14 = a4;
  a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  if ( a4 )
    v16 = a4 > v14;
  else
    v16 = 0;
  if ( !v16 )
    a4 = v14;
  if ( insert_error )
    return 0LL;
LABEL_3:
  v11 = cache_scan_free((int)a1, (int)cp, time1);
  v12 = v11;
  if ( !v11 )
  {
    v17 = a5 & 4;
    while ( 1 )
    {
      v12 = cache_tail;
      if ( !cache_tail )
        goto LABEL_14;
      v18 = *(_WORD *)(cache_tail + 52);
      if ( (v18 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_9978 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_9978 = 1;
        }
        goto LABEL_14;
      }
      if ( v17 )
      {
        v19 = *(_QWORD *)(cache_tail + 32);
        v28[0] = *(_QWORD *)(cache_tail + 24);
        v28[1] = v19;
        if ( (v18 & 0x200) != 0 || (LODWORD(v20) = cache_tail + 56, (v18 & 2) != 0) )
          v20 = *(_QWORD *)(cache_tail + 56);
        v27 = v17;
        v10 = 1;
        cache_scan_free(v20, (int)v28, time1);
        v17 = v27;
        ++cache_live_freed;
      }
      else
      {
        v10 = 0;
        cache_scan_free(0, 0, time1);
        v17 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      v21 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_14;
        v21 = whine_malloc(1032LL);
        if ( !v21 )
          goto LABEL_14;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v21 = 0LL;
    }
    v22 = *(_QWORD *)v12;
    v23 = *(__int64 **)(v12 + 8);
    if ( v23 )
    {
      *v23 = v22;
      v22 = *(_QWORD *)v12;
    }
    else
    {
      cache_head = *(_QWORD *)v12;
    }
    if ( v22 )
      *(_QWORD *)(v22 + 8) = v23;
    else
      cache_tail = (__int64)v23;
    *(_WORD *)(v12 + 52) = a5;
    if ( v21 )
    {
      *(_WORD *)(v12 + 52) = a5 | 0x200;
      *(_QWORD *)(v12 + 56) = v21;
      if ( a1 )
      {
LABEL_53:
        v24 = *(char **)(v12 + 56);
LABEL_54:
        strcpy(v24, a1);
LABEL_55:
        if ( cp )
        {
          v25 = *((_QWORD *)cp + 1);
          *(_QWORD *)(v12 + 24) = *(_QWORD *)cp;
          *(_QWORD *)(v12 + 32) = v25;
        }
        *(_QWORD *)(v12 + 40) = a4 + time1;
        *(_QWORD *)v12 = new_chain;
        new_chain = v12;
        return v12;
      }
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 )
        {
          v24 = (char *)(v12 + 56);
          if ( (a5 & 2) == 0 )
            goto LABEL_54;
        }
        goto LABEL_53;
      }
      if ( (a5 & 0x200) == 0 )
      {
        v26 = (_BYTE *)(v12 + 56);
        if ( (a5 & 2) == 0 )
        {
LABEL_61:
          *v26 = 0;
          goto LABEL_55;
        }
      }
    }
    v26 = *(_BYTE **)(v12 + 56);
    goto LABEL_61;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 52) & 0x80) == 0 || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v11 + 52) & 0x100) == 0
     || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp
     || *(_DWORD *)(v11 + 28) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v11 + 32) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v11 + 36) != *((_DWORD *)cp + 3)) )
  {
LABEL_14:
    v12 = 0LL;
    insert_error = 1;
  }
  return v12;
}
