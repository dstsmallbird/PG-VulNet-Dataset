int __fastcall cache_insert(char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v5; // r1
  int v6; // r2
  int v7; // r3
  int v8; // r0
  char *v9; // r0
  _DWORD *v10; // r0
  int v11; // r2
  int v12; // r3
  int v13; // r12
  int v15; // [sp+8h] [bp-48h]
  int v16[5]; // [sp+Ch] [bp-44h] BYREF
  _DWORD *v17; // [sp+20h] [bp-30h]
  _DWORD *v18; // [sp+24h] [bp-2Ch]
  int v19; // [sp+28h] [bp-28h]
  int v20; // [sp+2Ch] [bp-24h]
  int v21; // [sp+30h] [bp-20h]
  int v22; // [sp+34h] [bp-1Ch]
  unsigned __int16 v23; // [sp+3Ah] [bp-16h]
  unsigned int v24; // [sp+3Ch] [bp-14h]
  int v25; // [sp+40h] [bp-10h]
  _DWORD *v26; // [sp+44h] [bp-Ch]
  char *s; // [sp+48h] [bp-8h]

  s = a1;
  v26 = a2;
  v25 = a3;
  v24 = a4;
  v23 = a5;
  v21 = 0;
  v20 = a5 & 4;
  v19 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(v23 | 0x10000, s, v26, 0);
    if ( *(_DWORD *)(dnsmasq_daemon + 252) && *(_DWORD *)(dnsmasq_daemon + 252) < v24 )
      v24 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( *(_DWORD *)(dnsmasq_daemon + 248) && *(_DWORD *)(dnsmasq_daemon + 248) > v24 )
      v24 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  if ( insert_error )
    return 0;
  v22 = cache_scan_free(s, v26, v25, v23);
  if ( v22 )
  {
    if ( (v23 & 0x180) != 0 && (v23 & 8) != 0 && v26 )
    {
      if ( (v23 & 0x80) != 0 && (*(_WORD *)(v22 + 36) & 0x80) != 0 && *(_DWORD *)(v22 + 12) == *v26 )
        return v22;
      if ( (v23 & 0x100) != 0 && (*(_WORD *)(v22 + 36) & 0x100) != 0 )
      {
        v18 = (_DWORD *)(v22 + 12);
        v17 = v26;
        LOBYTE(v15) = 0;
        if ( *(_DWORD *)(v22 + 12) == *v26 )
        {
          LOBYTE(v15) = 0;
          if ( v18[1] == v17[1] )
          {
            LOBYTE(v15) = 0;
            if ( v18[2] == v17[2] )
              v15 = v17[3] - v18[3] + (v18[3] == v17[3]) + v18[3] - v17[3];
          }
        }
        v16[4] = v15 & 1;
        if ( (v15 & 1) != 0 )
          return v22;
      }
    }
    insert_error = 1;
    return 0;
  }
  while ( 1 )
  {
    v22 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0;
    }
    if ( (*(_WORD *)(v22 + 36) & 0xC) == 0 )
      break;
    if ( v19 )
    {
      if ( !cache_insert_warned )
      {
        my_syslog(3, "Internal error in cache.");
        cache_insert_warned = 1;
      }
      insert_error = 1;
      return 0;
    }
    if ( v20 )
    {
      v5 = *(_DWORD *)(v22 + 12);
      v6 = *(_DWORD *)(v22 + 16);
      v7 = *(_DWORD *)(v22 + 20);
      v16[3] = *(_DWORD *)(v22 + 24);
      v16[2] = v7;
      v16[1] = v6;
      v16[0] = v5;
      v19 = 1;
      v8 = cache_get_name(v22);
      cache_scan_free(v8, v16, v25, *(unsigned __int16 *)(v22 + 36));
      ++cache_live_freed;
    }
    else
    {
      cache_scan_free(0, 0, v25, 0);
      v20 = 1;
    }
  }
  if ( s && strlen(s) >= 0x32 )
  {
    if ( big_free )
    {
      v21 = big_free;
      big_free = *(_DWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (v23 & 0x5000) == 0 || (v21 = whine_malloc(1028)) == 0 )
      {
        insert_error = 1;
        return 0;
      }
      if ( bignames_left )
        --bignames_left;
    }
  }
  cache_unlink(v22);
  *(_WORD *)(v22 + 36) = v23;
  if ( v21 )
  {
    *(_DWORD *)(v22 + 40) = v21;
    *(_WORD *)(v22 + 36) |= 0x200u;
  }
  if ( s )
  {
    v9 = (char *)cache_get_name(v22);
    strcpy(v9, s);
  }
  else
  {
    *(_BYTE *)cache_get_name(v22) = 0;
  }
  if ( v26 )
  {
    v10 = (_DWORD *)v22;
    v11 = *v26;
    v12 = v26[1];
    v13 = v26[2];
    *(_DWORD *)(v22 + 24) = v26[3];
    v10[5] = v13;
    v10[4] = v12;
    v10[3] = v11;
  }
  *(_DWORD *)(v22 + 28) = v25 + v24;
  *(_DWORD *)v22 = new_chain;
  new_chain = v22;
  return v22;
}
