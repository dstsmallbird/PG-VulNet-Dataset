int __cdecl cache_insert(char *s, int cp, time_t time1, int a4, __int16 a5)
{
  int v5; // ebx
  __int16 v6; // si
  unsigned int v7; // eax
  unsigned int v8; // edx
  int v9; // edi
  int v10; // eax
  int v11; // ebp
  int v12; // esi
  __int16 v13; // bx
  char *src; // ebp
  int v15; // ebp
  int *v16; // esi
  char *v17; // eax
  int v19; // eax
  int v20; // eax
  __int16 v21; // [esp+10h] [ebp-2Ch]
  int v22; // [esp+14h] [ebp-28h]

  v5 = a4;
  if ( (a5 & 0x980) != 0 )
  {
    v6 = a5;
    log_query((unsigned __int16)a5 + 0x10000, (int)s, (void *)cp, 0);
    v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    v8 = a4;
    if ( v7 < a4 )
      v8 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v7 )
      v8 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v8 )
      v8 = *(_DWORD *)(dnsmasq_daemon + 248);
    v5 = v8;
  }
  else
  {
    v6 = a5;
  }
  v9 = 0;
  if ( !insert_error )
  {
    v10 = cache_scan_free(time1, v6);
    if ( v10 )
    {
      if ( (v6 & 0x180) != 0 )
      {
        v9 = v10;
        if ( (v6 & 8) != 0
          && ((a5 & 0x80u) != 0 && *(char *)(v10 + 36) < 0 && *(_DWORD *)(v10 + 12) == *(_DWORD *)cp
           || (v6 & 0x100) != 0
           && (*(_BYTE *)(v10 + 37) & 1) != 0
           && *(_DWORD *)(v10 + 12) == *(_DWORD *)cp
           && *(_DWORD *)(v10 + 16) == *(_DWORD *)(cp + 4)
           && *(_DWORD *)(v10 + 20) == *(_DWORD *)(cp + 8)
           && *(_DWORD *)(v10 + 24) == *(_DWORD *)(cp + 12)) )
        {
          return v9;
        }
      }
LABEL_39:
      insert_error = 1;
      return 0;
    }
    v21 = v6;
    v22 = v5;
    v9 = cache_tail;
    if ( !cache_tail )
      goto LABEL_39;
    v11 = v6 & 4;
    v12 = 0;
    while ( 1 )
    {
      v13 = *(_WORD *)(v9 + 36);
      if ( (v13 & 0xC) == 0 )
        break;
      if ( v12 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        goto LABEL_39;
      }
      if ( v11 )
      {
        cache_get_name(v9);
        cache_scan_free(time1, v13);
        ++cache_live_freed;
        v12 = 1;
      }
      else
      {
        v12 = 0;
        cache_scan_free(time1, 0);
        v11 = 1;
      }
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_39;
    }
    src = s;
    if ( s && strlen(s) >= 0x32 )
    {
      v15 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !(bignames_left | v21 & 0x5000) )
          goto LABEL_39;
        v20 = whine_malloc(0x404u);
        if ( !v20 )
          goto LABEL_39;
        v15 = v20;
        if ( bignames_left )
          --bignames_left;
      }
      v16 = (int *)cp;
      cache_unlink(v9);
      *(_DWORD *)(v9 + 40) = v15;
      *(_WORD *)(v9 + 36) = a5 | 0x200;
      v17 = (char *)cache_get_name(v9);
      src = s;
    }
    else
    {
      cache_unlink(v9);
      *(_WORD *)(v9 + 36) = a5;
      v17 = (char *)cache_get_name(v9);
      if ( !s )
      {
        *v17 = 0;
        v16 = (int *)cp;
        goto LABEL_45;
      }
      v16 = (int *)cp;
    }
    strcpy(v17, src);
LABEL_45:
    if ( v16 )
    {
      *(_DWORD *)(v9 + 24) = v16[3];
      *(_DWORD *)(v9 + 20) = v16[2];
      v19 = *v16;
      *(_DWORD *)(v9 + 16) = v16[1];
      *(_DWORD *)(v9 + 12) = v19;
    }
    *(_DWORD *)(v9 + 28) = time1 + v22;
    *(_DWORD *)v9 = new_chain;
    new_chain = v9;
  }
  return v9;
}
