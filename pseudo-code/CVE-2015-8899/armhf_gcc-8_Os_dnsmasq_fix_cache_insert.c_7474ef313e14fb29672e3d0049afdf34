int __fastcall cache_insert(int a1, void *cp, int a3, int a4, __int16 a5)
{
  unsigned int v7; // r2
  unsigned int v8; // r3
  int v9; // r6
  int v10; // r4
  int v11; // r11
  int v12; // r5
  int v13; // r1
  int v14; // r2
  int v15; // r3
  int v16; // r0
  char *v17; // r0
  int v18; // r1
  int v19; // r2
  int v20; // r3
  int v21; // r2
  int v25; // [sp+Ch] [bp-4Ch]
  _DWORD v26[4]; // [sp+1Ch] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v7 && a4 >= v7 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    v8 = *(_DWORD *)(dnsmasq_daemon + 248);
    if ( v8 && a4 < v8 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  v9 = insert_error;
  if ( insert_error )
    goto LABEL_29;
  v10 = cache_scan_free(a1, cp, a3, (unsigned __int16)a5);
  if ( !v10 )
  {
    v11 = a5 & 4;
    while ( 1 )
    {
      v12 = cache_tail;
      if ( !cache_tail )
        goto LABEL_28;
      v25 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v25 & 0xC) == 0 )
      {
        if ( a1 )
        {
          if ( strlen((const char *)a1) > 0x31 )
          {
            v10 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_28;
              v10 = whine_malloc(1028);
              if ( !v10 )
                goto LABEL_28;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        else
        {
          v10 = 0;
        }
        cache_unlink(v12);
        *(_WORD *)(v12 + 36) = a5;
        if ( v10 )
        {
          *(_DWORD *)(v12 + 40) = v10;
          *(_WORD *)(v12 + 36) = a5 | 0x200;
        }
        v17 = (char *)cache_get_name(v12);
        if ( a1 )
          strcpy(v17, (const char *)a1);
        else
          *v17 = 0;
        if ( cp )
        {
          v18 = *((_DWORD *)cp + 1);
          v19 = *((_DWORD *)cp + 2);
          v20 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v12 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v12 + 16) = v18;
          *(_DWORD *)(v12 + 20) = v19;
          *(_DWORD *)(v12 + 24) = v20;
        }
        v10 = v12;
        *(_DWORD *)(v12 + 28) = a3 + a4;
        v21 = new_chain;
        new_chain = v12;
        *(_DWORD *)v12 = v21;
        return v10;
      }
      if ( v9 )
      {
        if ( !warned_12255 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_12255 = 1;
        }
        goto LABEL_28;
      }
      if ( v11 )
      {
        v13 = *(_DWORD *)(cache_tail + 16);
        v14 = *(_DWORD *)(cache_tail + 20);
        v15 = *(_DWORD *)(cache_tail + 24);
        v26[0] = *(_DWORD *)(cache_tail + 12);
        v26[1] = v13;
        v26[2] = v14;
        v26[3] = v15;
        v16 = cache_get_name(cache_tail);
        cache_scan_free(v16, v26, a3, v25);
        ++cache_live_freed;
        v9 = 1;
      }
      else
      {
        v9 = 0;
        cache_scan_free(0, 0, a3, 0);
        v11 = 1;
      }
    }
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || !cp
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v10 + 36) & 0x80) == 0 || *(_DWORD *)(v10 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v10 + 36) & 0x100) == 0
     || *(_DWORD *)(v10 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v10 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v10 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v10 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_28:
    insert_error = 1;
LABEL_29:
    v10 = 0;
  }
  return v10;
}
