int __fastcall cache_insert(int a1, void *cp, int a3, int a4, __int16 a5)
{
  unsigned int v8; // r3
  bool v9; // cf
  bool v10; // cc
  int v11; // r10
  int v12; // r0
  int v13; // r4
  int v14; // r3
  int v15; // r1
  int v16; // r2
  int v17; // r3
  int v18; // r0
  int v19; // r5
  int v20; // r0
  char *v21; // r0
  int v22; // r1
  int v23; // r2
  int v24; // r3
  int v25; // r3
  int v27; // [sp+4h] [bp-4Ch]
  int v29; // [sp+Ch] [bp-44h]
  _DWORD v30[4]; // [sp+14h] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v8 = *(_DWORD *)(dnsmasq_daemon + 252);
    v9 = 1;
    if ( v8 )
      v9 = v8 >= a4;
    if ( v9 )
      v8 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v10 = a4 != 0;
    if ( a4 )
      v10 = a4 > v8;
    if ( !v10 )
      a4 = v8;
  }
  v11 = insert_error;
  if ( insert_error )
    goto LABEL_25;
  v12 = cache_scan_free(a1, cp, a3, (unsigned __int16)a5);
  v13 = v12;
  if ( !v12 )
  {
    v14 = a5 & 4;
LABEL_34:
    v27 = v14;
    while ( 1 )
    {
      v19 = cache_tail;
      if ( !cache_tail )
        goto LABEL_24;
      v29 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v29 & 0xC) == 0 )
      {
        if ( a1 )
        {
          if ( strlen((const char *)a1) > 0x31 )
          {
            v13 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_24;
              v13 = whine_malloc(1028);
              if ( !v13 )
                goto LABEL_24;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        else
        {
          v13 = 0;
        }
        v20 = cache_unlink(v19);
        *(_WORD *)(v19 + 36) = a5;
        if ( v13 )
        {
          *(_DWORD *)(v19 + 40) = v13;
          *(_WORD *)(v19 + 36) = a5 | 0x200;
        }
        v21 = (char *)cache_get_name(v20);
        if ( a1 )
          strcpy(v21, (const char *)a1);
        else
          *v21 = 0;
        v13 = v19;
        if ( cp )
        {
          v22 = *((_DWORD *)cp + 1);
          v23 = *((_DWORD *)cp + 2);
          v24 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v19 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v19 + 16) = v22;
          *(_DWORD *)(v19 + 20) = v23;
          *(_DWORD *)(v19 + 24) = v24;
        }
        *(_DWORD *)(v19 + 28) = a4 + a3;
        v25 = new_chain;
        new_chain = v19;
        *(_DWORD *)v19 = v25;
        return v13;
      }
      if ( v11 )
      {
        if ( !warned_10948 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_10948 = 1;
        }
        goto LABEL_24;
      }
      if ( !v27 )
      {
        cache_scan_free(0, 0, a3, 0);
        v14 = 1;
        v11 = 0;
        goto LABEL_34;
      }
      v15 = *(_DWORD *)(cache_tail + 16);
      v16 = *(_DWORD *)(cache_tail + 20);
      v17 = *(_DWORD *)(cache_tail + 24);
      v30[0] = *(_DWORD *)(cache_tail + 12);
      v30[1] = v15;
      v30[2] = v16;
      v30[3] = v17;
      v18 = cache_get_name(cache_tail);
      v11 = 1;
      cache_scan_free(v18, v30, a3, v29);
      ++cache_live_freed;
    }
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v12 + 36) & 0x80) == 0 || *(_DWORD *)(v12 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v12 + 36) & 0x100) == 0
     || *(_DWORD *)(v12 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v12 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v12 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v12 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_24:
    insert_error = 1;
LABEL_25:
    v13 = 0;
  }
  return v13;
}
