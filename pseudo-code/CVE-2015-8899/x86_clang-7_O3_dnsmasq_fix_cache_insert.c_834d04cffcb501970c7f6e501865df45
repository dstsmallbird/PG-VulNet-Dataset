int __cdecl cache_insert(char *s, int cp, time_t time1, int a4, __int16 a5)
{
  __int16 v5; // dx
  _DWORD *v6; // esi
  unsigned int v7; // edx
  unsigned int v8; // eax
  int v9; // edi
  int v10; // eax
  __int16 v11; // ax
  int v12; // ebp
  int v13; // ebx
  __int16 v14; // ax
  int v15; // ebp
  int *v16; // eax
  int v17; // ecx
  int v19; // eax
  bool v20; // zf
  int *v21; // ecx
  __int16 v22; // ax
  __int64 *v23; // ebx
  char v24; // cl
  char *v25; // eax
  char *v26; // ecx
  time_t v27; // eax
  __int64 v28; // xmm0_8
  int v29; // [esp+4h] [ebp-28h]

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    v6 = (_DWORD *)cp;
    log_query((unsigned __int16)a5 + 0x10000, (int)s, (void *)cp, 0);
    v7 = a4;
    v8 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v8 < a4 )
      v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v8 )
      v7 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v7 )
      v7 = *(_DWORD *)(dnsmasq_daemon + 248);
    v29 = v7;
    v5 = a5;
    v9 = 0;
    if ( insert_error )
      return v9;
  }
  else
  {
    v29 = a4;
    v6 = (_DWORD *)cp;
    v9 = 0;
    if ( insert_error )
      return v9;
  }
  v10 = cache_scan_free(time1, v5);
  if ( v10 )
  {
    if ( (a5 & 0x180) == 0 )
      goto LABEL_42;
    if ( !v6 )
      goto LABEL_42;
    v9 = v10;
    if ( (a5 & 8) == 0 )
      goto LABEL_42;
    v11 = a5;
    if ( (a5 & 0x80u) == 0 || *(char *)(v9 + 36) >= 0 || (v11 = a5, *(_DWORD *)(v9 + 12) != *v6) )
    {
      if ( (v11 & 0x100) == 0
        || (*(_BYTE *)(v9 + 37) & 1) == 0
        || *(_DWORD *)(v9 + 12) != *v6
        || *(_DWORD *)(v9 + 16) != v6[1]
        || *(_DWORD *)(v9 + 20) != v6[2]
        || *(_DWORD *)(v9 + 24) != v6[3] )
      {
        goto LABEL_42;
      }
    }
    return v9;
  }
  v9 = cache_tail;
  if ( !cache_tail )
    goto LABEL_42;
  v12 = 0;
  v13 = a5 & 4;
  while ( 1 )
  {
    v14 = *(_WORD *)(v9 + 36);
    if ( (v14 & 0xC) == 0 )
    {
      v15 = 0;
      if ( s && strlen(s) >= 0x32 )
      {
        v15 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !(bignames_left | a5 & 0x5000) )
            goto LABEL_42;
          v19 = whine_malloc(0x404u);
          if ( !v19 )
            goto LABEL_42;
          v15 = v19;
          if ( bignames_left )
          {
            --bignames_left;
            v16 = *(int **)(v9 + 4);
            v17 = *(_DWORD *)v9;
            if ( v16 )
              goto LABEL_39;
            goto LABEL_48;
          }
        }
      }
      v16 = *(int **)(v9 + 4);
      v17 = *(_DWORD *)v9;
      if ( v16 )
      {
LABEL_39:
        *v16 = v17;
        v17 = *(_DWORD *)v9;
        goto LABEL_49;
      }
LABEL_48:
      cache_head = v17;
LABEL_49:
      v20 = v17 == 0;
      v21 = (int *)(v17 + 4);
      if ( v20 )
        v21 = &cache_tail;
      *v21 = (int)v16;
      v22 = a5;
      *(_WORD *)(v9 + 36) = a5;
      if ( v15 )
      {
        *(_DWORD *)(v9 + 40) = v15;
        v22 = a5 | 0x200;
        *(_WORD *)(v9 + 36) = a5 | 0x200;
      }
      if ( (v22 & 0x200) != 0 )
      {
        v25 = *(char **)(v9 + 40);
        v23 = (__int64 *)cp;
      }
      else
      {
        v23 = (__int64 *)cp;
        v24 = v22;
        v25 = (char *)(v9 + 40);
        if ( (v24 & 2) != 0 )
        {
          v25 = *(char **)v25;
          v26 = s;
          if ( !s )
          {
LABEL_61:
            *v25 = 0;
            v27 = time1;
            if ( !v23 )
            {
LABEL_63:
              *(_DWORD *)(v9 + 28) = v27 + v29;
              *(_DWORD *)v9 = new_chain;
              new_chain = v9;
              return v9;
            }
LABEL_62:
            v28 = *v23;
            *(_QWORD *)(v9 + 20) = v23[1];
            *(_QWORD *)(v9 + 12) = v28;
            goto LABEL_63;
          }
LABEL_59:
          strcpy(v25, v26);
          v27 = time1;
          if ( !v23 )
            goto LABEL_63;
          goto LABEL_62;
        }
      }
      v26 = s;
      if ( !s )
        goto LABEL_61;
      goto LABEL_59;
    }
    if ( v12 )
      break;
    if ( v13 )
    {
      cache_scan_free(time1, v14);
      ++cache_live_freed;
      v12 = 1;
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_42;
    }
    else
    {
      v12 = 0;
      cache_scan_free(time1, 0);
      v13 = 1;
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_42;
    }
  }
  if ( !cache_insert_warned )
  {
    my_syslog(3, "Internal error in cache.");
    cache_insert_warned = 1;
  }
LABEL_42:
  insert_error = 1;
  return 0;
}
