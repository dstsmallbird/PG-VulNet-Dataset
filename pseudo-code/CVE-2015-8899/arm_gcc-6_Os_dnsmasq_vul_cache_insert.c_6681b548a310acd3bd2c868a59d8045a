int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v8; // r3
  bool v9; // cc
  bool v10; // cf
  int v11; // r10
  int v12; // r0
  int v13; // r4
  int v14; // r11
  int v15; // r1
  int v16; // r2
  int v17; // r3
  int v18; // r0
  int v19; // r10
  char *v20; // r0
  int v21; // r1
  int v22; // r2
  int v23; // r3
  int v26; // [sp+4h] [bp-44h]
  _DWORD v27[4]; // [sp+Ch] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v8 = *(_DWORD *)(dnsmasq_daemon + 252);
    v9 = v8 != 0;
    if ( v8 )
      v9 = a4 > v8;
    if ( !v9 )
      v8 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v10 = 1;
    if ( a4 )
      v10 = v8 >= a4;
    if ( v10 )
      a4 = v8;
  }
  v11 = insert_error;
  if ( insert_error )
    goto LABEL_25;
  v12 = cache_scan_free(a1, a2, a3, a5);
  v13 = v12;
  if ( !v12 )
  {
    v14 = a5 & 4;
    while ( 1 )
    {
      v13 = cache_tail;
      if ( !cache_tail )
        goto LABEL_24;
      v26 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v26 & 0xC) == 0 )
      {
        if ( a1 )
        {
          if ( strlen(a1) <= 0x31 )
          {
            v19 = 0;
          }
          else
          {
            v19 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_24;
              v19 = whine_malloc(1028);
              if ( !v19 )
                goto LABEL_24;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        else
        {
          v19 = 0;
        }
        cache_unlink(v13);
        *(_WORD *)(v13 + 36) = a5;
        if ( v19 )
        {
          *(_DWORD *)(v13 + 40) = v19;
          *(_WORD *)(v13 + 36) = a5 | 0x200;
        }
        if ( a1 )
        {
          v20 = (char *)cache_get_name(v13);
          strcpy(v20, a1);
        }
        else
        {
          *(_BYTE *)cache_get_name(v13) = 0;
        }
        if ( a2 )
        {
          v21 = a2[1];
          v22 = a2[2];
          v23 = a2[3];
          *(_DWORD *)(v13 + 12) = *a2;
          *(_DWORD *)(v13 + 16) = v21;
          *(_DWORD *)(v13 + 20) = v22;
          *(_DWORD *)(v13 + 24) = v23;
        }
        *(_DWORD *)(v13 + 28) = a4 + a3;
        *(_DWORD *)v13 = new_chain;
        new_chain = v13;
        return v13;
      }
      if ( v11 )
      {
        if ( !warned_10837 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_10837 = 1;
        }
        goto LABEL_24;
      }
      if ( v14 )
      {
        v15 = *(_DWORD *)(cache_tail + 16);
        v16 = *(_DWORD *)(cache_tail + 20);
        v17 = *(_DWORD *)(cache_tail + 24);
        v27[0] = *(_DWORD *)(cache_tail + 12);
        v27[1] = v15;
        v27[2] = v16;
        v27[3] = v17;
        v18 = cache_get_name(cache_tail);
        v11 = 1;
        cache_scan_free(v18, v27, a3, v26);
        ++cache_live_freed;
      }
      else
      {
        v11 = 0;
        cache_scan_free(0, 0, a3, 0);
        v14 = 1;
      }
    }
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v12 + 36) & 0x80) == 0 || *(_DWORD *)(v12 + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v12 + 36) & 0x100) == 0
     || *(_DWORD *)(v12 + 12) != *a2
     || *(_DWORD *)(v12 + 16) != a2[1]
     || *(_DWORD *)(v12 + 20) != a2[2]
     || *(_DWORD *)(v12 + 24) != a2[3]) )
  {
LABEL_24:
    insert_error = 1;
LABEL_25:
    v13 = 0;
  }
  return v13;
}
