int __fastcall cache_insert(int a1, void *cp, time_t time1, int a4, __int16 a5)
{
  __int16 v5; // r5
  int v9; // r7
  int v10; // r4
  int v11; // r0
  int v12; // r2
  int v13; // r7
  int v15; // r1
  int v16; // r2
  int v17; // r3
  int v18; // r0
  __int16 v19; // r12
  unsigned int v20; // r3
  bool v21; // cc
  bool v22; // cf
  int v23; // r3
  size_t v24; // r0
  int v25; // r1
  int *v26; // r2
  char *v27; // r0
  const char *v28; // r1
  int v29; // r1
  int v30; // r2
  int v31; // r3
  int v32; // r3
  _BYTE *v33; // r3
  _DWORD v35[4]; // [sp+Ch] [bp-3Ch] BYREF

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v20 = *(_DWORD *)(dnsmasq_daemon + 252);
    v21 = v20 != 0;
    if ( v20 )
      v21 = a4 > v20;
    if ( !v21 )
      v20 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v22 = 1;
    if ( a4 )
      v22 = v20 >= a4;
    if ( v22 )
      a4 = v20;
  }
  v9 = insert_error;
  if ( insert_error )
    return 0;
  v11 = cache_scan_free(a1, (int)cp, time1);
  v10 = v11;
  if ( !v11 )
  {
    v12 = v9;
    v13 = a5 & 4;
    while ( 1 )
    {
      v10 = cache_tail;
      if ( !cache_tail )
        goto LABEL_14;
      v19 = *(_WORD *)(cache_tail + 36);
      if ( (v19 & 0xC) == 0 )
      {
        v23 = a1;
        if ( a1 )
        {
          v24 = strlen((const char *)a1);
          v23 = 0;
          if ( v24 > 0x31 )
          {
            v23 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_14;
              v23 = whine_malloc(1028);
              if ( !v23 )
                goto LABEL_14;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        v25 = *(_DWORD *)v10;
        v26 = *(int **)(v10 + 4);
        if ( v26 )
        {
          *v26 = v25;
          v25 = *(_DWORD *)v10;
        }
        else
        {
          cache_head = *(_DWORD *)v10;
        }
        if ( v25 )
          *(_DWORD *)(v25 + 4) = v26;
        else
          cache_tail = (int)v26;
        if ( v23 )
          *(_DWORD *)(v10 + 40) = v23;
        *(_WORD *)(v10 + 36) = a5;
        if ( v23 )
        {
          v5 = a5 | 0x200;
          *(_WORD *)(v10 + 36) = a5 | 0x200;
        }
        if ( a1 )
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
          {
            v28 = (const char *)a1;
            v27 = *(char **)(v10 + 40);
          }
          else
          {
            v27 = (char *)(v10 + 40);
            v28 = (const char *)a1;
          }
          strcpy(v27, v28);
        }
        else
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
            v33 = *(_BYTE **)(v10 + 40);
          else
            v33 = (_BYTE *)(v10 + 40);
          *v33 = 0;
        }
        if ( cp )
        {
          v29 = *((_DWORD *)cp + 1);
          v30 = *((_DWORD *)cp + 2);
          v31 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v10 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v10 + 16) = v29;
          *(_DWORD *)(v10 + 20) = v30;
          *(_DWORD *)(v10 + 24) = v31;
        }
        v32 = new_chain;
        *(_DWORD *)(v10 + 28) = a4 + time1;
        *(_DWORD *)v10 = v32;
        new_chain = v10;
        return v10;
      }
      if ( v12 )
      {
        if ( !warned_10977 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_10977 = 1;
        }
        goto LABEL_14;
      }
      if ( v13 )
      {
        v15 = *(_DWORD *)(cache_tail + 16);
        v16 = *(_DWORD *)(cache_tail + 20);
        v17 = *(_DWORD *)(cache_tail + 24);
        v35[0] = *(_DWORD *)(cache_tail + 12);
        v35[1] = v15;
        v35[2] = v16;
        v35[3] = v17;
        if ( (v19 & 0x200) != 0 || (v19 & 2) != 0 )
          v18 = *(_DWORD *)(cache_tail + 40);
        else
          v18 = cache_tail + 40;
        cache_scan_free(v18, (int)v35, time1);
        v12 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, time1);
        v12 = 0;
        v13 = 1;
      }
    }
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 36) & 0x80) == 0 || *(_DWORD *)(v11 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v11 + 36) & 0x100) == 0
     || *(_DWORD *)(v11 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v11 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v11 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v11 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_14:
    v10 = 0;
    insert_error = 1;
  }
  return v10;
}
