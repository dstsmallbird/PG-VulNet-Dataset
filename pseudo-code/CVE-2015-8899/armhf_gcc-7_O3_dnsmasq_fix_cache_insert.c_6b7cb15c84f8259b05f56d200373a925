int __fastcall cache_insert(int a1, void *cp, time_t time1, int a4, __int16 a5)
{
  int v9; // r4
  int v10; // r7
  int v11; // r0
  __int16 v12; // r3
  unsigned int v14; // r3
  bool v15; // cf
  bool v16; // cc
  int v17; // r2
  int v18; // r11
  __int16 v19; // r12
  int v20; // r1
  int v21; // r2
  int v22; // r3
  int v23; // r0
  size_t v24; // r0
  int v25; // r3
  int *v26; // r1
  int v27; // r2
  char *v28; // r0
  int v29; // r1
  int v30; // r2
  int v31; // r3
  int v32; // r2
  _BYTE *v33; // r2
  _DWORD v34[4]; // [sp+14h] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v14 = *(_DWORD *)(dnsmasq_daemon + 252);
    v15 = 1;
    if ( v14 )
      v15 = v14 >= a4;
    if ( v15 )
      v14 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v16 = a4 != 0;
    if ( a4 )
      v16 = a4 > v14;
    if ( !v16 )
      a4 = v14;
  }
  v9 = 0;
  v10 = insert_error;
  if ( insert_error )
    return v9;
  v11 = cache_scan_free(a1, (int)cp, time1);
  v9 = v11;
  if ( !v11 )
  {
    v17 = v10;
    v18 = a5 & 4;
    while ( 1 )
    {
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_16;
      v19 = *(_WORD *)(cache_tail + 36);
      if ( (v19 & 0xC) == 0 )
        break;
      if ( v17 )
      {
        if ( !warned_12267 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_12267 = 1;
        }
        goto LABEL_16;
      }
      if ( v18 )
      {
        v20 = *(_DWORD *)(cache_tail + 16);
        v21 = *(_DWORD *)(cache_tail + 20);
        v22 = *(_DWORD *)(cache_tail + 24);
        v34[0] = *(_DWORD *)(cache_tail + 12);
        v34[1] = v20;
        v34[2] = v21;
        v34[3] = v22;
        if ( (v19 & 0x200) != 0 || (v19 & 2) != 0 )
          v23 = *(_DWORD *)(cache_tail + 40);
        else
          v23 = cache_tail + 40;
        cache_scan_free(v23, (int)v34, time1);
        v17 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, time1);
        v17 = 0;
        v18 = 1;
      }
    }
    if ( a1 )
    {
      v24 = strlen((const char *)a1);
      v25 = 0;
      if ( v24 > 0x31 )
      {
        v25 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_16;
          v25 = whine_malloc(1028);
          if ( !v25 )
            goto LABEL_16;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = *(int **)(v9 + 4);
    v27 = *(_DWORD *)v9;
    if ( v26 )
    {
      *v26 = v27;
      v27 = *(_DWORD *)v9;
    }
    else
    {
      cache_head = *(_DWORD *)v9;
    }
    if ( v27 )
      *(_DWORD *)(v27 + 4) = v26;
    else
      cache_tail = (int)v26;
    *(_WORD *)(v9 + 36) = a5;
    if ( v25 )
    {
      *(_DWORD *)(v9 + 40) = v25;
      *(_WORD *)(v9 + 36) = a5 | 0x200;
      if ( a1 )
        goto LABEL_52;
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
        {
          v28 = (char *)(v9 + 40);
          goto LABEL_53;
        }
LABEL_52:
        v28 = *(char **)(v9 + 40);
LABEL_53:
        strcpy(v28, (const char *)a1);
LABEL_54:
        if ( cp )
        {
          v29 = *((_DWORD *)cp + 1);
          v30 = *((_DWORD *)cp + 2);
          v31 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v9 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v9 + 16) = v29;
          *(_DWORD *)(v9 + 20) = v30;
          *(_DWORD *)(v9 + 24) = v31;
        }
        *(_DWORD *)(v9 + 28) = a4 + time1;
        v32 = new_chain;
        new_chain = v9;
        *(_DWORD *)v9 = v32;
        return v9;
      }
      if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
      {
        v33 = (_BYTE *)(v9 + 40);
LABEL_69:
        *v33 = 0;
        goto LABEL_54;
      }
    }
    v33 = *(_BYTE **)(v9 + 40);
    goto LABEL_69;
  }
  if ( (a5 & 0x180) == 0 )
    goto LABEL_16;
  v12 = (__int16)cp;
  if ( cp )
    v12 = 1;
  if ( (*(_DWORD *)&v12 & ((unsigned __int16)a5 >> 3)) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 36) & 0x80) == 0 || *(_DWORD *)(v11 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v11 + 36) & 0x100) == 0
     || *(_DWORD *)(v11 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v11 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v11 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v11 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_16:
    v9 = 0;
    insert_error = 1;
  }
  return v9;
}
