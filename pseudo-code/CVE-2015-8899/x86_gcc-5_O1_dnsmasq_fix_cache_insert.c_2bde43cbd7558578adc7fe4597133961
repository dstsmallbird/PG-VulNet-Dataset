int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v5; // eax
  unsigned int v6; // eax
  int result; // eax
  int v8; // edx
  int v9; // esi
  unsigned __int16 v10; // di
  int v11; // esi
  int v12; // edi
  char *v13; // eax
  char v14; // [esp+8h] [ebp-54h]
  int v15; // [esp+18h] [ebp-44h]

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, a2, 0);
    v5 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v5 )
    {
      if ( a4 <= v5 )
        v5 = a4;
      a4 = v5;
    }
    v6 = *(_DWORD *)(dnsmasq_daemon + 248);
    if ( a4 < v6 )
    {
      if ( !v6 )
        v6 = a4;
      a4 = v6;
    }
  }
  result = 0;
  if ( !insert_error )
  {
    v8 = cache_scan_free(a5);
    if ( !v8 )
    {
      v15 = a5 & 4;
      v9 = 0;
      while ( 1 )
      {
        result = cache_tail;
        if ( !cache_tail )
        {
          insert_error = 1;
          return result;
        }
        v10 = *(_WORD *)(cache_tail + 36);
        if ( (v10 & 0xC) == 0 )
          break;
        if ( v9 )
        {
          if ( !warned_8375 )
          {
            my_syslog(3, "Internal error in cache.", v14);
            warned_8375 = 1;
          }
          insert_error = 1;
          return 0;
        }
        if ( v15 )
        {
          cache_get_name(cache_tail);
          cache_scan_free(v10);
          ++cache_live_freed;
          v9 = 1;
        }
        else
        {
          cache_scan_free(0);
          v15 = 1;
        }
      }
      v11 = cache_tail;
      if ( a1 && strlen(a1) > 0x31 )
      {
        v12 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 || (v12 = whine_malloc(0x404u)) == 0 )
          {
            insert_error = 1;
            return 0;
          }
          if ( bignames_left )
            --bignames_left;
        }
        cache_unlink();
        *(_DWORD *)(v11 + 40) = v12;
        *(_WORD *)(v11 + 36) = a5 | 0x200;
      }
      else
      {
        cache_unlink();
        *(_WORD *)(v11 + 36) = a5;
        if ( !a1 )
        {
          *(_BYTE *)cache_get_name(v11) = 0;
          goto LABEL_48;
        }
      }
      v13 = (char *)cache_get_name(v11);
      strcpy(v13, a1);
LABEL_48:
      if ( a2 )
      {
        *(_DWORD *)(v11 + 12) = *a2;
        *(_DWORD *)(v11 + 16) = a2[1];
        *(_DWORD *)(v11 + 20) = a2[2];
        *(_DWORD *)(v11 + 24) = a2[3];
      }
      *(_DWORD *)(v11 + 28) = a3 + a4;
      *(_DWORD *)v11 = new_chain;
      new_chain = v11;
      return v11;
    }
    if ( (a5 & 0x180) == 0 || (a5 & 8) == 0 || !a2 )
      goto LABEL_25;
    if ( (a5 & 0x80) != 0 && *(char *)(v8 + 36) < 0 && *(_DWORD *)(v8 + 12) == *a2 )
      return v8;
    if ( (a5 & 0x100) == 0
      || (*(_BYTE *)(v8 + 37) & 1) == 0
      || *(_DWORD *)(v8 + 12) != *a2
      || *(_DWORD *)(v8 + 16) != a2[1]
      || *(_DWORD *)(v8 + 20) != a2[2]
      || (result = v8, *(_DWORD *)(v8 + 24) != a2[3]) )
    {
LABEL_25:
      insert_error = 1;
      return 0;
    }
  }
  return result;
}
