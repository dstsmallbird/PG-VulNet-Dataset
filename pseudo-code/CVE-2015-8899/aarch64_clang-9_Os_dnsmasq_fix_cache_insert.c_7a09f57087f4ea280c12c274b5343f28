__int64 __fastcall cache_insert(const char *a1, void *s2, time_t time1, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned __int16 v5; // w24
  __int16 v10; // w25
  unsigned __int64 v11; // x9
  bool v12; // zf
  __int64 v13; // x22
  __int64 v14; // x0
  int v15; // w8
  int v16; // w26
  __int16 v17; // w3
  _QWORD *v18; // x0
  __int64 v19; // x0
  __int64 *v21; // x8
  __int64 v22; // x9
  __int64 *v23; // x9
  char *v24; // x0
  __int128 v25; // [xsp+0h] [xbp-60h] BYREF

  v5 = a5;
  v10 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, s2, 0LL);
    v11 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v11 < a4 )
      v12 = v11 == 0;
    else
      v12 = 1;
    if ( v12 )
      v11 = a4;
    if ( *(_QWORD *)(dnsmasq_daemon + 448) <= v11 )
      a4 = v11;
    else
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  if ( (insert_error & 1) != 0 )
    return 0LL;
  v14 = cache_scan_free((int)a1, s2, time1);
  if ( v14 )
  {
    if ( (v10 & 0x180) == 0
      || !s2
      || (v10 & 8) == 0
      || ((v13 = v14, (v10 & 0x80) == 0) || (*(_BYTE *)(v14 + 52) & 0x80) == 0 || *(_DWORD *)(v14 + 24) != *(_DWORD *)s2)
      && ((v10 & 0x100) == 0
       || (*(_BYTE *)(v14 + 53) & 1) == 0
       || *(_DWORD *)(v14 + 24) != *(_DWORD *)s2
       || *(_DWORD *)(v14 + 28) != *((_DWORD *)s2 + 1)
       || *(_DWORD *)(v14 + 32) != *((_DWORD *)s2 + 2)
       || *(_DWORD *)(v14 + 36) != *((_DWORD *)s2 + 3)) )
    {
      v13 = 0LL;
      insert_error = 1;
    }
    return v13;
  }
  v13 = cache_tail;
  if ( !cache_tail )
    goto LABEL_46;
  v15 = 0;
  v16 = v5 & 4;
  while ( 1 )
  {
    v17 = *(_WORD *)(v13 + 52);
    if ( (v17 & 0xC) == 0 )
    {
      if ( a1 && strlen(a1) >= 0x32 )
      {
        v19 = big_free;
        if ( big_free )
        {
          big_free = *(_QWORD *)big_free;
        }
        else
        {
          if ( !(bignames_left | v10 & 0x5000) )
            goto LABEL_46;
          v19 = whine_malloc(1032LL);
          if ( !v19 )
            goto LABEL_46;
          if ( bignames_left )
            --bignames_left;
        }
      }
      else
      {
        v19 = 0LL;
      }
      v22 = *(_QWORD *)v13;
      v21 = *(__int64 **)(v13 + 8);
      if ( v21 )
      {
        *v21 = v22;
        v22 = *(_QWORD *)v13;
      }
      else
      {
        cache_head = *(_QWORD *)v13;
      }
      if ( v22 )
        v23 = (__int64 *)(v22 + 8);
      else
        v23 = &cache_tail;
      *v23 = (__int64)v21;
      *(_WORD *)(v13 + 52) = v5;
      if ( v19 )
      {
        v10 = v5 | 0x200;
        *(_QWORD *)(v13 + 56) = v19;
        *(_WORD *)(v13 + 52) = v5 | 0x200;
      }
      if ( (v10 & 0x200) != 0 )
      {
        v24 = *(char **)(v13 + 56);
      }
      else
      {
        v24 = (char *)(v13 + 56);
        if ( (v10 & 2) != 0 )
        {
          v24 = *(char **)v24;
          if ( !a1 )
          {
LABEL_65:
            *v24 = 0;
            if ( !s2 )
            {
LABEL_67:
              *(_QWORD *)(v13 + 40) = a4 + time1;
              *(_QWORD *)v13 = new_chain;
              new_chain = v13;
              return v13;
            }
LABEL_66:
            *(_OWORD *)(v13 + 24) = *(_OWORD *)s2;
            goto LABEL_67;
          }
LABEL_63:
          strcpy(v24, a1);
          if ( !s2 )
            goto LABEL_67;
          goto LABEL_66;
        }
      }
      if ( !a1 )
        goto LABEL_65;
      goto LABEL_63;
    }
    if ( v15 )
      break;
    if ( v16 )
    {
      v25 = *(_OWORD *)(v13 + 24);
      if ( (v17 & 0x200) != 0 )
      {
        v18 = *(_QWORD **)(v13 + 56);
      }
      else
      {
        v18 = (_QWORD *)(v13 + 56);
        if ( (v17 & 2) != 0 )
          v18 = (_QWORD *)*v18;
      }
      cache_scan_free((int)v18, &v25, time1);
      ++cache_live_freed;
      v15 = 1;
    }
    else
    {
      cache_scan_free(0, 0LL, time1);
      v15 = 0;
      v16 = 1;
    }
    v13 = cache_tail;
    if ( !cache_tail )
      goto LABEL_46;
  }
  if ( (cache_insert_warned & 1) == 0 )
  {
    my_syslog(3LL, "Internal error in cache.");
    cache_insert_warned = 1;
  }
LABEL_46:
  v13 = 0LL;
  insert_error = 1;
  return v13;
}
