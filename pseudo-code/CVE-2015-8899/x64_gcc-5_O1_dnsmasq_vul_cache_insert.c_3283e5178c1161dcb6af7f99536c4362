crec *__fastcall cache_insert(char *a1, __int64 *a2, time_t a3, unsigned __int64 a4, unsigned __int16 a5)
{
  __int64 *v5; // r12
  unsigned __int16 v8; // bx
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rax
  crec *result; // rax
  int v12; // ecx
  int v13; // er8
  int v14; // er9
  crec *v15; // rdx
  __int64 v16; // rbp
  unsigned __int16 v17; // r14
  __int64 v18; // rdx
  char *v19; // rax
  __int64 v20; // r14
  char *v21; // rax
  __int64 v22; // rdx
  int v23; // [rsp+10h] [rbp-68h]
  int v24; // [rsp+14h] [rbp-64h]
  __int64 v25[11]; // [rsp+20h] [rbp-58h] BYREF

  v5 = a2;
  v8 = a5;
  v25[3] = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    v9 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v9 && a4 > v9 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    v10 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( a4 < v10 && v10 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  result = 0LL;
  if ( !insert_error )
  {
    result = cache_scan_free(a1, (all_addr *)a2, a3, v8);
    v15 = result;
    if ( !result )
    {
      v24 = v8 & 4;
      v23 = 0;
      while ( 1 )
      {
        v16 = cache_tail;
        if ( !cache_tail )
        {
          insert_error = 1;
          return 0LL;
        }
        v17 = *(_WORD *)(cache_tail + 52);
        if ( (v17 & 0xC) == 0 )
          break;
        if ( v23 )
        {
          if ( !warned_8730 )
          {
            my_syslog(3, (unsigned int)"Internal error in cache.", (_DWORD)v15, v12, v13, v14);
            warned_8730 = 1;
          }
          insert_error = 1;
          return 0LL;
        }
        if ( v24 )
        {
          v18 = *(_QWORD *)(cache_tail + 32);
          v25[0] = *(_QWORD *)(cache_tail + 24);
          v25[1] = v18;
          v19 = (char *)cache_get_name(cache_tail);
          a2 = v25;
          cache_scan_free(v19, (all_addr *)v25, a3, v17);
          ++cache_live_freed;
          v23 = 1;
        }
        else
        {
          a2 = 0LL;
          cache_scan_free(0LL, 0LL, a3, 0);
          v24 = 1;
        }
      }
      if ( a1 && strlen(a1) > 0x31 )
      {
        v20 = big_free;
        if ( big_free )
        {
          big_free = *(_QWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (v8 & 0x5000) == 0 || (v20 = whine_malloc(1032LL, a2, v15)) == 0 )
          {
            insert_error = 1;
            return 0LL;
          }
          if ( bignames_left )
            --bignames_left;
        }
        cache_unlink((crec *)v16);
        *(_QWORD *)(v16 + 56) = v20;
        HIBYTE(v8) |= 2u;
        *(_WORD *)(v16 + 52) = v8;
      }
      else
      {
        cache_unlink((crec *)cache_tail);
        *(_WORD *)(v16 + 52) = v8;
        if ( !a1 )
        {
          *(_BYTE *)cache_get_name(v16) = 0;
          goto LABEL_45;
        }
      }
      v21 = (char *)cache_get_name(v16);
      strcpy(v21, a1);
LABEL_45:
      if ( v5 )
      {
        v22 = v5[1];
        *(_QWORD *)(v16 + 24) = *v5;
        *(_QWORD *)(v16 + 32) = v22;
      }
      *(_QWORD *)(v16 + 40) = a4 + a3;
      *(_QWORD *)v16 = new_chain;
      new_chain = v16;
      return (crec *)v16;
    }
    if ( (v8 & 0x180) == 0
      || (v8 & 8) == 0
      || ((v8 & 0x80u) == 0 || *((char *)result + 52) >= 0 || *((_DWORD *)result + 6) != *(_DWORD *)a2)
      && ((v8 & 0x100) == 0
       || (*((_BYTE *)result + 53) & 1) == 0
       || *((_DWORD *)result + 6) != *(_DWORD *)a2
       || *((_DWORD *)result + 7) != *((_DWORD *)a2 + 1)
       || *((_DWORD *)result + 8) != *((_DWORD *)a2 + 2)
       || *((_DWORD *)result + 9) != *((_DWORD *)a2 + 3)) )
    {
      insert_error = 1;
      result = 0LL;
    }
  }
  return result;
}
