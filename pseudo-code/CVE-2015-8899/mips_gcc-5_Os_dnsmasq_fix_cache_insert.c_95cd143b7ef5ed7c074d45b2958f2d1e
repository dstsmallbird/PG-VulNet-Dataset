int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v9; // $v0
  unsigned int v10; // $v0
  int v11; // $v1
  int v12; // $v0
  int v13; // $t0
  int v14; // $t1
  int v15; // $s0
  int v16; // $v0
  int v17; // $s4
  int v18; // $a2
  char *v19; // $v0
  const char *v20; // $a1
  int v21; // $a0
  int v23; // [sp+20h] [-20h]
  int v24; // [sp+24h] [-1Ch]
  char v25[16]; // [sp+2Ch] [-14h] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = *(_DWORD *)(fbss + 252);
    if ( v9 )
    {
      if ( v9 < a4 )
        a4 = *(_DWORD *)(fbss + 252);
      v10 = *(_DWORD *)(fbss + 248);
    }
    else
    {
      v10 = *(_DWORD *)(fbss + 248);
    }
    if ( v10 && a4 < v10 )
      a4 = v10;
  }
  v11 = 0;
  if ( !insert_error )
  {
    v12 = cache_scan_free(a1, a2, a3, a5);
    if ( !v12 )
    {
      v13 = a5 & 4;
      v14 = 0;
      while ( 1 )
      {
        v17 = cache_tail;
        if ( !cache_tail )
          goto LABEL_28;
        if ( (*(_WORD *)(cache_tail + 36) & 0xC) == 0 )
        {
          if ( a1 && strlen(a1) >= 0x32 )
          {
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 || !whine_malloc(1028) )
                goto LABEL_28;
              if ( bignames_left )
                --bignames_left;
            }
          }
          cache_unlink(v17);
          *(_WORD *)(v17 + 36) = a5;
          if ( v18 )
          {
            *(_DWORD *)(v17 + 40) = v18;
            *(_WORD *)(v17 + 36) = a5 | 0x200;
          }
          if ( a1 )
          {
            v19 = (char *)cache_get_name(v17);
            strcpy(v19, v20);
          }
          else
          {
            *(_BYTE *)cache_get_name(v17) = 0;
          }
          if ( a2 )
            memcpy((void *)(v17 + 12), a2, 0x10u);
          v11 = v17;
          v21 = new_chain;
          *(_DWORD *)(v17 + 28) = a4 + a3;
          new_chain = v17;
          *(_DWORD *)v17 = v21;
          return v11;
        }
        if ( v14 )
        {
          if ( !warned_8147 )
          {
            my_syslog(3, "Internal error in cache.");
            warned_8147 = 1;
          }
          goto LABEL_28;
        }
        v24 = *(unsigned __int16 *)(cache_tail + 36);
        v23 = v13;
        if ( v13 )
        {
          memcpy(v25, (const void *)(cache_tail + 12), sizeof(v25));
          v16 = cache_get_name(cache_tail);
          cache_scan_free(v16, v25, a3, v24);
          v14 = 1;
          v13 = v23;
          ++cache_live_freed;
        }
        else
        {
          cache_scan_free(0, 0, a3, 0);
          v13 = 1;
          v14 = 0;
        }
      }
    }
    if ( (a5 & 0x180) == 0 || (a5 & 8) == 0 || !a2 )
    {
LABEL_28:
      insert_error = 1;
      return 0;
    }
    if ( (a5 & 0x80) != 0 )
    {
      if ( (*(_WORD *)(v12 + 36) & 0x80) != 0 )
      {
        v11 = v12;
        if ( *(_DWORD *)(v12 + 12) == *a2 )
          return v11;
        v15 = a5 & 0x100;
      }
      else
      {
        v15 = a5 & 0x100;
      }
    }
    else
    {
      v15 = a5 & 0x100;
    }
    if ( !v15 )
      goto LABEL_28;
    if ( (*(_WORD *)(v12 + 36) & 0x100) == 0 )
      goto LABEL_28;
    if ( *(_DWORD *)(v12 + 12) != *a2 )
      goto LABEL_28;
    if ( *(_DWORD *)(v12 + 16) != a2[1] )
      goto LABEL_28;
    if ( *(_DWORD *)(v12 + 20) != a2[2] )
      goto LABEL_28;
    v11 = v12;
    if ( *(_DWORD *)(v12 + 24) != a2[3] )
      goto LABEL_28;
  }
  return v11;
}
