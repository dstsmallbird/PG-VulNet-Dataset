int __fastcall cache_insert(int a1, _DWORD *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v9; // r9
  unsigned int v10; // r0
  char *v11; // r4
  int v12; // r6
  int v13; // r0
  bool v14; // zf
  bool v15; // zf
  bool v16; // zf
  int v17; // r6
  int v18; // r10
  int v19; // r8
  int v20; // r3
  char *v21; // r5
  int v22; // r1
  int v23; // r2
  int v24; // r4
  _DWORD *v25; // r0
  _DWORD *v26; // r3
  size_t v27; // r0
  _DWORD *v28; // r5
  int v29; // r8
  __int16 v30; // r7
  _DWORD *v32; // r0
  int v33; // r1
  _DWORD *v34; // r2
  char *v35; // r0
  int v36; // r1
  int v37; // r2
  int v38; // r3
  int v39; // r0
  int v40; // r0
  _DWORD *v41; // [sp+0h] [bp-38h]
  char *s; // [sp+4h] [bp-34h]
  _DWORD v43[11]; // [sp+Ch] [bp-2Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = a4;
    v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v10 < a4 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v10 )
      v9 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v9 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  else
  {
    v9 = a4;
  }
  v11 = &insert_error;
  v12 = 0;
  if ( insert_error )
    return v12;
  v13 = cache_scan_free(a1, a2, a3, a5);
  if ( v13 )
  {
    if ( (a5 & 0x180) != 0 )
    {
      v14 = a2 == 0;
      if ( a2 )
      {
        v12 = v13;
        v14 = (a5 & 8) == 0;
      }
      if ( !v14 )
      {
        v15 = (a5 & 0x80) == 0;
        if ( (a5 & 0x80) != 0 )
          v15 = (*(_BYTE *)(v12 + 36) & 0x80) == 0;
        if ( !v15 && *(_DWORD *)(v12 + 12) == *a2 )
          return v12;
        v16 = (a5 & 0x100) == 0;
        if ( (a5 & 0x100) != 0 )
          v16 = (*(_BYTE *)(v12 + 37) & 1) == 0;
        if ( !v16
          && *(_DWORD *)(v12 + 12) == *a2
          && *(_DWORD *)(v12 + 16) == a2[1]
          && *(_DWORD *)(v12 + 20) == a2[2]
          && *(_DWORD *)(v12 + 24) == a2[3] )
        {
          return v12;
        }
      }
    }
    goto LABEL_48;
  }
  s = (char *)a1;
  v41 = a2;
  v17 = cache_tail;
  if ( !cache_tail )
  {
LABEL_48:
    v12 = 0;
    *v11 = 1;
    return v12;
  }
  v18 = 0;
  v19 = a5 & 4;
  while ( 1 )
  {
    v20 = *(unsigned __int16 *)(v17 + 36);
    if ( (v20 & 0xC) == 0 )
      break;
    if ( v18 )
    {
      if ( !v11[4] )
      {
        my_syslog(3, "Internal error in cache.");
        v11[4] = 1;
      }
      goto LABEL_48;
    }
    if ( v19 )
    {
      v21 = v11;
      v22 = *(_DWORD *)(v17 + 16);
      v23 = *(_DWORD *)(v17 + 20);
      v24 = *(_DWORD *)(v17 + 24);
      v43[0] = *(_DWORD *)(v17 + 12);
      v43[1] = v22;
      v43[2] = v23;
      v43[3] = v24;
      if ( (v20 & 0x200) != 0 )
      {
        v25 = *(_DWORD **)(v17 + 40);
        v11 = v21;
      }
      else
      {
        v25 = (_DWORD *)(v17 + 40);
        v11 = v21;
        if ( (v20 & 2) != 0 )
          v25 = (_DWORD *)*v25;
      }
      cache_scan_free(v25, v43, a3, v20);
      v18 = 1;
      ++*((_DWORD *)v11 + 9);
      v17 = *((_DWORD *)v11 + 8);
      if ( !v17 )
        goto LABEL_48;
    }
    else
    {
      v18 = 0;
      cache_scan_free(0, 0, a3, 0);
      v19 = 1;
      v17 = *((_DWORD *)v11 + 8);
      if ( !v17 )
        goto LABEL_48;
    }
  }
  v26 = 0;
  if ( s )
  {
    v27 = strlen(s);
    v28 = v41;
    v29 = a3;
    v30 = a5;
    v26 = 0;
    if ( v27 >= 0x32 )
    {
      v26 = (_DWORD *)*((_DWORD *)v11 + 10);
      if ( v26 )
      {
        *((_DWORD *)v11 + 10) = *v26;
      }
      else
      {
        if ( !(*((_DWORD *)v11 + 2) | a5 & 0x5000) )
          goto LABEL_48;
        v39 = whine_malloc(1028);
        if ( !v39 )
          goto LABEL_48;
        v26 = (_DWORD *)v39;
        v40 = *((_DWORD *)v11 + 2);
        if ( v40 )
          *((_DWORD *)v11 + 2) = v40 - 1;
      }
    }
  }
  else
  {
    v28 = v41;
    v29 = a3;
    v30 = a5;
  }
  v32 = *(_DWORD **)(v17 + 4);
  v33 = *(_DWORD *)v17;
  if ( v32 )
  {
    *v32 = v33;
    v33 = *(_DWORD *)v17;
  }
  else
  {
    *((_DWORD *)v11 + 12) = v33;
  }
  v34 = (_DWORD *)(v33 + 4);
  if ( !v33 )
    v34 = v11 + 32;
  *v34 = v32;
  *(_WORD *)(v17 + 36) = v30;
  if ( v26 )
  {
    v30 |= 0x200u;
    *(_DWORD *)(v17 + 40) = v26;
    *(_WORD *)(v17 + 36) = v30;
  }
  if ( (v30 & 0x200) != 0 )
  {
    v35 = *(char **)(v17 + 40);
    if ( !s )
    {
LABEL_65:
      *v35 = 0;
      goto LABEL_66;
    }
  }
  else
  {
    v35 = (char *)(v17 + 40);
    if ( (v30 & 2) != 0 )
      v35 = *(char **)v35;
    if ( !s )
      goto LABEL_65;
  }
  strcpy(v35, s);
LABEL_66:
  if ( v28 )
  {
    v36 = v28[1];
    v37 = v28[2];
    v38 = v28[3];
    *(_DWORD *)(v17 + 12) = *v28;
    *(_DWORD *)(v17 + 16) = v36;
    *(_DWORD *)(v17 + 20) = v37;
    *(_DWORD *)(v17 + 24) = v38;
  }
  *(_DWORD *)(v17 + 28) = v9 + v29;
  *(_DWORD *)v17 = *((_DWORD *)v11 + 7);
  *((_DWORD *)v11 + 7) = v17;
  return v17;
}
