int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  __int16 v5; // $s0
  int result; // $v0
  int v11; // $a3
  unsigned int v12; // $v1
  unsigned int v13; // $v0
  int v14; // $v1
  int *v15; // $t2
  int v16; // $t0
  int v17; // $s1
  int v18; // $a3
  int v19; // $a1
  int v20; // $a0
  int v21; // $v1
  int v22; // $a0
  int v23; // $v0
  int *v24; // $v1
  int v25; // $a0
  int v26; // $v0
  int v27; // $s0
  char *v28; // $a0
  int v29; // $a0
  int v30; // $v1
  int v31; // $v0
  int v32; // $a0
  int v33; // $s0
  int *v34; // [sp+1Ch] [-24h]
  int v35; // [sp+20h] [-20h]
  int *v36; // [sp+20h] [-20h]
  int v37[4]; // [sp+2Ch] [-14h] BYREF

  v5 = a5;
  if ( (a5 & 0x980) == 0 )
    goto LABEL_2;
  log_query(a5 | 0x10000, a1, a2, 0);
  v12 = *(_DWORD *)(fbss + 252);
  if ( v12 && v12 < a4 )
    a4 = *(_DWORD *)(fbss + 252);
  v13 = *(_DWORD *)(fbss + 248);
  if ( v13 )
  {
    if ( a4 < v13 )
      a4 = *(_DWORD *)(fbss + 248);
    v11 = a5;
    if ( insert_error )
      return 0;
  }
  else
  {
LABEL_2:
    result = 0;
    if ( insert_error )
      return result;
    v11 = a5;
  }
  result = cache_scan_free(a1, a2, a3, v11);
  if ( result )
  {
    if ( (a5 & 0x180) != 0
      && (a5 & 8) != 0
      && a2
      && ((a5 & 0x80) != 0 && (*(_WORD *)(result + 36) & 0x80) != 0 && *(_DWORD *)(result + 12) == *a2
       || (a5 & 0x100) != 0
       && (*(_WORD *)(result + 36) & 0x100) != 0
       && *(_DWORD *)(result + 12) == *a2
       && *(_DWORD *)(result + 16) == a2[1]
       && *(_DWORD *)(result + 20) == a2[2]
       && *(_DWORD *)(result + 24) == a2[3]) )
    {
      return result;
    }
    goto LABEL_14;
  }
  v14 = 0;
  v15 = v37;
  v16 = a5 & 4;
LABEL_26:
  v17 = cache_tail;
  if ( !cache_tail )
  {
LABEL_14:
    result = 0;
LABEL_15:
    insert_error = 1;
    return result;
  }
  while ( 1 )
  {
    v18 = *(unsigned __int16 *)(v17 + 36);
    if ( (v18 & 0xC) == 0 )
      break;
    if ( v14 )
    {
      if ( !warned_8287 )
      {
        my_syslog(3, "Internal error in cache.");
        warned_8287 = 1;
      }
      goto LABEL_14;
    }
    if ( !v16 )
    {
      v36 = v15;
      cache_scan_free(0, 0, a3, 0);
      v16 = 1;
      v14 = 0;
      v15 = v36;
      goto LABEL_26;
    }
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_DWORD *)(v17 + 20);
    v21 = *(_DWORD *)(v17 + 24);
    v37[0] = *(_DWORD *)(v17 + 12);
    v37[1] = v19;
    v37[2] = v20;
    v37[3] = v21;
    if ( (v18 & 0x200) != 0 || (v18 & 2) != 0 )
      v22 = *(_DWORD *)(v17 + 40);
    else
      v22 = v17 + 40;
    v35 = v16;
    v34 = v15;
    cache_scan_free(v22, v15, a3, v18);
    v15 = v34;
    v16 = v35;
    ++cache_live_freed;
    v17 = cache_tail;
    v14 = 1;
    if ( !cache_tail )
    {
      result = 0;
      goto LABEL_15;
    }
  }
  if ( a1 && strlen(a1) >= 0x32 )
  {
    v23 = big_free;
    if ( big_free )
    {
      big_free = *(_DWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (a5 & 0x5000) == 0 )
        goto LABEL_14;
      v23 = whine_malloc(1028);
      if ( !v23 )
        goto LABEL_14;
      if ( bignames_left )
        --bignames_left;
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = *(int **)(v17 + 4);
  v25 = *(_DWORD *)v17;
  if ( v24 )
  {
    *v24 = v25;
    v25 = *(_DWORD *)v17;
  }
  else
  {
    cache_head = *(_DWORD *)v17;
  }
  if ( v25 )
    *(_DWORD *)(v25 + 4) = v24;
  else
    cache_tail = (int)v24;
  *(_WORD *)(v17 + 36) = a5;
  if ( v23 )
  {
    v5 = a5 | 0x200;
    *(_DWORD *)(v17 + 40) = v23;
    *(_WORD *)(v17 + 36) = a5 | 0x200;
  }
  v26 = v5 & 0x200;
  if ( a1 )
  {
    v27 = v5 & 2;
    if ( v26 || v27 )
      v28 = *(char **)(v17 + 40);
    else
      v28 = (char *)(v17 + 40);
    strcpy(v28, a1);
  }
  else
  {
    v33 = v5 & 2;
    if ( v26 || v33 )
      **(_BYTE **)(v17 + 40) = 0;
    else
      *(_BYTE *)(v17 + 40) = 0;
  }
  if ( a2 )
  {
    v29 = a2[1];
    v30 = a2[2];
    v31 = a2[3];
    *(_DWORD *)(v17 + 12) = *a2;
    *(_DWORD *)(v17 + 16) = v29;
    *(_DWORD *)(v17 + 20) = v30;
    *(_DWORD *)(v17 + 24) = v31;
  }
  result = v17;
  v32 = new_chain;
  *(_DWORD *)(v17 + 28) = a4 + a3;
  new_chain = v17;
  *(_DWORD *)v17 = v32;
  return result;
}
