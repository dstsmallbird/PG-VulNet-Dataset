__int64 __fastcall cache_insert(char *src, __int128 *a2, __int64 a3, unsigned __int64 a4, int a5)
{
  char *v5; // r13
  __int128 *v6; // r12
  int v8; // ebx
  unsigned __int64 v9; // rax
  __int64 v10; // r15
  __int64 v11; // rax
  __int64 v12; // rdx
  __int64 v13; // r8
  __int64 v14; // r9
  __int64 v15; // rcx
  __int64 v16; // rax
  __int64 v17; // rcx
  __int64 v18; // r14
  bool v19; // zf
  char *v20; // rax
  __int64 v21; // rax
  unsigned int v24; // [rsp+14h] [rbp-64h]
  int v25; // [rsp+14h] [rbp-64h]
  __int128 v26; // [rsp+20h] [rbp-58h] BYREF
  unsigned __int64 v27; // [rsp+38h] [rbp-40h]

  v5 = src;
  v6 = a2;
  v8 = a5;
  v27 = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000u, src, a2, 0LL);
    v9 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v9 >= a4 || !v9 )
      v9 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( !a4 || a4 <= v9 )
      a4 = v9;
  }
  v10 = 0LL;
  v24 = insert_error;
  if ( !insert_error )
  {
    v11 = cache_scan_free(src, a2, a3, (unsigned __int16)v8);
    v14 = v24;
    v10 = v11;
    if ( !v11 )
    {
      v25 = v8 & 4;
      while ( 1 )
      {
        v18 = cache_tail;
        if ( !cache_tail )
          goto LABEL_22;
        v15 = *(unsigned __int16 *)(cache_tail + 52);
        if ( (v15 & 0xC) == 0 )
        {
          if ( src )
          {
            v15 = -1LL;
            do
            {
              if ( !v15 )
                break;
              v19 = *src++ == 0;
              --v15;
            }
            while ( !v19 );
            if ( (unsigned __int64)(-v15 - 2) > 0x31 )
            {
              v10 = big_free;
              if ( big_free )
              {
                big_free = *(_QWORD *)big_free;
              }
              else
              {
                if ( !bignames_left && (v8 & 0x5000) == 0 )
                  goto LABEL_22;
                v10 = whine_malloc(1032LL, a2, v12, v15, v13, v14);
                if ( !v10 )
                  goto LABEL_22;
                if ( bignames_left )
                  --bignames_left;
              }
            }
          }
          else
          {
            v10 = 0LL;
          }
          cache_unlink(v18, a2, v12, v15, v13, v14);
          *(_WORD *)(v18 + 52) = v8;
          if ( v10 )
          {
            BYTE1(v8) |= 2u;
            *(_QWORD *)(v18 + 56) = v10;
            *(_WORD *)(v18 + 52) = v8;
          }
          v20 = (char *)cache_get_name(v18);
          if ( v5 )
            strcpy(v20, v5);
          else
            *v20 = 0;
          if ( v6 )
            *(_OWORD *)(v18 + 24) = *v6;
          v21 = new_chain;
          v10 = v18;
          new_chain = v18;
          *(_QWORD *)(v18 + 40) = a3 + a4;
          *(_QWORD *)v18 = v21;
          return v10;
        }
        if ( (_DWORD)v14 )
        {
          if ( !warned_8715 )
          {
            my_syslog(3, (unsigned int)"Internal error in cache.", v12, v15, v13, v14);
            warned_8715 = 1;
          }
          goto LABEL_22;
        }
        if ( v25 )
        {
          v26 = *(_OWORD *)(cache_tail + 24);
          v16 = cache_get_name(cache_tail);
          a2 = &v26;
          cache_scan_free(v16, &v26, a3, v17);
          ++cache_live_freed;
          v14 = 1LL;
        }
        else
        {
          a2 = 0LL;
          cache_scan_free(0LL, 0LL, a3, 0LL);
          v14 = 0LL;
          v25 = 1;
        }
      }
    }
    if ( (v8 & 0x180) == 0
      || (v8 & 8) == 0
      || ((v8 & 0x80u) == 0 || *(char *)(v11 + 52) >= 0 || *(_DWORD *)(v11 + 24) != *(_DWORD *)a2)
      && (!_bittest(&v8, 8u)
       || (*(_BYTE *)(v11 + 53) & 1) == 0
       || *(_DWORD *)(v11 + 24) != *(_DWORD *)a2
       || *(_DWORD *)(v11 + 28) != *((_DWORD *)a2 + 1)
       || *(_DWORD *)(v11 + 32) != *((_DWORD *)a2 + 2)
       || *(_DWORD *)(v11 + 36) != *((_DWORD *)a2 + 3)) )
    {
LABEL_22:
      insert_error = 1;
      return 0LL;
    }
  }
  return v10;
}
