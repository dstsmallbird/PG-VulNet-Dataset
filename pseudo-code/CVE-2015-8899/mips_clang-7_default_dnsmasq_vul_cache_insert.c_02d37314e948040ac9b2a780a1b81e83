int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, int a5)
{
  __int16 v8; // $s4
  unsigned int v10; // $v0
  unsigned int v11; // $a0
  int v12; // $s3
  int v13; // $v0
  int v14; // $s7
  int v15; // $s0
  int v16; // $a3
  int v17; // $at
  _DWORD *v18; // $a0
  int v19; // $s6
  int v20; // $v1
  int *v21; // $v0
  int *v22; // $at
  _DWORD *v23; // $s0
  char *v24; // $a0
  int v26; // $v0
  _DWORD *v27; // [sp+14h] [-14h]
  int v28[4]; // [sp+18h] [-10h] BYREF

  v8 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v10 = *(_DWORD *)(fbss + 252);
    v11 = a4;
    if ( v10 < a4 )
      v11 = *(_DWORD *)(fbss + 252);
    if ( v10 )
      a4 = v11;
    if ( a4 < *(_DWORD *)(fbss + 248) )
      a4 = *(_DWORD *)(fbss + 248);
  }
  v12 = 0;
  if ( !insert_error )
  {
    v13 = cache_scan_free(a1, a2, a3, a5);
    if ( v13 )
    {
      if ( (a5 & 0x180) == 0
        || (a5 & 8) == 0
        || ((v12 = v13, (a5 & 0x80) == 0) || (*(_BYTE *)(v13 + 37) & 0x80) == 0 || *(_DWORD *)(v13 + 12) != *a2)
        && ((a5 & 0x100) == 0
         || (*(_BYTE *)(v13 + 36) & 1) == 0
         || *(_DWORD *)(v13 + 12) != *a2
         || *(_DWORD *)(v13 + 16) != a2[1]
         || *(_DWORD *)(v13 + 20) != a2[2]
         || *(_DWORD *)(v13 + 24) != a2[3]) )
      {
        insert_error = 1;
        v12 = 0;
      }
      return v12;
    }
    v27 = a2;
    v12 = cache_tail;
    if ( !cache_tail )
    {
LABEL_34:
      insert_error = 1;
      return 0;
    }
    v14 = a5 & 4;
    v15 = 0;
    while ( 1 )
    {
      v16 = *(unsigned __int16 *)(v12 + 36);
      if ( (v16 & 0xC) == 0 )
        break;
      if ( v15 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        insert_error = 1;
        return 0;
      }
      if ( v14 )
      {
        v17 = *(_DWORD *)(v12 + 20);
        v28[3] = *(_DWORD *)(v12 + 24);
        v28[2] = v17;
        v28[1] = *(_DWORD *)(v12 + 16);
        v28[0] = *(_DWORD *)(v12 + 12);
        if ( (v16 & 0x200) != 0 )
        {
          v18 = *(_DWORD **)(v12 + 40);
        }
        else
        {
          v18 = (_DWORD *)(v12 + 40);
          if ( (v16 & 2) != 0 )
            v18 = (_DWORD *)*v18;
        }
        cache_scan_free(v18, v28, a3, v16);
        ++cache_live_freed;
        v15 = 1;
      }
      else
      {
        v15 = 0;
        cache_scan_free(0, 0, a3, 0);
        v14 = 1;
      }
      v12 = cache_tail;
      if ( !cache_tail )
        goto LABEL_34;
    }
    v19 = 0;
    if ( a1 && strlen(a1) >= 0x32 )
    {
      v19 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !(bignames_left | a5 & 0x5000) || (v26 = whine_malloc(1028)) == 0 )
        {
          insert_error = 1;
          return 0;
        }
        v19 = v26;
        if ( bignames_left )
          --bignames_left;
      }
    }
    v20 = *(_DWORD *)v12;
    v21 = *(int **)(v12 + 4);
    if ( v21 )
    {
      *v21 = v20;
      v20 = *(_DWORD *)v12;
    }
    else
    {
      cache_head = *(_DWORD *)v12;
    }
    v22 = (int *)(v20 + 4);
    if ( !v20 )
      v22 = &cache_tail;
    *v22 = (int)v21;
    *(_WORD *)(v12 + 36) = a5;
    if ( v19 )
    {
      *(_DWORD *)(v12 + 40) = v19;
      v8 = a5 | 0x200;
      *(_WORD *)(v12 + 36) = a5 | 0x200;
    }
    if ( (v8 & 0x200) != 0 )
    {
      v24 = *(char **)(v12 + 40);
      v23 = v27;
    }
    else
    {
      v23 = v27;
      v24 = (char *)(v12 + 40);
      if ( (v8 & 2) != 0 )
      {
        v24 = *(char **)v24;
        if ( !a1 )
        {
LABEL_57:
          *v24 = 0;
          if ( !v23 )
          {
LABEL_59:
            *(_DWORD *)(v12 + 28) = a4 + a3;
            *(_DWORD *)v12 = new_chain;
            new_chain = v12;
            return v12;
          }
LABEL_58:
          *(_DWORD *)(v12 + 24) = v23[3];
          *(_DWORD *)(v12 + 20) = v23[2];
          *(_DWORD *)(v12 + 16) = v23[1];
          *(_DWORD *)(v12 + 12) = *v23;
          goto LABEL_59;
        }
LABEL_55:
        strcpy(v24, a1);
        if ( !v23 )
          goto LABEL_59;
        goto LABEL_58;
      }
    }
    if ( !a1 )
      goto LABEL_57;
    goto LABEL_55;
  }
  return v12;
}
