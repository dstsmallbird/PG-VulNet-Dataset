int __fastcall cache_insert(int a1, _DWORD *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v9; // r6
  unsigned int v10; // r0
  int v11; // r8
  int v12; // r0
  bool v13; // zf
  bool v14; // zf
  bool v15; // zf
  int v16; // r8
  int v17; // r10
  int v18; // r7
  int v19; // r3
  int v20; // r1
  int v21; // r2
  int v22; // r4
  _DWORD *v23; // r0
  int v24; // r3
  size_t v25; // r0
  _DWORD *v26; // r9
  int v27; // r4
  __int16 v28; // r7
  int *v30; // r0
  int v31; // r1
  int *v32; // r2
  char *v33; // r0
  int v34; // r1
  int v35; // r2
  int v36; // r3
  int v37; // r0
  _DWORD *v38; // [sp+0h] [bp-38h]
  char *s; // [sp+4h] [bp-34h]
  int v40; // [sp+8h] [bp-30h]
  _DWORD v41[11]; // [sp+Ch] [bp-2Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = a4;
    v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v10 < a4 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v10 )
      v9 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v9 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  else
  {
    v9 = a4;
  }
  v11 = 0;
  if ( insert_error )
    return v11;
  v12 = cache_scan_free(a1, a2, a3, a5);
  if ( v12 )
  {
    v13 = (a5 & 0x180) == 0;
    if ( (a5 & 0x180) != 0 )
    {
      v11 = v12;
      v13 = (a5 & 8) == 0;
    }
    if ( !v13 )
    {
      v14 = (a5 & 0x80) == 0;
      if ( (a5 & 0x80) != 0 )
        v14 = (*(_BYTE *)(v11 + 36) & 0x80) == 0;
      if ( !v14 && *(_DWORD *)(v11 + 12) == *a2 )
        return v11;
      v15 = (a5 & 0x100) == 0;
      if ( (a5 & 0x100) != 0 )
        v15 = (*(_BYTE *)(v11 + 37) & 1) == 0;
      if ( !v15
        && *(_DWORD *)(v11 + 12) == *a2
        && *(_DWORD *)(v11 + 16) == a2[1]
        && *(_DWORD *)(v11 + 20) == a2[2]
        && *(_DWORD *)(v11 + 24) == a2[3] )
      {
        return v11;
      }
    }
    goto LABEL_47;
  }
  s = (char *)a1;
  v40 = a3;
  v38 = a2;
  v16 = cache_tail;
  if ( !cache_tail )
  {
LABEL_47:
    v11 = 0;
    insert_error = 1;
    return v11;
  }
  v17 = 0;
  v18 = a5 & 4;
  while ( 1 )
  {
    v19 = *(unsigned __int16 *)(v16 + 36);
    if ( (v19 & 0xC) == 0 )
      break;
    if ( v17 )
    {
      if ( !cache_insert_warned )
      {
        my_syslog(3, "Internal error in cache.");
        cache_insert_warned = 1;
      }
      goto LABEL_47;
    }
    if ( v18 )
    {
      v20 = *(_DWORD *)(v16 + 16);
      v21 = *(_DWORD *)(v16 + 20);
      v22 = *(_DWORD *)(v16 + 24);
      v41[0] = *(_DWORD *)(v16 + 12);
      v41[1] = v20;
      v41[2] = v21;
      v41[3] = v22;
      if ( (v19 & 0x200) != 0 )
      {
        v23 = *(_DWORD **)(v16 + 40);
      }
      else
      {
        v23 = (_DWORD *)(v16 + 40);
        if ( (v19 & 2) != 0 )
          v23 = (_DWORD *)*v23;
      }
      cache_scan_free(v23, v41, v40, v19);
      v17 = 1;
      ++cache_live_freed;
      v16 = cache_tail;
      if ( !cache_tail )
        goto LABEL_47;
    }
    else
    {
      v17 = 0;
      cache_scan_free(0, 0, v40, 0);
      v18 = 1;
      v16 = cache_tail;
      if ( !cache_tail )
        goto LABEL_47;
    }
  }
  v24 = 0;
  if ( s )
  {
    v25 = strlen(s);
    v26 = v38;
    v27 = v40;
    v28 = a5;
    v24 = 0;
    if ( v25 >= 0x32 )
    {
      v24 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !(bignames_left | a5 & 0x5000) )
          goto LABEL_47;
        v37 = whine_malloc(1028);
        if ( !v37 )
          goto LABEL_47;
        v24 = v37;
        if ( bignames_left )
          --bignames_left;
      }
    }
  }
  else
  {
    v26 = v38;
    v27 = v40;
    v28 = a5;
  }
  v30 = *(int **)(v16 + 4);
  v31 = *(_DWORD *)v16;
  if ( v30 )
  {
    *v30 = v31;
    v31 = *(_DWORD *)v16;
  }
  else
  {
    cache_head = *(_DWORD *)v16;
  }
  v32 = (int *)(v31 + 4);
  if ( !v31 )
    v32 = &cache_tail;
  *v32 = (int)v30;
  *(_WORD *)(v16 + 36) = v28;
  if ( v24 )
  {
    v28 |= 0x200u;
    *(_DWORD *)(v16 + 40) = v24;
    *(_WORD *)(v16 + 36) = v28;
  }
  if ( (v28 & 0x200) != 0 )
  {
    v33 = *(char **)(v16 + 40);
    if ( !s )
    {
LABEL_66:
      *v33 = 0;
      goto LABEL_67;
    }
  }
  else
  {
    v33 = (char *)(v16 + 40);
    if ( (v28 & 2) != 0 )
      v33 = *(char **)v33;
    if ( !s )
      goto LABEL_66;
  }
  strcpy(v33, s);
LABEL_67:
  if ( v26 )
  {
    v34 = v26[1];
    v35 = v26[2];
    v36 = v26[3];
    *(_DWORD *)(v16 + 12) = *v26;
    *(_DWORD *)(v16 + 16) = v34;
    *(_DWORD *)(v16 + 20) = v35;
    *(_DWORD *)(v16 + 24) = v36;
  }
  *(_DWORD *)(v16 + 28) = v9 + v27;
  *(_DWORD *)v16 = new_chain;
  new_chain = v16;
  return v16;
}
