int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v7; // r9
  int v8; // r6
  int v9; // r0
  int v10; // r3
  unsigned int v12; // r3
  bool v13; // cf
  unsigned int v15; // r3
  bool v16; // cc
  int v18; // r3
  int v19; // r10
  int v20; // r1
  int v21; // r2
  int v22; // r3
  int v23; // r0
  int v24; // r10
  char *v25; // r0
  int v26; // r1
  int v27; // r2
  int v28; // r3
  int v29; // r0
  int v32; // [sp+Ch] [bp-4Ch]
  _DWORD v33[4]; // [sp+1Ch] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v12 = *(_DWORD *)(dnsmasq_daemon + 252);
    v13 = 1;
    if ( v12 )
      v13 = v12 >= a4;
    if ( !v13 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    v15 = *(_DWORD *)(dnsmasq_daemon + 248);
    v16 = v15 != 0;
    if ( v15 )
      v16 = v15 > a4;
    if ( v16 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  v7 = insert_error;
  v8 = 0;
  if ( !insert_error )
  {
    v9 = cache_scan_free(a1, a2, a3, a5);
    v8 = v9;
    if ( v9 )
    {
      if ( (a5 & 0x180) == 0 )
        goto LABEL_17;
      v10 = (a5 >> 3) & 1;
      if ( !a2 )
        v10 = 0;
      if ( !v10
        || ((a5 & 0x80) == 0 || (*(_WORD *)(v9 + 36) & 0x80) == 0 || *(_DWORD *)(v9 + 12) != *a2)
        && ((a5 & 0x100) == 0
         || (*(_WORD *)(v9 + 36) & 0x100) == 0
         || *(_DWORD *)(v9 + 12) != *a2
         || *(_DWORD *)(v9 + 16) != a2[1]
         || *(_DWORD *)(v9 + 20) != a2[2]
         || *(_DWORD *)(v9 + 24) != a2[3]) )
      {
LABEL_17:
        insert_error = 1;
        v8 = 0;
      }
      return v8;
    }
    v32 = a5 & 4;
    v18 = v7;
    while ( 1 )
    {
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0;
      }
      v19 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v19 & 0xC) == 0 )
        break;
      if ( v18 )
      {
        if ( !warned_12395 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_12395 = 1;
        }
        insert_error = 1;
        return v8;
      }
      if ( v32 )
      {
        v20 = *(_DWORD *)(cache_tail + 16);
        v21 = *(_DWORD *)(cache_tail + 20);
        v22 = *(_DWORD *)(cache_tail + 24);
        v33[0] = *(_DWORD *)(cache_tail + 12);
        v33[1] = v20;
        v33[2] = v21;
        v33[3] = v22;
        v23 = cache_get_name(cache_tail);
        cache_scan_free(v23, v33, a3, v19);
        ++cache_live_freed;
        v18 = 1;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v18 = 0;
        v32 = 1;
      }
    }
    v24 = cache_tail;
    if ( a1 && strlen(a1) > 0x31 )
    {
      v8 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v29 = whine_malloc(1028)) == 0 )
        {
          insert_error = 1;
          return v8;
        }
        v8 = v29;
        if ( bignames_left )
          --bignames_left;
      }
      cache_unlink(v24);
      *(_DWORD *)(v24 + 40) = v8;
      *(_WORD *)(v24 + 36) = a5 | 0x200;
    }
    else
    {
      cache_unlink(v24);
      *(_WORD *)(v24 + 36) = a5;
      if ( !a1 )
      {
        *(_BYTE *)cache_get_name(v24) = 0;
        goto LABEL_51;
      }
    }
    v25 = (char *)cache_get_name(v24);
    strcpy(v25, a1);
LABEL_51:
    if ( a2 )
    {
      v26 = a2[1];
      v27 = a2[2];
      v28 = a2[3];
      *(_DWORD *)(v24 + 12) = *a2;
      *(_DWORD *)(v24 + 16) = v26;
      *(_DWORD *)(v24 + 20) = v27;
      *(_DWORD *)(v24 + 24) = v28;
    }
    *(_DWORD *)(v24 + 28) = a3 + a4;
    *(_DWORD *)v24 = new_chain;
    new_chain = v24;
    v8 = v24;
  }
  return v8;
}
