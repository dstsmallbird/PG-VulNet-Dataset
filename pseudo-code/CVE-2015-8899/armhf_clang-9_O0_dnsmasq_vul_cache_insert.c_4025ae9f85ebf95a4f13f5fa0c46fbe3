int __fastcall cache_insert(char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v5; // r0
  char *v6; // r0
  _DWORD *v7; // r0
  _DWORD *v8; // r1
  bool v10; // [sp+8h] [bp-48h]
  int v11[5]; // [sp+Ch] [bp-44h] BYREF
  _DWORD *v12; // [sp+20h] [bp-30h]
  _DWORD *v13; // [sp+24h] [bp-2Ch]
  int v14; // [sp+28h] [bp-28h]
  int v15; // [sp+2Ch] [bp-24h]
  int v16; // [sp+30h] [bp-20h]
  int v17; // [sp+34h] [bp-1Ch]
  unsigned __int16 v18; // [sp+3Ah] [bp-16h]
  unsigned int v19; // [sp+3Ch] [bp-14h]
  int v20; // [sp+40h] [bp-10h]
  _DWORD *v21; // [sp+44h] [bp-Ch]
  char *s; // [sp+48h] [bp-8h]

  s = a1;
  v21 = a2;
  v20 = a3;
  v19 = a4;
  v18 = a5;
  v16 = 0;
  v15 = a5 & 4;
  v14 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(v18 | 0x10000, s, v21, 0);
    if ( *(_DWORD *)(dnsmasq_daemon + 252) && *(_DWORD *)(dnsmasq_daemon + 252) < v19 )
      v19 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( *(_DWORD *)(dnsmasq_daemon + 248) && *(_DWORD *)(dnsmasq_daemon + 248) > v19 )
      v19 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  if ( insert_error )
    return 0;
  v17 = cache_scan_free(s, v21, v20, v18);
  if ( v17 )
  {
    if ( (v18 & 0x180) != 0 && (v18 & 8) != 0 )
    {
      if ( (v18 & 0x80) != 0 && (*(_WORD *)(v17 + 36) & 0x80) != 0 && *(_DWORD *)(v17 + 12) == *v21 )
        return v17;
      if ( (v18 & 0x100) != 0 && (*(_WORD *)(v17 + 36) & 0x100) != 0 )
      {
        v13 = (_DWORD *)(v17 + 12);
        v12 = v21;
        v10 = 0;
        if ( *(_DWORD *)(v17 + 12) == *v21 )
        {
          v10 = 0;
          if ( v13[1] == v12[1] )
          {
            v10 = 0;
            if ( v13[2] == v12[2] )
              v10 = v13[3] == v12[3];
          }
        }
        v11[4] = v10;
        if ( v10 )
          return v17;
      }
    }
    insert_error = 1;
    return 0;
  }
  while ( 1 )
  {
    v17 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0;
    }
    if ( (*(_WORD *)(v17 + 36) & 0xC) == 0 )
      break;
    if ( v14 )
    {
      if ( !cache_insert_warned )
      {
        my_syslog(3, "Internal error in cache.");
        cache_insert_warned = 1;
      }
      insert_error = 1;
      return 0;
    }
    if ( v15 )
    {
      v11[0] = *(_DWORD *)(v17 + 12);
      v11[1] = *(_DWORD *)(v17 + 16);
      v11[2] = *(_DWORD *)(v17 + 20);
      v11[3] = *(_DWORD *)(v17 + 24);
      v14 = 1;
      v5 = cache_get_name(v17);
      cache_scan_free(v5, v11, v20, *(unsigned __int16 *)(v17 + 36));
      ++cache_live_freed;
    }
    else
    {
      cache_scan_free(0, 0, v20, 0);
      v15 = 1;
    }
  }
  if ( s && strlen(s) > 0x31 )
  {
    if ( big_free )
    {
      v16 = big_free;
      big_free = *(_DWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (v18 & 0x5000) == 0 || (v16 = whine_malloc(1028)) == 0 )
      {
        insert_error = 1;
        return 0;
      }
      if ( bignames_left )
        --bignames_left;
    }
  }
  cache_unlink(v17);
  *(_WORD *)(v17 + 36) = v18;
  if ( v16 )
  {
    *(_DWORD *)(v17 + 40) = v16;
    *(_WORD *)(v17 + 36) |= 0x200u;
  }
  if ( s )
  {
    v6 = (char *)cache_get_name(v17);
    strcpy(v6, s);
  }
  else
  {
    *(_BYTE *)cache_get_name(v17) = 0;
  }
  if ( v21 )
  {
    v7 = (_DWORD *)v17;
    v8 = v21;
    *(_DWORD *)(v17 + 12) = *v21;
    v7[4] = v8[1];
    v7[5] = v8[2];
    v7[6] = v8[3];
  }
  *(_DWORD *)(v17 + 28) = v20 + v19;
  *(_DWORD *)v17 = new_chain;
  new_chain = v17;
  return v17;
}
