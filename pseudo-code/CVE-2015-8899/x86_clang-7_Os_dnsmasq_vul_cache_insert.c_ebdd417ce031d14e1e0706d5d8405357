int __cdecl cache_insert(char *s, int cp, time_t time1, int a4, __int16 a5)
{
  __int16 v5; // ax
  int v6; // ebp
  _DWORD *v7; // ebx
  unsigned int v8; // edx
  unsigned int v9; // eax
  bool v10; // zf
  int v11; // edi
  int v12; // eax
  int v13; // ecx
  int v14; // ebx
  int v15; // esi
  int v16; // ebp
  __int16 v17; // ax
  int v18; // ebp
  int *v19; // eax
  int v20; // ecx
  int *v22; // ecx
  __int64 *v23; // esi
  int v24; // ebx
  char *v25; // eax
  __int64 v26; // xmm0_8
  int v27; // eax
  int v28; // [esp+0h] [ebp-2Ch]

  v5 = a5;
  v6 = a4;
  if ( (a5 & 0x980) != 0 )
  {
    v7 = (_DWORD *)cp;
    log_query((unsigned __int16)a5 + 0x10000, (int)s, (void *)cp, 0);
    v8 = a4;
    v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v9 < a4 )
      v8 = *(_DWORD *)(dnsmasq_daemon + 252);
    v10 = v9 == 0;
    v5 = a5;
    if ( v10 )
      v8 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v8 )
      v8 = *(_DWORD *)(dnsmasq_daemon + 248);
    v6 = v8;
  }
  else
  {
    v7 = (_DWORD *)cp;
  }
  v11 = 0;
  if ( !insert_error )
  {
    v12 = cache_scan_free(time1, v5);
    if ( v12 )
    {
      v13 = (unsigned __int16)a5;
      if ( (a5 & 0x180) != 0 )
      {
        v11 = v12;
        if ( (a5 & 8) != 0
          && ((a5 & 0x80u) != 0 && *(char *)(v12 + 36) < 0 && *(_DWORD *)(v12 + 12) == *v7
           || _bittest(&v13, 8u)
           && (*(_BYTE *)(v12 + 37) & 1) != 0
           && *(_DWORD *)(v12 + 12) == *v7
           && *(_DWORD *)(v12 + 16) == v7[1]
           && *(_DWORD *)(v12 + 20) == v7[2]
           && *(_DWORD *)(v12 + 24) == v7[3]) )
        {
          return v11;
        }
      }
LABEL_41:
      insert_error = 1;
      return 0;
    }
    v11 = cache_tail;
    v14 = (unsigned __int16)a5;
    v28 = v6;
    if ( !cache_tail )
      goto LABEL_41;
    v15 = 0;
    v16 = a5 & 4;
    while ( 1 )
    {
      v17 = *(_WORD *)(v11 + 36);
      if ( (v17 & 0xC) == 0 )
        break;
      if ( v15 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        goto LABEL_41;
      }
      if ( v16 )
      {
        cache_scan_free(time1, v17);
        ++cache_live_freed;
        v15 = 1;
      }
      else
      {
        v15 = 0;
        cache_scan_free(time1, 0);
        v16 = 1;
      }
      v11 = cache_tail;
      if ( !cache_tail )
        goto LABEL_41;
    }
    v18 = 0;
    if ( s && strlen(s) >= 0x32 )
    {
      v18 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !(bignames_left | a5 & 0x5000) )
          goto LABEL_41;
        v27 = whine_malloc(0x404u);
        if ( !v27 )
          goto LABEL_41;
        v18 = v27;
        if ( bignames_left )
          --bignames_left;
      }
    }
    v19 = *(int **)(v11 + 4);
    v20 = *(_DWORD *)v11;
    if ( v19 )
    {
      *v19 = v20;
      v20 = *(_DWORD *)v11;
    }
    else
    {
      cache_head = *(_DWORD *)v11;
    }
    v10 = v20 == 0;
    v22 = (int *)(v20 + 4);
    if ( v10 )
      v22 = &cache_tail;
    *v22 = (int)v19;
    *(_WORD *)(v11 + 36) = a5;
    if ( v18 )
    {
      *(_DWORD *)(v11 + 40) = v18;
      v14 = (unsigned __int16)a5 | 0x200;
      *(_WORD *)(v11 + 36) = a5 | 0x200;
    }
    if ( _bittest(&v14, 9u) )
    {
      v25 = *(char **)(v11 + 40);
      v23 = (__int64 *)cp;
      v24 = v28;
    }
    else
    {
      v10 = (v14 & 2) == 0;
      v23 = (__int64 *)cp;
      v24 = v28;
      v25 = (char *)(v11 + 40);
      if ( !v10 )
        v25 = *(char **)v25;
    }
    if ( s )
      strcpy(v25, s);
    else
      *v25 = 0;
    if ( v23 )
    {
      v26 = *v23;
      *(_QWORD *)(v11 + 20) = v23[1];
      *(_QWORD *)(v11 + 12) = v26;
    }
    *(_DWORD *)(v11 + 28) = time1 + v24;
    *(_DWORD *)v11 = new_chain;
    new_chain = v11;
  }
  return v11;
}
