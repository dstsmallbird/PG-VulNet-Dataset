int __fastcall cache_insert(int a1, void *cp, int a3, int a4, __int16 a5)
{
  int v8; // r8
  int v9; // r4
  int v10; // r0
  int v11; // r2
  int v12; // r8
  __int16 v13; // r3
  int v15; // r0
  int v16; // r12
  int v17; // r1
  int v18; // r2
  int v19; // r3
  unsigned int v20; // r3
  bool v21; // cf
  bool v22; // cc
  size_t v23; // r0
  int v24; // r3
  int *v25; // r1
  int v26; // r2
  char *v27; // r0
  int v28; // r1
  int v29; // r2
  int v30; // r3
  int v31; // r3
  _BYTE *v32; // r2
  _DWORD v34[4]; // [sp+Ch] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v20 = *(_DWORD *)(dnsmasq_daemon + 252);
    v21 = 1;
    if ( v20 )
      v21 = v20 >= a4;
    if ( v21 )
      v20 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v22 = a4 != 0;
    if ( a4 )
      v22 = a4 > v20;
    if ( !v22 )
      a4 = v20;
  }
  v8 = insert_error;
  if ( insert_error )
    return 0;
  v10 = cache_scan_free(a1, cp, a3, (unsigned __int16)a5);
  v9 = v10;
  if ( !v10 )
  {
    v11 = v8;
    v12 = a5 & 4;
    while ( 1 )
    {
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_18;
      v16 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v16 & 0xC) == 0 )
        break;
      if ( v11 )
      {
        if ( !warned_10984 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_10984 = 1;
        }
        goto LABEL_18;
      }
      if ( v12 )
      {
        v17 = *(_DWORD *)(cache_tail + 16);
        v18 = *(_DWORD *)(cache_tail + 20);
        v19 = *(_DWORD *)(cache_tail + 24);
        v34[0] = *(_DWORD *)(cache_tail + 12);
        v34[1] = v17;
        v34[2] = v18;
        v34[3] = v19;
        if ( (v16 & 0x200) != 0 || (v16 & 2) != 0 )
          v15 = *(_DWORD *)(cache_tail + 40);
        else
          v15 = cache_tail + 40;
        cache_scan_free(v15, v34, a3, v16);
        v11 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v11 = 0;
        v12 = 1;
      }
    }
    if ( a1 )
    {
      v23 = strlen((const char *)a1);
      v24 = 0;
      if ( v23 > 0x31 )
      {
        v24 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_18;
          v24 = whine_malloc(1028);
          if ( !v24 )
            goto LABEL_18;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = *(int **)(v9 + 4);
    v26 = *(_DWORD *)v9;
    if ( v25 )
    {
      *v25 = v26;
      v26 = *(_DWORD *)v9;
    }
    else
    {
      cache_head = *(_DWORD *)v9;
    }
    if ( v26 )
      *(_DWORD *)(v26 + 4) = v25;
    else
      cache_tail = (int)v25;
    *(_WORD *)(v9 + 36) = a5;
    if ( v24 )
    {
      *(_WORD *)(v9 + 36) = a5 | 0x200;
      *(_DWORD *)(v9 + 40) = v24;
      if ( a1 )
        goto LABEL_56;
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
        {
          v27 = (char *)(v9 + 40);
          goto LABEL_57;
        }
LABEL_56:
        v27 = *(char **)(v9 + 40);
LABEL_57:
        strcpy(v27, (const char *)a1);
LABEL_58:
        if ( cp )
        {
          v28 = *((_DWORD *)cp + 1);
          v29 = *((_DWORD *)cp + 2);
          v30 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v9 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v9 + 16) = v28;
          *(_DWORD *)(v9 + 20) = v29;
          *(_DWORD *)(v9 + 24) = v30;
        }
        v31 = new_chain;
        *(_DWORD *)(v9 + 28) = a4 + a3;
        *(_DWORD *)v9 = v31;
        new_chain = v9;
        return v9;
      }
      if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
      {
        v32 = (_BYTE *)(v9 + 40);
LABEL_71:
        *v32 = 0;
        goto LABEL_58;
      }
    }
    v32 = *(_BYTE **)(v9 + 40);
    goto LABEL_71;
  }
  if ( (a5 & 0x180) == 0 )
    goto LABEL_18;
  v13 = (__int16)cp;
  if ( cp )
    v13 = 1;
  if ( (*(_DWORD *)&v13 & ((unsigned __int16)a5 >> 3)) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v10 + 36) & 0x80) == 0 || *(_DWORD *)(v10 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v10 + 36) & 0x100) == 0
     || *(_DWORD *)(v10 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v10 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v10 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v10 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_18:
    v9 = 0;
    insert_error = 1;
  }
  return v9;
}
