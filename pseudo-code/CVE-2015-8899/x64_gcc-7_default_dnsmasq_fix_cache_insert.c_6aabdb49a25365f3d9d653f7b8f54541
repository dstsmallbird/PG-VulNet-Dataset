__int64 __fastcall cache_insert(char *src, const __m128i *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v6; // er14
  __int64 v11; // rax
  int v12; // ecx
  int v13; // er8
  __int64 v14; // rdx
  int v15; // er9
  unsigned __int64 v17; // rax
  int v18; // er14
  unsigned __int16 v19; // ax
  __int64 v20; // rdi
  size_t v21; // rax
  __int64 v22; // rax
  __int64 *v23; // rsi
  __int64 v24; // rcx
  char *v25; // rdi
  __int64 v26; // rax
  __int16 v27; // ax
  _BYTE *v28; // rax
  int v29; // [rsp+8h] [rbp-60h]
  __int64 v30; // [rsp+8h] [rbp-60h]
  __int64 v31; // [rsp+8h] [rbp-60h]
  __m128i v32; // [rsp+10h] [rbp-58h] BYREF
  unsigned __int64 v33; // [rsp+28h] [rbp-40h]

  v6 = a5;
  v33 = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, src, a2, 0LL);
    v17 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v17 >= a4 || !v17 )
      v17 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( !a4 || a4 <= v17 )
      a4 = v17;
  }
  v29 = insert_error;
  if ( insert_error )
    return 0LL;
  v11 = cache_scan_free(src, a2, a3, v6);
  v14 = v11;
  v15 = v29;
  if ( !v11 )
  {
    v18 = a5 & 4;
    while ( 1 )
    {
      v14 = cache_tail;
      if ( !cache_tail )
        goto LABEL_15;
      v19 = *(_WORD *)(cache_tail + 52);
      if ( (v19 & 0xC) == 0 )
        break;
      if ( v15 )
      {
        if ( !warned_8686 )
        {
          my_syslog(3, (unsigned int)"Internal error in cache.", warned_8686, v12, v13, v15);
          warned_8686 = 1;
        }
        goto LABEL_15;
      }
      if ( v18 )
      {
        v32 = _mm_loadu_si128((const __m128i *)(cache_tail + 24));
        if ( (v19 & 0x200) != 0 || (v20 = cache_tail + 56, (v19 & 2) != 0) )
          v20 = *(_QWORD *)(cache_tail + 56);
        cache_scan_free(v20, &v32, a3, v19);
        ++cache_live_freed;
        v15 = 1;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v15 = 0;
        v18 = 1;
      }
    }
    if ( src && (v30 = cache_tail, v21 = strlen(src), v14 = v30, v21 > 0x31) )
    {
      v22 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_15;
        v22 = whine_malloc(1032LL);
        if ( !v22 )
          goto LABEL_15;
        v14 = v30;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v22 = 0LL;
    }
    v23 = *(__int64 **)(v14 + 8);
    v24 = *(_QWORD *)v14;
    if ( v23 )
    {
      *v23 = v24;
      v24 = *(_QWORD *)v14;
    }
    else
    {
      cache_head = *(_QWORD *)v14;
    }
    if ( v24 )
      *(_QWORD *)(v24 + 8) = v23;
    else
      cache_tail = (__int64)v23;
    *(_WORD *)(v14 + 52) = a5;
    if ( v22 )
    {
      *(_QWORD *)(v14 + 56) = v22;
      *(_WORD *)(v14 + 52) = a5 | 0x200;
      if ( src )
      {
LABEL_48:
        v25 = *(char **)(v14 + 56);
LABEL_49:
        v31 = v14;
        strcpy(v25, src);
        v14 = v31;
LABEL_50:
        if ( a2 )
          *(__m128i *)(v14 + 24) = _mm_loadu_si128(a2);
        v26 = new_chain;
        new_chain = v14;
        *(_QWORD *)(v14 + 40) = a4 + a3;
        *(_QWORD *)v14 = v26;
        return v14;
      }
    }
    else
    {
      v27 = a5 & 0x200;
      if ( src )
      {
        if ( !v27 )
        {
          v25 = (char *)(v14 + 56);
          if ( (a5 & 2) == 0 )
            goto LABEL_49;
        }
        goto LABEL_48;
      }
      if ( !v27 )
      {
        v28 = (_BYTE *)(v14 + 56);
        if ( (a5 & 2) == 0 )
        {
LABEL_63:
          *v28 = 0;
          goto LABEL_50;
        }
      }
    }
    v28 = *(_BYTE **)(v14 + 56);
    goto LABEL_63;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || !a2
    || ((a5 & 0x80u) == 0 || *(char *)(v11 + 52) >= 0 || *(_DWORD *)(v11 + 24) != a2->m128i_i32[0])
    && ((a5 & 0x100) == 0
     || (*(_BYTE *)(v11 + 53) & 1) == 0
     || *(_DWORD *)(v11 + 24) != a2->m128i_i32[0]
     || *(_DWORD *)(v11 + 28) != a2->m128i_i32[1]
     || *(_DWORD *)(v11 + 32) != a2->m128i_i32[2]
     || *(_DWORD *)(v11 + 36) != a2->m128i_i32[3]) )
  {
LABEL_15:
    insert_error = 1;
    v14 = 0LL;
  }
  return v14;
}
