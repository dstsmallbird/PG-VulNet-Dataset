int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v5; // eax
  unsigned int v6; // ecx
  int v7; // esi
  int v8; // edx
  int v9; // eax
  int v10; // ecx
  int v12; // edx
  int v13; // esi
  __int16 v14; // ax
  char *v15; // eax
  int v16; // eax
  unsigned __int16 v18; // [esp+0h] [ebp-4Ah]
  int v19; // [esp+2h] [ebp-48h]
  int v20; // [esp+2h] [ebp-48h]
  int v21; // [esp+2h] [ebp-48h]
  char v22[16]; // [esp+1Eh] [ebp-2Ch] BYREF
  unsigned int v23; // [esp+2Eh] [ebp-1Ch]

  v23 = __readgsdword(0x14u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, a2, 0);
    v5 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v5 >= a4 || !v5 )
      v5 = a4;
    v6 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v6;
    if ( !v6 || v6 <= v5 )
      a4 = v5;
  }
  v7 = insert_error;
  v8 = 0;
  if ( !insert_error )
  {
    v9 = cache_scan_free((unsigned __int16)a5);
    v8 = v9;
    if ( !v9 )
    {
      v19 = a5 & 4;
      while ( 1 )
      {
        v12 = cache_tail;
        if ( !cache_tail )
          goto LABEL_22;
        v18 = *(_DWORD *)(cache_tail + 36);
        if ( (*(_DWORD *)(cache_tail + 36) & 0xC) == 0 )
        {
          if ( a1 && strlen(a1) > 0x31 )
          {
            v13 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_22;
              v20 = cache_tail;
              v13 = whine_malloc(0x404u);
              if ( !v13 )
                goto LABEL_22;
              v12 = v20;
              if ( bignames_left )
                --bignames_left;
            }
          }
          else
          {
            v13 = 0;
          }
          v21 = v12;
          cache_unlink();
          LOBYTE(v14) = a5;
          *(_WORD *)(v21 + 36) = a5;
          if ( v13 )
          {
            HIBYTE(v14) = BYTE1(a5) | 2;
            *(_DWORD *)(v21 + 40) = v13;
            *(_WORD *)(v21 + 36) = v14;
          }
          v15 = (char *)cache_get_name(v21);
          v8 = v21;
          if ( a1 )
          {
            strcpy(v15, a1);
            v8 = v21;
          }
          else
          {
            *v15 = 0;
          }
          if ( a2 )
            qmemcpy((void *)(v8 + 12), a2, 0x10u);
          *(_DWORD *)(v8 + 28) = a3 + a4;
          v16 = new_chain;
          new_chain = v8;
          *(_DWORD *)v8 = v16;
          return v8;
        }
        if ( v7 )
        {
          if ( !warned_8161 )
          {
            my_syslog(3, "Internal error in cache.", v10, v10);
            warned_8161 = 1;
          }
          goto LABEL_22;
        }
        if ( v19 )
        {
          qmemcpy(v22, (const void *)(cache_tail + 12), sizeof(v22));
          v7 = 1;
          cache_get_name(cache_tail);
          cache_scan_free(v18);
          ++cache_live_freed;
        }
        else
        {
          cache_scan_free(0);
          v7 = 0;
          v19 = 1;
        }
      }
    }
    if ( (a5 & 0x180) == 0
      || (a5 & 8) == 0
      || ((a5 & 0x80u) == 0 || *(char *)(v9 + 36) >= 0 || *(_DWORD *)(v9 + 12) != *a2)
      && (!_bittest(&a5, 8u)
       || (*(_BYTE *)(v8 + 37) & 1) == 0
       || *(_DWORD *)(v8 + 12) != *a2
       || *(_DWORD *)(v8 + 16) != a2[1]
       || *(_DWORD *)(v8 + 20) != a2[2]
       || *(_DWORD *)(v8 + 24) != a2[3]) )
    {
LABEL_22:
      insert_error = 1;
      return 0;
    }
  }
  return v8;
}
