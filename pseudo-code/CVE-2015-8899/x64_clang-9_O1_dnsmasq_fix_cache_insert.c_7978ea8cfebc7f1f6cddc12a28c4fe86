__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, int a5)
{
  unsigned __int16 v5; // r15
  unsigned __int64 v8; // rcx
  unsigned __int64 v9; // rdx
  __int64 v10; // rax
  __int64 v11; // r13
  int v12; // er14
  int v13; // er12
  __int64 v14; // rax
  unsigned __int16 v15; // r15
  _OWORD *v16; // r14
  unsigned __int16 v17; // r15
  char *v18; // rax
  __int64 v20; // rax
  unsigned __int16 v21; // [rsp+8h] [rbp-60h]
  __int64 v22; // [rsp+10h] [rbp-58h]
  __int128 v23[4]; // [rsp+20h] [rbp-48h] BYREF

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned int)(a5 + 0x10000), a1, a2, 0LL);
    v8 = *(_QWORD *)(dnsmasq_daemon + 456);
    v9 = a4;
    if ( v8 < a4 )
      v9 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( !v8 )
      v9 = a4;
    if ( *(_QWORD *)(dnsmasq_daemon + 448) > v9 )
      v9 = *(_QWORD *)(dnsmasq_daemon + 448);
    a4 = v9;
  }
  if ( insert_error )
    return 0LL;
  v10 = cache_scan_free(a1, a2, a3, v5);
  if ( v10 )
  {
    if ( (v5 & 0x180) == 0 )
      goto LABEL_39;
    if ( !a2 )
      goto LABEL_39;
    v11 = v10;
    if ( (v5 & 8) == 0 )
      goto LABEL_39;
    if ( ((v5 & 0x80u) == 0 || *(char *)(v10 + 52) >= 0 || *(_DWORD *)(v10 + 24) != *a2)
      && ((v5 & 0x100) == 0
       || (*(_BYTE *)(v10 + 53) & 1) == 0
       || *(_DWORD *)(v10 + 24) != *a2
       || *(_DWORD *)(v10 + 28) != a2[1]
       || *(_DWORD *)(v10 + 32) != a2[2]
       || *(_DWORD *)(v10 + 36) != a2[3]) )
    {
      goto LABEL_39;
    }
    return v11;
  }
  v21 = v5;
  v11 = cache_tail;
  if ( !cache_tail )
    goto LABEL_39;
  v12 = v5 & 4;
  v13 = 0;
  while ( 1 )
  {
    v15 = *(_WORD *)(v11 + 52);
    if ( (v15 & 0xC) == 0 )
    {
      if ( a1 && strlen(a1) >= 0x32 )
      {
        if ( big_free )
        {
          v22 = big_free;
          big_free = *(_QWORD *)big_free;
          v16 = a2;
          v17 = v21;
        }
        else
        {
          v17 = v21;
          if ( !(bignames_left | v21 & 0x5000) )
            goto LABEL_39;
          v20 = whine_malloc(1032LL);
          if ( !v20 )
            goto LABEL_39;
          v22 = v20;
          if ( bignames_left )
            --bignames_left;
          v16 = a2;
        }
        cache_unlink(v11);
        *(_QWORD *)(v11 + 56) = v22;
        *(_WORD *)(v11 + 52) = v17 | 0x200;
        v18 = (char *)cache_get_name(v11);
      }
      else
      {
        cache_unlink(v11);
        *(_WORD *)(v11 + 52) = v21;
        v18 = (char *)cache_get_name(v11);
        if ( !a1 )
        {
          *v18 = 0;
          v16 = a2;
          if ( !a2 )
            goto LABEL_46;
          goto LABEL_45;
        }
        v16 = a2;
      }
      strcpy(v18, a1);
      if ( !v16 )
      {
LABEL_46:
        *(_QWORD *)(v11 + 40) = a3 + a4;
        *(_QWORD *)v11 = new_chain;
        new_chain = v11;
        return v11;
      }
LABEL_45:
      *(_OWORD *)(v11 + 24) = *v16;
      goto LABEL_46;
    }
    if ( v13 )
      break;
    if ( v12 )
    {
      v23[0] = *(_OWORD *)(v11 + 24);
      v14 = cache_get_name(v11);
      cache_scan_free(v14, v23, a3, v15);
      ++cache_live_freed;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      cache_scan_free(0LL, 0LL, a3, 0LL);
      v12 = 1;
    }
    v11 = cache_tail;
    if ( !cache_tail )
      goto LABEL_39;
  }
  if ( !cache_insert_warned )
  {
    my_syslog(3LL, "Internal error in cache.");
    cache_insert_warned = 1;
  }
LABEL_39:
  insert_error = 1;
  return 0LL;
}
