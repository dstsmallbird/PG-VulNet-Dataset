int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int result; // $v0
  int v6; // $v0
  int v7; // $a0
  int v8; // $v1
  int v9; // $v0
  int v10; // $v0
  char *v11; // $v0
  int v12; // $a1
  int v13; // $a0
  int v14; // $v1
  int v17; // [sp+24h] [+24h]
  int v18; // [sp+28h] [+28h]
  int v19; // [sp+2Ch] [+2Ch]
  int v20; // [sp+30h] [+30h]
  int v21; // [sp+30h] [+30h]
  int v22[4]; // [sp+3Ch] [+3Ch] BYREF

  v17 = 0;
  v18 = a5 & 4;
  v19 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    if ( *(_DWORD *)(fbss + 252) && *(_DWORD *)(fbss + 252) < a4 )
      a4 = *(_DWORD *)(fbss + 252);
    if ( *(_DWORD *)(fbss + 248) && a4 < *(_DWORD *)(fbss + 248) )
      a4 = *(_DWORD *)(fbss + 248);
  }
  if ( insert_error )
    return 0;
  v20 = cache_scan_free(a1, a2, a3, a5);
  if ( v20 )
  {
    if ( (a5 & 0x180) == 0 || (a5 & 8) == 0 )
      goto LABEL_27;
    if ( (a5 & 0x80) != 0 && (*(_WORD *)(v20 + 36) & 0x80) != 0 && *(_DWORD *)(v20 + 12) == *a2 )
      return v20;
    if ( (a5 & 0x100) != 0
      && (*(_WORD *)(v20 + 36) & 0x100) != 0
      && (*(_DWORD *)(v20 + 12) != *a2
       || *(_DWORD *)(v20 + 16) != a2[1]
       || *(_DWORD *)(v20 + 20) != a2[2]
       || *(_DWORD *)(v20 + 24) != a2[3] ? (v6 = 0) : (v6 = 1),
          v6) )
    {
      result = v20;
    }
    else
    {
LABEL_27:
      insert_error = 1;
      result = 0;
    }
  }
  else
  {
    while ( 1 )
    {
      v21 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0;
      }
      if ( (*(_WORD *)(cache_tail + 36) & 0xC) == 0 )
        break;
      if ( v19 )
      {
        if ( !warned_7290 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_7290 = 1;
        }
        insert_error = 1;
        return 0;
      }
      if ( v18 )
      {
        v7 = *(_DWORD *)(cache_tail + 16);
        v8 = *(_DWORD *)(cache_tail + 20);
        v9 = *(_DWORD *)(cache_tail + 24);
        v22[0] = *(_DWORD *)(cache_tail + 12);
        v22[1] = v7;
        v22[2] = v8;
        v22[3] = v9;
        v19 = 1;
        v10 = cache_get_name(cache_tail);
        cache_scan_free(v10, v22, a3, *(unsigned __int16 *)(v21 + 36));
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v18 = 1;
      }
    }
    if ( a1 && strlen(a1) >= 0x32 )
    {
      if ( big_free )
      {
        v17 = big_free;
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v17 = whine_malloc(1028)) == 0 )
        {
          insert_error = 1;
          return 0;
        }
        if ( bignames_left )
          --bignames_left;
      }
    }
    cache_unlink(v21);
    *(_WORD *)(v21 + 36) = a5;
    if ( v17 )
    {
      *(_DWORD *)(v21 + 40) = v17;
      *(_WORD *)(v21 + 36) |= 0x200u;
    }
    if ( a1 )
    {
      v11 = (char *)cache_get_name(v21);
      strcpy(v11, a1);
    }
    else
    {
      *(_BYTE *)cache_get_name(v21) = 0;
    }
    if ( a2 )
    {
      v12 = a2[1];
      v13 = a2[2];
      v14 = a2[3];
      *(_DWORD *)(v21 + 12) = *a2;
      *(_DWORD *)(v21 + 16) = v12;
      *(_DWORD *)(v21 + 20) = v13;
      *(_DWORD *)(v21 + 24) = v14;
    }
    *(_DWORD *)(v21 + 28) = a4 + a3;
    *(_DWORD *)v21 = new_chain;
    new_chain = v21;
    result = v21;
  }
  return result;
}
