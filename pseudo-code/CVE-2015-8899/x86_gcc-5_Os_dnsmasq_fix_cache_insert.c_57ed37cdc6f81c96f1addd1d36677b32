int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v5; // eax
  unsigned int v6; // edi
  int v7; // edx
  int v8; // eax
  int v9; // esi
  int v10; // edx
  int v11; // esi
  __int16 v12; // ax
  char *v13; // eax
  int v14; // eax
  unsigned __int16 v16; // [esp+6h] [ebp-4Ah]
  int v17; // [esp+8h] [ebp-48h]
  int v18; // [esp+8h] [ebp-48h]
  int v19; // [esp+8h] [ebp-48h]
  char v20[16]; // [esp+24h] [ebp-2Ch] BYREF
  unsigned int v21; // [esp+34h] [ebp-1Ch]

  v21 = __readgsdword(0x14u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, a2, 0);
    v5 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( a4 <= v5 || !v5 )
      v5 = a4;
    v6 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v6;
    if ( !v6 || v5 >= v6 )
      a4 = v5;
  }
  v7 = 0;
  if ( !insert_error )
  {
    v8 = cache_scan_free(a5);
    if ( !v8 )
    {
      v9 = 0;
      v17 = a5 & 4;
      while ( 1 )
      {
        v10 = cache_tail;
        if ( !cache_tail )
          goto LABEL_23;
        v16 = *(_DWORD *)(cache_tail + 36);
        if ( (*(_DWORD *)(cache_tail + 36) & 0xC) == 0 )
        {
          if ( a1 && strlen(a1) > 0x31 )
          {
            v11 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_23;
              v18 = cache_tail;
              v11 = whine_malloc(0x404u);
              if ( !v11 )
                goto LABEL_23;
              v10 = v18;
              if ( bignames_left )
                --bignames_left;
            }
          }
          else
          {
            v11 = 0;
          }
          v19 = v10;
          cache_unlink();
          LOBYTE(v12) = a5;
          *(_WORD *)(v19 + 36) = a5;
          if ( v11 )
          {
            HIBYTE(v12) = HIBYTE(a5) | 2;
            *(_DWORD *)(v19 + 40) = v11;
            *(_WORD *)(v19 + 36) = v12;
          }
          if ( a1 )
          {
            v13 = (char *)cache_get_name(v19);
            strcpy(v13, a1);
          }
          else
          {
            *(_BYTE *)cache_get_name(v19) = 0;
          }
          v7 = v19;
          if ( a2 )
            qmemcpy((void *)(v19 + 12), a2, 0x10u);
          *(_DWORD *)(v19 + 28) = a3 + a4;
          v14 = new_chain;
          new_chain = v19;
          *(_DWORD *)v19 = v14;
          return v7;
        }
        if ( v9 )
        {
          if ( !warned_8235 )
          {
            my_syslog(3, "Internal error in cache.", v9, v9);
            warned_8235 = 1;
          }
          goto LABEL_23;
        }
        if ( v17 )
        {
          qmemcpy(v20, (const void *)(cache_tail + 12), sizeof(v20));
          v9 = 1;
          cache_get_name(cache_tail);
          cache_scan_free(v16);
          ++cache_live_freed;
        }
        else
        {
          cache_scan_free(0);
          v17 = 1;
        }
      }
    }
    if ( (a5 & 0x180) == 0
      || (a5 & 8) == 0
      || !a2
      || ((a5 & 0x80u) == 0 || *(char *)(v8 + 36) >= 0 || (v7 = v8, *(_DWORD *)(v8 + 12) != *a2))
      && ((a5 & 0x100) == 0
       || (*(_BYTE *)(v8 + 37) & 1) == 0
       || *(_DWORD *)(v8 + 12) != *a2
       || *(_DWORD *)(v8 + 16) != a2[1]
       || *(_DWORD *)(v8 + 20) != a2[2]
       || (v7 = v8, *(_DWORD *)(v8 + 24) != a2[3])) )
    {
LABEL_23:
      insert_error = 1;
      return 0;
    }
  }
  return v7;
}
