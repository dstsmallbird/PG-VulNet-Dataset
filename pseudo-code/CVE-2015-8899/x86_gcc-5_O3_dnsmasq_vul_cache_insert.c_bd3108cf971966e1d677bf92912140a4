int __cdecl cache_insert(int a1, void *cp, int a3, int a4, int a5)
{
  __int16 v5; // si
  int result; // eax
  unsigned int v7; // eax
  unsigned int v8; // ecx
  int v9; // ebp
  int v10; // edx
  unsigned __int16 v11; // cx
  size_t v12; // eax
  int v13; // ebp
  int *v14; // eax
  int v15; // ecx
  char *v16; // eax
  int v17; // eax
  _BYTE *v18; // eax
  char v19; // [esp-Ch] [ebp-54h]
  int v20; // [esp+4h] [ebp-44h]
  int v21; // [esp+4h] [ebp-44h]
  int v22; // [esp+4h] [ebp-44h]

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp, 0);
    v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( a4 <= v7 || !v7 )
      v7 = a4;
    v8 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v8;
    if ( !v8 || v7 >= v8 )
      a4 = v7;
  }
  result = 0;
  if ( !insert_error )
  {
    result = cache_scan_free((unsigned __int16)a5);
    if ( result )
    {
      if ( (a5 & 0x180) != 0
        && (a5 & 8) != 0
        && ((a5 & 0x80) != 0 && *(char *)(result + 36) < 0 && *(_DWORD *)(result + 12) == *(_DWORD *)cp
         || (a5 & 0x100) != 0
         && (*(_BYTE *)(result + 37) & 1) != 0
         && *(_DWORD *)(result + 12) == *(_DWORD *)cp
         && *(_DWORD *)(result + 16) == *((_DWORD *)cp + 1)
         && *(_DWORD *)(result + 20) == *((_DWORD *)cp + 2)
         && *(_DWORD *)(result + 24) == *((_DWORD *)cp + 3)) )
      {
        return result;
      }
LABEL_12:
      insert_error = 1;
      return 0;
    }
    v9 = 0;
    v20 = a5 & 4;
LABEL_21:
    v10 = cache_tail;
    if ( !cache_tail )
      goto LABEL_12;
    while ( 1 )
    {
      v11 = *(_WORD *)(v10 + 36);
      if ( (v11 & 0xC) == 0 )
        break;
      if ( v9 )
      {
        if ( !warned_8375 )
        {
          my_syslog(3, "Internal error in cache.", v19);
          warned_8375 = 1;
        }
        goto LABEL_12;
      }
      if ( !v20 )
      {
        cache_scan_free(0);
        v20 = 1;
        goto LABEL_21;
      }
      v9 = 1;
      cache_scan_free(v11);
      v10 = cache_tail;
      ++cache_live_freed;
      if ( !cache_tail )
        goto LABEL_12;
    }
    if ( a1 && (v21 = v10, v12 = strlen((const char *)a1), v10 = v21, v12 > 0x31) )
    {
      v13 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_12;
        v13 = whine_malloc(0x404u);
        if ( !v13 )
          goto LABEL_12;
        v10 = v21;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v13 = 0;
    }
    v14 = *(int **)(v10 + 4);
    v15 = *(_DWORD *)v10;
    if ( v14 )
    {
      *v14 = v15;
      v15 = *(_DWORD *)v10;
    }
    else
    {
      cache_head = *(_DWORD *)v10;
    }
    if ( v15 )
      *(_DWORD *)(v15 + 4) = v14;
    else
      cache_tail = (int)v14;
    *(_WORD *)(v10 + 36) = a5;
    if ( v13 )
    {
      v5 = a5 | 0x200;
      *(_DWORD *)(v10 + 40) = v13;
      *(_WORD *)(v10 + 36) = a5 | 0x200;
    }
    if ( a1 )
    {
      if ( (v5 & 0x200) != 0 || (v16 = (char *)(v10 + 40), (v5 & 2) != 0) )
        v16 = *(char **)(v10 + 40);
      v22 = v10;
      strcpy(v16, (const char *)a1);
      v10 = v22;
    }
    else
    {
      if ( (v5 & 0x200) != 0 || (v18 = (_BYTE *)(v10 + 40), (v5 & 2) != 0) )
        v18 = *(_BYTE **)(v10 + 40);
      *v18 = 0;
    }
    if ( cp )
    {
      *(_DWORD *)(v10 + 12) = *(_DWORD *)cp;
      *(_DWORD *)(v10 + 16) = *((_DWORD *)cp + 1);
      *(_DWORD *)(v10 + 20) = *((_DWORD *)cp + 2);
      *(_DWORD *)(v10 + 24) = *((_DWORD *)cp + 3);
    }
    *(_DWORD *)(v10 + 28) = a3 + a4;
    v17 = new_chain;
    new_chain = v10;
    *(_DWORD *)v10 = v17;
    result = v10;
  }
  return result;
}
