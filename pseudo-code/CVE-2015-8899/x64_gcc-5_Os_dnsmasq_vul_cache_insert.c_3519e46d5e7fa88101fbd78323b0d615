__int64 __fastcall cache_insert(char *src, __int128 *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned __int16 v6; // bx
  __int128 *v7; // rbp
  unsigned __int64 v9; // rax
  __int64 v10; // rdx
  __int64 v11; // rax
  unsigned __int64 v12; // rdx
  unsigned __int64 v13; // rcx
  __int64 v14; // r9
  __int64 v15; // r8
  __int64 v16; // rax
  __int64 v17; // r15
  char *v18; // rax
  __int64 v19; // rax
  unsigned __int16 v21; // [rsp+8h] [rbp-70h]
  __int64 v22; // [rsp+8h] [rbp-70h]
  unsigned int v23; // [rsp+1Ch] [rbp-5Ch]
  __int128 v24; // [rsp+20h] [rbp-58h] BYREF
  unsigned __int64 v25; // [rsp+38h] [rbp-40h]

  v6 = a5;
  v7 = a2;
  v25 = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, src, a2, 0LL);
    v9 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( a4 <= v9 || !v9 )
      v9 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( !a4 || v9 >= a4 )
      a4 = v9;
  }
  v10 = 0LL;
  if ( !insert_error )
  {
    v11 = cache_scan_free(src, a2, a3, v6);
    if ( !v11 )
    {
      v14 = 0LL;
      v15 = v6 & 4;
      while ( 1 )
      {
        v17 = cache_tail;
        if ( !cache_tail )
          goto LABEL_22;
        v21 = *(_DWORD *)(cache_tail + 52);
        if ( (*(_DWORD *)(cache_tail + 52) & 0xC) == 0 )
        {
          if ( src && (v12 = strlen(src) + 1, v13 = v12 - 1, v12 - 1 > 0x31) )
          {
            v22 = big_free;
            if ( big_free )
            {
              big_free = *(_QWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (v6 & 0x5000) == 0 )
                goto LABEL_22;
              v22 = whine_malloc(1032LL, a2, v12, v13, v15, v14);
              if ( !v22 )
                goto LABEL_22;
              if ( bignames_left )
                --bignames_left;
            }
          }
          else
          {
            v22 = 0LL;
          }
          cache_unlink(v17, a2, v12, v13, v15, v14);
          *(_WORD *)(v17 + 52) = v6;
          if ( v22 )
          {
            HIBYTE(v6) |= 2u;
            *(_WORD *)(v17 + 52) = v6;
            *(_QWORD *)(v17 + 56) = v22;
          }
          if ( src )
          {
            v18 = (char *)cache_get_name(v17);
            strcpy(v18, src);
          }
          else
          {
            *(_BYTE *)cache_get_name(v17) = 0;
          }
          if ( v7 )
            *(_OWORD *)(v17 + 24) = *v7;
          v19 = new_chain;
          new_chain = v17;
          v10 = v17;
          *(_QWORD *)(v17 + 40) = a3 + a4;
          *(_QWORD *)v17 = v19;
          return v10;
        }
        if ( (_DWORD)v14 )
        {
          if ( !warned_8590 )
          {
            my_syslog(3, (unsigned int)"Internal error in cache.", v12, v13, v15, v14);
            warned_8590 = 1;
          }
          goto LABEL_22;
        }
        v23 = v15;
        if ( (_DWORD)v15 )
        {
          v24 = *(_OWORD *)(cache_tail + 24);
          v16 = cache_get_name(cache_tail);
          a2 = &v24;
          cache_scan_free(v16, &v24, a3, v21);
          ++cache_live_freed;
          v15 = v23;
          v14 = 1LL;
        }
        else
        {
          a2 = 0LL;
          cache_scan_free(0LL, 0LL, a3, 0LL);
          v15 = 1LL;
          v14 = 0LL;
        }
      }
    }
    if ( (v6 & 0x180) == 0
      || (v6 & 8) == 0
      || ((v6 & 0x80u) == 0 || *(char *)(v11 + 52) >= 0 || (v10 = v11, *(_DWORD *)(v11 + 24) != *(_DWORD *)a2))
      && ((v6 & 0x100) == 0
       || (*(_BYTE *)(v11 + 53) & 1) == 0
       || *(_DWORD *)(v11 + 24) != *(_DWORD *)a2
       || *(_DWORD *)(v11 + 28) != *((_DWORD *)a2 + 1)
       || *(_DWORD *)(v11 + 32) != *((_DWORD *)a2 + 2)
       || (v10 = v11, *(_DWORD *)(v11 + 36) != *((_DWORD *)a2 + 3))) )
    {
LABEL_22:
      insert_error = 1;
      return 0LL;
    }
  }
  return v10;
}
