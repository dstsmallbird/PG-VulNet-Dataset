int __cdecl cache_insert(int a1, void *cp, int a3, int a4, int a5)
{
  int v5; // eax
  int v6; // ebp
  int v7; // eax
  int v8; // edx
  unsigned int v10; // edx
  unsigned int v11; // ecx
  unsigned __int16 v12; // cx
  size_t v13; // eax
  int v14; // ebp
  int *v15; // ecx
  int v16; // eax
  char *v17; // eax
  int v18; // eax
  __int16 v19; // ax
  _BYTE *v20; // eax
  char v21; // [esp-Ch] [ebp-54h]
  int v22; // [esp+4h] [ebp-44h]
  int v23; // [esp+4h] [ebp-44h]
  int v24; // [esp+4h] [ebp-44h]

  v5 = (unsigned __int16)a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp, 0);
    v5 = (unsigned __int16)a5;
    v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v10 >= a4 || !v10 )
      v10 = a4;
    v11 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v11;
    if ( !v11 || v11 <= v10 )
      a4 = v10;
  }
  v6 = insert_error;
  if ( insert_error )
    return 0;
  v7 = cache_scan_free(v5);
  v8 = v7;
  if ( !v7 )
  {
    v22 = a5 & 4;
    while ( 1 )
    {
      v8 = cache_tail;
      if ( !cache_tail )
        goto LABEL_15;
      v12 = *(_WORD *)(cache_tail + 36);
      if ( (v12 & 0xC) == 0 )
        break;
      if ( v6 )
      {
        if ( !warned_8301 )
        {
          my_syslog(3, "Internal error in cache.", v21);
          warned_8301 = 1;
        }
        goto LABEL_15;
      }
      if ( v22 )
      {
        v6 = 1;
        cache_scan_free(v12);
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0);
        v6 = 0;
        v22 = 1;
      }
    }
    if ( a1 && (v23 = cache_tail, v13 = strlen((const char *)a1), v8 = v23, v13 > 0x31) )
    {
      v14 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_15;
        v14 = whine_malloc(0x404u);
        if ( !v14 )
          goto LABEL_15;
        v8 = v23;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = *(int **)(v8 + 4);
    v16 = *(_DWORD *)v8;
    if ( v15 )
    {
      *v15 = v16;
      v16 = *(_DWORD *)v8;
    }
    else
    {
      cache_head = *(_DWORD *)v8;
    }
    if ( v16 )
      *(_DWORD *)(v16 + 4) = v15;
    else
      cache_tail = (int)v15;
    *(_WORD *)(v8 + 36) = a5;
    if ( v14 )
    {
      *(_DWORD *)(v8 + 40) = v14;
      *(_WORD *)(v8 + 36) = a5 | 0x200;
      if ( a1 )
      {
LABEL_45:
        v17 = *(char **)(v8 + 40);
LABEL_46:
        v24 = v8;
        strcpy(v17, (const char *)a1);
        v8 = v24;
LABEL_47:
        if ( cp )
        {
          *(_DWORD *)(v8 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v8 + 16) = *((_DWORD *)cp + 1);
          *(_DWORD *)(v8 + 20) = *((_DWORD *)cp + 2);
          *(_DWORD *)(v8 + 24) = *((_DWORD *)cp + 3);
        }
        *(_DWORD *)(v8 + 28) = a3 + a4;
        v18 = new_chain;
        new_chain = v8;
        *(_DWORD *)v8 = v18;
        return v8;
      }
    }
    else
    {
      v19 = a5 & 0x200;
      if ( a1 )
      {
        if ( !v19 )
        {
          v17 = (char *)(v8 + 40);
          if ( (a5 & 2) == 0 )
            goto LABEL_46;
        }
        goto LABEL_45;
      }
      if ( !v19 )
      {
        v20 = (_BYTE *)(v8 + 40);
        if ( (a5 & 2) == 0 )
        {
LABEL_60:
          *v20 = 0;
          goto LABEL_47;
        }
      }
    }
    v20 = *(_BYTE **)(v8 + 40);
    goto LABEL_60;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || !cp
    || ((a5 & 0x80) == 0 || *(char *)(v7 + 36) >= 0 || *(_DWORD *)(v7 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_BYTE *)(v7 + 37) & 1) == 0
     || *(_DWORD *)(v7 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v7 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v7 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v7 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_15:
    insert_error = 1;
    v8 = 0;
  }
  return v8;
}
