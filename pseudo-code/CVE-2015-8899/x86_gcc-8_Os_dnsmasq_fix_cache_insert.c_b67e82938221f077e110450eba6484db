int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, signed __int32 a5)
{
  unsigned int v5; // eax
  unsigned int v6; // edi
  int v7; // ebx
  int v8; // esi
  int v9; // eax
  int v10; // ecx
  int v11; // edx
  __int16 v12; // ax
  char *v13; // eax
  _DWORD *v14; // edx
  unsigned __int16 v16; // [esp+1Ah] [ebp-52h]
  signed __int32 v17; // [esp+1Ch] [ebp-50h]
  int v18; // [esp+1Ch] [ebp-50h]
  signed __int32 v19; // [esp+1Ch] [ebp-50h]
  signed __int32 v20[5]; // [esp+28h] [ebp-44h] BYREF
  _BYTE v21[16]; // [esp+3Ch] [ebp-30h] BYREF
  unsigned int v22; // [esp+4Ch] [ebp-20h]

  v20[0] = a5;
  v22 = __readgsdword(0x14u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(LOWORD(v20[0]) | 0x10000, (int)a1, a2, 0);
    v5 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v5 >= a4 || !v5 )
      v5 = a4;
    v6 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v6;
    if ( !v6 || v6 <= v5 )
      a4 = v5;
  }
  v7 = 0;
  v8 = insert_error;
  if ( !insert_error )
  {
    v9 = cache_scan_free(LOWORD(v20[0]));
    v7 = v9;
    if ( !v9 )
    {
      v17 = v20[0] & 4;
      while ( 1 )
      {
        v11 = cache_tail;
        if ( !cache_tail )
          goto LABEL_23;
        v16 = *(_DWORD *)(cache_tail + 36);
        if ( (v16 & 0xC) == 0 )
        {
          if ( a1 )
          {
            if ( strlen(a1) > 0x31 )
            {
              v7 = big_free;
              if ( big_free )
              {
                *(&GLOBAL_OFFSET_TABLE_ + 1012) = *(Elf32_Dyn **)big_free;
              }
              else
              {
                if ( !bignames_left && (v20[0] & 0x5000) == 0 )
                  goto LABEL_23;
                v18 = cache_tail;
                v7 = whine_malloc(0x404u);
                if ( !v7 )
                  goto LABEL_23;
                v11 = v18;
                if ( bignames_left )
                  *(&GLOBAL_OFFSET_TABLE_ + 1011) = (Elf32_Dyn *)(bignames_left - 1);
              }
            }
          }
          else
          {
            v7 = 0;
          }
          v19 = v11;
          cache_unlink();
          v12 = v20[0];
          *(_WORD *)(v19 + 36) = v20[0];
          if ( v7 )
          {
            HIBYTE(v12) |= 2u;
            *(_DWORD *)(v19 + 40) = v7;
            *(_WORD *)(v19 + 36) = v12;
          }
          v20[0] = v19;
          v13 = (char *)cache_get_name(v19);
          v14 = (_DWORD *)v19;
          if ( a1 )
          {
            strcpy(v13, a1);
            v14 = (_DWORD *)v20[0];
          }
          else
          {
            *v13 = 0;
          }
          if ( a2 )
            qmemcpy(v14 + 3, a2, 0x10u);
          v7 = (int)v14;
          v14[7] = a3 + a4;
          *v14 = new_chain;
          new_chain = (int)v14;
          return v7;
        }
        if ( v8 )
        {
          if ( !warned_8306 )
          {
            my_syslog(3, "Internal error in cache.", v10, v10);
            warned_8306 = 1;
          }
          goto LABEL_23;
        }
        if ( v17 )
        {
          qmemcpy(v21, (const void *)(cache_tail + 12), sizeof(v21));
          v8 = 1;
          cache_get_name(cache_tail);
          cache_scan_free(v16);
          ++cache_live_freed;
        }
        else
        {
          cache_scan_free(0);
          v8 = 0;
          v17 = 1;
        }
      }
    }
    if ( (v20[0] & 0x180) == 0
      || (v20[0] & 8) == 0
      || !a2
      || (SLOBYTE(v20[0]) >= 0 || *(char *)(v9 + 36) >= 0 || *(_DWORD *)(v9 + 12) != *a2)
      && (!_bittest(v20, 8u)
       || (*(_BYTE *)(v9 + 37) & 1) == 0
       || *(_DWORD *)(v9 + 12) != *a2
       || *(_DWORD *)(v9 + 16) != a2[1]
       || *(_DWORD *)(v9 + 20) != a2[2]
       || *(_DWORD *)(v9 + 24) != a2[3]) )
    {
LABEL_23:
      v7 = 0;
      insert_error = 1;
      return v7;
    }
  }
  return v7;
}
