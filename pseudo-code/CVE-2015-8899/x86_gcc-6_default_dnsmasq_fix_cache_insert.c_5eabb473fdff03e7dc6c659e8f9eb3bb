int __cdecl cache_insert(int a1, void *cp, int a3, int a4, int a5)
{
  int v5; // eax
  int v6; // ebp
  int v7; // edx
  int v8; // eax
  unsigned int v10; // edx
  unsigned int v11; // ecx
  unsigned __int16 v12; // cx
  size_t v13; // eax
  int v14; // ebp
  int *v15; // eax
  int v16; // ecx
  char *v17; // eax
  int v18; // eax
  _BYTE *v19; // eax
  char v20; // [esp-8h] [ebp-54h]
  int v21; // [esp+4h] [ebp-48h]
  int v22; // [esp+4h] [ebp-48h]
  int v23; // [esp+4h] [ebp-48h]
  __int16 v24; // [esp+Ah] [ebp-42h]

  v24 = a5;
  v5 = (unsigned __int16)a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp, 0);
    v5 = (unsigned __int16)a5;
    v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( a4 <= v10 || !v10 )
      v10 = a4;
    v11 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v11;
    if ( !v11 || v10 >= v11 )
      a4 = v10;
  }
  v6 = insert_error;
  v7 = 0;
  if ( !insert_error )
  {
    v8 = cache_scan_free(v5);
    v7 = v8;
    if ( v8 )
    {
      if ( (a5 & 0x180) != 0
        && (a5 & 8) != 0
        && cp
        && ((a5 & 0x80) != 0 && *(char *)(v8 + 36) < 0 && *(_DWORD *)(v8 + 12) == *(_DWORD *)cp
         || (a5 & 0x100) != 0
         && (*(_BYTE *)(v8 + 37) & 1) != 0
         && *(_DWORD *)(v8 + 12) == *(_DWORD *)cp
         && *(_DWORD *)(v8 + 16) == *((_DWORD *)cp + 1)
         && *(_DWORD *)(v8 + 20) == *((_DWORD *)cp + 2)
         && *(_DWORD *)(v8 + 24) == *((_DWORD *)cp + 3)) )
      {
        return v7;
      }
LABEL_13:
      insert_error = 1;
      return 0;
    }
    v21 = a5 & 4;
LABEL_22:
    v7 = cache_tail;
    if ( !cache_tail )
      goto LABEL_13;
    while ( 1 )
    {
      v12 = *(_WORD *)(v7 + 36);
      if ( (v12 & 0xC) == 0 )
        break;
      if ( v6 )
      {
        if ( !warned_8300 )
        {
          my_syslog(3, "Internal error in cache.", v20);
          warned_8300 = 1;
        }
        goto LABEL_13;
      }
      if ( !v21 )
      {
        cache_scan_free(0);
        v6 = 0;
        v21 = 1;
        goto LABEL_22;
      }
      v6 = 1;
      cache_scan_free(v12);
      v7 = cache_tail;
      ++cache_live_freed;
      if ( !cache_tail )
        goto LABEL_13;
    }
    if ( a1 && (v22 = v7, v13 = strlen((const char *)a1), v7 = v22, v13 > 0x31) )
    {
      v14 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_13;
        v14 = whine_malloc(0x404u);
        if ( !v14 )
          goto LABEL_13;
        v7 = v22;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = *(int **)(v7 + 4);
    v16 = *(_DWORD *)v7;
    if ( v15 )
    {
      *v15 = v16;
      v16 = *(_DWORD *)v7;
    }
    else
    {
      cache_head = *(_DWORD *)v7;
    }
    if ( v16 )
      *(_DWORD *)(v16 + 4) = v15;
    else
      cache_tail = (int)v15;
    *(_WORD *)(v7 + 36) = a5;
    if ( v14 )
    {
      *(_DWORD *)(v7 + 40) = v14;
      v24 = a5 | 0x200;
      *(_WORD *)(v7 + 36) = a5 | 0x200;
    }
    if ( a1 )
    {
      if ( (v24 & 0x200) != 0 || (v17 = (char *)(v7 + 40), (v24 & 2) != 0) )
        v17 = *(char **)(v7 + 40);
      v23 = v7;
      strcpy(v17, (const char *)a1);
      v7 = v23;
    }
    else
    {
      if ( (v24 & 0x200) != 0 || (v19 = (_BYTE *)(v7 + 40), (v24 & 2) != 0) )
        v19 = *(_BYTE **)(v7 + 40);
      *v19 = 0;
    }
    if ( cp )
    {
      *(_DWORD *)(v7 + 12) = *(_DWORD *)cp;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)cp + 1);
      *(_DWORD *)(v7 + 20) = *((_DWORD *)cp + 2);
      *(_DWORD *)(v7 + 24) = *((_DWORD *)cp + 3);
    }
    *(_DWORD *)(v7 + 28) = a3 + a4;
    v18 = new_chain;
    new_chain = v7;
    *(_DWORD *)v7 = v18;
  }
  return v7;
}
