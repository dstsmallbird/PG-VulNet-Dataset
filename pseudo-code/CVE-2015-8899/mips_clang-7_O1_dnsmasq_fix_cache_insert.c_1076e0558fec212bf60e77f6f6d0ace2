int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v9; // $v0
  unsigned int v10; // $a0
  int v11; // $s3
  int v12; // $v0
  int v13; // $s0
  int v14; // $fp
  int v15; // $s7
  int v16; // $v0
  int v17; // $s6
  _DWORD *v18; // $s0
  char *v19; // $v0
  int v21; // $v0
  _DWORD *v22; // [sp+14h] [-14h]
  int v23[4]; // [sp+18h] [-10h] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = *(_DWORD *)(fbss + 252);
    v10 = a4;
    if ( v9 < a4 )
      v10 = *(_DWORD *)(fbss + 252);
    if ( v9 )
      a4 = v10;
    if ( a4 < *(_DWORD *)(fbss + 248) )
      a4 = *(_DWORD *)(fbss + 248);
  }
  v11 = 0;
  if ( !insert_error )
  {
    v12 = cache_scan_free(a1, a2, a3, a5);
    if ( v12 )
    {
      if ( (a5 & 0x180) == 0
        || !a2
        || (a5 & 8) == 0
        || ((v11 = v12, (a5 & 0x80) == 0) || (*(_BYTE *)(v12 + 37) & 0x80) == 0 || *(_DWORD *)(v12 + 12) != *a2)
        && ((a5 & 0x100) == 0
         || (*(_BYTE *)(v12 + 36) & 1) == 0
         || *(_DWORD *)(v12 + 12) != *a2
         || *(_DWORD *)(v12 + 16) != a2[1]
         || *(_DWORD *)(v12 + 20) != a2[2]
         || *(_DWORD *)(v12 + 24) != a2[3]) )
      {
        insert_error = 1;
        v11 = 0;
      }
      return v11;
    }
    v22 = a2;
    v11 = cache_tail;
    if ( !cache_tail )
    {
LABEL_31:
      insert_error = 1;
      return 0;
    }
    v13 = a5 & 4;
    v14 = 0;
    while ( 1 )
    {
      v15 = *(unsigned __int16 *)(v11 + 36);
      if ( (v15 & 0xC) == 0 )
        break;
      if ( v14 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        insert_error = 1;
        return 0;
      }
      if ( v13 )
      {
        v23[3] = *(_DWORD *)(v11 + 24);
        v23[2] = *(_DWORD *)(v11 + 20);
        v23[1] = *(_DWORD *)(v11 + 16);
        v23[0] = *(_DWORD *)(v11 + 12);
        v16 = cache_get_name(v11);
        cache_scan_free(v16, v23, a3, v15);
        v14 = 1;
        ++cache_live_freed;
      }
      else
      {
        v14 = 0;
        cache_scan_free(0, 0, a3, 0);
        v13 = 1;
      }
      v11 = cache_tail;
      if ( !cache_tail )
        goto LABEL_31;
    }
    if ( a1 && strlen(a1) >= 0x32 )
    {
      v17 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
        cache_unlink(v11);
        v18 = v22;
      }
      else
      {
        if ( !(bignames_left | a5 & 0x5000) || (v21 = whine_malloc(1028)) == 0 )
        {
          insert_error = 1;
          return 0;
        }
        v17 = v21;
        if ( bignames_left )
          --bignames_left;
        cache_unlink(v11);
        v18 = v22;
      }
      *(_DWORD *)(v11 + 40) = v17;
      *(_WORD *)(v11 + 36) = a5 | 0x200;
      v19 = (char *)cache_get_name(v11);
    }
    else
    {
      cache_unlink(v11);
      *(_WORD *)(v11 + 36) = a5;
      v19 = (char *)cache_get_name(v11);
      if ( !a1 )
      {
        *v19 = 0;
        v18 = v22;
        if ( !v22 )
          goto LABEL_44;
        goto LABEL_43;
      }
      v18 = v22;
    }
    strcpy(v19, a1);
    if ( !v18 )
    {
LABEL_44:
      *(_DWORD *)(v11 + 28) = a4 + a3;
      *(_DWORD *)v11 = new_chain;
      new_chain = v11;
      return v11;
    }
LABEL_43:
    *(_DWORD *)(v11 + 24) = v18[3];
    *(_DWORD *)(v11 + 20) = v18[2];
    *(_DWORD *)(v11 + 16) = v18[1];
    *(_DWORD *)(v11 + 12) = *v18;
    goto LABEL_44;
  }
  return v11;
}
