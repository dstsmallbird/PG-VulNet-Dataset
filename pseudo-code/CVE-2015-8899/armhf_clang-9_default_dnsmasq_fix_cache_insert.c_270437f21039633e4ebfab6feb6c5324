int __fastcall cache_insert(int a1, _DWORD *a2, time_t a3, unsigned int a4, int a5)
{
  unsigned int v9; // r9
  unsigned int v10; // r0
  int v11; // r6
  int v12; // r0
  bool v13; // zf
  bool v14; // zf
  bool v15; // zf
  int *v16; // r4
  int v17; // r10
  int v18; // r8
  _DWORD *v19; // r0
  time_t v20; // r2
  __int16 v21; // r3
  int v22; // r1
  int v23; // r2
  int v24; // r5
  const char *v25; // r10
  int v26; // r7
  size_t v27; // r0
  _DWORD *v28; // r5
  __int16 v29; // r3
  int *v30; // r0
  int v31; // r1
  char *v32; // r0
  int v33; // r1
  int v34; // r2
  int v35; // r3
  int v37; // r0
  _DWORD *v38; // [sp+4h] [bp-3Ch]
  char *s; // [sp+8h] [bp-38h]
  time_t time1; // [sp+Ch] [bp-34h]
  _DWORD v41[12]; // [sp+10h] [bp-30h] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = a4;
    v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v10 < a4 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v10 )
      v9 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v9 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  else
  {
    v9 = a4;
  }
  v11 = 0;
  if ( !insert_error )
  {
    v12 = cache_scan_free(a1, (int)a2, a3);
    if ( v12 )
    {
      if ( (a5 & 0x180) == 0 )
        goto LABEL_24;
      v13 = a2 == 0;
      if ( a2 )
      {
        v11 = v12;
        v13 = (a5 & 8) == 0;
      }
      if ( v13 )
        goto LABEL_24;
      v14 = (a5 & 0x80) == 0;
      if ( (a5 & 0x80) != 0 )
        v14 = (*(_BYTE *)(v11 + 36) & 0x80) == 0;
      if ( v14 || *(_DWORD *)(v11 + 12) != *a2 )
      {
        v15 = (a5 & 0x100) == 0;
        if ( (a5 & 0x100) != 0 )
          v15 = (*(_BYTE *)(v11 + 37) & 1) == 0;
        if ( v15
          || *(_DWORD *)(v11 + 12) != *a2
          || *(_DWORD *)(v11 + 16) != a2[1]
          || *(_DWORD *)(v11 + 20) != a2[2]
          || *(_DWORD *)(v11 + 24) != a2[3] )
        {
LABEL_24:
          v11 = 0;
          insert_error = 1;
        }
      }
      return v11;
    }
    time1 = a3;
    v16 = &cache_tail;
    v38 = a2;
    s = (char *)a1;
    v11 = cache_tail;
    if ( !cache_tail )
    {
LABEL_43:
      v11 = 0;
      insert_error = 1;
      return v11;
    }
    v17 = 0;
    v18 = a5 & 4;
    while ( 1 )
    {
      v21 = *(_WORD *)(v11 + 36);
      if ( (v21 & 0xC) == 0 )
        break;
      if ( v17 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        goto LABEL_43;
      }
      if ( v18 )
      {
        v22 = *(_DWORD *)(v11 + 16);
        v23 = *(_DWORD *)(v11 + 20);
        v24 = *(_DWORD *)(v11 + 24);
        v41[0] = *(_DWORD *)(v11 + 12);
        v41[1] = v22;
        v41[2] = v23;
        v41[3] = v24;
        if ( (v21 & 0x200) != 0 )
        {
          v19 = *(_DWORD **)(v11 + 40);
          v20 = time1;
        }
        else
        {
          v19 = (_DWORD *)(v11 + 40);
          v20 = time1;
          if ( (v21 & 2) != 0 )
            v19 = (_DWORD *)*v19;
        }
        cache_scan_free((int)v19, (int)v41, v20);
        v17 = 1;
        ++cache_live_freed;
      }
      else
      {
        v17 = 0;
        cache_scan_free(0, 0, time1);
        v18 = 1;
      }
      v11 = cache_tail;
      if ( !cache_tail )
        goto LABEL_43;
    }
    v25 = (const char *)a1;
    v26 = 0;
    if ( s )
    {
      v27 = strlen(s);
      v28 = v38;
      v29 = a5;
      if ( v27 < 0x32 )
        goto LABEL_46;
      v26 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
        goto LABEL_46;
      }
      if ( !(bignames_left | a5 & 0x5000) )
        goto LABEL_43;
      v37 = whine_malloc(1028);
      if ( !v37 )
        goto LABEL_43;
      v26 = v37;
      if ( bignames_left )
        --bignames_left;
    }
    else
    {
      v28 = v38;
    }
    v29 = a5;
LABEL_46:
    v30 = *(int **)(v11 + 4);
    v31 = *(_DWORD *)v11;
    if ( v30 )
    {
      *v30 = v31;
      v31 = *(_DWORD *)v11;
    }
    else
    {
      cache_head = *(_DWORD *)v11;
    }
    if ( v31 )
      v16 = (int *)(v31 + 4);
    *v16 = (int)v30;
    *(_WORD *)(v11 + 36) = v29;
    if ( v26 )
    {
      v29 |= 0x200u;
      *(_WORD *)(v11 + 36) = v29;
      *(_DWORD *)(v11 + 40) = v26;
    }
    if ( (v29 & 0x200) != 0 )
    {
      v32 = *(char **)(v11 + 40);
      if ( !v25 )
      {
LABEL_60:
        *v32 = 0;
        goto LABEL_61;
      }
    }
    else
    {
      v32 = (char *)(v11 + 40);
      if ( (v29 & 2) != 0 )
        v32 = *(char **)v32;
      if ( !v25 )
        goto LABEL_60;
    }
    strcpy(v32, v25);
LABEL_61:
    if ( v28 )
    {
      v33 = v28[1];
      v34 = v28[2];
      v35 = v28[3];
      *(_DWORD *)(v11 + 12) = *v28;
      *(_DWORD *)(v11 + 16) = v33;
      *(_DWORD *)(v11 + 20) = v34;
      *(_DWORD *)(v11 + 24) = v35;
    }
    *(_DWORD *)(v11 + 28) = v9 + time1;
    *(_DWORD *)v11 = new_chain;
    new_chain = v11;
  }
  return v11;
}
