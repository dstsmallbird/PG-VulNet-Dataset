int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  __int16 v5; // r6
  int result; // r0
  int v11; // r4
  int v12; // r1
  int v13; // r2
  int v14; // r3
  int v15; // r0
  int v16; // lr
  unsigned int v17; // r3
  bool v18; // cc
  bool v19; // cf
  int v20; // r0
  int v21; // r4
  int v22; // r1
  int *v23; // r2
  char *v24; // r0
  int v25; // r1
  int v26; // r2
  int v27; // r3
  int v28; // r3
  _BYTE *v29; // r3
  int v30; // [sp+4h] [bp-44h]
  _DWORD v31[4]; // [sp+Ch] [bp-3Ch] BYREF

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v17 = *(_DWORD *)(dnsmasq_daemon + 252);
    v18 = v17 != 0;
    if ( v17 )
      v18 = a4 > v17;
    if ( !v18 )
      v17 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v19 = 1;
    if ( a4 )
      v19 = v17 >= a4;
    if ( v19 )
      a4 = v17;
  }
  if ( insert_error )
    return 0;
  result = cache_scan_free(a1, a2, a3, a5);
  if ( !result )
  {
    v30 = a5 & 4;
    v11 = 0;
    while ( cache_tail )
    {
      v16 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v16 & 0xC) == 0 )
      {
        v20 = (int)a1;
        v21 = cache_tail;
        if ( a1 )
        {
          if ( strlen(a1) <= 0x31 )
          {
            v20 = 0;
          }
          else
          {
            v20 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_14;
              v20 = whine_malloc(1028);
              if ( !v20 )
                goto LABEL_14;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        v22 = *(_DWORD *)v21;
        v23 = *(int **)(v21 + 4);
        if ( v23 )
        {
          *v23 = v22;
          v22 = *(_DWORD *)v21;
        }
        else
        {
          cache_head = *(_DWORD *)v21;
        }
        if ( v22 )
          *(_DWORD *)(v22 + 4) = v23;
        else
          cache_tail = (int)v23;
        *(_WORD *)(v21 + 36) = a5;
        if ( v20 )
        {
          v5 = a5 | 0x200;
          *(_WORD *)(v21 + 36) = a5 | 0x200;
          *(_DWORD *)(v21 + 40) = v20;
        }
        if ( a1 )
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
            v24 = *(char **)(v21 + 40);
          else
            v24 = (char *)(v21 + 40);
          strcpy(v24, a1);
        }
        else
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
            v29 = *(_BYTE **)(v21 + 40);
          else
            v29 = (_BYTE *)(v21 + 40);
          *v29 = 0;
        }
        if ( a2 )
        {
          v25 = a2[1];
          v26 = a2[2];
          v27 = a2[3];
          *(_DWORD *)(v21 + 12) = *a2;
          *(_DWORD *)(v21 + 16) = v25;
          *(_DWORD *)(v21 + 20) = v26;
          *(_DWORD *)(v21 + 24) = v27;
        }
        v28 = new_chain;
        *(_DWORD *)(v21 + 28) = a4 + a3;
        *(_DWORD *)v21 = v28;
        new_chain = v21;
        return v21;
      }
      if ( v11 )
      {
        if ( !warned_11052 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_11052 = 1;
        }
        goto LABEL_14;
      }
      if ( v30 )
      {
        v12 = *(_DWORD *)(cache_tail + 16);
        v13 = *(_DWORD *)(cache_tail + 20);
        v14 = *(_DWORD *)(cache_tail + 24);
        v31[0] = *(_DWORD *)(cache_tail + 12);
        v31[1] = v12;
        v31[2] = v13;
        v31[3] = v14;
        if ( (v16 & 0x200) != 0 || (v16 & 2) != 0 )
          v15 = *(_DWORD *)(cache_tail + 40);
        else
          v15 = cache_tail + 40;
        v11 = 1;
        cache_scan_free(v15, v31, a3, v16);
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v30 = 1;
      }
    }
    goto LABEL_14;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(result + 36) & 0x80) == 0 || *(_DWORD *)(result + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(result + 36) & 0x100) == 0
     || *(_DWORD *)(result + 12) != *a2
     || *(_DWORD *)(result + 16) != a2[1]
     || *(_DWORD *)(result + 20) != a2[2]
     || *(_DWORD *)(result + 24) != a2[3]) )
  {
LABEL_14:
    result = 0;
    insert_error = 1;
  }
  return result;
}
