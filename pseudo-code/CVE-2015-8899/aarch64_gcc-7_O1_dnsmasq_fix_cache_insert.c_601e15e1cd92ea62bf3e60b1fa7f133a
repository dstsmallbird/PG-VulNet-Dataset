__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v8; // w19
  int v9; // w23
  __int64 v10; // x0
  __int64 v11; // x20
  bool v12; // zf
  unsigned __int64 v14; // x0
  bool v15; // cf
  unsigned __int64 v17; // x0
  bool v18; // cc
  int v20; // w27
  __int64 v21; // x21
  unsigned int v22; // w28
  __int64 v23; // x1
  __int64 v24; // x0
  __int64 v25; // x23
  char *v26; // x0
  __int64 v27; // x1
  __int64 v29[2]; // [xsp+78h] [xbp+78h] BYREF

  v8 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    v14 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v14 )
      v15 = v14 >= a4;
    else
      v15 = 1;
    if ( !v15 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    v17 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( v17 )
      v18 = v17 > a4;
    else
      v18 = 0;
    if ( v18 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  v9 = insert_error;
  if ( insert_error )
    return 0LL;
  v10 = cache_scan_free(a1, a2, a3, v8);
  v11 = v10;
  if ( v10 )
  {
    if ( (v8 & 0x180) == 0
      || ((v8 & 8) != 0 ? (v12 = a2 == 0LL) : (v12 = 1),
          v12
       || ((v8 & 0x80) == 0 || (*(_WORD *)(v10 + 52) & 0x80) == 0 || *(_DWORD *)(v10 + 24) != *a2)
       && ((v8 & 0x100) == 0
        || (*(_WORD *)(v10 + 52) & 0x100) == 0
        || *(_DWORD *)(v10 + 24) != *a2
        || *(_DWORD *)(v10 + 28) != a2[1]
        || *(_DWORD *)(v10 + 32) != a2[2]
        || *(_DWORD *)(v10 + 36) != a2[3])) )
    {
      insert_error = 1;
      v11 = 0LL;
    }
    return v11;
  }
  v20 = v8 & 4;
  while ( 1 )
  {
    v21 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0LL;
    }
    v22 = *(unsigned __int16 *)(cache_tail + 52);
    if ( (v22 & 0xC) == 0 )
      break;
    if ( v9 )
    {
      if ( !warned_9978 )
      {
        my_syslog(3LL, "Internal error in cache.");
        warned_9978 = 1;
      }
      insert_error = 1;
      return v11;
    }
    if ( v20 )
    {
      v23 = *(_QWORD *)(cache_tail + 32);
      v29[0] = *(_QWORD *)(cache_tail + 24);
      v29[1] = v23;
      v24 = cache_get_name(cache_tail);
      cache_scan_free(v24, v29, a3, v22);
      ++cache_live_freed;
      v9 = 1;
    }
    else
    {
      cache_scan_free(0LL, 0LL, a3, 0LL);
      v9 = 0;
      v20 = 1;
    }
  }
  if ( a1 && strlen(a1) > 0x31 )
  {
    v25 = big_free;
    if ( big_free )
    {
      big_free = *(_QWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (v8 & 0x5000) == 0 || (v25 = whine_malloc(1032LL)) == 0 )
      {
        insert_error = 1;
        return v11;
      }
      if ( bignames_left )
        --bignames_left;
    }
    cache_unlink(v21);
    *(_QWORD *)(v21 + 56) = v25;
    *(_WORD *)(v21 + 52) = v8 | 0x200;
  }
  else
  {
    cache_unlink(v21);
    *(_WORD *)(v21 + 52) = v8;
    if ( !a1 )
    {
      *(_BYTE *)cache_get_name(v21) = 0;
      goto LABEL_54;
    }
  }
  v26 = (char *)cache_get_name(v21);
  strcpy(v26, a1);
LABEL_54:
  if ( a2 )
  {
    v27 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(v21 + 24) = *(_QWORD *)a2;
    *(_QWORD *)(v21 + 32) = v27;
  }
  *(_QWORD *)(v21 + 40) = a4 + a3;
  *(_QWORD *)v21 = new_chain;
  new_chain = v21;
  return v21;
}
