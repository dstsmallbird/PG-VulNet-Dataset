__int64 __fastcall cache_insert(char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  int v5; // edx
  int v6; // er8
  int v7; // er9
  int v8; // ecx
  __int64 v9; // rax
  char *v10; // rax
  __int64 v11; // rax
  _DWORD *v12; // rcx
  bool v14; // [rsp+1Fh] [rbp-71h]
  __int64 v15[2]; // [rsp+20h] [rbp-70h] BYREF
  _BOOL4 v16; // [rsp+34h] [rbp-5Ch]
  _DWORD *v17; // [rsp+38h] [rbp-58h]
  _DWORD *v18; // [rsp+40h] [rbp-50h]
  int v19; // [rsp+48h] [rbp-48h]
  char v20[12]; // [rsp+4Ch] [rbp-44h]
  __int64 v21; // [rsp+58h] [rbp-38h]
  unsigned __int16 v22; // [rsp+66h] [rbp-2Ah]
  unsigned __int64 v23; // [rsp+68h] [rbp-28h]
  __int64 v24; // [rsp+70h] [rbp-20h]
  _DWORD *v25; // [rsp+78h] [rbp-18h]
  char *s; // [rsp+80h] [rbp-10h]

  s = a1;
  v25 = a2;
  v24 = a3;
  v23 = a4;
  v22 = a5;
  *(_DWORD *)&v20[8] = 0;
  *(_QWORD *)v20 = a5 & 4;
  v19 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(v22 | 0x10000u, s, v25, 0LL);
    if ( *((_QWORD *)dnsmasq_daemon + 57) && *((_QWORD *)dnsmasq_daemon + 57) < v23 )
      v23 = *((_QWORD *)dnsmasq_daemon + 57);
    if ( *((_QWORD *)dnsmasq_daemon + 56) && *((_QWORD *)dnsmasq_daemon + 56) > v23 )
      v23 = *((_QWORD *)dnsmasq_daemon + 56);
  }
  if ( insert_error )
    return 0LL;
  v21 = cache_scan_free(s, v25, v24, v22);
  if ( v21 )
  {
    if ( (v22 & 0x180) != 0 && (v22 & 8) != 0 )
    {
      if ( (v22 & 0x80) != 0 && (*(_WORD *)(v21 + 52) & 0x80) != 0 && *(_DWORD *)(v21 + 24) == *v25 )
        return v21;
      if ( (v22 & 0x100) != 0 && (*(_WORD *)(v21 + 52) & 0x100) != 0 )
      {
        v18 = (_DWORD *)(v21 + 24);
        v17 = v25;
        v14 = 0;
        if ( *(_DWORD *)(v21 + 24) == *v25 )
        {
          v14 = 0;
          if ( v18[1] == v17[1] )
          {
            v14 = 0;
            if ( v18[2] == v17[2] )
              v14 = v18[3] == v17[3];
          }
        }
        v16 = v14;
        if ( v14 )
          return v21;
      }
    }
    insert_error = 1;
    return 0LL;
  }
  while ( 1 )
  {
    v21 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0LL;
    }
    v8 = *(_WORD *)(v21 + 52) & 0xC;
    if ( !v8 )
      break;
    if ( v19 )
    {
      if ( !cache_insert_warned )
      {
        my_syslog(3, (unsigned int)"Internal error in cache.", v5, v8, v6, v7);
        cache_insert_warned = 1;
      }
      insert_error = 1;
      return 0LL;
    }
    if ( *(_DWORD *)v20 )
    {
      v15[0] = *(_QWORD *)(v21 + 24);
      v15[1] = *(_QWORD *)(v21 + 32);
      v19 = 1;
      v9 = cache_get_name(v21);
      cache_scan_free(v9, v15, v24, *(unsigned __int16 *)(v21 + 52));
      ++cache_live_freed;
    }
    else
    {
      cache_scan_free(0LL, 0LL, v24, 0LL);
      *(_DWORD *)v20 = 1;
    }
  }
  if ( s && strlen(s) > 0x31 )
  {
    if ( big_free )
    {
      *(_QWORD *)&v20[4] = big_free;
      big_free = *(_QWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (v22 & 0x5000) == 0 || (*(_QWORD *)&v20[4] = whine_malloc(1032LL)) == 0LL )
      {
        insert_error = 1;
        return 0LL;
      }
      if ( bignames_left )
        --bignames_left;
    }
  }
  cache_unlink(v21);
  *(_WORD *)(v21 + 52) = v22;
  if ( *(_QWORD *)&v20[4] )
  {
    *(_QWORD *)(v21 + 56) = *(_QWORD *)&v20[4];
    *(_WORD *)(v21 + 52) |= 0x200u;
  }
  if ( s )
  {
    v10 = (char *)cache_get_name(v21);
    strcpy(v10, s);
  }
  else
  {
    *(_BYTE *)cache_get_name(v21) = 0;
  }
  if ( v25 )
  {
    v11 = v21;
    v12 = v25;
    *(_QWORD *)(v21 + 24) = *(_QWORD *)v25;
    *(_QWORD *)(v11 + 32) = *((_QWORD *)v12 + 1);
  }
  *(_QWORD *)(v21 + 40) = v23 + v24;
  *(_QWORD *)v21 = new_chain;
  new_chain = v21;
  return v21;
}
