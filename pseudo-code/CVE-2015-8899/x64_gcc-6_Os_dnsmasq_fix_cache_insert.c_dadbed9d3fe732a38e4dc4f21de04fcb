__int64 __fastcall cache_insert(char *src, __int128 *a2, __int64 a3, unsigned __int64 a4, int a5)
{
  unsigned int v5; // er14
  char *v6; // r13
  int v7; // ebx
  __int128 *v8; // rbp
  unsigned __int64 v10; // rax
  __int64 v11; // r15
  __int64 v12; // rax
  __int64 v13; // rdx
  __int64 v14; // rcx
  int v15; // er9
  __int64 v16; // r8
  int v17; // er14
  __int64 v18; // rax
  bool v19; // zf
  __int64 v20; // r14
  char *v21; // rax
  __int64 v22; // rax
  unsigned int v25; // [rsp+14h] [rbp-64h]
  unsigned __int16 v26; // [rsp+14h] [rbp-64h]
  __int128 v27; // [rsp+20h] [rbp-58h] BYREF
  unsigned __int64 v28; // [rsp+38h] [rbp-40h]

  v5 = (unsigned __int16)a5;
  v6 = src;
  v7 = a5;
  v8 = a2;
  v28 = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000u, src, a2, 0LL);
    v10 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( a4 <= v10 || !v10 )
      v10 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( !a4 || v10 >= a4 )
      a4 = v10;
  }
  v11 = 0LL;
  v25 = insert_error;
  if ( !insert_error )
  {
    v12 = cache_scan_free(src, a2, a3, v5);
    v11 = v12;
    v16 = v25;
    if ( !v12 )
    {
      v17 = v7 & 4;
      while ( 1 )
      {
        v11 = cache_tail;
        if ( !cache_tail )
          goto LABEL_23;
        v26 = *(_DWORD *)(cache_tail + 52);
        if ( (*(_DWORD *)(cache_tail + 52) & 0xC) == 0 )
        {
          if ( !src )
            goto LABEL_45;
          v14 = -1LL;
          do
          {
            if ( !v14 )
              break;
            v19 = *src++ == 0;
            --v14;
          }
          while ( !v19 );
          if ( (unsigned __int64)(-v14 - 2) > 0x31 )
          {
            v20 = big_free;
            if ( big_free )
            {
              big_free = *(_QWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (v7 & 0x5000) == 0 )
                goto LABEL_23;
              v20 = whine_malloc(1032LL, a2, v13, v14, v16);
              if ( !v20 )
                goto LABEL_23;
              if ( bignames_left )
                --bignames_left;
            }
          }
          else
          {
LABEL_45:
            v20 = 0LL;
          }
          cache_unlink(v11, a2, v13, v14, v16);
          *(_WORD *)(v11 + 52) = v7;
          if ( v20 )
          {
            BYTE1(v7) |= 2u;
            *(_QWORD *)(v11 + 56) = v20;
            *(_WORD *)(v11 + 52) = v7;
          }
          if ( v6 )
          {
            v21 = (char *)cache_get_name(v11);
            strcpy(v21, v6);
          }
          else
          {
            *(_BYTE *)cache_get_name(v11) = 0;
          }
          if ( v8 )
            *(_OWORD *)(v11 + 24) = *v8;
          v22 = new_chain;
          new_chain = v11;
          *(_QWORD *)v11 = v22;
          *(_QWORD *)(v11 + 40) = a3 + a4;
          return v11;
        }
        if ( (_DWORD)v16 )
        {
          if ( !warned_8515 )
          {
            my_syslog(3, (unsigned int)"Internal error in cache.", v13, v14, v16, v15);
            warned_8515 = 1;
          }
          goto LABEL_23;
        }
        if ( v17 )
        {
          v27 = *(_OWORD *)(cache_tail + 24);
          v18 = cache_get_name(cache_tail);
          a2 = &v27;
          cache_scan_free(v18, &v27, a3, v26);
          ++cache_live_freed;
          v16 = 1LL;
        }
        else
        {
          a2 = 0LL;
          cache_scan_free(0LL, 0LL, a3, 0LL);
          v16 = 0LL;
          v17 = 1;
        }
      }
    }
    if ( (v7 & 0x180) == 0
      || (v7 & 8) == 0
      || !a2
      || ((v7 & 0x80u) == 0 || *(char *)(v12 + 52) >= 0 || *(_DWORD *)(v12 + 24) != *(_DWORD *)a2)
      && (!_bittest(&v7, 8u)
       || (*(_BYTE *)(v12 + 53) & 1) == 0
       || *(_DWORD *)(v12 + 24) != *(_DWORD *)a2
       || *(_DWORD *)(v12 + 28) != *((_DWORD *)a2 + 1)
       || *(_DWORD *)(v12 + 32) != *((_DWORD *)a2 + 2)
       || *(_DWORD *)(v12 + 36) != *((_DWORD *)a2 + 3)) )
    {
LABEL_23:
      insert_error = 1;
      return 0LL;
    }
  }
  return v11;
}
