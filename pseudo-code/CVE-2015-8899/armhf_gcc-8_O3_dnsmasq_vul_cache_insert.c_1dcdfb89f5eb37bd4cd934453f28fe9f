int __fastcall cache_insert(int a1, void *cp, int a3, int a4, __int16 a5)
{
  int v9; // r5
  int v10; // r8
  int v11; // r0
  int v13; // r2
  int v14; // r4
  int v15; // r7
  int v16; // r12
  int v17; // r1
  int v18; // r2
  int v19; // r3
  int v20; // r0
  unsigned int v21; // r3
  bool v22; // cf
  bool v23; // cc
  int *v24; // r2
  int v25; // r3
  char *v26; // r0
  int v27; // r1
  int v28; // r2
  int v29; // r3
  int v30; // r2
  _BYTE *v31; // r2
  _DWORD v32[4]; // [sp+14h] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v21 = *(_DWORD *)(dnsmasq_daemon + 252);
    v22 = 1;
    if ( v21 )
      v22 = v21 >= a4;
    if ( v22 )
      v21 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v23 = a4 != 0;
    if ( a4 )
      v23 = a4 > v21;
    if ( !v23 )
      a4 = v21;
  }
  v9 = 0;
  v10 = insert_error;
  if ( insert_error )
    return v9;
  v11 = cache_scan_free(a1, cp, a3, (unsigned __int16)a5);
  v9 = v11;
  if ( !v11 )
  {
    v13 = v10;
    v14 = a5 & 4;
    while ( 1 )
    {
      v15 = cache_tail;
      if ( !cache_tail )
        goto LABEL_26;
      v16 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v16 & 0xC) == 0 )
        break;
      if ( v13 )
      {
        if ( !warned_12395 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_12395 = 1;
        }
        goto LABEL_26;
      }
      if ( v14 )
      {
        v17 = *(_DWORD *)(cache_tail + 16);
        v18 = *(_DWORD *)(cache_tail + 20);
        v19 = *(_DWORD *)(cache_tail + 24);
        v32[0] = *(_DWORD *)(cache_tail + 12);
        v32[1] = v17;
        v32[2] = v18;
        v32[3] = v19;
        if ( (v16 & 0x200) != 0 || (v16 & 2) != 0 )
          v20 = *(_DWORD *)(cache_tail + 40);
        else
          v20 = cache_tail + 40;
        cache_scan_free(v20, v32, a3, v16);
        v13 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v13 = 0;
        v14 = 1;
      }
    }
    if ( a1 )
    {
      if ( strlen((const char *)a1) > 0x31 )
      {
        v9 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_26;
          v9 = whine_malloc(1028);
          if ( !v9 )
            goto LABEL_26;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v24 = *(int **)(v15 + 4);
    v25 = *(_DWORD *)v15;
    if ( v24 )
    {
      *v24 = v25;
      v25 = *(_DWORD *)v15;
    }
    else
    {
      cache_head = *(_DWORD *)v15;
    }
    if ( v25 )
      *(_DWORD *)(v25 + 4) = v24;
    else
      cache_tail = (int)v24;
    *(_WORD *)(v15 + 36) = a5;
    if ( v9 )
    {
      *(_DWORD *)(v15 + 40) = v9;
      *(_WORD *)(v15 + 36) = a5 | 0x200;
      if ( a1 )
        goto LABEL_51;
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
        {
          v26 = (char *)(v15 + 40);
          goto LABEL_52;
        }
LABEL_51:
        v26 = *(char **)(v15 + 40);
LABEL_52:
        strcpy(v26, (const char *)a1);
LABEL_53:
        if ( cp )
        {
          v27 = *((_DWORD *)cp + 1);
          v28 = *((_DWORD *)cp + 2);
          v29 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v15 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v15 + 16) = v27;
          *(_DWORD *)(v15 + 20) = v28;
          *(_DWORD *)(v15 + 24) = v29;
        }
        v9 = v15;
        *(_DWORD *)(v15 + 28) = a4 + a3;
        v30 = new_chain;
        new_chain = v15;
        *(_DWORD *)v15 = v30;
        return v9;
      }
      if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
      {
        v31 = (_BYTE *)(v15 + 40);
LABEL_68:
        *v31 = 0;
        goto LABEL_53;
      }
    }
    v31 = *(_BYTE **)(v15 + 40);
    goto LABEL_68;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 36) & 0x80) == 0 || *(_DWORD *)(v11 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v11 + 36) & 0x100) == 0
     || *(_DWORD *)(v11 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v11 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v11 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v11 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_26:
    v9 = 0;
    insert_error = 1;
  }
  return v9;
}
