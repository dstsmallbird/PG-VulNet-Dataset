int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v8; // $s4
  int v9; // $s1
  int v11; // $t2
  int *v12; // $t3
  int v13; // $t1
  int v14; // $s2
  int v15; // $a3
  int v16; // $a2
  int v17; // $a1
  int v18; // $a0
  int v19; // $a0
  unsigned int v20; // $a0
  unsigned int v21; // $v1
  unsigned int v22; // $v0
  unsigned int v23; // $v1
  size_t v24; // $v0
  int *v25; // $a0
  int v26; // $v0
  char *v27; // $a0
  int v28; // $a1
  int v29; // $a0
  int v30; // $v0
  int v31; // $v1
  int *v32; // [sp+18h] [-28h]
  int v33; // [sp+18h] [-28h]
  int v34; // [sp+1Ch] [-24h]
  int v35; // [sp+1Ch] [-24h]
  int v36; // [sp+20h] [-20h]
  int *v37; // [sp+20h] [-20h]
  int v38[4]; // [sp+2Ch] [-14h] BYREF

  if ( (a5 & 0x980) == 0 )
    goto LABEL_2;
  log_query(a5 | 0x10000, a1, a2, 0);
  v20 = *(_DWORD *)(fbss + 252);
  v21 = a4;
  if ( v20 )
  {
    if ( v20 < a4 )
      v21 = *(_DWORD *)(fbss + 252);
    a4 = v21;
  }
  v22 = *(_DWORD *)(fbss + 248);
  if ( v22 )
  {
    v23 = a4;
    v8 = insert_error;
    if ( a4 < v22 )
      v23 = *(_DWORD *)(fbss + 248);
    a4 = v23;
    if ( insert_error )
      return 0;
  }
  else
  {
LABEL_2:
    v8 = insert_error;
    if ( insert_error )
      return 0;
  }
  v9 = cache_scan_free(a1, a2, a3, a5);
  if ( !v9 )
  {
    v11 = 4587520;
    v12 = v38;
    v13 = a5 & 4;
    while ( 1 )
    {
      v14 = *(_DWORD *)(v11 - 15456);
      if ( !v14 )
        goto LABEL_13;
      v15 = *(unsigned __int16 *)(v14 + 36);
      if ( (v15 & 0xC) == 0 )
        break;
      if ( v8 )
      {
        if ( !warned_8293 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_8293 = 1;
        }
        goto LABEL_13;
      }
      if ( v13 )
      {
        v16 = *(_DWORD *)(v14 + 16);
        v17 = *(_DWORD *)(v14 + 20);
        v18 = *(_DWORD *)(v14 + 24);
        v38[0] = *(_DWORD *)(v14 + 12);
        v38[1] = v16;
        v38[2] = v17;
        v38[3] = v18;
        if ( (v15 & 0x200) != 0 || (v15 & 2) != 0 )
          v19 = *(_DWORD *)(v14 + 40);
        else
          v19 = v14 + 40;
        v36 = v11;
        v34 = v13;
        v32 = v12;
        v8 = 1;
        cache_scan_free(v19, v12, a3, v15);
        v12 = v32;
        v13 = v34;
        v11 = v36;
        ++cache_live_freed;
      }
      else
      {
        v37 = v12;
        v35 = v11;
        cache_scan_free(0, 0, a3, 0);
        v11 = v35;
        v8 = 0;
        v12 = v37;
        v13 = 1;
      }
    }
    if ( a1 )
    {
      v33 = v11;
      v24 = strlen(a1);
      v11 = v33;
      if ( v24 >= 0x32 )
      {
        v9 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_13;
          v9 = whine_malloc(1028);
          if ( !v9 )
            goto LABEL_13;
          v11 = v33;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v25 = *(int **)(v14 + 4);
    v26 = *(_DWORD *)v14;
    if ( v25 )
    {
      *v25 = v26;
      v26 = *(_DWORD *)v14;
    }
    else
    {
      cache_head = *(_DWORD *)v14;
    }
    if ( v26 )
      *(_DWORD *)(v26 + 4) = v25;
    else
      *(_DWORD *)(v11 - 15456) = v25;
    *(_WORD *)(v14 + 36) = a5;
    if ( v9 )
    {
      *(_DWORD *)(v14 + 40) = v9;
      *(_WORD *)(v14 + 36) = a5 | 0x200;
      if ( a1 )
      {
LABEL_50:
        v27 = *(char **)(v14 + 40);
LABEL_51:
        strcpy(v27, a1);
LABEL_52:
        if ( a2 )
        {
          v28 = a2[1];
          v29 = a2[2];
          v30 = a2[3];
          *(_DWORD *)(v14 + 12) = *a2;
          *(_DWORD *)(v14 + 16) = v28;
          *(_DWORD *)(v14 + 20) = v29;
          *(_DWORD *)(v14 + 24) = v30;
        }
        v9 = v14;
        v31 = new_chain;
        new_chain = v14;
        *(_DWORD *)(v14 + 28) = a4 + a3;
        *(_DWORD *)v14 = v31;
        return v9;
      }
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 )
        {
          v27 = (char *)(v14 + 40);
          if ( (a5 & 2) == 0 )
            goto LABEL_51;
        }
        goto LABEL_50;
      }
      if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
      {
        *(_BYTE *)(v14 + 40) = 0;
        goto LABEL_52;
      }
    }
    **(_BYTE **)(v14 + 40) = 0;
    goto LABEL_52;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v9 + 36) & 0x80) == 0 || *(_DWORD *)(v9 + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v9 + 36) & 0x100) == 0
     || *(_DWORD *)(v9 + 12) != *a2
     || *(_DWORD *)(v9 + 16) != a2[1]
     || *(_DWORD *)(v9 + 20) != a2[2]
     || *(_DWORD *)(v9 + 24) != a2[3]) )
  {
LABEL_13:
    v9 = 0;
    insert_error = 1;
  }
  return v9;
}
