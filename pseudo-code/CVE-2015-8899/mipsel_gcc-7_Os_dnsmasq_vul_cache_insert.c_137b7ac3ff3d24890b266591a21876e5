int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v9; // $v0
  unsigned int v10; // $v0
  int v11; // $fp
  int v12; // $t0
  int v13; // $s6
  int v15; // $v0
  int v16; // $a2
  char *v17; // $v0
  int v18; // $a0
  void *dest; // [sp+18h] [-28h]
  int v20; // [sp+24h] [-1Ch]
  char v21[16]; // [sp+2Ch] [-14h] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = *(_DWORD *)(fbss + 252);
    if ( v9 && v9 < a4 )
      a4 = *(_DWORD *)(fbss + 252);
    v10 = *(_DWORD *)(fbss + 248);
    if ( v10 && a4 < v10 )
      a4 = *(_DWORD *)(fbss + 248);
  }
  v11 = 0;
  dest = (void *)insert_error;
  if ( !insert_error )
  {
    v11 = cache_scan_free(a1, a2, a3, a5);
    v12 = (int)dest;
    if ( !v11 )
    {
      v13 = a5 & 4;
      while ( 1 )
      {
        v11 = cache_tail;
        if ( !cache_tail )
          goto LABEL_27;
        if ( (*(_WORD *)(cache_tail + 36) & 0xC) == 0 )
        {
          if ( a1 && strlen(a1) >= 0x32 )
          {
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 || !whine_malloc(1028) )
                goto LABEL_27;
              if ( bignames_left )
                --bignames_left;
            }
          }
          cache_unlink(v11);
          *(_WORD *)(v11 + 36) = a5;
          if ( v16 )
          {
            *(_DWORD *)(v11 + 40) = v16;
            *(_WORD *)(v11 + 36) = a5 | 0x200;
          }
          v17 = (char *)cache_get_name(v11);
          if ( a1 )
            strcpy(v17, a1);
          else
            *v17 = 0;
          if ( a2 )
            memcpy((void *)(v11 + 12), a2, 0x10u);
          v18 = new_chain;
          *(_DWORD *)(v11 + 28) = a4 + a3;
          new_chain = v11;
          *(_DWORD *)v11 = v18;
          return v11;
        }
        if ( v12 )
        {
          if ( !warned_8055 )
          {
            my_syslog(3, "Internal error in cache.");
            warned_8055 = 1;
          }
          goto LABEL_27;
        }
        v20 = *(unsigned __int16 *)(cache_tail + 36);
        if ( v13 )
        {
          memcpy(v21, (const void *)(cache_tail + 12), sizeof(v21));
          v15 = cache_get_name(cache_tail);
          cache_scan_free(v15, v21, a3, v20);
          v12 = 1;
          ++cache_live_freed;
        }
        else
        {
          cache_scan_free(0, 0, a3, 0);
          v12 = 0;
          v13 = 1;
        }
      }
    }
    if ( (a5 & 0x180) == 0
      || (a5 & 8) == 0
      || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 36) & 0x80) == 0 || *(_DWORD *)(v11 + 12) != *a2)
      && ((a5 & 0x100) == 0
       || (*(_WORD *)(v11 + 36) & 0x100) == 0
       || *(_DWORD *)(v11 + 12) != *a2
       || *(_DWORD *)(v11 + 16) != a2[1]
       || *(_DWORD *)(v11 + 20) != a2[2]
       || *(_DWORD *)(v11 + 24) != a2[3]) )
    {
LABEL_27:
      v11 = 0;
      insert_error = 1;
      return v11;
    }
  }
  return v11;
}
