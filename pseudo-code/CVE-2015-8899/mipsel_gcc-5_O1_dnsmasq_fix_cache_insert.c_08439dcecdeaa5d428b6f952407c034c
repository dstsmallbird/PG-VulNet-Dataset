int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v6; // $v1
  unsigned int v7; // $v0
  int result; // $v0
  int v9; // $s7
  int v10; // $s3
  int v11; // $s0
  int v12; // $s5
  int v13; // $a0
  int v14; // $v1
  int v15; // $v0
  int v16; // $v0
  size_t v17; // $v0
  int v18; // $a0
  int v19; // $s5
  int v20; // $a0
  char *v21; // $v0
  int v22; // $a0
  int v23; // $v1
  int v24; // $v0
  int v26[4]; // [sp+24h] [-14h] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v6 = *(_DWORD *)(fbss + 252);
    if ( v6 && v6 < a4 )
      a4 = *(_DWORD *)(fbss + 252);
    v7 = *(_DWORD *)(fbss + 248);
    if ( v7 && a4 < v7 )
      a4 = *(_DWORD *)(fbss + 248);
  }
  if ( insert_error )
    return 0;
  result = cache_scan_free(a1, a2, a3, a5);
  if ( !result )
  {
    v9 = a5 & 4;
    v10 = 0;
    while ( 1 )
    {
      v11 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0;
      }
      v12 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v12 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_8286 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_8286 = 1;
        }
        insert_error = 1;
        return 0;
      }
      if ( v9 )
      {
        v13 = *(_DWORD *)(cache_tail + 16);
        v14 = *(_DWORD *)(cache_tail + 20);
        v15 = *(_DWORD *)(cache_tail + 24);
        v26[0] = *(_DWORD *)(cache_tail + 12);
        v26[1] = v13;
        v26[2] = v14;
        v26[3] = v15;
        v16 = cache_get_name(cache_tail);
        cache_scan_free(v16, v26, a3, v12);
        ++cache_live_freed;
        v10 = 1;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v9 = 1;
      }
    }
    if ( a1 )
    {
      v17 = strlen(a1);
      v18 = v11;
      if ( v17 >= 0x32 )
      {
        v19 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 || (v19 = whine_malloc(1028)) == 0 )
          {
            insert_error = 1;
            return 0;
          }
          v18 = v11;
          if ( bignames_left )
            --bignames_left;
        }
        cache_unlink(v18);
        *(_DWORD *)(v11 + 40) = v19;
        *(_WORD *)(v11 + 36) = a5 | 0x200;
        v20 = v11;
        goto LABEL_44;
      }
    }
    else
    {
      v18 = cache_tail;
    }
    cache_unlink(v18);
    *(_WORD *)(v11 + 36) = a5;
    v20 = v11;
    if ( !a1 )
    {
      *(_BYTE *)cache_get_name(v11) = 0;
      goto LABEL_46;
    }
LABEL_44:
    v21 = (char *)cache_get_name(v20);
    strcpy(v21, a1);
LABEL_46:
    if ( a2 )
    {
      v22 = a2[1];
      v23 = a2[2];
      v24 = a2[3];
      *(_DWORD *)(v11 + 12) = *a2;
      *(_DWORD *)(v11 + 16) = v22;
      *(_DWORD *)(v11 + 20) = v23;
      *(_DWORD *)(v11 + 24) = v24;
    }
    *(_DWORD *)(v11 + 28) = a4 + a3;
    *(_DWORD *)v11 = new_chain;
    new_chain = v11;
    return v11;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || !a2
    || ((a5 & 0x80) == 0 || (*(_WORD *)(result + 36) & 0x80) == 0 || *(_DWORD *)(result + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(result + 36) & 0x100) == 0
     || *(_DWORD *)(result + 12) != *a2
     || *(_DWORD *)(result + 16) != a2[1]
     || *(_DWORD *)(result + 20) != a2[2]
     || *(_DWORD *)(result + 24) != a2[3]) )
  {
    insert_error = 1;
    result = 0;
  }
  return result;
}
