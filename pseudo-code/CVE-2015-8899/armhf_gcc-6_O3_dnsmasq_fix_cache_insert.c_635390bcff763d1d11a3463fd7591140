int __fastcall cache_insert(int a1, void *cp, time_t time1, int a4, __int16 a5)
{
  __int16 v7; // r5
  int v10; // r4
  int v11; // r7
  int v12; // r0
  __int16 v13; // r3
  unsigned int v15; // r3
  bool v16; // cc
  bool v17; // cf
  int v18; // r2
  int v19; // r11
  __int16 v20; // r12
  int v21; // r1
  int v22; // r2
  int v23; // r3
  int v24; // r0
  size_t v25; // r0
  int v26; // r3
  int v27; // r1
  int *v28; // r2
  char *v29; // r0
  int v30; // r1
  int v31; // r2
  int v32; // r3
  int v33; // r2
  _BYTE *v34; // r3
  _DWORD v35[4]; // [sp+14h] [bp-3Ch] BYREF

  v7 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v15 = *(_DWORD *)(dnsmasq_daemon + 252);
    v16 = v15 != 0;
    if ( v15 )
      v16 = a4 > v15;
    if ( !v16 )
      v15 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v17 = 1;
    if ( a4 )
      v17 = v15 >= a4;
    if ( v17 )
      a4 = v15;
  }
  v10 = 0;
  v11 = insert_error;
  if ( !insert_error )
  {
    v12 = cache_scan_free(a1, (int)cp, time1);
    v10 = v12;
    if ( v12 )
    {
      if ( (a5 & 0x180) != 0 )
      {
        v13 = (__int16)cp;
        if ( cp )
          v13 = 1;
        if ( (*(_DWORD *)&v13 & ((unsigned __int16)a5 >> 3)) != 0
          && ((a5 & 0x80) != 0 && (*(_WORD *)(v12 + 36) & 0x80) != 0 && *(_DWORD *)(v12 + 12) == *(_DWORD *)cp
           || (a5 & 0x100) != 0
           && (*(_WORD *)(v12 + 36) & 0x100) != 0
           && *(_DWORD *)(v12 + 12) == *(_DWORD *)cp
           && *(_DWORD *)(v12 + 16) == *((_DWORD *)cp + 1)
           && *(_DWORD *)(v12 + 20) == *((_DWORD *)cp + 2)
           && *(_DWORD *)(v12 + 24) == *((_DWORD *)cp + 3)) )
        {
          return v10;
        }
      }
LABEL_14:
      v10 = 0;
      insert_error = 1;
      return v10;
    }
    v18 = v11;
    v19 = a5 & 4;
LABEL_26:
    v10 = cache_tail;
    if ( !cache_tail )
      goto LABEL_14;
    while ( 1 )
    {
      v20 = *(_WORD *)(v10 + 36);
      if ( (v20 & 0xC) == 0 )
        break;
      if ( v18 )
      {
        if ( !warned_12252 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_12252 = 1;
        }
        goto LABEL_14;
      }
      if ( !v19 )
      {
        cache_scan_free(0, 0, time1);
        v18 = 0;
        v19 = 1;
        goto LABEL_26;
      }
      v21 = *(_DWORD *)(v10 + 16);
      v22 = *(_DWORD *)(v10 + 20);
      v23 = *(_DWORD *)(v10 + 24);
      v35[0] = *(_DWORD *)(v10 + 12);
      v35[1] = v21;
      v35[2] = v22;
      v35[3] = v23;
      if ( (v20 & 0x200) != 0 || (v20 & 2) != 0 )
        v24 = *(_DWORD *)(v10 + 40);
      else
        v24 = v10 + 40;
      cache_scan_free(v24, (int)v35, time1);
      v18 = 1;
      ++cache_live_freed;
      v10 = cache_tail;
      if ( !cache_tail )
        goto LABEL_14;
    }
    if ( a1 )
    {
      v25 = strlen((const char *)a1);
      v26 = 0;
      if ( v25 > 0x31 )
      {
        v26 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_14;
          v26 = whine_malloc(1028);
          if ( !v26 )
            goto LABEL_14;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = *(_DWORD *)v10;
    v28 = *(int **)(v10 + 4);
    if ( v28 )
    {
      *v28 = v27;
      v27 = *(_DWORD *)v10;
    }
    else
    {
      cache_head = *(_DWORD *)v10;
    }
    if ( v27 )
      *(_DWORD *)(v27 + 4) = v28;
    else
      cache_tail = (int)v28;
    *(_WORD *)(v10 + 36) = a5;
    if ( v26 )
    {
      v7 = a5 | 0x200;
      *(_DWORD *)(v10 + 40) = v26;
      *(_WORD *)(v10 + 36) = a5 | 0x200;
    }
    if ( a1 )
    {
      if ( (v7 & 0x200) != 0 || (v7 & 2) != 0 )
        v29 = *(char **)(v10 + 40);
      else
        v29 = (char *)(v10 + 40);
      strcpy(v29, (const char *)a1);
    }
    else
    {
      if ( (v7 & 0x200) != 0 || (v7 & 2) != 0 )
        v34 = *(_BYTE **)(v10 + 40);
      else
        v34 = (_BYTE *)(v10 + 40);
      *v34 = 0;
    }
    if ( cp )
    {
      v30 = *((_DWORD *)cp + 1);
      v31 = *((_DWORD *)cp + 2);
      v32 = *((_DWORD *)cp + 3);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)cp;
      *(_DWORD *)(v10 + 16) = v30;
      *(_DWORD *)(v10 + 20) = v31;
      *(_DWORD *)(v10 + 24) = v32;
    }
    *(_DWORD *)(v10 + 28) = a4 + time1;
    v33 = new_chain;
    new_chain = v10;
    *(_DWORD *)v10 = v33;
  }
  return v10;
}
