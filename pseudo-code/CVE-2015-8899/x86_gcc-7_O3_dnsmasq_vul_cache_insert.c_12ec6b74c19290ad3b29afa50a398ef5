int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v5; // edi
  int v6; // eax
  int v7; // edx
  unsigned int v9; // eax
  unsigned int v10; // ecx
  int v11; // ebp
  unsigned __int16 v12; // cx
  size_t v13; // eax
  int v14; // edi
  int *v15; // ecx
  int v16; // eax
  char *v17; // eax
  int v18; // eax
  __int16 v19; // ax
  _BYTE *v20; // eax
  char v21; // [esp-Ch] [ebp-54h]
  int v22; // [esp+8h] [ebp-40h]
  int v23; // [esp+8h] [ebp-40h]

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, a2, 0);
    v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v9 >= a4 || !v9 )
      v9 = a4;
    v10 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v10;
    if ( !v10 || v10 <= v9 )
      a4 = v9;
  }
  v5 = insert_error;
  if ( insert_error )
    return 0;
  v6 = cache_scan_free(a5);
  v7 = v6;
  if ( !v6 )
  {
    v11 = a5 & 4;
    while ( 1 )
    {
      v7 = cache_tail;
      if ( !cache_tail )
        goto LABEL_14;
      v12 = *(_WORD *)(cache_tail + 36);
      if ( (v12 & 0xC) == 0 )
        break;
      if ( v5 )
      {
        if ( !warned_8301 )
        {
          my_syslog(3, "Internal error in cache.", v21);
          warned_8301 = 1;
        }
        goto LABEL_14;
      }
      if ( v11 )
      {
        v5 = 1;
        cache_scan_free(v12);
        ++cache_live_freed;
      }
      else
      {
        v5 = 0;
        v11 = 1;
        cache_scan_free(0);
      }
    }
    if ( a1 && (v22 = cache_tail, v13 = strlen(a1), v7 = v22, v13 > 0x31) )
    {
      v14 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_14;
        v14 = whine_malloc(0x404u);
        if ( !v14 )
          goto LABEL_14;
        v7 = v22;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = *(int **)(v7 + 4);
    v16 = *(_DWORD *)v7;
    if ( v15 )
    {
      *v15 = v16;
      v16 = *(_DWORD *)v7;
    }
    else
    {
      cache_head = *(_DWORD *)v7;
    }
    if ( v16 )
      *(_DWORD *)(v16 + 4) = v15;
    else
      cache_tail = (int)v15;
    *(_WORD *)(v7 + 36) = a5;
    if ( v14 )
    {
      *(_DWORD *)(v7 + 40) = v14;
      *(_WORD *)(v7 + 36) = a5 | 0x200;
      if ( a1 )
      {
LABEL_44:
        v17 = *(char **)(v7 + 40);
LABEL_45:
        v23 = v7;
        strcpy(v17, a1);
        v7 = v23;
LABEL_46:
        if ( a2 )
        {
          *(_DWORD *)(v7 + 12) = *a2;
          *(_DWORD *)(v7 + 16) = a2[1];
          *(_DWORD *)(v7 + 20) = a2[2];
          *(_DWORD *)(v7 + 24) = a2[3];
        }
        *(_DWORD *)(v7 + 28) = a3 + a4;
        v18 = new_chain;
        new_chain = v7;
        *(_DWORD *)v7 = v18;
        return v7;
      }
    }
    else
    {
      v19 = a5 & 0x200;
      if ( a1 )
      {
        if ( !v19 )
        {
          v17 = (char *)(v7 + 40);
          if ( (a5 & 2) == 0 )
            goto LABEL_45;
        }
        goto LABEL_44;
      }
      if ( !v19 )
      {
        v20 = (_BYTE *)(v7 + 40);
        if ( (a5 & 2) == 0 )
        {
LABEL_59:
          *v20 = 0;
          goto LABEL_46;
        }
      }
    }
    v20 = *(_BYTE **)(v7 + 40);
    goto LABEL_59;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || *(char *)(v6 + 36) >= 0 || *(_DWORD *)(v6 + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_BYTE *)(v6 + 37) & 1) == 0
     || *(_DWORD *)(v6 + 12) != *a2
     || *(_DWORD *)(v6 + 16) != a2[1]
     || *(_DWORD *)(v6 + 20) != a2[2]
     || *(_DWORD *)(v6 + 24) != a2[3]) )
  {
LABEL_14:
    insert_error = 1;
    v7 = 0;
  }
  return v7;
}
