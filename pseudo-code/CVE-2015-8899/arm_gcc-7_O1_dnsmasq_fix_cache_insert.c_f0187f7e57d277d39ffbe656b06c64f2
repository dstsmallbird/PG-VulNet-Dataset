int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v7; // r8
  int v8; // r5
  int v9; // r0
  __int16 v10; // r3
  unsigned int v12; // r3
  bool v13; // cf
  unsigned int v15; // r3
  bool v16; // cc
  int v18; // r6
  int v19; // r10
  int v20; // r1
  int v21; // r2
  int v22; // r3
  int v23; // r0
  int v24; // r8
  char *v25; // r0
  int v26; // r1
  int v27; // r2
  int v28; // r3
  int v31; // [sp+Ch] [bp-44h]
  _DWORD v32[4]; // [sp+14h] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v12 = *(_DWORD *)(dnsmasq_daemon + 252);
    v13 = 1;
    if ( v12 )
      v13 = v12 >= a4;
    if ( !v13 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    v15 = *(_DWORD *)(dnsmasq_daemon + 248);
    v16 = v15 != 0;
    if ( v15 )
      v16 = v15 > a4;
    if ( v16 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  v7 = insert_error;
  if ( insert_error )
    return 0;
  v9 = cache_scan_free(a1, a2, a3, a5);
  v8 = v9;
  if ( v9 )
  {
    if ( (a5 & 0x180) == 0 )
      goto LABEL_18;
    v10 = (__int16)a2;
    if ( a2 )
      v10 = 1;
    if ( (*(_DWORD *)&v10 & (a5 >> 3)) == 0
      || ((a5 & 0x80) == 0 || (*(_WORD *)(v9 + 36) & 0x80) == 0 || *(_DWORD *)(v9 + 12) != *a2)
      && ((a5 & 0x100) == 0
       || (*(_WORD *)(v9 + 36) & 0x100) == 0
       || *(_DWORD *)(v9 + 12) != *a2
       || *(_DWORD *)(v9 + 16) != a2[1]
       || *(_DWORD *)(v9 + 20) != a2[2]
       || *(_DWORD *)(v9 + 24) != a2[3]) )
    {
LABEL_18:
      insert_error = 1;
      v8 = 0;
    }
    return v8;
  }
  v31 = a5 & 4;
  while ( 1 )
  {
    v18 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0;
    }
    v19 = *(unsigned __int16 *)(cache_tail + 36);
    if ( (v19 & 0xC) == 0 )
      break;
    if ( v7 )
    {
      if ( !warned_10984 )
      {
        my_syslog(3, "Internal error in cache.");
        warned_10984 = 1;
      }
      insert_error = 1;
      return v8;
    }
    if ( v31 )
    {
      v20 = *(_DWORD *)(cache_tail + 16);
      v21 = *(_DWORD *)(cache_tail + 20);
      v22 = *(_DWORD *)(cache_tail + 24);
      v32[0] = *(_DWORD *)(cache_tail + 12);
      v32[1] = v20;
      v32[2] = v21;
      v32[3] = v22;
      v23 = cache_get_name(cache_tail);
      cache_scan_free(v23, v32, a3, v19);
      ++cache_live_freed;
      v7 = 1;
    }
    else
    {
      cache_scan_free(0, 0, a3, 0);
      v7 = 0;
      v31 = 1;
    }
  }
  if ( a1 && strlen(a1) > 0x31 )
  {
    v24 = big_free;
    if ( big_free )
    {
      big_free = *(_DWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (a5 & 0x5000) == 0 || (v24 = whine_malloc(1028)) == 0 )
      {
        insert_error = 1;
        return v8;
      }
      if ( bignames_left )
        --bignames_left;
    }
    cache_unlink(v18);
    *(_DWORD *)(v18 + 40) = v24;
    *(_WORD *)(v18 + 36) = a5 | 0x200;
  }
  else
  {
    cache_unlink(v18);
    *(_WORD *)(v18 + 36) = a5;
    if ( !a1 )
    {
      *(_BYTE *)cache_get_name(v18) = 0;
      goto LABEL_52;
    }
  }
  v25 = (char *)cache_get_name(v18);
  strcpy(v25, a1);
LABEL_52:
  if ( a2 )
  {
    v26 = a2[1];
    v27 = a2[2];
    v28 = a2[3];
    *(_DWORD *)(v18 + 12) = *a2;
    *(_DWORD *)(v18 + 16) = v26;
    *(_DWORD *)(v18 + 20) = v27;
    *(_DWORD *)(v18 + 24) = v28;
  }
  *(_DWORD *)(v18 + 28) = a4 + a3;
  *(_DWORD *)v18 = new_chain;
  new_chain = v18;
  return v18;
}
