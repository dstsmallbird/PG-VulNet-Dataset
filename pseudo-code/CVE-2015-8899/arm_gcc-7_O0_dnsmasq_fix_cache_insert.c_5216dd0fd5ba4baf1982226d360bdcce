int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v7; // r1
  int v8; // r2
  int v9; // r3
  int v10; // r0
  char *v11; // r0
  int v12; // r1
  int v13; // r2
  int v14; // r3
  int v20; // [sp+14h] [bp-30h]
  int v21; // [sp+18h] [bp-2Ch]
  int v22; // [sp+1Ch] [bp-28h]
  int v23; // [sp+20h] [bp-24h]
  int v24; // [sp+20h] [bp-24h]
  _DWORD v25[4]; // [sp+2Ch] [bp-18h] BYREF

  v20 = 0;
  v21 = a5 & 4;
  v22 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    if ( *(_DWORD *)(dnsmasq_daemon + 252) && a4 > *(_DWORD *)(dnsmasq_daemon + 252) )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( *(_DWORD *)(dnsmasq_daemon + 248) && a4 < *(_DWORD *)(dnsmasq_daemon + 248) )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  if ( insert_error )
    return 0;
  v23 = cache_scan_free(a1, a2, a3, a5);
  if ( v23 )
  {
    if ( (a5 & 0x180) != 0 && (a5 & 8) != 0 && a2 )
    {
      if ( (a5 & 0x80) != 0 && (*(_WORD *)(v23 + 36) & 0x80) != 0 && *(_DWORD *)(v23 + 12) == *a2 )
        return v23;
      if ( (a5 & 0x100) != 0
        && (*(_WORD *)(v23 + 36) & 0x100) != 0
        && *(_DWORD *)(v23 + 12) == *a2
        && *(_DWORD *)(v23 + 16) == a2[1]
        && *(_DWORD *)(v23 + 20) == a2[2]
        && *(_DWORD *)(v23 + 24) == a2[3] )
      {
        return v23;
      }
    }
    insert_error = 1;
    return 0;
  }
  while ( 1 )
  {
    v24 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0;
    }
    if ( (*(_WORD *)(cache_tail + 36) & 0xC) == 0 )
      break;
    if ( v22 )
    {
      if ( !warned_10062 )
      {
        my_syslog(3, "Internal error in cache.");
        warned_10062 = 1;
      }
      insert_error = 1;
      return 0;
    }
    if ( v21 )
    {
      v7 = *(_DWORD *)(cache_tail + 16);
      v8 = *(_DWORD *)(cache_tail + 20);
      v9 = *(_DWORD *)(cache_tail + 24);
      v25[0] = *(_DWORD *)(cache_tail + 12);
      v25[1] = v7;
      v25[2] = v8;
      v25[3] = v9;
      v22 = 1;
      v10 = cache_get_name(cache_tail);
      cache_scan_free(v10, v25, a3, *(unsigned __int16 *)(v24 + 36));
      ++cache_live_freed;
    }
    else
    {
      cache_scan_free(0, 0, a3, 0);
      v21 = 1;
    }
  }
  if ( a1 && strlen(a1) > 0x31 )
  {
    if ( big_free )
    {
      v20 = big_free;
      big_free = *(_DWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (a5 & 0x5000) == 0 || (v20 = whine_malloc(1028)) == 0 )
      {
        insert_error = 1;
        return 0;
      }
      if ( bignames_left )
        --bignames_left;
    }
  }
  cache_unlink(v24);
  *(_WORD *)(v24 + 36) = a5;
  if ( v20 )
  {
    *(_DWORD *)(v24 + 40) = v20;
    *(_WORD *)(v24 + 36) |= 0x200u;
  }
  if ( a1 )
  {
    v11 = (char *)cache_get_name(v24);
    strcpy(v11, a1);
  }
  else
  {
    *(_BYTE *)cache_get_name(v24) = 0;
  }
  if ( a2 )
  {
    v12 = a2[1];
    v13 = a2[2];
    v14 = a2[3];
    *(_DWORD *)(v24 + 12) = *a2;
    *(_DWORD *)(v24 + 16) = v12;
    *(_DWORD *)(v24 + 20) = v13;
    *(_DWORD *)(v24 + 24) = v14;
  }
  *(_DWORD *)(v24 + 28) = a4 + a3;
  *(_DWORD *)v24 = new_chain;
  new_chain = v24;
  return v24;
}
