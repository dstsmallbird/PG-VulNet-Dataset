__int64 __fastcall cache_insert(const char *a1, void *cp, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v8; // w21
  __int64 v9; // x19
  int v10; // w24
  __int64 v11; // x0
  bool v12; // zf
  int v14; // w6
  __int64 v15; // x25
  __int64 v16; // x3
  __int64 v17; // x1
  __int64 v18; // x0
  unsigned __int64 v19; // x0
  bool v20; // cf
  bool v21; // cc
  __int64 v22; // x0
  __int64 *v23; // x1
  char *v24; // x0
  __int64 v25; // x1
  _BYTE *v26; // x0
  int v28; // [xsp+74h] [xbp+74h]
  __int64 v29[2]; // [xsp+88h] [xbp+88h] BYREF

  v8 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, cp);
    v19 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v19 )
      v20 = v19 >= a4;
    else
      v20 = 1;
    if ( v20 )
      v19 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( a4 )
      v21 = a4 > v19;
    else
      v21 = 0;
    if ( !v21 )
      a4 = v19;
  }
  v9 = 0LL;
  v10 = insert_error;
  if ( insert_error )
    return v9;
  v11 = cache_scan_free(a1, cp, a3, v8);
  v9 = v11;
  if ( !v11 )
  {
    v14 = v8 & 4;
    while ( 1 )
    {
      v15 = cache_tail;
      if ( !cache_tail )
        goto LABEL_29;
      v16 = *(unsigned __int16 *)(cache_tail + 52);
      if ( (v16 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_10207 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_10207 = 1;
        }
        goto LABEL_29;
      }
      if ( v14 )
      {
        v17 = *(_QWORD *)(cache_tail + 32);
        v29[0] = *(_QWORD *)(cache_tail + 24);
        v29[1] = v17;
        if ( (v16 & 0x200) != 0 || (v18 = cache_tail + 56, (v16 & 2) != 0) )
          v18 = *(_QWORD *)(cache_tail + 56);
        v28 = v14;
        v10 = 1;
        cache_scan_free(v18, v29, a3, v16);
        v14 = v28;
        ++cache_live_freed;
      }
      else
      {
        v10 = 0;
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v14 = 1;
      }
    }
    if ( a1 )
    {
      if ( strlen(a1) > 0x31 )
      {
        v9 = big_free;
        if ( big_free )
        {
          big_free = *(_QWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (v8 & 0x5000) == 0 )
            goto LABEL_29;
          v9 = whine_malloc(1032LL);
          if ( !v9 )
            goto LABEL_29;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v9 = 0LL;
    }
    v22 = *(_QWORD *)v15;
    v23 = *(__int64 **)(v15 + 8);
    if ( v23 )
    {
      *v23 = v22;
      v22 = *(_QWORD *)v15;
    }
    else
    {
      cache_head = *(_QWORD *)v15;
    }
    if ( v22 )
      *(_QWORD *)(v22 + 8) = v23;
    else
      cache_tail = (__int64)v23;
    *(_WORD *)(v15 + 52) = v8;
    if ( v9 )
    {
      *(_WORD *)(v15 + 52) = v8 | 0x200;
      *(_QWORD *)(v15 + 56) = v9;
      if ( a1 )
      {
LABEL_54:
        v24 = *(char **)(v15 + 56);
LABEL_55:
        strcpy(v24, a1);
LABEL_56:
        if ( cp )
        {
          v25 = *((_QWORD *)cp + 1);
          *(_QWORD *)(v15 + 24) = *(_QWORD *)cp;
          *(_QWORD *)(v15 + 32) = v25;
        }
        *(_QWORD *)(v15 + 40) = a4 + a3;
        v9 = v15;
        *(_QWORD *)v15 = new_chain;
        new_chain = v15;
        return v9;
      }
    }
    else
    {
      if ( a1 )
      {
        if ( (v8 & 0x200) == 0 )
        {
          v24 = (char *)(v15 + 56);
          if ( (v8 & 2) == 0 )
            goto LABEL_55;
        }
        goto LABEL_54;
      }
      if ( (v8 & 0x200) == 0 )
      {
        v26 = (_BYTE *)(v15 + 56);
        if ( (v8 & 2) == 0 )
        {
LABEL_62:
          *v26 = 0;
          goto LABEL_56;
        }
      }
    }
    v26 = *(_BYTE **)(v15 + 56);
    goto LABEL_62;
  }
  if ( (v8 & 0x180) == 0
    || ((v8 & 8) != 0 ? (v12 = cp == 0LL) : (v12 = 1),
        v12
     || ((v8 & 0x80) == 0 || (*(_WORD *)(v11 + 52) & 0x80) == 0 || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp)
     && ((v8 & 0x100) == 0
      || (*(_WORD *)(v11 + 52) & 0x100) == 0
      || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp
      || *(_DWORD *)(v11 + 28) != *((_DWORD *)cp + 1)
      || *(_DWORD *)(v11 + 32) != *((_DWORD *)cp + 2)
      || *(_DWORD *)(v11 + 36) != *((_DWORD *)cp + 3))) )
  {
LABEL_29:
    v9 = 0LL;
    insert_error = 1;
  }
  return v9;
}
