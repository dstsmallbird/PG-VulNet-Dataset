__int64 __fastcall cache_insert(char *src, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned __int16 v5; // r15
  unsigned int v6; // er14
  __int64 v11; // rdx
  __int64 v12; // rax
  int v13; // ecx
  int v14; // er8
  int v15; // er9
  unsigned __int64 v17; // rax
  int v18; // er14
  unsigned __int16 v19; // ax
  __int64 v20; // rdi
  __int64 v21; // rdi
  size_t v22; // rax
  __int64 v23; // rax
  __int64 *v24; // rcx
  __int64 v25; // rsi
  unsigned __int16 v26; // ax
  char *v27; // rdi
  __int64 v28; // rcx
  __int64 v29; // rbx
  __int64 v30; // rax
  _BYTE *v31; // rax
  int v32; // [rsp+0h] [rbp-68h]
  __int64 v33; // [rsp+0h] [rbp-68h]
  __int64 v34; // [rsp+0h] [rbp-68h]
  unsigned __int16 v35; // [rsp+Eh] [rbp-5Ah]
  __int64 v36[11]; // [rsp+10h] [rbp-58h] BYREF

  v5 = a5;
  v6 = a5;
  v35 = a5;
  v36[3] = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, src, a2, 0LL);
    v17 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( a4 <= v17 || !v17 )
      v17 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( !a4 || v17 >= a4 )
      a4 = v17;
  }
  v11 = 0LL;
  v32 = insert_error;
  if ( !insert_error )
  {
    v12 = cache_scan_free(src, a2, a3, v6);
    v11 = v12;
    v15 = v32;
    if ( v12 )
    {
      if ( (v5 & 0x180) != 0
        && (v5 & 8) != 0
        && a2
        && ((v5 & 0x80u) != 0 && *(char *)(v12 + 52) < 0 && *(_DWORD *)(v12 + 24) == *a2
         || (v5 & 0x100) != 0
         && (*(_BYTE *)(v12 + 53) & 1) != 0
         && *(_DWORD *)(v12 + 24) == *a2
         && *(_DWORD *)(v12 + 28) == a2[1]
         && *(_DWORD *)(v12 + 32) == a2[2]
         && *(_DWORD *)(v12 + 36) == a2[3]) )
      {
        return v11;
      }
LABEL_13:
      insert_error = 1;
      return 0LL;
    }
    v18 = v5 & 4;
LABEL_22:
    v11 = cache_tail;
    if ( !cache_tail )
      goto LABEL_13;
    while ( 1 )
    {
      v19 = *(_WORD *)(v11 + 52);
      if ( (v19 & 0xC) == 0 )
        break;
      if ( v15 )
      {
        if ( !warned_8655 )
        {
          my_syslog(3, (unsigned int)"Internal error in cache.", warned_8655, v13, v14, v15, (char)v36);
          warned_8655 = 1;
        }
        goto LABEL_13;
      }
      if ( !v18 )
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v15 = 0;
        v18 = 1;
        goto LABEL_22;
      }
      v20 = *(_QWORD *)(v11 + 32);
      v36[0] = *(_QWORD *)(v11 + 24);
      v36[1] = v20;
      if ( (v19 & 0x200) != 0 || (v21 = v11 + 56, (v19 & 2) != 0) )
        v21 = *(_QWORD *)(v11 + 56);
      cache_scan_free(v21, v36, a3, v19);
      v11 = cache_tail;
      ++cache_live_freed;
      v15 = 1;
      if ( !cache_tail )
        goto LABEL_13;
    }
    if ( src && (v33 = v11, v22 = strlen(src), v11 = v33, v22 > 0x31) )
    {
      v23 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (v5 & 0x5000) == 0 )
          goto LABEL_13;
        v23 = whine_malloc(1032LL);
        if ( !v23 )
          goto LABEL_13;
        v11 = v33;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v23 = 0LL;
    }
    v24 = *(__int64 **)(v11 + 8);
    v25 = *(_QWORD *)v11;
    if ( v24 )
    {
      *v24 = v25;
      v25 = *(_QWORD *)v11;
    }
    else
    {
      cache_head = *(_QWORD *)v11;
    }
    if ( v25 )
      *(_QWORD *)(v25 + 8) = v24;
    else
      cache_tail = (__int64)v24;
    *(_WORD *)(v11 + 52) = v5;
    if ( v23 )
    {
      *(_QWORD *)(v11 + 56) = v23;
      LOBYTE(v26) = v5;
      HIBYTE(v26) = HIBYTE(v5) | 2;
      v35 = v26;
      *(_WORD *)(v11 + 52) = v26;
    }
    if ( src )
    {
      if ( (v35 & 0x200) != 0 || (v27 = (char *)(v11 + 56), (v35 & 2) != 0) )
        v27 = *(char **)(v11 + 56);
      v34 = v11;
      strcpy(v27, src);
      v11 = v34;
    }
    else
    {
      if ( (v35 & 0x200) != 0 || (v31 = (_BYTE *)(v11 + 56), (v35 & 2) != 0) )
        v31 = *(_BYTE **)(v11 + 56);
      *v31 = 0;
    }
    if ( a2 )
    {
      v28 = *(_QWORD *)a2;
      v29 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(v11 + 24) = v28;
      *(_QWORD *)(v11 + 32) = v29;
    }
    v30 = new_chain;
    new_chain = v11;
    *(_QWORD *)(v11 + 40) = a4 + a3;
    *(_QWORD *)v11 = v30;
  }
  return v11;
}
