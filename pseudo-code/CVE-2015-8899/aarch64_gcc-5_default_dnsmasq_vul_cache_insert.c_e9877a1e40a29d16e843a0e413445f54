__int64 __fastcall cache_insert(const char *a1, __int64 a2, time_t time1, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned __int16 v6; // w19
  __int64 result; // x0
  unsigned __int64 v11; // x0
  bool v12; // zf
  bool v13; // cf
  int v14; // w27
  int v15; // w4
  __int64 v16; // x28
  __int16 v17; // w3
  __int64 v18; // x1
  __int64 v19; // x0
  __int64 v20; // x0
  _QWORD *v21; // x1
  __int64 v22; // x2
  char *v23; // x0
  __int64 v24; // x3
  __int64 v25; // x1
  _BYTE *v26; // x0
  _QWORD v27[2]; // [xsp+78h] [xbp+78h] BYREF

  v6 = a5;
  if ( (a5 & 0x980) == 0 )
  {
    if ( !insert_error )
      goto LABEL_3;
    return 0LL;
  }
  log_query(a5 | 0x10000u, a1, a2, 0LL);
  v11 = *(_QWORD *)(dnsmasq_daemon + 456);
  if ( a4 > v11 )
    v12 = v11 == 0;
  else
    v12 = 1;
  if ( v12 )
    v11 = a4;
  a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  if ( a4 )
    v13 = v11 >= a4;
  else
    v13 = 1;
  if ( v13 )
    a4 = v11;
  if ( insert_error )
    return 0LL;
LABEL_3:
  result = cache_scan_free((int)a1, a2, time1);
  if ( !result )
  {
    v14 = v6 & 4;
    v15 = 0;
    while ( 1 )
    {
      v16 = cache_tail;
      if ( !cache_tail )
        goto LABEL_12;
      v17 = *(_WORD *)(cache_tail + 52);
      if ( (v17 & 0xC) == 0 )
      {
        if ( a1 && strlen(a1) > 0x31 )
        {
          v20 = big_free;
          if ( big_free )
          {
            big_free = *(_QWORD *)big_free;
          }
          else
          {
            if ( !bignames_left && (v6 & 0x5000) == 0 )
              goto LABEL_12;
            v20 = whine_malloc(1032LL);
            if ( !v20 )
              goto LABEL_12;
            if ( bignames_left )
              --bignames_left;
          }
        }
        else
        {
          v20 = 0LL;
        }
        v21 = *(_QWORD **)(v16 + 8);
        if ( v21 )
        {
          *v21 = *(_QWORD *)v16;
          v22 = *(_QWORD *)v16;
        }
        else
        {
          v22 = *(_QWORD *)v16;
          cache_head = *(_QWORD *)v16;
        }
        if ( v22 )
          *(_QWORD *)(v22 + 8) = v21;
        else
          cache_tail = (__int64)v21;
        *(_WORD *)(v16 + 52) = v6;
        if ( v20 )
        {
          v6 |= 0x200u;
          *(_QWORD *)(v16 + 56) = v20;
          *(_WORD *)(v16 + 52) = v6;
        }
        if ( a1 )
        {
          if ( (v6 & 0x200) != 0 || (v23 = (char *)(v16 + 56), (v6 & 2) != 0) )
            v23 = *(char **)(v16 + 56);
          strcpy(v23, a1);
        }
        else
        {
          if ( (v6 & 0x200) != 0 || (v26 = (_BYTE *)(v16 + 56), (v6 & 2) != 0) )
            v26 = *(_BYTE **)(v16 + 56);
          *v26 = 0;
        }
        if ( a2 )
        {
          v24 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(v16 + 24) = *(_QWORD *)a2;
          *(_QWORD *)(v16 + 32) = v24;
        }
        *(_QWORD *)(v16 + 40) = a4 + time1;
        result = v16;
        v25 = new_chain;
        new_chain = v16;
        *(_QWORD *)v16 = v25;
        return result;
      }
      if ( v15 )
      {
        if ( !warned_9671 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_9671 = 1;
        }
        goto LABEL_12;
      }
      if ( v14 )
      {
        v18 = *(_QWORD *)(cache_tail + 32);
        v27[0] = *(_QWORD *)(cache_tail + 24);
        v27[1] = v18;
        if ( (v17 & 0x200) != 0 || (LODWORD(v19) = cache_tail + 56, (v17 & 2) != 0) )
          v19 = *(_QWORD *)(cache_tail + 56);
        cache_scan_free(v19, (int)v27, time1);
        v15 = 1;
        ++cache_live_freed;
      }
      else
      {
        v14 = 1;
        cache_scan_free(0, 0, time1);
        v15 = 0;
      }
    }
  }
  if ( (v6 & 0x180) == 0
    || (v6 & 8) == 0
    || ((v6 & 0x80) == 0 || (*(_WORD *)(result + 52) & 0x80) == 0 || *(_DWORD *)(result + 24) != *(_DWORD *)a2)
    && ((v6 & 0x100) == 0
     || (*(_WORD *)(result + 52) & 0x100) == 0
     || *(_DWORD *)(result + 24) != *(_DWORD *)a2
     || *(_DWORD *)(result + 28) != *(_DWORD *)(a2 + 4)
     || *(_DWORD *)(result + 32) != *(_DWORD *)(a2 + 8)
     || *(_DWORD *)(result + 36) != *(_DWORD *)(a2 + 12)) )
  {
LABEL_12:
    result = 0LL;
    insert_error = 1;
  }
  return result;
}
