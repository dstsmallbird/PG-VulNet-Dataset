__int64 __fastcall cache_insert(const char *a1, void *cp, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v8; // w21
  __int64 v9; // x19
  int v10; // w24
  __int64 v11; // x0
  int v13; // w6
  __int64 v14; // x25
  __int64 v15; // x3
  __int64 v16; // x1
  __int64 v17; // x0
  unsigned __int64 v18; // x0
  bool v19; // cf
  bool v20; // cc
  __int64 v21; // x0
  __int64 *v22; // x1
  char *v23; // x0
  __int64 v24; // x1
  _BYTE *v25; // x0
  int v27; // [xsp+74h] [xbp+74h]
  __int64 v28[2]; // [xsp+88h] [xbp+88h] BYREF

  v8 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, cp);
    v18 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v18 )
      v19 = v18 >= a4;
    else
      v19 = 1;
    if ( v19 )
      v18 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( a4 )
      v20 = a4 > v18;
    else
      v20 = 0;
    if ( !v20 )
      a4 = v18;
  }
  v9 = 0LL;
  v10 = insert_error;
  if ( insert_error )
    return v9;
  v11 = cache_scan_free(a1, cp, a3, v8);
  v9 = v11;
  if ( !v11 )
  {
    v13 = v8 & 4;
    while ( 1 )
    {
      v14 = cache_tail;
      if ( !cache_tail )
        goto LABEL_24;
      v15 = *(unsigned __int16 *)(cache_tail + 52);
      if ( (v15 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_10207 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_10207 = 1;
        }
        goto LABEL_24;
      }
      if ( v13 )
      {
        v16 = *(_QWORD *)(cache_tail + 32);
        v28[0] = *(_QWORD *)(cache_tail + 24);
        v28[1] = v16;
        if ( (v15 & 0x200) != 0 || (v17 = cache_tail + 56, (v15 & 2) != 0) )
          v17 = *(_QWORD *)(cache_tail + 56);
        v27 = v13;
        v10 = 1;
        cache_scan_free(v17, v28, a3, v15);
        v13 = v27;
        ++cache_live_freed;
      }
      else
      {
        v10 = 0;
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v13 = 1;
      }
    }
    if ( a1 )
    {
      if ( strlen(a1) > 0x31 )
      {
        v9 = big_free;
        if ( big_free )
        {
          big_free = *(_QWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (v8 & 0x5000) == 0 )
            goto LABEL_24;
          v9 = whine_malloc(1032LL);
          if ( !v9 )
            goto LABEL_24;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v9 = 0LL;
    }
    v21 = *(_QWORD *)v14;
    v22 = *(__int64 **)(v14 + 8);
    if ( v22 )
    {
      *v22 = v21;
      v21 = *(_QWORD *)v14;
    }
    else
    {
      cache_head = *(_QWORD *)v14;
    }
    if ( v21 )
      *(_QWORD *)(v21 + 8) = v22;
    else
      cache_tail = (__int64)v22;
    *(_WORD *)(v14 + 52) = v8;
    if ( v9 )
    {
      *(_WORD *)(v14 + 52) = v8 | 0x200;
      *(_QWORD *)(v14 + 56) = v9;
      if ( a1 )
      {
LABEL_52:
        v23 = *(char **)(v14 + 56);
LABEL_53:
        strcpy(v23, a1);
LABEL_54:
        if ( cp )
        {
          v24 = *((_QWORD *)cp + 1);
          *(_QWORD *)(v14 + 24) = *(_QWORD *)cp;
          *(_QWORD *)(v14 + 32) = v24;
        }
        *(_QWORD *)(v14 + 40) = a4 + a3;
        v9 = v14;
        *(_QWORD *)v14 = new_chain;
        new_chain = v14;
        return v9;
      }
    }
    else
    {
      if ( a1 )
      {
        if ( (v8 & 0x200) == 0 )
        {
          v23 = (char *)(v14 + 56);
          if ( (v8 & 2) == 0 )
            goto LABEL_53;
        }
        goto LABEL_52;
      }
      if ( (v8 & 0x200) == 0 )
      {
        v25 = (_BYTE *)(v14 + 56);
        if ( (v8 & 2) == 0 )
        {
LABEL_60:
          *v25 = 0;
          goto LABEL_54;
        }
      }
    }
    v25 = *(_BYTE **)(v14 + 56);
    goto LABEL_60;
  }
  if ( (v8 & 0x180) == 0
    || (v8 & 8) == 0
    || ((v8 & 0x80) == 0 || (*(_WORD *)(v11 + 52) & 0x80) == 0 || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp)
    && ((v8 & 0x100) == 0
     || (*(_WORD *)(v11 + 52) & 0x100) == 0
     || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp
     || *(_DWORD *)(v11 + 28) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v11 + 32) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v11 + 36) != *((_DWORD *)cp + 3)) )
  {
LABEL_24:
    v9 = 0LL;
    insert_error = 1;
  }
  return v9;
}
