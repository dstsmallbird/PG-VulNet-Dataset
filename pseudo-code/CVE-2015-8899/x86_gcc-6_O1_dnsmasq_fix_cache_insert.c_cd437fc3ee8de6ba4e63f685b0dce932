int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v6; // eax
  unsigned int v7; // eax
  int v8; // ebp
  int v9; // edx
  unsigned __int16 v10; // di
  int v11; // ebp
  int v12; // edi
  char *v13; // eax
  char v14; // [esp+8h] [ebp-64h]
  int v15; // [esp+1Ch] [ebp-50h]

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, a2, 0);
    v6 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v6 )
    {
      if ( a4 <= v6 )
        v6 = a4;
      a4 = v6;
    }
    v7 = *(_DWORD *)(dnsmasq_daemon + 248);
    if ( a4 < v7 )
    {
      if ( !v7 )
        v7 = a4;
      a4 = v7;
    }
  }
  v15 = 0;
  if ( !insert_error )
  {
    v15 = cache_scan_free(a5);
    if ( v15 )
    {
      if ( (a5 & 0x180) == 0
        || (a5 & 8) == 0
        || !a2
        || ((a5 & 0x80) == 0 || *(char *)(v15 + 36) >= 0 || *(_DWORD *)(v15 + 12) != *a2)
        && ((a5 & 0x100) == 0
         || (*(_BYTE *)(v15 + 37) & 1) == 0
         || *(_DWORD *)(v15 + 12) != *a2
         || *(_DWORD *)(v15 + 16) != a2[1]
         || *(_DWORD *)(v15 + 20) != a2[2]
         || *(_DWORD *)(v15 + 24) != a2[3]) )
      {
        insert_error = 1;
        v15 = 0;
      }
      return v15;
    }
    v8 = a5 & 4;
    v9 = 0;
    while ( 1 )
    {
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0;
      }
      v10 = *(_WORD *)(cache_tail + 36);
      if ( (v10 & 0xC) == 0 )
        break;
      if ( v9 )
      {
        if ( !warned_8300 )
        {
          my_syslog(3, "Internal error in cache.", v14);
          warned_8300 = 1;
        }
        insert_error = 1;
        return v15;
      }
      if ( v8 )
      {
        cache_get_name(cache_tail);
        cache_scan_free(v10);
        ++cache_live_freed;
        v9 = 1;
      }
      else
      {
        cache_scan_free(0);
        v9 = 0;
        v8 = 1;
      }
    }
    v11 = cache_tail;
    if ( a1 && strlen(a1) > 0x31 )
    {
      v12 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v12 = whine_malloc(0x404u)) == 0 )
        {
          insert_error = 1;
          return v15;
        }
        if ( bignames_left )
          --bignames_left;
      }
      cache_unlink();
      *(_DWORD *)(v11 + 40) = v12;
      *(_WORD *)(v11 + 36) = a5 | 0x200;
    }
    else
    {
      cache_unlink();
      *(_WORD *)(v11 + 36) = a5;
      if ( !a1 )
      {
        *(_BYTE *)cache_get_name(v11) = 0;
        goto LABEL_44;
      }
    }
    v13 = (char *)cache_get_name(v11);
    strcpy(v13, a1);
LABEL_44:
    if ( a2 )
    {
      *(_DWORD *)(v11 + 12) = *a2;
      *(_DWORD *)(v11 + 16) = a2[1];
      *(_DWORD *)(v11 + 20) = a2[2];
      *(_DWORD *)(v11 + 24) = a2[3];
    }
    *(_DWORD *)(v11 + 28) = a3 + a4;
    *(_DWORD *)v11 = new_chain;
    new_chain = v11;
    v15 = v11;
  }
  return v15;
}
