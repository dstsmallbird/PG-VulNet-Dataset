int __cdecl cache_insert(char *s, int cp, time_t time1, int a4, __int16 a5)
{
  __int16 v5; // bx
  unsigned int v6; // edx
  unsigned int v7; // eax
  int v8; // edi
  int v9; // eax
  __int16 v10; // ax
  int v11; // ebx
  int v12; // ebp
  __int16 v13; // ax
  int v14; // ebp
  int *v15; // eax
  int v16; // ecx
  bool v18; // zf
  int *v19; // ecx
  __int16 v20; // ax
  char v21; // cl
  __int64 *v22; // ebx
  char *v23; // eax
  char *v24; // ecx
  __int64 v25; // xmm0_8
  int v26; // eax
  __int16 v27; // [esp+0h] [ebp-2Ch]
  int v28; // [esp+4h] [ebp-28h]

  if ( (a5 & 0x980) != 0 )
  {
    v5 = a5;
    log_query((unsigned __int16)a5 + 0x10000, (int)s, (void *)cp, 0);
    v6 = a4;
    v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v7 < a4 )
      v6 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v7 )
      v6 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v6 )
      v6 = *(_DWORD *)(dnsmasq_daemon + 248);
    v28 = v6;
  }
  else
  {
    v28 = a4;
    v5 = a5;
  }
  v8 = 0;
  if ( !insert_error )
  {
    v9 = cache_scan_free(time1, a5);
    if ( v9 )
    {
      if ( (v5 & 0x180) != 0 )
      {
        v8 = v9;
        if ( (v5 & 8) != 0 )
        {
          v10 = v5;
          if ( (a5 & 0x80u) != 0 && *(char *)(v8 + 36) < 0 )
          {
            v10 = v5;
            if ( *(_DWORD *)(v8 + 12) == *(_DWORD *)cp )
              return v8;
          }
          if ( (v10 & 0x100) != 0
            && (*(_BYTE *)(v8 + 37) & 1) != 0
            && *(_DWORD *)(v8 + 12) == *(_DWORD *)cp
            && *(_DWORD *)(v8 + 16) == *(_DWORD *)(cp + 4)
            && *(_DWORD *)(v8 + 20) == *(_DWORD *)(cp + 8)
            && *(_DWORD *)(v8 + 24) == *(_DWORD *)(cp + 12) )
          {
            return v8;
          }
        }
      }
LABEL_41:
      insert_error = 1;
      return 0;
    }
    v8 = cache_tail;
    if ( !cache_tail )
      goto LABEL_41;
    v27 = v5;
    v11 = v5 & 4;
    v12 = 0;
    while ( 1 )
    {
      v13 = *(_WORD *)(v8 + 36);
      if ( (v13 & 0xC) == 0 )
        break;
      if ( v12 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        goto LABEL_41;
      }
      if ( v11 )
      {
        cache_scan_free(time1, v13);
        ++cache_live_freed;
        v12 = 1;
      }
      else
      {
        v12 = 0;
        cache_scan_free(time1, 0);
        v11 = 1;
      }
      v8 = cache_tail;
      if ( !cache_tail )
        goto LABEL_41;
    }
    v14 = 0;
    if ( s && strlen(s) >= 0x32 )
    {
      v14 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !(bignames_left | v27 & 0x5000) )
          goto LABEL_41;
        v26 = whine_malloc(0x404u);
        if ( !v26 )
          goto LABEL_41;
        v14 = v26;
        if ( bignames_left )
          --bignames_left;
      }
    }
    v15 = *(int **)(v8 + 4);
    v16 = *(_DWORD *)v8;
    if ( v15 )
    {
      *v15 = v16;
      v16 = *(_DWORD *)v8;
    }
    else
    {
      cache_head = *(_DWORD *)v8;
    }
    v18 = v16 == 0;
    v19 = (int *)(v16 + 4);
    if ( v18 )
      v19 = &cache_tail;
    *v19 = (int)v15;
    v20 = v27;
    *(_WORD *)(v8 + 36) = a5;
    if ( v14 )
    {
      *(_DWORD *)(v8 + 40) = v14;
      v20 = a5 | 0x200;
      *(_WORD *)(v8 + 36) = a5 | 0x200;
    }
    if ( (v20 & 0x200) != 0 )
    {
      v23 = *(char **)(v8 + 40);
      v22 = (__int64 *)cp;
      v24 = s;
    }
    else
    {
      v21 = v20;
      v22 = (__int64 *)cp;
      v23 = (char *)(v8 + 40);
      v18 = (v21 & 2) == 0;
      v24 = s;
      if ( !v18 )
      {
        v23 = *(char **)v23;
        if ( !s )
          goto LABEL_55;
        goto LABEL_54;
      }
    }
    if ( !v24 )
    {
LABEL_55:
      *v23 = 0;
      goto LABEL_56;
    }
LABEL_54:
    strcpy(v23, v24);
LABEL_56:
    if ( v22 )
    {
      v25 = *v22;
      *(_QWORD *)(v8 + 20) = v22[1];
      *(_QWORD *)(v8 + 12) = v25;
    }
    *(_DWORD *)(v8 + 28) = time1 + v28;
    *(_DWORD *)v8 = new_chain;
    new_chain = v8;
  }
  return v8;
}
