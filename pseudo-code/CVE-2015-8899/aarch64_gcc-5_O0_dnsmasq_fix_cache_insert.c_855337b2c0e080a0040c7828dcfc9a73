__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  __int64 result; // x0
  int v6; // w0
  __int64 v7; // x1
  __int64 v8; // x0
  char *v9; // x0
  __int64 v10; // x1
  int v16; // [xsp+40h] [xbp+40h]
  int v17; // [xsp+44h] [xbp+44h]
  __int64 v18; // [xsp+48h] [xbp+48h]
  __int64 v19; // [xsp+50h] [xbp+50h]
  __int64 v20; // [xsp+50h] [xbp+50h]
  _QWORD v21[2]; // [xsp+68h] [xbp+68h] BYREF

  v18 = 0LL;
  v16 = a5 & 4;
  v17 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    if ( *(_QWORD *)(dnsmasq_daemon + 456) && *(_QWORD *)(dnsmasq_daemon + 456) < a4 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( *(_QWORD *)(dnsmasq_daemon + 448) && *(_QWORD *)(dnsmasq_daemon + 448) > a4 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  if ( insert_error )
    return 0LL;
  v19 = cache_scan_free(a1, a2, a3, a5);
  if ( v19 )
  {
    if ( (a5 & 0x180) == 0 || (a5 & 8) == 0 || !a2 )
      goto LABEL_28;
    if ( (a5 & 0x80) != 0 && (*(_WORD *)(v19 + 52) & 0x80) != 0 && *(_DWORD *)(v19 + 24) == *a2 )
      return v19;
    if ( (a5 & 0x100) != 0
      && (*(_WORD *)(v19 + 52) & 0x100) != 0
      && (*(_DWORD *)(v19 + 24) != *a2
       || *(_DWORD *)(v19 + 28) != a2[1]
       || *(_DWORD *)(v19 + 32) != a2[2]
       || *(_DWORD *)(v19 + 36) != a2[3] ? (v6 = 0) : (v6 = 1),
          v6) )
    {
      result = v19;
    }
    else
    {
LABEL_28:
      insert_error = 1;
      result = 0LL;
    }
  }
  else
  {
    while ( 1 )
    {
      v20 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0LL;
      }
      if ( (*(_WORD *)(cache_tail + 52) & 0xC) == 0 )
        break;
      if ( v17 )
      {
        if ( !warned_8749 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_8749 = 1;
        }
        insert_error = 1;
        return 0LL;
      }
      if ( v16 )
      {
        v7 = *(_QWORD *)(cache_tail + 32);
        v21[0] = *(_QWORD *)(cache_tail + 24);
        v21[1] = v7;
        v17 = 1;
        v8 = cache_get_name(cache_tail);
        cache_scan_free(v8, v21, a3, *(unsigned __int16 *)(v20 + 52));
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v16 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      if ( big_free )
      {
        v18 = big_free;
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v18 = whine_malloc(1032LL)) == 0 )
        {
          insert_error = 1;
          return 0LL;
        }
        if ( bignames_left )
          --bignames_left;
      }
    }
    cache_unlink(v20);
    *(_WORD *)(v20 + 52) = a5;
    if ( v18 )
    {
      *(_QWORD *)(v20 + 56) = v18;
      *(_WORD *)(v20 + 52) |= 0x200u;
    }
    if ( a1 )
    {
      v9 = (char *)cache_get_name(v20);
      strcpy(v9, a1);
    }
    else
    {
      *(_BYTE *)cache_get_name(v20) = 0;
    }
    if ( a2 )
    {
      v10 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(v20 + 24) = *(_QWORD *)a2;
      *(_QWORD *)(v20 + 32) = v10;
    }
    *(_QWORD *)(v20 + 40) = a4 + a3;
    *(_QWORD *)v20 = new_chain;
    new_chain = v20;
    result = v20;
  }
  return result;
}
