__int64 __fastcall cache_insert(const char *a1, void *cp, time_t time1, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned __int16 v7; // w20
  __int64 v10; // x19
  int v11; // w28
  __int64 v12; // x0
  bool v13; // zf
  unsigned __int64 v15; // x0
  bool v16; // cc
  bool v17; // cf
  int v18; // w4
  __int16 v19; // w3
  __int64 v20; // x1
  __int64 v21; // x0
  __int64 v22; // x0
  _QWORD *v23; // x1
  __int64 v24; // x2
  char *v25; // x0
  __int64 v26; // x1
  _BYTE *v27; // x0
  int v28; // [xsp+6Ch] [xbp+6Ch]
  __int64 v29[2]; // [xsp+78h] [xbp+78h] BYREF

  v7 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, cp);
    v15 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v15 )
      v16 = a4 > v15;
    else
      v16 = 0;
    if ( !v16 )
      v15 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( a4 )
      v17 = v15 >= a4;
    else
      v17 = 1;
    if ( v17 )
      a4 = v15;
  }
  v10 = 0LL;
  v11 = insert_error;
  if ( !insert_error )
  {
    v12 = cache_scan_free((int)a1, (int)cp, time1);
    v10 = v12;
    if ( v12 )
    {
      if ( (v7 & 0x180) != 0 )
      {
        v13 = (v7 & 8) == 0 || cp == 0LL;
        if ( !v13
          && ((v7 & 0x80) != 0 && (*(_WORD *)(v12 + 52) & 0x80) != 0 && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp
           || (v7 & 0x100) != 0
           && (*(_WORD *)(v12 + 52) & 0x100) != 0
           && *(_DWORD *)(v12 + 24) == *(_DWORD *)cp
           && *(_DWORD *)(v12 + 28) == *((_DWORD *)cp + 1)
           && *(_DWORD *)(v12 + 32) == *((_DWORD *)cp + 2)
           && *(_DWORD *)(v12 + 36) == *((_DWORD *)cp + 3)) )
        {
          return v10;
        }
      }
    }
    else
    {
      v18 = v7 & 4;
      while ( 1 )
      {
        v10 = cache_tail;
        if ( !cache_tail )
          break;
        v19 = *(_WORD *)(cache_tail + 52);
        if ( (v19 & 0xC) == 0 )
        {
          if ( a1 && strlen(a1) > 0x31 )
          {
            v22 = big_free;
            if ( big_free )
            {
              big_free = *(_QWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (v7 & 0x5000) == 0 )
                break;
              v22 = whine_malloc(1032LL);
              if ( !v22 )
                break;
              if ( bignames_left )
                --bignames_left;
            }
          }
          else
          {
            v22 = 0LL;
          }
          v23 = *(_QWORD **)(v10 + 8);
          if ( v23 )
          {
            *v23 = *(_QWORD *)v10;
            v24 = *(_QWORD *)v10;
          }
          else
          {
            v24 = *(_QWORD *)v10;
            cache_head = *(_QWORD *)v10;
          }
          if ( v24 )
            *(_QWORD *)(v24 + 8) = v23;
          else
            cache_tail = (__int64)v23;
          *(_WORD *)(v10 + 52) = v7;
          if ( v22 )
          {
            v7 |= 0x200u;
            *(_QWORD *)(v10 + 56) = v22;
            *(_WORD *)(v10 + 52) = v7;
          }
          if ( a1 )
          {
            if ( (v7 & 0x200) != 0 || (v25 = (char *)(v10 + 56), (v7 & 2) != 0) )
              v25 = *(char **)(v10 + 56);
            strcpy(v25, a1);
          }
          else
          {
            if ( (v7 & 0x200) != 0 || (v27 = (_BYTE *)(v10 + 56), (v7 & 2) != 0) )
              v27 = *(_BYTE **)(v10 + 56);
            *v27 = 0;
          }
          if ( cp )
          {
            v26 = *((_QWORD *)cp + 1);
            *(_QWORD *)(v10 + 24) = *(_QWORD *)cp;
            *(_QWORD *)(v10 + 32) = v26;
          }
          *(_QWORD *)(v10 + 40) = a4 + time1;
          *(_QWORD *)v10 = new_chain;
          new_chain = v10;
          return v10;
        }
        if ( v11 )
        {
          if ( !warned_9927 )
          {
            my_syslog(3LL, "Internal error in cache.");
            warned_9927 = 1;
          }
          break;
        }
        if ( v18 )
        {
          v20 = *(_QWORD *)(cache_tail + 32);
          v29[0] = *(_QWORD *)(cache_tail + 24);
          v29[1] = v20;
          if ( (v19 & 0x200) != 0 || (LODWORD(v21) = cache_tail + 56, (v19 & 2) != 0) )
            v21 = *(_QWORD *)(cache_tail + 56);
          v28 = v18;
          v11 = 1;
          cache_scan_free(v21, (int)v29, time1);
          v18 = v28;
          ++cache_live_freed;
        }
        else
        {
          v11 = 0;
          cache_scan_free(0, 0, time1);
          v18 = 1;
        }
      }
    }
    v10 = 0LL;
    insert_error = 1;
  }
  return v10;
}
