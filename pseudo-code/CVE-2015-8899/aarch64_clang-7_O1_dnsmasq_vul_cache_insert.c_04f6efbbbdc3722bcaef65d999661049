__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned int a5)
{
  __int16 v10; // w27
  unsigned __int64 v11; // x9
  bool v12; // zf
  __int64 v13; // x20
  __int64 v14; // x0
  int v15; // w8
  int v16; // w19
  unsigned int v17; // w25
  __int64 v18; // x0
  __int64 v19; // x25
  _OWORD *v20; // x19
  char *v21; // x0
  __int64 v23; // x0
  _OWORD *v24; // [xsp+8h] [xbp-68h]
  __int128 v25; // [xsp+10h] [xbp-60h] BYREF

  v10 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000u, a1, a2, 0LL);
    v11 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v11 < a4 )
      v12 = v11 == 0;
    else
      v12 = 1;
    if ( v12 )
      v11 = a4;
    if ( *(_QWORD *)(dnsmasq_daemon + 448) <= v11 )
      a4 = v11;
    else
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  if ( (insert_error & 1) != 0 )
    return 0LL;
  v14 = cache_scan_free(a1, a2, a3, a5);
  if ( v14 )
  {
    if ( (v10 & 0x180) == 0
      || (v10 & 8) == 0
      || ((v13 = v14, (v10 & 0x80) == 0) || (*(_BYTE *)(v14 + 52) & 0x80) == 0 || *(_DWORD *)(v14 + 24) != *a2)
      && ((v10 & 0x100) == 0
       || (*(_BYTE *)(v14 + 53) & 1) == 0
       || *(_DWORD *)(v14 + 24) != *a2
       || *(_DWORD *)(v14 + 28) != a2[1]
       || *(_DWORD *)(v14 + 32) != a2[2]
       || *(_DWORD *)(v14 + 36) != a2[3]) )
    {
      v13 = 0LL;
      insert_error = 1;
    }
    return v13;
  }
  v13 = cache_tail;
  v24 = a2;
  if ( !cache_tail )
    goto LABEL_42;
  v15 = 0;
  v16 = a5 & 4;
  while ( 1 )
  {
    v17 = *(unsigned __int16 *)(v13 + 52);
    if ( (v17 & 0xC) == 0 )
    {
      if ( a1 && strlen(a1) >= 0x32 )
      {
        v19 = big_free;
        if ( big_free )
        {
          big_free = *(_QWORD *)big_free;
        }
        else
        {
          if ( !(bignames_left | v10 & 0x5000) )
            goto LABEL_42;
          v23 = whine_malloc(1032LL);
          if ( !v23 )
            goto LABEL_42;
          v19 = v23;
          if ( bignames_left )
            --bignames_left;
        }
        cache_unlink(v13);
        v20 = v24;
        *(_QWORD *)(v13 + 56) = v19;
        *(_WORD *)(v13 + 52) = a5 | 0x200;
        v21 = (char *)cache_get_name(v13);
      }
      else
      {
        cache_unlink(v13);
        *(_WORD *)(v13 + 52) = a5;
        v21 = (char *)cache_get_name(v13);
        if ( !a1 )
        {
          v20 = v24;
          *v21 = 0;
          if ( !v24 )
            goto LABEL_48;
          goto LABEL_47;
        }
        v20 = v24;
      }
      strcpy(v21, a1);
      if ( !v20 )
      {
LABEL_48:
        *(_QWORD *)(v13 + 40) = a4 + a3;
        *(_QWORD *)v13 = new_chain;
        new_chain = v13;
        return v13;
      }
LABEL_47:
      *(_OWORD *)(v13 + 24) = *v20;
      goto LABEL_48;
    }
    if ( v15 )
      break;
    if ( v16 )
    {
      v25 = *(_OWORD *)(v13 + 24);
      v18 = cache_get_name(v13);
      cache_scan_free(v18, &v25, a3, v17);
      ++cache_live_freed;
      v15 = 1;
      v13 = cache_tail;
      if ( !cache_tail )
        goto LABEL_42;
    }
    else
    {
      cache_scan_free(0LL, 0LL, a3, 0LL);
      v15 = 0;
      v16 = 1;
      v13 = cache_tail;
      if ( !cache_tail )
        goto LABEL_42;
    }
  }
  if ( (cache_insert_warned & 1) == 0 )
  {
    my_syslog(3LL, "Internal error in cache.");
    cache_insert_warned = 1;
  }
LABEL_42:
  v13 = 0LL;
  insert_error = 1;
  return v13;
}
