int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v9; // r2
  unsigned int v10; // r3
  int v11; // r4
  int v12; // r9
  int v13; // r1
  int v14; // r2
  int v15; // r3
  int v16; // r0
  int v17; // r9
  char *v18; // r0
  int v19; // r1
  int v20; // r2
  int v21; // r3
  int v22; // r2
  int v24; // [sp+8h] [bp-50h]
  int v25; // [sp+Ch] [bp-4Ch]
  _DWORD v26[4]; // [sp+1Ch] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v9 && a4 >= v9 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    v10 = *(_DWORD *)(dnsmasq_daemon + 248);
    if ( v10 && a4 < v10 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  v24 = insert_error;
  if ( insert_error )
    goto LABEL_28;
  v11 = cache_scan_free(a1, a2, a3, a5);
  if ( !v11 )
  {
    v12 = a5 & 4;
    while ( 1 )
    {
      v11 = cache_tail;
      if ( !cache_tail )
        goto LABEL_27;
      v25 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v25 & 0xC) == 0 )
      {
        if ( a1 )
        {
          if ( strlen(a1) <= 0x31 )
          {
            v17 = 0;
          }
          else
          {
            v17 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_27;
              v17 = whine_malloc(1028);
              if ( !v17 )
                goto LABEL_27;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        else
        {
          v17 = 0;
        }
        cache_unlink(v11);
        *(_WORD *)(v11 + 36) = a5;
        if ( v17 )
        {
          *(_DWORD *)(v11 + 40) = v17;
          *(_WORD *)(v11 + 36) = a5 | 0x200;
        }
        if ( a1 )
        {
          v18 = (char *)cache_get_name(v11);
          strcpy(v18, a1);
        }
        else
        {
          *(_BYTE *)cache_get_name(v11) = 0;
        }
        if ( a2 )
        {
          v19 = a2[1];
          v20 = a2[2];
          v21 = a2[3];
          *(_DWORD *)(v11 + 12) = *a2;
          *(_DWORD *)(v11 + 16) = v19;
          *(_DWORD *)(v11 + 20) = v20;
          *(_DWORD *)(v11 + 24) = v21;
        }
        *(_DWORD *)(v11 + 28) = a4 + a3;
        v22 = new_chain;
        new_chain = v11;
        *(_DWORD *)v11 = v22;
        return v11;
      }
      if ( v24 )
      {
        if ( !warned_12112 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_12112 = 1;
        }
        goto LABEL_27;
      }
      if ( v12 )
      {
        v13 = *(_DWORD *)(cache_tail + 16);
        v14 = *(_DWORD *)(cache_tail + 20);
        v15 = *(_DWORD *)(cache_tail + 24);
        v26[0] = *(_DWORD *)(cache_tail + 12);
        v26[1] = v13;
        v26[2] = v14;
        v26[3] = v15;
        v16 = cache_get_name(cache_tail);
        cache_scan_free(v16, v26, a3, v25);
        ++cache_live_freed;
        v24 = 1;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v24 = 0;
        v12 = 1;
      }
    }
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 36) & 0x80) == 0 || *(_DWORD *)(v11 + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v11 + 36) & 0x100) == 0
     || *(_DWORD *)(v11 + 12) != *a2
     || *(_DWORD *)(v11 + 16) != a2[1]
     || *(_DWORD *)(v11 + 20) != a2[2]
     || *(_DWORD *)(v11 + 24) != a2[3]) )
  {
LABEL_27:
    insert_error = 1;
LABEL_28:
    v11 = 0;
  }
  return v11;
}
