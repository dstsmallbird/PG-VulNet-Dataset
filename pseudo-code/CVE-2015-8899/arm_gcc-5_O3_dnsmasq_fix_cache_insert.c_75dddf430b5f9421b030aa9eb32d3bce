int __fastcall cache_insert(int a1, void *cp, time_t time1, int a4, __int16 a5)
{
  __int16 v5; // r6
  int result; // r0
  int v11; // r4
  __int16 v12; // r3
  int v13; // r1
  int v14; // r2
  int v15; // r3
  int v16; // r0
  __int16 v17; // lr
  unsigned int v18; // r3
  bool v19; // cc
  bool v20; // cf
  int v21; // r0
  int v22; // r4
  int v23; // r1
  int *v24; // r2
  char *v25; // r0
  int v26; // r1
  int v27; // r2
  int v28; // r3
  int v29; // r3
  _BYTE *v30; // r3
  int v31; // [sp+4h] [bp-44h]
  _DWORD v32[4]; // [sp+Ch] [bp-3Ch] BYREF

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v18 = *(_DWORD *)(dnsmasq_daemon + 252);
    v19 = v18 != 0;
    if ( v18 )
      v19 = a4 > v18;
    if ( !v19 )
      v18 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v20 = 1;
    if ( a4 )
      v20 = v18 >= a4;
    if ( v20 )
      a4 = v18;
  }
  if ( insert_error )
    return 0;
  result = cache_scan_free(a1, (int)cp, time1);
  if ( !result )
  {
    v31 = a5 & 4;
    v11 = 0;
    while ( cache_tail )
    {
      v17 = *(_WORD *)(cache_tail + 36);
      if ( (v17 & 0xC) == 0 )
      {
        v21 = a1;
        v22 = cache_tail;
        if ( a1 )
        {
          if ( strlen((const char *)a1) <= 0x31 )
          {
            v21 = 0;
          }
          else
          {
            v21 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_16;
              v21 = whine_malloc(1028);
              if ( !v21 )
                goto LABEL_16;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        v23 = *(_DWORD *)v22;
        v24 = *(int **)(v22 + 4);
        if ( v24 )
        {
          *v24 = v23;
          v23 = *(_DWORD *)v22;
        }
        else
        {
          cache_head = *(_DWORD *)v22;
        }
        if ( v23 )
          *(_DWORD *)(v23 + 4) = v24;
        else
          cache_tail = (int)v24;
        *(_WORD *)(v22 + 36) = a5;
        if ( v21 )
        {
          v5 = a5 | 0x200;
          *(_WORD *)(v22 + 36) = a5 | 0x200;
          *(_DWORD *)(v22 + 40) = v21;
        }
        if ( a1 )
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
            v25 = *(char **)(v22 + 40);
          else
            v25 = (char *)(v22 + 40);
          strcpy(v25, (const char *)a1);
        }
        else
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
            v30 = *(_BYTE **)(v22 + 40);
          else
            v30 = (_BYTE *)(v22 + 40);
          *v30 = 0;
        }
        if ( cp )
        {
          v26 = *((_DWORD *)cp + 1);
          v27 = *((_DWORD *)cp + 2);
          v28 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v22 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v22 + 16) = v26;
          *(_DWORD *)(v22 + 20) = v27;
          *(_DWORD *)(v22 + 24) = v28;
        }
        v29 = new_chain;
        *(_DWORD *)(v22 + 28) = a4 + time1;
        *(_DWORD *)v22 = v29;
        new_chain = v22;
        return v22;
      }
      if ( v11 )
      {
        if ( !warned_11052 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_11052 = 1;
        }
        goto LABEL_16;
      }
      if ( v31 )
      {
        v13 = *(_DWORD *)(cache_tail + 16);
        v14 = *(_DWORD *)(cache_tail + 20);
        v15 = *(_DWORD *)(cache_tail + 24);
        v32[0] = *(_DWORD *)(cache_tail + 12);
        v32[1] = v13;
        v32[2] = v14;
        v32[3] = v15;
        if ( (v17 & 0x200) != 0 || (v17 & 2) != 0 )
          v16 = *(_DWORD *)(cache_tail + 40);
        else
          v16 = cache_tail + 40;
        v11 = 1;
        cache_scan_free(v16, (int)v32, time1);
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, time1);
        v31 = 1;
      }
    }
    goto LABEL_16;
  }
  if ( (a5 & 0x180) == 0 )
    goto LABEL_16;
  v12 = (__int16)cp;
  if ( cp )
    v12 = 1;
  if ( (*(_DWORD *)&v12 & ((unsigned __int16)a5 >> 3)) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(result + 36) & 0x80) == 0 || *(_DWORD *)(result + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(result + 36) & 0x100) == 0
     || *(_DWORD *)(result + 12) != *(_DWORD *)cp
     || *(_DWORD *)(result + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(result + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(result + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_16:
    result = 0;
    insert_error = 1;
  }
  return result;
}
