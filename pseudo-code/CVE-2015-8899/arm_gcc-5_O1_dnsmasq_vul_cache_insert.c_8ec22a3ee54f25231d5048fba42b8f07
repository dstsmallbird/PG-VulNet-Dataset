int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v7; // r3
  bool v8; // cc
  unsigned int v10; // r3
  bool v11; // cf
  int result; // r0
  int v14; // r11
  int v15; // r10
  int v16; // r4
  int v17; // r8
  int v18; // r1
  int v19; // r2
  int v20; // r3
  int v21; // r0
  int v22; // r8
  char *v23; // r0
  int v24; // r1
  int v25; // r2
  int v26; // r3
  _DWORD v29[4]; // [sp+Ch] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    v8 = v7 != 0;
    if ( v7 )
      v8 = a4 > v7;
    if ( v8 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    v10 = *(_DWORD *)(dnsmasq_daemon + 248);
    v11 = 1;
    if ( v10 )
      v11 = a4 >= v10;
    if ( !v11 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  if ( insert_error )
    return 0;
  result = cache_scan_free(a1, a2, a3, a5);
  if ( !result )
  {
    v14 = a5 & 4;
    v15 = 0;
    while ( 1 )
    {
      v16 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0;
      }
      v17 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v17 & 0xC) == 0 )
        break;
      if ( v15 )
      {
        if ( !warned_11052 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_11052 = 1;
        }
        insert_error = 1;
        return 0;
      }
      if ( v14 )
      {
        v18 = *(_DWORD *)(cache_tail + 16);
        v19 = *(_DWORD *)(cache_tail + 20);
        v20 = *(_DWORD *)(cache_tail + 24);
        v29[0] = *(_DWORD *)(cache_tail + 12);
        v29[1] = v18;
        v29[2] = v19;
        v29[3] = v20;
        v21 = cache_get_name(cache_tail);
        cache_scan_free(v21, v29, a3, v17);
        ++cache_live_freed;
        v15 = 1;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v14 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      v22 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v22 = whine_malloc(1028)) == 0 )
        {
          insert_error = 1;
          return 0;
        }
        if ( bignames_left )
          --bignames_left;
      }
      cache_unlink(v16);
      *(_DWORD *)(v16 + 40) = v22;
      *(_WORD *)(v16 + 36) = a5 | 0x200;
    }
    else
    {
      cache_unlink(v16);
      *(_WORD *)(v16 + 36) = a5;
      if ( !a1 )
      {
        *(_BYTE *)cache_get_name(v16) = 0;
        goto LABEL_55;
      }
    }
    v23 = (char *)cache_get_name(v16);
    strcpy(v23, a1);
LABEL_55:
    if ( a2 )
    {
      v24 = a2[1];
      v25 = a2[2];
      v26 = a2[3];
      *(_DWORD *)(v16 + 12) = *a2;
      *(_DWORD *)(v16 + 16) = v24;
      *(_DWORD *)(v16 + 20) = v25;
      *(_DWORD *)(v16 + 24) = v26;
    }
    *(_DWORD *)(v16 + 28) = a4 + a3;
    *(_DWORD *)v16 = new_chain;
    new_chain = v16;
    return v16;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(result + 36) & 0x80) == 0 || *(_DWORD *)(result + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(result + 36) & 0x100) == 0
     || *(_DWORD *)(result + 12) != *a2
     || *(_DWORD *)(result + 16) != a2[1]
     || *(_DWORD *)(result + 20) != a2[2]
     || *(_DWORD *)(result + 24) != a2[3]) )
  {
    insert_error = 1;
    result = 0;
  }
  return result;
}
