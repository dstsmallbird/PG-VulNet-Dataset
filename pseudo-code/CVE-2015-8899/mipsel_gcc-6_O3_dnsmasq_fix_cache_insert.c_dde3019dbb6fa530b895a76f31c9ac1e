int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  __int16 v6; // $s1
  int v10; // $s7
  int v11; // $s0
  unsigned int v13; // $a0
  unsigned int v14; // $v0
  int *v15; // $t2
  int v16; // $v1
  int v17; // $a3
  int v18; // $a2
  int v19; // $a1
  int v20; // $a0
  int v21; // $a0
  int v22; // $v0
  int *v23; // $a0
  int v24; // $a1
  int v25; // $v0
  int v26; // $s1
  char *v27; // $a0
  int v28; // $a1
  int v29; // $a0
  int v30; // $v0
  int v31; // $v1
  int v32; // $s1
  int v33; // [sp+18h] [-28h]
  int *v34; // [sp+1Ch] [-24h]
  int *v35; // [sp+1Ch] [-24h]
  int v36; // [sp+20h] [-20h]
  int v37; // [sp+20h] [-20h]
  int v38[4]; // [sp+2Ch] [-14h] BYREF

  v6 = a5;
  if ( (a5 & 0x980) == 0 )
    goto LABEL_2;
  log_query(a5 | 0x10000, a1, a2, 0);
  v13 = *(_DWORD *)(fbss + 252);
  if ( v13 && v13 < a4 )
    a4 = *(_DWORD *)(fbss + 252);
  v14 = *(_DWORD *)(fbss + 248);
  if ( v14 )
  {
    v10 = insert_error;
    if ( a4 < v14 )
      a4 = *(_DWORD *)(fbss + 248);
    if ( insert_error )
      return 0;
  }
  else
  {
LABEL_2:
    v10 = insert_error;
    if ( insert_error )
      return 0;
  }
  v11 = cache_scan_free(a1, a2, a3, a5);
  if ( v11 )
  {
    if ( (a5 & 0x180) != 0
      && (a5 & 8) != 0
      && a2
      && ((a5 & 0x80) != 0 && (*(_WORD *)(v11 + 36) & 0x80) != 0 && *(_DWORD *)(v11 + 12) == *a2
       || (a5 & 0x100) != 0
       && (*(_WORD *)(v11 + 36) & 0x100) != 0
       && *(_DWORD *)(v11 + 12) == *a2
       && *(_DWORD *)(v11 + 16) == a2[1]
       && *(_DWORD *)(v11 + 20) == a2[2]
       && *(_DWORD *)(v11 + 24) == a2[3]) )
    {
      return v11;
    }
LABEL_13:
    v11 = 0;
    insert_error = 1;
    return v11;
  }
  v33 = a5 & 4;
  v15 = v38;
  v16 = 4653056;
LABEL_24:
  v11 = cache_tail;
  if ( !cache_tail )
    goto LABEL_13;
  while ( 1 )
  {
    v17 = *(unsigned __int16 *)(v11 + 36);
    if ( (v17 & 0xC) == 0 )
      break;
    if ( v10 )
    {
      if ( !warned_8212 )
      {
        my_syslog(3, "Internal error in cache.");
        warned_8212 = 1;
      }
      goto LABEL_13;
    }
    if ( !v33 )
    {
      v37 = v16;
      v35 = v15;
      cache_scan_free(0, 0, a3, 0);
      v10 = 0;
      v15 = v35;
      v16 = v37;
      v33 = 1;
      goto LABEL_24;
    }
    v18 = *(_DWORD *)(v11 + 16);
    v19 = *(_DWORD *)(v11 + 20);
    v20 = *(_DWORD *)(v11 + 24);
    v38[0] = *(_DWORD *)(v11 + 12);
    v38[1] = v18;
    v38[2] = v19;
    v38[3] = v20;
    if ( (v17 & 0x200) != 0 || (v17 & 2) != 0 )
      v21 = *(_DWORD *)(v11 + 40);
    else
      v21 = v11 + 40;
    v36 = v16;
    v34 = v15;
    cache_scan_free(v21, v15, a3, v17);
    v16 = v36;
    v15 = v34;
    ++*(_DWORD *)(v36 - 19572);
    v11 = cache_tail;
    v10 = 1;
    if ( !cache_tail )
      goto LABEL_13;
  }
  if ( a1 && strlen(a1) >= 0x32 )
  {
    v22 = big_free;
    if ( big_free )
    {
      big_free = *(_DWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (a5 & 0x5000) == 0 )
        goto LABEL_13;
      v22 = whine_malloc(1028);
      if ( !v22 )
        goto LABEL_13;
      if ( bignames_left )
        --bignames_left;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = *(int **)(v11 + 4);
  v24 = *(_DWORD *)v11;
  if ( v23 )
  {
    *v23 = v24;
    v24 = *(_DWORD *)v11;
  }
  else
  {
    cache_head = *(_DWORD *)v11;
  }
  if ( v24 )
    *(_DWORD *)(v24 + 4) = v23;
  else
    cache_tail = (int)v23;
  *(_WORD *)(v11 + 36) = a5;
  if ( v22 )
  {
    v6 = a5 | 0x200;
    *(_DWORD *)(v11 + 40) = v22;
    *(_WORD *)(v11 + 36) = a5 | 0x200;
  }
  v25 = v6 & 0x200;
  if ( a1 )
  {
    v26 = v6 & 2;
    if ( v25 || v26 )
      v27 = *(char **)(v11 + 40);
    else
      v27 = (char *)(v11 + 40);
    strcpy(v27, a1);
  }
  else
  {
    v32 = v6 & 2;
    if ( v25 || v32 )
      **(_BYTE **)(v11 + 40) = 0;
    else
      *(_BYTE *)(v11 + 40) = 0;
  }
  if ( a2 )
  {
    v28 = a2[1];
    v29 = a2[2];
    v30 = a2[3];
    *(_DWORD *)(v11 + 12) = *a2;
    *(_DWORD *)(v11 + 16) = v28;
    *(_DWORD *)(v11 + 20) = v29;
    *(_DWORD *)(v11 + 24) = v30;
  }
  v31 = new_chain;
  *(_DWORD *)(v11 + 28) = a4 + a3;
  new_chain = v11;
  *(_DWORD *)v11 = v31;
  return v11;
}
