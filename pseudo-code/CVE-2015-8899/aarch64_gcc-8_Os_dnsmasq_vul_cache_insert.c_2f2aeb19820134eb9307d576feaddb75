__int64 __fastcall cache_insert(const char *a1, void *cp, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v7; // w21
  unsigned __int64 v10; // x0
  unsigned __int64 v11; // x0
  __int64 v12; // x0
  __int64 v13; // x19
  int v14; // w5
  int v15; // w25
  __int64 v16; // x20
  __int64 v17; // x1
  __int64 v18; // x0
  __int64 v19; // x3
  char *v20; // x0
  __int64 v21; // x1
  int v23; // [xsp+68h] [xbp+68h]
  __int64 v24[2]; // [xsp+78h] [xbp+78h] BYREF

  v7 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, cp);
    v10 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v10 && a4 > v10 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    v11 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( v11 && a4 < v11 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  v23 = insert_error;
  if ( insert_error )
    goto LABEL_28;
  v12 = cache_scan_free(a1, cp, a3, v7);
  v13 = v12;
  v14 = v23;
  if ( !v12 )
  {
    v15 = v7 & 4;
    while ( 1 )
    {
      v16 = cache_tail;
      if ( !cache_tail )
        goto LABEL_27;
      if ( (*(_WORD *)(cache_tail + 52) & 0xC) == 0 )
      {
        if ( a1 )
        {
          if ( strlen(a1) > 0x31 )
          {
            v13 = big_free;
            if ( big_free )
            {
              big_free = *(_QWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (v7 & 0x5000) == 0 )
                goto LABEL_27;
              v13 = whine_malloc(1032LL);
              if ( !v13 )
                goto LABEL_27;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        else
        {
          v13 = 0LL;
        }
        cache_unlink(v16);
        *(_WORD *)(v16 + 52) = v7;
        if ( v13 )
        {
          *(_WORD *)(v16 + 52) = v7 | 0x200;
          *(_QWORD *)(v16 + 56) = v13;
        }
        v20 = (char *)cache_get_name(v16);
        if ( a1 )
          strcpy(v20, a1);
        else
          *v20 = 0;
        if ( cp )
        {
          v21 = *((_QWORD *)cp + 1);
          *(_QWORD *)(v16 + 24) = *(_QWORD *)cp;
          *(_QWORD *)(v16 + 32) = v21;
        }
        v13 = v16;
        *(_QWORD *)(v16 + 40) = a4 + a3;
        *(_QWORD *)v16 = new_chain;
        new_chain = v16;
        return v13;
      }
      if ( v14 )
      {
        if ( !warned_10067 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_10067 = 1;
        }
        goto LABEL_27;
      }
      if ( v15 )
      {
        v17 = *(_QWORD *)(cache_tail + 32);
        v24[0] = *(_QWORD *)(cache_tail + 24);
        v24[1] = v17;
        v18 = cache_get_name(cache_tail);
        cache_scan_free(v18, v24, a3, v19);
        v14 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v14 = 0;
        v15 = 1;
      }
    }
  }
  if ( (v7 & 0x180) == 0
    || (v7 & 8) == 0
    || ((v7 & 0x80) == 0 || (*(_WORD *)(v12 + 52) & 0x80) == 0 || *(_DWORD *)(v12 + 24) != *(_DWORD *)cp)
    && ((v7 & 0x100) == 0
     || (*(_WORD *)(v12 + 52) & 0x100) == 0
     || *(_DWORD *)(v12 + 24) != *(_DWORD *)cp
     || *(_DWORD *)(v12 + 28) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v12 + 32) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v12 + 36) != *((_DWORD *)cp + 3)) )
  {
LABEL_27:
    insert_error = 1;
LABEL_28:
    v13 = 0LL;
  }
  return v13;
}
