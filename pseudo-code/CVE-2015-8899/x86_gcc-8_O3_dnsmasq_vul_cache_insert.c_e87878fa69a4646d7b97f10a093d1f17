int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v5; // ebp
  int v6; // esi
  int v7; // eax
  int v9; // edx
  unsigned __int16 v10; // cx
  unsigned int v11; // eax
  unsigned int v12; // ecx
  size_t v13; // eax
  int *v14; // ecx
  int v15; // eax
  char *v16; // eax
  int v17; // eax
  __int16 v18; // ax
  _BYTE *v19; // eax
  char v20; // [esp-8h] [ebp-54h]
  int v21; // [esp+8h] [ebp-44h]
  int v22; // [esp+8h] [ebp-44h]
  int v23; // [esp+8h] [ebp-44h]

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, a2, 0);
    v11 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v11 >= a4 || !v11 )
      v11 = a4;
    v12 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v12;
    if ( !v12 || v12 <= v11 )
      a4 = v11;
  }
  v5 = insert_error;
  v6 = 0;
  if ( insert_error )
    return v6;
  v7 = cache_scan_free(a5);
  v6 = v7;
  if ( !v7 )
  {
    v21 = a5 & 4;
    while ( 1 )
    {
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_22;
      v10 = *(_WORD *)(cache_tail + 36);
      if ( (v10 & 0xC) == 0 )
        break;
      if ( v5 )
      {
        if ( !warned_8446 )
        {
          my_syslog(3, "Internal error in cache.", v20);
          warned_8446 = 1;
        }
        goto LABEL_22;
      }
      if ( v21 )
      {
        v5 = 1;
        cache_scan_free(v10);
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0);
        v5 = 0;
        v21 = 1;
      }
    }
    if ( a1 )
    {
      v22 = cache_tail;
      v13 = strlen(a1);
      v9 = v22;
      if ( v13 > 0x31 )
      {
        v6 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_22;
          v6 = whine_malloc(0x404u);
          if ( !v6 )
            goto LABEL_22;
          v9 = v22;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v14 = *(int **)(v9 + 4);
    v15 = *(_DWORD *)v9;
    if ( v14 )
    {
      *v14 = v15;
      v15 = *(_DWORD *)v9;
    }
    else
    {
      cache_head = *(_DWORD *)v9;
    }
    if ( v15 )
      *(_DWORD *)(v15 + 4) = v14;
    else
      cache_tail = (int)v14;
    *(_WORD *)(v9 + 36) = a5;
    if ( v6 )
    {
      *(_DWORD *)(v9 + 40) = v6;
      *(_WORD *)(v9 + 36) = a5 | 0x200;
      if ( a1 )
      {
LABEL_43:
        v16 = *(char **)(v9 + 40);
LABEL_44:
        v23 = v9;
        strcpy(v16, a1);
        v9 = v23;
LABEL_45:
        if ( a2 )
        {
          *(_DWORD *)(v9 + 12) = *a2;
          *(_DWORD *)(v9 + 16) = a2[1];
          *(_DWORD *)(v9 + 20) = a2[2];
          *(_DWORD *)(v9 + 24) = a2[3];
        }
        v6 = v9;
        *(_DWORD *)(v9 + 28) = a3 + a4;
        v17 = new_chain;
        new_chain = v9;
        *(_DWORD *)v9 = v17;
        return v6;
      }
    }
    else
    {
      v18 = a5 & 0x200;
      if ( a1 )
      {
        if ( !v18 )
        {
          v16 = (char *)(v9 + 40);
          if ( (a5 & 2) == 0 )
            goto LABEL_44;
        }
        goto LABEL_43;
      }
      if ( !v18 )
      {
        v19 = (_BYTE *)(v9 + 40);
        if ( (a5 & 2) == 0 )
        {
LABEL_57:
          *v19 = 0;
          goto LABEL_45;
        }
      }
    }
    v19 = *(_BYTE **)(v9 + 40);
    goto LABEL_57;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || *(char *)(v7 + 36) >= 0 || *(_DWORD *)(v7 + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_BYTE *)(v7 + 37) & 1) == 0
     || *(_DWORD *)(v7 + 12) != *a2
     || *(_DWORD *)(v7 + 16) != a2[1]
     || *(_DWORD *)(v7 + 20) != a2[2]
     || *(_DWORD *)(v7 + 24) != a2[3]) )
  {
LABEL_22:
    insert_error = 1;
    v6 = 0;
  }
  return v6;
}
