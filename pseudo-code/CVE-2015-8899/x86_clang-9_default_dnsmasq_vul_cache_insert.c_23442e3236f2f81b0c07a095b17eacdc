int __cdecl cache_insert(char *s, int cp, time_t time1, int a4, __int16 a5)
{
  __int16 v5; // cx
  __int16 v6; // bx
  unsigned int v7; // eax
  unsigned int v8; // edx
  int v9; // edi
  int v10; // eax
  __int16 v11; // ax
  int v12; // ebx
  int v13; // ebp
  __int16 v14; // ax
  int v15; // ebp
  int v16; // ecx
  int *v17; // eax
  bool v19; // zf
  int *v20; // ecx
  __int16 v21; // ax
  char v22; // cl
  char *v23; // eax
  int *v24; // ebx
  char *v25; // ecx
  int v26; // eax
  int v27; // eax
  __int16 v28; // [esp+0h] [ebp-2Ch]
  int v29; // [esp+4h] [ebp-28h]

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    v6 = a5;
    log_query((unsigned __int16)a5 + 0x10000, (int)s, (void *)cp, 0);
    v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    v8 = a4;
    if ( v7 < a4 )
      v8 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v7 )
      v8 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v8 )
      v8 = *(_DWORD *)(dnsmasq_daemon + 248);
    v5 = a5;
    v29 = v8;
  }
  else
  {
    v29 = a4;
    v6 = a5;
  }
  v9 = 0;
  if ( !insert_error )
  {
    v10 = cache_scan_free(time1, v5);
    if ( v10 )
    {
      if ( (v6 & 0x180) != 0 )
      {
        v9 = v10;
        if ( (v6 & 8) != 0 )
        {
          v11 = v6;
          if ( (a5 & 0x80u) != 0 && *(char *)(v9 + 36) < 0 )
          {
            v11 = v6;
            if ( *(_DWORD *)(v9 + 12) == *(_DWORD *)cp )
              return v9;
          }
          if ( (v11 & 0x100) != 0
            && (*(_BYTE *)(v9 + 37) & 1) != 0
            && *(_DWORD *)(v9 + 12) == *(_DWORD *)cp
            && *(_DWORD *)(v9 + 16) == *(_DWORD *)(cp + 4)
            && *(_DWORD *)(v9 + 20) == *(_DWORD *)(cp + 8)
            && *(_DWORD *)(v9 + 24) == *(_DWORD *)(cp + 12) )
          {
            return v9;
          }
        }
      }
LABEL_40:
      insert_error = 1;
      return 0;
    }
    v9 = cache_tail;
    if ( !cache_tail )
      goto LABEL_40;
    v28 = v6;
    v12 = v6 & 4;
    v13 = 0;
    while ( 1 )
    {
      v14 = *(_WORD *)(v9 + 36);
      if ( (v14 & 0xC) == 0 )
        break;
      if ( v13 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        goto LABEL_40;
      }
      if ( v12 )
      {
        cache_scan_free(time1, v14);
        ++cache_live_freed;
        v13 = 1;
      }
      else
      {
        v13 = 0;
        cache_scan_free(time1, 0);
        v12 = 1;
      }
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_40;
    }
    v15 = 0;
    if ( s && strlen(s) >= 0x32 )
    {
      v15 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !(bignames_left | v28 & 0x5000) )
          goto LABEL_40;
        v27 = whine_malloc(0x404u);
        if ( !v27 )
          goto LABEL_40;
        v15 = v27;
        if ( bignames_left )
          --bignames_left;
      }
    }
    v16 = *(_DWORD *)v9;
    v17 = *(int **)(v9 + 4);
    if ( v17 )
    {
      *v17 = v16;
      v16 = *(_DWORD *)v9;
    }
    else
    {
      cache_head = *(_DWORD *)v9;
    }
    v19 = v16 == 0;
    v20 = (int *)(v16 + 4);
    if ( v19 )
      v20 = &cache_tail;
    *v20 = (int)v17;
    *(_WORD *)(v9 + 36) = a5;
    v21 = v28;
    if ( v15 )
    {
      *(_DWORD *)(v9 + 40) = v15;
      *(_WORD *)(v9 + 36) = a5 | 0x200;
      v21 = a5 | 0x200;
    }
    if ( (v21 & 0x200) != 0 )
    {
      v23 = *(char **)(v9 + 40);
      v24 = (int *)cp;
      v25 = s;
    }
    else
    {
      v22 = v21;
      v23 = (char *)(v9 + 40);
      v19 = (v22 & 2) == 0;
      v24 = (int *)cp;
      v25 = s;
      if ( !v19 )
      {
        v23 = *(char **)v23;
        if ( !s )
          goto LABEL_54;
        goto LABEL_53;
      }
    }
    if ( !v25 )
    {
LABEL_54:
      *v23 = 0;
      goto LABEL_55;
    }
LABEL_53:
    strcpy(v23, v25);
LABEL_55:
    if ( v24 )
    {
      *(_DWORD *)(v9 + 24) = v24[3];
      *(_DWORD *)(v9 + 20) = v24[2];
      v26 = *v24;
      *(_DWORD *)(v9 + 16) = v24[1];
      *(_DWORD *)(v9 + 12) = v26;
    }
    *(_DWORD *)(v9 + 28) = time1 + v29;
    *(_DWORD *)v9 = new_chain;
    new_chain = v9;
  }
  return v9;
}
