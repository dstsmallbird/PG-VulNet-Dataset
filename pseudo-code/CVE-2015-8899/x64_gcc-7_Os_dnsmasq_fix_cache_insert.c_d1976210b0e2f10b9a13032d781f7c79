__int64 __fastcall cache_insert(char *src, __int128 *a2, __int64 a3, unsigned __int64 a4, int a5)
{
  unsigned int v5; // er14
  int v6; // ebx
  __int128 *v7; // rbp
  unsigned __int64 v9; // rax
  __int64 v10; // r15
  __int64 v11; // rax
  __int64 v12; // rdx
  int v13; // er9
  __int64 v14; // r8
  int v15; // er14
  int v16; // ecx
  __int64 v17; // rax
  __int64 v18; // rcx
  __int64 v19; // rcx
  __int64 v20; // rcx
  char *v21; // rax
  __int64 v22; // rax
  unsigned int v25; // [rsp+8h] [rbp-60h]
  __int128 v26; // [rsp+10h] [rbp-58h] BYREF
  unsigned __int64 v27; // [rsp+28h] [rbp-40h]

  v5 = (unsigned __int16)a5;
  v6 = a5;
  v7 = a2;
  v27 = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000u, src, a2, 0LL);
    v9 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v9 >= a4 || !v9 )
      v9 = a4;
    a4 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( !a4 || a4 <= v9 )
      a4 = v9;
  }
  v10 = 0LL;
  v25 = insert_error;
  if ( !insert_error )
  {
    v11 = cache_scan_free(src, a2, a3, v5);
    v10 = v11;
    v14 = v25;
    if ( !v11 )
    {
      v15 = v6 & 4;
      while ( 1 )
      {
        v10 = cache_tail;
        if ( !cache_tail )
          goto LABEL_23;
        v16 = *(unsigned __int16 *)(cache_tail + 52);
        if ( (v16 & 0xC) == 0 )
        {
          if ( src && strlen(src) > 0x31 )
          {
            v19 = big_free;
            if ( big_free )
            {
              big_free = *(_QWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (v6 & 0x5000) == 0 )
                goto LABEL_23;
              v19 = whine_malloc(1032LL, a2, v12, big_free, v14);
              if ( !v19 )
                goto LABEL_23;
              if ( bignames_left )
                --bignames_left;
            }
          }
          else
          {
            v19 = 0LL;
          }
          cache_unlink(v10, a2, v12, v19, v14);
          *(_WORD *)(v10 + 52) = v6;
          if ( v20 )
          {
            BYTE1(v6) |= 2u;
            *(_QWORD *)(v10 + 56) = v20;
            *(_WORD *)(v10 + 52) = v6;
          }
          v21 = (char *)cache_get_name(v10);
          if ( src )
            strcpy(v21, src);
          else
            *v21 = 0;
          if ( v7 )
            *(_OWORD *)(v10 + 24) = *v7;
          v22 = new_chain;
          new_chain = v10;
          *(_QWORD *)v10 = v22;
          *(_QWORD *)(v10 + 40) = a3 + a4;
          return v10;
        }
        if ( (_DWORD)v14 )
        {
          if ( !warned_8546 )
          {
            my_syslog(3, (unsigned int)"Internal error in cache.", v12, v16, v14, v13, a3);
            warned_8546 = 1;
          }
          goto LABEL_23;
        }
        if ( v15 )
        {
          v26 = *(_OWORD *)(cache_tail + 24);
          v17 = cache_get_name(cache_tail);
          a2 = &v26;
          cache_scan_free(v17, &v26, a3, v18);
          ++cache_live_freed;
          v14 = 1LL;
        }
        else
        {
          a2 = 0LL;
          cache_scan_free(0LL, 0LL, a3, 0LL);
          v14 = 0LL;
          v15 = 1;
        }
      }
    }
    if ( (v6 & 0x180) == 0
      || (v6 & 8) == 0
      || !a2
      || ((v6 & 0x80u) == 0 || *(char *)(v11 + 52) >= 0 || *(_DWORD *)(v11 + 24) != *(_DWORD *)a2)
      && (!_bittest(&v6, 8u)
       || (*(_BYTE *)(v11 + 53) & 1) == 0
       || *(_DWORD *)(v11 + 24) != *(_DWORD *)a2
       || *(_DWORD *)(v11 + 28) != *((_DWORD *)a2 + 1)
       || *(_DWORD *)(v11 + 32) != *((_DWORD *)a2 + 2)
       || *(_DWORD *)(v11 + 36) != *((_DWORD *)a2 + 3)) )
    {
LABEL_23:
      insert_error = 1;
      return 0LL;
    }
  }
  return v10;
}
