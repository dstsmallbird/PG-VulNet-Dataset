int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v8; // r3
  bool v9; // cc
  bool v10; // cf
  int result; // r0
  int v12; // r10
  int v13; // r1
  int v14; // r2
  int v15; // r3
  int v16; // r0
  int v17; // r4
  int v18; // r10
  char *v19; // r0
  int v20; // r1
  int v21; // r2
  int v22; // r3
  int v23; // r3
  int v25; // [sp+8h] [bp-48h]
  int v26; // [sp+Ch] [bp-44h]
  _DWORD v27[4]; // [sp+14h] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v8 = *(_DWORD *)(dnsmasq_daemon + 252);
    v9 = v8 != 0;
    if ( v8 )
      v9 = a4 > v8;
    if ( !v9 )
      v8 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v10 = 1;
    if ( a4 )
      v10 = v8 >= a4;
    if ( v10 )
      a4 = v8;
  }
  if ( insert_error )
    goto LABEL_54;
  result = cache_scan_free(a1, a2, a3, a5);
  if ( !result )
  {
    v12 = a5 & 4;
    v25 = 0;
    while ( 1 )
    {
      v17 = cache_tail;
      if ( !cache_tail )
        goto LABEL_24;
      v26 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v26 & 0xC) == 0 )
      {
        if ( a1 )
        {
          if ( strlen(a1) <= 0x31 )
          {
            v18 = 0;
          }
          else
          {
            v18 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_24;
              v18 = whine_malloc(1028);
              if ( !v18 )
                goto LABEL_24;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        else
        {
          v18 = 0;
        }
        cache_unlink(v17);
        *(_WORD *)(v17 + 36) = a5;
        if ( v18 )
        {
          *(_DWORD *)(v17 + 40) = v18;
          *(_WORD *)(v17 + 36) = a5 | 0x200;
        }
        if ( a1 )
        {
          v19 = (char *)cache_get_name(v17);
          strcpy(v19, a1);
        }
        else
        {
          *(_BYTE *)cache_get_name(v17) = 0;
        }
        if ( a2 )
        {
          v20 = a2[1];
          v21 = a2[2];
          v22 = a2[3];
          *(_DWORD *)(v17 + 12) = *a2;
          *(_DWORD *)(v17 + 16) = v20;
          *(_DWORD *)(v17 + 20) = v21;
          *(_DWORD *)(v17 + 24) = v22;
        }
        result = v17;
        v23 = new_chain;
        *(_DWORD *)(v17 + 28) = a4 + a3;
        *(_DWORD *)v17 = v23;
        new_chain = v17;
        return result;
      }
      if ( v25 )
      {
        if ( !warned_10912 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_10912 = 1;
        }
        goto LABEL_24;
      }
      if ( v12 )
      {
        v13 = *(_DWORD *)(cache_tail + 16);
        v14 = *(_DWORD *)(cache_tail + 20);
        v15 = *(_DWORD *)(cache_tail + 24);
        v27[0] = *(_DWORD *)(cache_tail + 12);
        v27[1] = v13;
        v27[2] = v14;
        v27[3] = v15;
        v16 = cache_get_name(cache_tail);
        cache_scan_free(v16, v27, a3, v26);
        ++cache_live_freed;
        v25 = 1;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v12 = 1;
      }
    }
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(result + 36) & 0x80) == 0 || *(_DWORD *)(result + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(result + 36) & 0x100) == 0
     || *(_DWORD *)(result + 12) != *a2
     || *(_DWORD *)(result + 16) != a2[1]
     || *(_DWORD *)(result + 20) != a2[2]
     || *(_DWORD *)(result + 24) != a2[3]) )
  {
LABEL_24:
    insert_error = 1;
LABEL_54:
    result = 0;
  }
  return result;
}
