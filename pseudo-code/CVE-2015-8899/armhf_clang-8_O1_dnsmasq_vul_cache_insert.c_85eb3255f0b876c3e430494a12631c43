int __fastcall cache_insert(const char *a1, _DWORD *a2, time_t a3, unsigned int a4, int a5)
{
  unsigned int v9; // r0
  unsigned int v10; // r9
  int v11; // r5
  int v12; // r0
  bool v13; // zf
  bool v14; // zf
  bool v15; // zf
  int v16; // r10
  int v17; // r8
  int v18; // r1
  int v19; // r2
  int v20; // r3
  int v21; // r0
  int v22; // r10
  char *v24; // r0
  _DWORD *v25; // r7
  time_t v26; // r6
  int v27; // r0
  int v28; // r1
  int v29; // r2
  int v30; // r3
  _DWORD *v31; // [sp+4h] [bp-3Ch]
  char *s; // [sp+8h] [bp-38h]
  time_t time1; // [sp+Ch] [bp-34h]
  _DWORD v34[12]; // [sp+10h] [bp-30h] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    v10 = a4;
    if ( v9 < a4 )
      v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v9 )
      v10 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v10 )
      v10 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  else
  {
    v10 = a4;
  }
  v11 = 0;
  if ( insert_error )
    return v11;
  v12 = cache_scan_free((int)a1, (int)a2, a3);
  if ( v12 )
  {
    v13 = (a5 & 0x180) == 0;
    if ( (a5 & 0x180) != 0 )
    {
      v11 = v12;
      v13 = (a5 & 8) == 0;
    }
    if ( v13 )
      goto LABEL_42;
    v14 = (a5 & 0x80) == 0;
    if ( (a5 & 0x80) != 0 )
      v14 = (*(_BYTE *)(v11 + 36) & 0x80) == 0;
    if ( v14 || *(_DWORD *)(v11 + 12) != *a2 )
    {
      v15 = (a5 & 0x100) == 0;
      if ( (a5 & 0x100) != 0 )
        v15 = (*(_BYTE *)(v11 + 37) & 1) == 0;
      if ( v15
        || *(_DWORD *)(v11 + 12) != *a2
        || *(_DWORD *)(v11 + 16) != a2[1]
        || *(_DWORD *)(v11 + 20) != a2[2]
        || *(_DWORD *)(v11 + 24) != a2[3] )
      {
        goto LABEL_42;
      }
    }
    return v11;
  }
  time1 = a3;
  s = (char *)a1;
  v31 = a2;
  v11 = cache_tail;
  if ( !cache_tail )
    goto LABEL_42;
  v16 = a5 & 4;
  v17 = 0;
  while ( 1 )
  {
    if ( (*(_WORD *)(v11 + 36) & 0xC) == 0 )
    {
      if ( a1 && strlen(a1) >= 0x32 )
      {
        v22 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !(bignames_left | a5 & 0x5000) )
            goto LABEL_42;
          v27 = whine_malloc(1028);
          if ( !v27 )
            goto LABEL_42;
          v22 = v27;
          if ( bignames_left )
            --bignames_left;
        }
        cache_unlink(v11);
        v25 = v31;
        v26 = time1;
        *(_DWORD *)(v11 + 40) = v22;
        *(_WORD *)(v11 + 36) = a5 | 0x200;
        v24 = (char *)cache_get_name(v11);
      }
      else
      {
        cache_unlink(v11);
        *(_WORD *)(v11 + 36) = a5;
        v24 = (char *)cache_get_name(v11);
        if ( !a1 )
        {
          *v24 = 0;
          v25 = v31;
          v26 = time1;
          if ( !v31 )
            goto LABEL_57;
          goto LABEL_56;
        }
        v25 = v31;
        v26 = time1;
      }
      strcpy(v24, s);
      if ( !v25 )
      {
LABEL_57:
        *(_DWORD *)(v11 + 28) = v10 + v26;
        *(_DWORD *)v11 = new_chain;
        new_chain = v11;
        return v11;
      }
LABEL_56:
      v28 = v25[1];
      v29 = v25[2];
      v30 = v25[3];
      *(_DWORD *)(v11 + 12) = *v25;
      *(_DWORD *)(v11 + 16) = v28;
      *(_DWORD *)(v11 + 20) = v29;
      *(_DWORD *)(v11 + 24) = v30;
      goto LABEL_57;
    }
    if ( v17 )
      break;
    if ( v16 )
    {
      v18 = *(_DWORD *)(v11 + 16);
      v19 = *(_DWORD *)(v11 + 20);
      v20 = *(_DWORD *)(v11 + 24);
      v34[0] = *(_DWORD *)(v11 + 12);
      v34[1] = v18;
      v34[2] = v19;
      v34[3] = v20;
      v21 = cache_get_name(v11);
      cache_scan_free(v21, (int)v34, a3);
      ++cache_live_freed;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      cache_scan_free(0, 0, a3);
      v16 = 1;
    }
    v11 = cache_tail;
    if ( !cache_tail )
      goto LABEL_42;
  }
  if ( !cache_insert_warned )
  {
    my_syslog(3, "Internal error in cache.");
    cache_insert_warned = 1;
  }
LABEL_42:
  insert_error = 1;
  return 0;
}
