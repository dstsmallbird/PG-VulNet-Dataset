int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v9; // $s0
  int v10; // $t0
  int v11; // $v1
  unsigned int v13; // $a0
  unsigned int v14; // $v0
  int v15; // $a3
  int v16; // $a2
  int v17; // $a1
  int v18; // $a0
  int v19; // $a0
  int v20; // $v0
  int *v21; // $a1
  int v22; // $a0
  char *v23; // $a0
  int v24; // $a0
  int v25; // $v1
  int v26; // $v0
  int v27; // $v1
  int v28; // [sp+1Ch] [-24h]
  int v29; // [sp+1Ch] [-24h]
  int v30[4]; // [sp+2Ch] [-14h] BYREF

  if ( (a5 & 0x980) == 0 )
    goto LABEL_2;
  log_query(a5 | 0x10000, a1, a2, 0);
  v13 = *(_DWORD *)(fbss + 252);
  if ( v13 && v13 < a4 )
    a4 = *(_DWORD *)(fbss + 252);
  v14 = *(_DWORD *)(fbss + 248);
  if ( v14 )
  {
    if ( a4 < v14 )
      a4 = *(_DWORD *)(fbss + 248);
    v28 = insert_error;
    if ( insert_error )
      return 0;
  }
  else
  {
LABEL_2:
    v28 = insert_error;
    if ( insert_error )
      return 0;
  }
  v9 = cache_scan_free(a1, a2, a3, a5);
  v10 = v28;
  if ( !v9 )
  {
    v29 = a5 & 4;
    while ( 1 )
    {
      v9 = cache_tail;
      if ( !cache_tail )
        goto LABEL_14;
      v15 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v15 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_8195 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_8195 = 1;
        }
        goto LABEL_14;
      }
      if ( v29 )
      {
        v16 = *(_DWORD *)(cache_tail + 16);
        v17 = *(_DWORD *)(cache_tail + 20);
        v18 = *(_DWORD *)(cache_tail + 24);
        v30[0] = *(_DWORD *)(cache_tail + 12);
        v30[1] = v16;
        v30[2] = v17;
        v30[3] = v18;
        if ( (v15 & 0x200) != 0 || (v19 = cache_tail + 40, (v15 & 2) != 0) )
          v19 = *(_DWORD *)(cache_tail + 40);
        cache_scan_free(v19, v30, a3, v15);
        v10 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v10 = 0;
        v29 = 1;
      }
    }
    if ( a1 && strlen(a1) >= 0x32 )
    {
      v20 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_14;
        v20 = whine_malloc(1028);
        if ( !v20 )
          goto LABEL_14;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v20 = 0;
    }
    v21 = *(int **)(v9 + 4);
    v22 = *(_DWORD *)v9;
    if ( v21 )
    {
      *v21 = v22;
      v22 = *(_DWORD *)v9;
    }
    else
    {
      cache_head = *(_DWORD *)v9;
    }
    if ( v22 )
      *(_DWORD *)(v22 + 4) = v21;
    else
      cache_tail = (int)v21;
    *(_WORD *)(v9 + 36) = a5;
    if ( v20 )
    {
      *(_DWORD *)(v9 + 40) = v20;
      *(_WORD *)(v9 + 36) = a5 | 0x200;
      if ( a1 )
      {
LABEL_48:
        v23 = *(char **)(v9 + 40);
LABEL_49:
        strcpy(v23, a1);
LABEL_50:
        if ( a2 )
        {
          v24 = a2[1];
          v25 = a2[2];
          v26 = a2[3];
          *(_DWORD *)(v9 + 12) = *a2;
          *(_DWORD *)(v9 + 16) = v24;
          *(_DWORD *)(v9 + 20) = v25;
          *(_DWORD *)(v9 + 24) = v26;
        }
        v27 = new_chain;
        *(_DWORD *)(v9 + 28) = a4 + a3;
        new_chain = v9;
        *(_DWORD *)v9 = v27;
        return v9;
      }
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 )
        {
          v23 = (char *)(v9 + 40);
          if ( (a5 & 2) == 0 )
            goto LABEL_49;
        }
        goto LABEL_48;
      }
      if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
      {
        *(_BYTE *)(v9 + 40) = 0;
        goto LABEL_50;
      }
    }
    **(_BYTE **)(v9 + 40) = 0;
    goto LABEL_50;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((v11 = a5 & 0x100, (a5 & 0x80) == 0)
     || (*(_WORD *)(v9 + 36) & 0x80) == 0
     || (v11 = a5 & 0x100, *(_DWORD *)(v9 + 12) != *a2))
    && (!v11
     || (*(_WORD *)(v9 + 36) & 0x100) == 0
     || *(_DWORD *)(v9 + 12) != *a2
     || *(_DWORD *)(v9 + 16) != a2[1]
     || *(_DWORD *)(v9 + 20) != a2[2]
     || *(_DWORD *)(v9 + 24) != a2[3]) )
  {
LABEL_14:
    v9 = 0;
    insert_error = 1;
  }
  return v9;
}
