int __fastcall cache_insert(int a1, void *s2, int a3, int a4, __int16 a5)
{
  __int16 v7; // r5
  int result; // r0
  unsigned int v11; // r3
  bool v12; // cc
  bool v13; // cf
  int v14; // r4
  int v15; // r6
  __int16 v16; // r12
  int v17; // r1
  int v18; // r2
  int v19; // r3
  int v20; // r0
  size_t v21; // r0
  int v22; // r3
  int v23; // r1
  int *v24; // r2
  char *v25; // r0
  int v26; // r1
  int v27; // r2
  int v28; // r3
  int v29; // r2
  _BYTE *v30; // r3
  void *v31; // [sp+8h] [bp-48h]
  _DWORD s2a[4]; // [sp+14h] [bp-3Ch] BYREF

  v7 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, s2, 0);
    v11 = *(_DWORD *)(dnsmasq_daemon + 252);
    v12 = v11 != 0;
    if ( v11 )
      v12 = a4 > v11;
    if ( !v12 )
      v11 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v13 = 1;
    if ( a4 )
      v13 = v11 >= a4;
    if ( v13 )
      a4 = v11;
  }
  result = 0;
  if ( !insert_error )
  {
    result = cache_scan_free(a1, s2);
    if ( result )
    {
      if ( (a5 & 0x180) != 0
        && (a5 & 8) != 0
        && ((a5 & 0x80) != 0 && (*(_WORD *)(result + 36) & 0x80) != 0 && *(_DWORD *)(result + 12) == *(_DWORD *)s2
         || (a5 & 0x100) != 0
         && (*(_WORD *)(result + 36) & 0x100) != 0
         && *(_DWORD *)(result + 12) == *(_DWORD *)s2
         && *(_DWORD *)(result + 16) == *((_DWORD *)s2 + 1)
         && *(_DWORD *)(result + 20) == *((_DWORD *)s2 + 2)
         && *(_DWORD *)(result + 24) == *((_DWORD *)s2 + 3)) )
      {
        return result;
      }
LABEL_12:
      result = 0;
      insert_error = 1;
      return result;
    }
    v14 = 0;
    v31 = (void *)(a5 & 4);
LABEL_24:
    v15 = cache_tail;
    if ( !cache_tail )
      goto LABEL_12;
    while ( 1 )
    {
      v16 = *(_WORD *)(v15 + 36);
      if ( (v16 & 0xC) == 0 )
        break;
      if ( v14 )
      {
        if ( !warned_11054 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_11054 = 1;
        }
        goto LABEL_12;
      }
      if ( !v31 )
      {
        cache_scan_free(0, 0);
        v31 = &dword_0 + 1;
        goto LABEL_24;
      }
      v17 = *(_DWORD *)(v15 + 16);
      v18 = *(_DWORD *)(v15 + 20);
      v19 = *(_DWORD *)(v15 + 24);
      s2a[0] = *(_DWORD *)(v15 + 12);
      s2a[1] = v17;
      s2a[2] = v18;
      s2a[3] = v19;
      if ( (v16 & 0x200) != 0 || (v16 & 2) != 0 )
        v20 = *(_DWORD *)(v15 + 40);
      else
        v20 = v15 + 40;
      v14 = 1;
      cache_scan_free(v20, s2a);
      ++cache_live_freed;
      v15 = cache_tail;
      if ( !cache_tail )
        goto LABEL_12;
    }
    if ( a1 )
    {
      v21 = strlen((const char *)a1);
      v22 = 0;
      if ( v21 > 0x31 )
      {
        v22 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_12;
          v22 = whine_malloc(1028);
          if ( !v22 )
            goto LABEL_12;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = *(_DWORD *)v15;
    v24 = *(int **)(v15 + 4);
    if ( v24 )
    {
      *v24 = v23;
      v23 = *(_DWORD *)v15;
    }
    else
    {
      cache_head = *(_DWORD *)v15;
    }
    if ( v23 )
      *(_DWORD *)(v23 + 4) = v24;
    else
      cache_tail = (int)v24;
    *(_WORD *)(v15 + 36) = a5;
    if ( v22 )
    {
      v7 = a5 | 0x200;
      *(_DWORD *)(v15 + 40) = v22;
      *(_WORD *)(v15 + 36) = a5 | 0x200;
    }
    if ( a1 )
    {
      if ( (v7 & 0x200) != 0 || (v7 & 2) != 0 )
        v25 = *(char **)(v15 + 40);
      else
        v25 = (char *)(v15 + 40);
      strcpy(v25, (const char *)a1);
    }
    else
    {
      if ( (v7 & 0x200) != 0 || (v7 & 2) != 0 )
        v30 = *(_BYTE **)(v15 + 40);
      else
        v30 = (_BYTE *)(v15 + 40);
      *v30 = 0;
    }
    if ( s2 )
    {
      v26 = *((_DWORD *)s2 + 1);
      v27 = *((_DWORD *)s2 + 2);
      v28 = *((_DWORD *)s2 + 3);
      *(_DWORD *)(v15 + 12) = *(_DWORD *)s2;
      *(_DWORD *)(v15 + 16) = v26;
      *(_DWORD *)(v15 + 20) = v27;
      *(_DWORD *)(v15 + 24) = v28;
    }
    result = v15;
    *(_DWORD *)(v15 + 28) = a4 + a3;
    v29 = new_chain;
    new_chain = v15;
    *(_DWORD *)v15 = v29;
  }
  return result;
}
