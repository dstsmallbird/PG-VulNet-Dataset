int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  __int16 v5; // r5
  int v9; // r8
  int v10; // r4
  int v11; // r0
  int v12; // r2
  int v13; // r8
  __int16 v14; // r3
  int v16; // r1
  int v17; // r2
  int v18; // r3
  int v19; // r0
  int v20; // r12
  unsigned int v21; // r3
  bool v22; // cc
  bool v23; // cf
  size_t v24; // r0
  int v25; // r3
  int v26; // r1
  int *v27; // r2
  char *v28; // r0
  int v29; // r1
  int v30; // r2
  int v31; // r3
  int v32; // r3
  _BYTE *v33; // r3
  _DWORD v35[4]; // [sp+Ch] [bp-3Ch] BYREF

  v5 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v21 = *(_DWORD *)(dnsmasq_daemon + 252);
    v22 = v21 != 0;
    if ( v21 )
      v22 = a4 > v21;
    if ( !v22 )
      v21 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v23 = 1;
    if ( a4 )
      v23 = v21 >= a4;
    if ( v23 )
      a4 = v21;
  }
  v9 = insert_error;
  if ( insert_error )
    return 0;
  v11 = cache_scan_free(a1, a2, a3, a5);
  v10 = v11;
  if ( !v11 )
  {
    v12 = v9;
    v13 = a5 & 4;
    while ( 1 )
    {
      v10 = cache_tail;
      if ( !cache_tail )
        goto LABEL_16;
      v20 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v20 & 0xC) == 0 )
      {
        if ( a1 )
        {
          v24 = strlen(a1);
          v25 = 0;
          if ( v24 > 0x31 )
          {
            v25 = big_free;
            if ( big_free )
            {
              big_free = *(_DWORD *)big_free;
            }
            else
            {
              if ( !bignames_left && (a5 & 0x5000) == 0 )
                goto LABEL_16;
              v25 = whine_malloc(1028);
              if ( !v25 )
                goto LABEL_16;
              if ( bignames_left )
                --bignames_left;
            }
          }
        }
        else
        {
          v25 = 0;
        }
        v26 = *(_DWORD *)v10;
        v27 = *(int **)(v10 + 4);
        if ( v27 )
        {
          *v27 = v26;
          v26 = *(_DWORD *)v10;
        }
        else
        {
          cache_head = *(_DWORD *)v10;
        }
        if ( v26 )
          *(_DWORD *)(v26 + 4) = v27;
        else
          cache_tail = (int)v27;
        if ( v25 )
          *(_DWORD *)(v10 + 40) = v25;
        *(_WORD *)(v10 + 36) = a5;
        if ( v25 )
        {
          v5 = a5 | 0x200;
          *(_WORD *)(v10 + 36) = a5 | 0x200;
        }
        if ( a1 )
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
            v28 = *(char **)(v10 + 40);
          else
            v28 = (char *)(v10 + 40);
          strcpy(v28, a1);
        }
        else
        {
          if ( (v5 & 0x200) != 0 || (v5 & 2) != 0 )
            v33 = *(_BYTE **)(v10 + 40);
          else
            v33 = (_BYTE *)(v10 + 40);
          *v33 = 0;
        }
        if ( a2 )
        {
          v29 = a2[1];
          v30 = a2[2];
          v31 = a2[3];
          *(_DWORD *)(v10 + 12) = *a2;
          *(_DWORD *)(v10 + 16) = v29;
          *(_DWORD *)(v10 + 20) = v30;
          *(_DWORD *)(v10 + 24) = v31;
        }
        v32 = new_chain;
        *(_DWORD *)(v10 + 28) = a4 + a3;
        *(_DWORD *)v10 = v32;
        new_chain = v10;
        return v10;
      }
      if ( v12 )
      {
        if ( !warned_10977 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_10977 = 1;
        }
        goto LABEL_16;
      }
      if ( v13 )
      {
        v16 = *(_DWORD *)(cache_tail + 16);
        v17 = *(_DWORD *)(cache_tail + 20);
        v18 = *(_DWORD *)(cache_tail + 24);
        v35[0] = *(_DWORD *)(cache_tail + 12);
        v35[1] = v16;
        v35[2] = v17;
        v35[3] = v18;
        if ( (v20 & 0x200) != 0 || (v20 & 2) != 0 )
          v19 = *(_DWORD *)(cache_tail + 40);
        else
          v19 = cache_tail + 40;
        cache_scan_free(v19, v35, a3, v20);
        v12 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v12 = 0;
        v13 = 1;
      }
    }
  }
  if ( (a5 & 0x180) == 0 )
    goto LABEL_16;
  v14 = (__int16)a2;
  if ( a2 )
    v14 = 1;
  if ( (*(_DWORD *)&v14 & (a5 >> 3)) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 36) & 0x80) == 0 || *(_DWORD *)(v11 + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v11 + 36) & 0x100) == 0
     || *(_DWORD *)(v11 + 12) != *a2
     || *(_DWORD *)(v11 + 16) != a2[1]
     || *(_DWORD *)(v11 + 20) != a2[2]
     || *(_DWORD *)(v11 + 24) != a2[3]) )
  {
LABEL_16:
    v10 = 0;
    insert_error = 1;
  }
  return v10;
}
