__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v8; // w19
  int v9; // w22
  __int64 v10; // x0
  __int64 v11; // x20
  unsigned __int64 v13; // x0
  bool v14; // cf
  unsigned __int64 v16; // x0
  bool v17; // cc
  int v19; // w27
  __int64 v20; // x21
  unsigned int v21; // w28
  __int64 v22; // x1
  __int64 v23; // x0
  __int64 v24; // x22
  char *v25; // x0
  __int64 v26; // x1
  __int64 v28[2]; // [xsp+78h] [xbp+78h] BYREF

  v8 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    v13 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v13 )
      v14 = v13 >= a4;
    else
      v14 = 1;
    if ( !v14 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    v16 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( v16 )
      v17 = v16 > a4;
    else
      v17 = 0;
    if ( v17 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  v9 = insert_error;
  if ( insert_error )
    return 0LL;
  v10 = cache_scan_free(a1, a2, a3, v8);
  v11 = v10;
  if ( v10 )
  {
    if ( (v8 & 0x180) == 0
      || (v8 & 8) == 0
      || ((v8 & 0x80) == 0 || (*(_WORD *)(v10 + 52) & 0x80) == 0 || *(_DWORD *)(v10 + 24) != *a2)
      && ((v8 & 0x100) == 0
       || (*(_WORD *)(v10 + 52) & 0x100) == 0
       || *(_DWORD *)(v10 + 24) != *a2
       || *(_DWORD *)(v10 + 28) != a2[1]
       || *(_DWORD *)(v10 + 32) != a2[2]
       || *(_DWORD *)(v10 + 36) != a2[3]) )
    {
      insert_error = 1;
      v11 = 0LL;
    }
    return v11;
  }
  v19 = v8 & 4;
  while ( 1 )
  {
    v20 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0LL;
    }
    v21 = *(unsigned __int16 *)(cache_tail + 52);
    if ( (v21 & 0xC) == 0 )
      break;
    if ( v9 )
    {
      if ( !warned_9978 )
      {
        my_syslog(3LL, "Internal error in cache.");
        warned_9978 = 1;
      }
      insert_error = 1;
      return v11;
    }
    if ( v19 )
    {
      v22 = *(_QWORD *)(cache_tail + 32);
      v28[0] = *(_QWORD *)(cache_tail + 24);
      v28[1] = v22;
      v23 = cache_get_name(cache_tail);
      cache_scan_free(v23, v28, a3, v21);
      ++cache_live_freed;
      v9 = 1;
    }
    else
    {
      cache_scan_free(0LL, 0LL, a3, 0LL);
      v9 = 0;
      v19 = 1;
    }
  }
  if ( a1 && strlen(a1) > 0x31 )
  {
    v24 = big_free;
    if ( big_free )
    {
      big_free = *(_QWORD *)big_free;
    }
    else
    {
      if ( !bignames_left && (v8 & 0x5000) == 0 || (v24 = whine_malloc(1032LL)) == 0 )
      {
        insert_error = 1;
        return v11;
      }
      if ( bignames_left )
        --bignames_left;
    }
    cache_unlink(v20);
    *(_QWORD *)(v20 + 56) = v24;
    *(_WORD *)(v20 + 52) = v8 | 0x200;
  }
  else
  {
    cache_unlink(v20);
    *(_WORD *)(v20 + 52) = v8;
    if ( !a1 )
    {
      *(_BYTE *)cache_get_name(v20) = 0;
      goto LABEL_51;
    }
  }
  v25 = (char *)cache_get_name(v20);
  strcpy(v25, a1);
LABEL_51:
  if ( a2 )
  {
    v26 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(v20 + 24) = *(_QWORD *)a2;
    *(_QWORD *)(v20 + 32) = v26;
  }
  *(_QWORD *)(v20 + 40) = a4 + a3;
  *(_QWORD *)v20 = new_chain;
  new_chain = v20;
  return v20;
}
