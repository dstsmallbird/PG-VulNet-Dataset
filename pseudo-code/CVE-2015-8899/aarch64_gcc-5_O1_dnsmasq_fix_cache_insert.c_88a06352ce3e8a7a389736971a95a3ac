__int64 __fastcall cache_insert(const char *a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned int v9; // w20
  unsigned __int64 v10; // x0
  bool v11; // cc
  unsigned __int64 v13; // x0
  bool v14; // zf
  __int64 result; // x0
  int v17; // w28
  int v18; // w27
  bool v19; // zf
  __int64 v20; // x19
  unsigned int v21; // w25
  __int64 v22; // x1
  __int64 v23; // x0
  __int64 v24; // x25
  char *v25; // x0
  __int64 v26; // x3
  _QWORD v27[2]; // [xsp+78h] [xbp+78h] BYREF

  v9 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    v10 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v10 )
      v11 = a4 > v10;
    else
      v11 = 0;
    if ( v11 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    v13 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( a4 < v13 )
      v14 = v13 == 0;
    else
      v14 = 1;
    if ( !v14 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  if ( insert_error )
    return 0LL;
  result = cache_scan_free(a1, a2, a3, v9);
  if ( !result )
  {
    v17 = v9 & 4;
    v18 = 0;
    while ( 1 )
    {
      v20 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0LL;
      }
      v21 = *(unsigned __int16 *)(cache_tail + 52);
      if ( (v21 & 0xC) == 0 )
        break;
      if ( v18 )
      {
        if ( !warned_9671 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_9671 = 1;
        }
        insert_error = 1;
        return 0LL;
      }
      if ( v17 )
      {
        v22 = *(_QWORD *)(cache_tail + 32);
        v27[0] = *(_QWORD *)(cache_tail + 24);
        v27[1] = v22;
        v23 = cache_get_name(cache_tail);
        cache_scan_free(v23, v27, a3, v21);
        ++cache_live_freed;
        v18 = 1;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v17 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      v24 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (v9 & 0x5000) == 0 || (v24 = whine_malloc(1032LL)) == 0 )
        {
          insert_error = 1;
          return 0LL;
        }
        if ( bignames_left )
          --bignames_left;
      }
      cache_unlink(v20);
      *(_QWORD *)(v20 + 56) = v24;
      *(_WORD *)(v20 + 52) = v9 | 0x200;
    }
    else
    {
      cache_unlink(v20);
      *(_WORD *)(v20 + 52) = v9;
      if ( !a1 )
      {
        *(_BYTE *)cache_get_name(v20) = 0;
        goto LABEL_58;
      }
    }
    v25 = (char *)cache_get_name(v20);
    strcpy(v25, a1);
LABEL_58:
    if ( a2 )
    {
      v26 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(v20 + 24) = *(_QWORD *)a2;
      *(_QWORD *)(v20 + 32) = v26;
    }
    *(_QWORD *)(v20 + 40) = a4 + a3;
    *(_QWORD *)v20 = new_chain;
    new_chain = v20;
    return v20;
  }
  if ( (v9 & 0x180) == 0
    || ((v9 & 8) != 0 ? (v19 = a2 == 0) : (v19 = 1),
        v19
     || ((v9 & 0x80) == 0 || (*(_WORD *)(result + 52) & 0x80) == 0 || *(_DWORD *)(result + 24) != *(_DWORD *)a2)
     && ((v9 & 0x100) == 0
      || (*(_WORD *)(result + 52) & 0x100) == 0
      || *(_DWORD *)(result + 24) != *(_DWORD *)a2
      || *(_DWORD *)(result + 28) != *(_DWORD *)(a2 + 4)
      || *(_DWORD *)(result + 32) != *(_DWORD *)(a2 + 8)
      || *(_DWORD *)(result + 36) != *(_DWORD *)(a2 + 12))) )
  {
    insert_error = 1;
    result = 0LL;
  }
  return result;
}
