int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v9; // $s1
  int v10; // $v1
  int v12; // $t0
  int *v13; // $t3
  int v14; // $t1
  int v15; // $s2
  int v16; // $a3
  int v17; // $a1
  int v18; // $a0
  int v19; // $v1
  int v20; // $a0
  unsigned int v21; // $v1
  unsigned int v22; // $v0
  size_t v23; // $v0
  int *v24; // $v1
  int v25; // $v0
  char *v26; // $a0
  int v27; // $a0
  int v28; // $v1
  int v29; // $v0
  int v30; // $v1
  int v31; // [sp+18h] [-28h]
  int *v32; // [sp+18h] [-28h]
  int v33; // [sp+18h] [-28h]
  int v34; // [sp+1Ch] [-24h]
  int v35; // [sp+1Ch] [-24h]
  int v36; // [sp+20h] [-20h]
  int *v37; // [sp+20h] [-20h]
  int v38[4]; // [sp+2Ch] [-14h] BYREF

  if ( (a5 & 0x980) == 0 )
    goto LABEL_2;
  log_query(a5 | 0x10000, a1, a2, 0);
  v21 = *(_DWORD *)(fbss + 252);
  if ( v21 && v21 < a4 )
    a4 = *(_DWORD *)(fbss + 252);
  v22 = *(_DWORD *)(fbss + 248);
  if ( v22 )
  {
    if ( a4 < v22 )
      a4 = *(_DWORD *)(fbss + 248);
    v31 = insert_error;
    if ( insert_error )
      return 0;
  }
  else
  {
LABEL_2:
    v31 = insert_error;
    if ( insert_error )
      return 0;
  }
  v9 = cache_scan_free(a1, a2, a3, a5);
  v10 = v31;
  if ( !v9 )
  {
    v12 = 4653056;
    v13 = v38;
    v14 = a5 & 4;
    while ( 1 )
    {
      v15 = *(_DWORD *)(v12 - 15456);
      if ( !v15 )
        goto LABEL_16;
      v16 = *(unsigned __int16 *)(v15 + 36);
      if ( (v16 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_8293 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_8293 = 1;
        }
        goto LABEL_16;
      }
      if ( v14 )
      {
        v17 = *(_DWORD *)(v15 + 16);
        v18 = *(_DWORD *)(v15 + 20);
        v19 = *(_DWORD *)(v15 + 24);
        v38[0] = *(_DWORD *)(v15 + 12);
        v38[1] = v17;
        v38[2] = v18;
        v38[3] = v19;
        if ( (v16 & 0x200) != 0 || (v16 & 2) != 0 )
          v20 = *(_DWORD *)(v15 + 40);
        else
          v20 = v15 + 40;
        v36 = v12;
        v34 = v14;
        v32 = v13;
        cache_scan_free(v20, v13, a3, v16);
        v10 = 1;
        v13 = v32;
        v14 = v34;
        v12 = v36;
        ++cache_live_freed;
      }
      else
      {
        v37 = v13;
        v35 = v12;
        cache_scan_free(0, 0, a3, 0);
        v12 = v35;
        v10 = 0;
        v13 = v37;
        v14 = 1;
      }
    }
    if ( a1 )
    {
      v33 = v12;
      v23 = strlen(a1);
      v12 = v33;
      if ( v23 >= 0x32 )
      {
        v9 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_16;
          v9 = whine_malloc(1028);
          if ( !v9 )
            goto LABEL_16;
          v12 = v33;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v24 = *(int **)(v15 + 4);
    v25 = *(_DWORD *)v15;
    if ( v24 )
    {
      *v24 = v25;
      v25 = *(_DWORD *)v15;
    }
    else
    {
      cache_head = *(_DWORD *)v15;
    }
    if ( v25 )
      *(_DWORD *)(v25 + 4) = v24;
    else
      *(_DWORD *)(v12 - 15456) = v24;
    *(_WORD *)(v15 + 36) = a5;
    if ( v9 )
    {
      *(_DWORD *)(v15 + 40) = v9;
      *(_WORD *)(v15 + 36) = a5 | 0x200;
      if ( a1 )
      {
LABEL_49:
        v26 = *(char **)(v15 + 40);
LABEL_50:
        strcpy(v26, a1);
LABEL_51:
        if ( a2 )
        {
          v27 = a2[1];
          v28 = a2[2];
          v29 = a2[3];
          *(_DWORD *)(v15 + 12) = *a2;
          *(_DWORD *)(v15 + 16) = v27;
          *(_DWORD *)(v15 + 20) = v28;
          *(_DWORD *)(v15 + 24) = v29;
        }
        v9 = v15;
        v30 = new_chain;
        *(_DWORD *)(v15 + 28) = a4 + a3;
        new_chain = v15;
        *(_DWORD *)v15 = v30;
        return v9;
      }
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 )
        {
          v26 = (char *)(v15 + 40);
          if ( (a5 & 2) == 0 )
            goto LABEL_50;
        }
        goto LABEL_49;
      }
      if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
      {
        *(_BYTE *)(v15 + 40) = 0;
        goto LABEL_51;
      }
    }
    **(_BYTE **)(v15 + 40) = 0;
    goto LABEL_51;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || !a2
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v9 + 36) & 0x80) == 0 || *(_DWORD *)(v9 + 12) != *a2)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v9 + 36) & 0x100) == 0
     || *(_DWORD *)(v9 + 12) != *a2
     || *(_DWORD *)(v9 + 16) != a2[1]
     || *(_DWORD *)(v9 + 20) != a2[2]
     || *(_DWORD *)(v9 + 24) != a2[3]) )
  {
LABEL_16:
    v9 = 0;
    insert_error = 1;
  }
  return v9;
}
