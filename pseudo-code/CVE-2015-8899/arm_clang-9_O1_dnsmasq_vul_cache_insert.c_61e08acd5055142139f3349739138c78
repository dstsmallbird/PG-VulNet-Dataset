int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v9; // r0
  unsigned int v10; // r9
  int v11; // r5
  int v12; // r0
  bool v13; // zf
  bool v14; // zf
  bool v15; // zf
  int v16; // r10
  int v17; // r8
  int v18; // r4
  int v19; // r1
  int v20; // r2
  int v21; // r3
  int v22; // r0
  int v23; // r10
  char *v25; // r0
  _DWORD *v26; // r7
  int v27; // r6
  int v28; // r0
  int v29; // r1
  int v30; // r2
  int v31; // r3
  _DWORD *v32; // [sp+0h] [bp-38h]
  char *s; // [sp+4h] [bp-34h]
  int v34; // [sp+8h] [bp-30h]
  _DWORD v35[11]; // [sp+Ch] [bp-2Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    v10 = a4;
    if ( v9 < a4 )
      v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v9 )
      v10 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v10 )
      v10 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  else
  {
    v10 = a4;
  }
  v11 = 0;
  if ( !insert_error )
  {
    v12 = cache_scan_free(a1, a2, a3, a5);
    if ( v12 )
    {
      v13 = (a5 & 0x180) == 0;
      if ( (a5 & 0x180) != 0 )
      {
        v11 = v12;
        v13 = (a5 & 8) == 0;
      }
      if ( !v13 )
      {
        v14 = (a5 & 0x80) == 0;
        if ( (a5 & 0x80) != 0 )
          v14 = (*(_BYTE *)(v11 + 36) & 0x80) == 0;
        if ( !v14 && *(_DWORD *)(v11 + 12) == *a2 )
          return v11;
        v15 = (a5 & 0x100) == 0;
        if ( (a5 & 0x100) != 0 )
          v15 = (*(_BYTE *)(v11 + 37) & 1) == 0;
        if ( !v15
          && *(_DWORD *)(v11 + 12) == *a2
          && *(_DWORD *)(v11 + 16) == a2[1]
          && *(_DWORD *)(v11 + 20) == a2[2]
          && *(_DWORD *)(v11 + 24) == a2[3] )
        {
          return v11;
        }
      }
      insert_error = 1;
      return 0;
    }
    s = (char *)a1;
    v34 = a3;
    v32 = a2;
    v11 = cache_tail;
    if ( !cache_tail )
    {
LABEL_38:
      insert_error = 1;
      return 0;
    }
    v16 = a5 & 4;
    v17 = 0;
    while ( 1 )
    {
      v18 = *(unsigned __int16 *)(v11 + 36);
      if ( (v18 & 0xC) == 0 )
        break;
      if ( v17 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        goto LABEL_38;
      }
      if ( v16 )
      {
        v19 = *(_DWORD *)(v11 + 16);
        v20 = *(_DWORD *)(v11 + 20);
        v21 = *(_DWORD *)(v11 + 24);
        v35[0] = *(_DWORD *)(v11 + 12);
        v35[1] = v19;
        v35[2] = v20;
        v35[3] = v21;
        v22 = cache_get_name(v11);
        cache_scan_free(v22, v35, a3, v18);
        ++cache_live_freed;
        v17 = 1;
      }
      else
      {
        v17 = 0;
        cache_scan_free(0, 0, a3, 0);
        v16 = 1;
      }
      v11 = cache_tail;
      if ( !cache_tail )
        goto LABEL_38;
    }
    if ( a1 && strlen(a1) >= 0x32 )
    {
      v23 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !(bignames_left | a5 & 0x5000) )
          goto LABEL_38;
        v28 = whine_malloc(1028);
        if ( !v28 )
          goto LABEL_38;
        v23 = v28;
        if ( bignames_left )
          --bignames_left;
      }
      v26 = v32;
      v27 = v34;
      cache_unlink(v11);
      *(_WORD *)(v11 + 36) = a5 | 0x200;
      *(_DWORD *)(v11 + 40) = v23;
      v25 = (char *)cache_get_name(v11);
    }
    else
    {
      cache_unlink(v11);
      *(_WORD *)(v11 + 36) = a5;
      v25 = (char *)cache_get_name(v11);
      if ( !a1 )
      {
        *v25 = 0;
        v26 = v32;
        v27 = v34;
LABEL_57:
        if ( v26 )
        {
          v29 = v26[1];
          v30 = v26[2];
          v31 = v26[3];
          *(_DWORD *)(v11 + 12) = *v26;
          *(_DWORD *)(v11 + 16) = v29;
          *(_DWORD *)(v11 + 20) = v30;
          *(_DWORD *)(v11 + 24) = v31;
        }
        *(_DWORD *)(v11 + 28) = v10 + v27;
        *(_DWORD *)v11 = new_chain;
        new_chain = v11;
        return v11;
      }
      v26 = v32;
      v27 = v34;
    }
    strcpy(v25, s);
    goto LABEL_57;
  }
  return v11;
}
