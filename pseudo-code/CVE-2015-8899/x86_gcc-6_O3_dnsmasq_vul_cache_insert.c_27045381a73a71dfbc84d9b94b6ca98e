int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  int v5; // edi
  int v6; // edx
  int v7; // eax
  unsigned int v9; // eax
  unsigned int v10; // edi
  int v11; // ebp
  unsigned __int16 v12; // cx
  size_t v13; // eax
  int v14; // edi
  int *v15; // eax
  int v16; // ecx
  char *v17; // eax
  int v18; // eax
  _BYTE *v19; // eax
  char v20; // [esp-8h] [ebp-54h]
  __int16 v21; // [esp+8h] [ebp-44h]
  int v22; // [esp+8h] [ebp-44h]
  int v23; // [esp+Ch] [ebp-40h]

  v21 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, a2, 0);
    v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( a4 <= v9 || !v9 )
      v9 = a4;
    v10 = *(_DWORD *)(dnsmasq_daemon + 248);
    a4 = v10;
    if ( !v10 || v9 >= v10 )
      a4 = v9;
  }
  v5 = insert_error;
  v6 = 0;
  if ( !insert_error )
  {
    v7 = cache_scan_free(a5);
    v6 = v7;
    if ( v7 )
    {
      if ( (a5 & 0x180) != 0
        && (a5 & 8) != 0
        && ((a5 & 0x80) != 0 && *(char *)(v7 + 36) < 0 && *(_DWORD *)(v7 + 12) == *a2
         || (a5 & 0x100) != 0
         && (*(_BYTE *)(v7 + 37) & 1) != 0
         && *(_DWORD *)(v7 + 12) == *a2
         && *(_DWORD *)(v7 + 16) == a2[1]
         && *(_DWORD *)(v7 + 20) == a2[2]
         && *(_DWORD *)(v7 + 24) == a2[3]) )
      {
        return v6;
      }
LABEL_12:
      insert_error = 1;
      return 0;
    }
    v11 = a5 & 4;
LABEL_21:
    v6 = cache_tail;
    if ( !cache_tail )
      goto LABEL_12;
    while ( 1 )
    {
      v12 = *(_WORD *)(v6 + 36);
      if ( (v12 & 0xC) == 0 )
        break;
      if ( v5 )
      {
        if ( !warned_8300 )
        {
          my_syslog(3, "Internal error in cache.", v20);
          warned_8300 = 1;
        }
        goto LABEL_12;
      }
      if ( !v11 )
      {
        v5 = 0;
        v11 = 1;
        cache_scan_free(0);
        goto LABEL_21;
      }
      v5 = 1;
      cache_scan_free(v12);
      v6 = cache_tail;
      ++cache_live_freed;
      if ( !cache_tail )
        goto LABEL_12;
    }
    if ( a1 && (v23 = v6, v13 = strlen(a1), v6 = v23, v13 > 0x31) )
    {
      v14 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_12;
        v14 = whine_malloc(0x404u);
        if ( !v14 )
          goto LABEL_12;
        v6 = v23;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = *(int **)(v6 + 4);
    v16 = *(_DWORD *)v6;
    if ( v15 )
    {
      *v15 = v16;
      v16 = *(_DWORD *)v6;
    }
    else
    {
      cache_head = *(_DWORD *)v6;
    }
    if ( v16 )
      *(_DWORD *)(v16 + 4) = v15;
    else
      cache_tail = (int)v15;
    *(_WORD *)(v6 + 36) = a5;
    if ( v14 )
    {
      *(_DWORD *)(v6 + 40) = v14;
      v21 = a5 | 0x200;
      *(_WORD *)(v6 + 36) = a5 | 0x200;
    }
    if ( a1 )
    {
      if ( (v21 & 0x200) != 0 || (v17 = (char *)(v6 + 40), (v21 & 2) != 0) )
        v17 = *(char **)(v6 + 40);
      v22 = v6;
      strcpy(v17, a1);
      v6 = v22;
    }
    else
    {
      if ( (v21 & 0x200) != 0 || (v19 = (_BYTE *)(v6 + 40), (v21 & 2) != 0) )
        v19 = *(_BYTE **)(v6 + 40);
      *v19 = 0;
    }
    if ( a2 )
    {
      *(_DWORD *)(v6 + 12) = *a2;
      *(_DWORD *)(v6 + 16) = a2[1];
      *(_DWORD *)(v6 + 20) = a2[2];
      *(_DWORD *)(v6 + 24) = a2[3];
    }
    *(_DWORD *)(v6 + 28) = a3 + a4;
    v18 = new_chain;
    new_chain = v6;
    *(_DWORD *)v6 = v18;
  }
  return v6;
}
