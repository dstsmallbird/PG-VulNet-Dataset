int __cdecl cache_insert(int a1, int a2, time_t time1, int a4, int a5)
{
  int result; // eax
  int v6; // eax
  int v7; // esi
  int v8; // eax
  __int16 v9; // ax
  char *v10; // eax
  char v11; // [esp-8h] [ebp-50h]
  int v12; // [esp+14h] [ebp-34h]
  int v13; // [esp+18h] [ebp-30h]
  int v14; // [esp+1Ch] [ebp-2Ch]
  int v15; // [esp+20h] [ebp-28h]
  int v16; // [esp+20h] [ebp-28h]
  int v17[7]; // [esp+2Ch] [ebp-1Ch] BYREF

  v17[4] = __readgsdword(0x14u);
  v12 = 0;
  v13 = a5 & 4;
  v14 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, (void *)a2, 0);
    if ( *(_DWORD *)(dnsmasq_daemon + 252) && (unsigned int)a4 > *(_DWORD *)(dnsmasq_daemon + 252) )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( *(_DWORD *)(dnsmasq_daemon + 248) && (unsigned int)a4 < *(_DWORD *)(dnsmasq_daemon + 248) )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  if ( insert_error )
    return 0;
  v15 = cache_scan_free(a1, (void *)a2, time1, (unsigned __int16)a5);
  if ( v15 )
  {
    if ( (a5 & 0x180) == 0 || (a5 & 8) == 0 )
      goto LABEL_27;
    if ( (a5 & 0x80) != 0 && (*(_WORD *)(v15 + 36) & 0x80) != 0 && *(_DWORD *)(v15 + 12) == *(_DWORD *)a2 )
      return v15;
    if ( (a5 & 0x100) != 0
      && (*(_WORD *)(v15 + 36) & 0x100) != 0
      && (*(_DWORD *)(v15 + 12) != *(_DWORD *)a2
       || *(_DWORD *)(v15 + 16) != *(_DWORD *)(a2 + 4)
       || *(_DWORD *)(v15 + 20) != *(_DWORD *)(a2 + 8)
       || *(_DWORD *)(v15 + 24) != *(_DWORD *)(a2 + 12) ? (v6 = 0) : (v6 = 1),
          v6) )
    {
      result = v15;
    }
    else
    {
LABEL_27:
      insert_error = 1;
      result = 0;
    }
  }
  else
  {
    while ( 1 )
    {
      v16 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return 0;
      }
      if ( (*(_WORD *)(cache_tail + 36) & 0xC) == 0 )
        break;
      if ( v14 )
      {
        if ( !warned_7524 )
        {
          my_syslog(3, (int)"Internal error in cache.", v11);
          warned_7524 = 1;
        }
        insert_error = 1;
        return 0;
      }
      if ( v13 )
      {
        v17[0] = *(_DWORD *)(cache_tail + 12);
        v17[1] = *(_DWORD *)(cache_tail + 16);
        v17[2] = *(_DWORD *)(cache_tail + 20);
        v17[3] = *(_DWORD *)(cache_tail + 24);
        v14 = 1;
        v7 = *(unsigned __int16 *)(cache_tail + 36);
        v8 = cache_get_name(cache_tail);
        cache_scan_free(v8, v17, time1, v7);
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, time1, 0);
        v13 = 1;
      }
    }
    if ( a1 && strlen((const char *)a1) > 0x31 )
    {
      if ( big_free )
      {
        v12 = big_free;
        big_free = *(_DWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v12 = whine_malloc(0x404u)) == 0 )
        {
          insert_error = 1;
          return 0;
        }
        if ( bignames_left )
          --bignames_left;
      }
    }
    cache_unlink(v16);
    *(_WORD *)(v16 + 36) = a5;
    if ( v12 )
    {
      *(_DWORD *)(v16 + 40) = v12;
      v9 = *(_WORD *)(v16 + 36);
      HIBYTE(v9) |= 2u;
      *(_WORD *)(v16 + 36) = v9;
    }
    if ( a1 )
    {
      v10 = (char *)cache_get_name(v16);
      strcpy(v10, (const char *)a1);
    }
    else
    {
      *(_BYTE *)cache_get_name(v16) = 0;
    }
    if ( a2 )
    {
      *(_DWORD *)(v16 + 12) = *(_DWORD *)a2;
      *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(v16 + 20) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(v16 + 24) = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(v16 + 28) = time1 + a4;
    *(_DWORD *)v16 = new_chain;
    new_chain = v16;
    result = v16;
  }
  return result;
}
