int __cdecl cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v5; // eax
  unsigned int v6; // eax
  int result; // eax
  int v8; // esi
  unsigned __int16 v9; // di
  int v10; // esi
  int v11; // edi
  char *v12; // eax
  char v13; // [esp+8h] [ebp-54h]
  int v14; // [esp+18h] [ebp-44h]

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, (int)a1, a2, 0);
    v5 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v5 )
    {
      if ( a4 <= v5 )
        v5 = a4;
      a4 = v5;
    }
    v6 = *(_DWORD *)(dnsmasq_daemon + 248);
    if ( a4 < v6 )
    {
      if ( !v6 )
        v6 = a4;
      a4 = v6;
    }
  }
  result = 0;
  if ( !insert_error )
  {
    result = cache_scan_free(a5);
    if ( !result )
    {
      v14 = a5 & 4;
      v8 = 0;
      while ( 1 )
      {
        result = cache_tail;
        if ( !cache_tail )
        {
          insert_error = 1;
          return result;
        }
        v9 = *(_WORD *)(cache_tail + 36);
        if ( (v9 & 0xC) == 0 )
          break;
        if ( v8 )
        {
          if ( !warned_8375 )
          {
            my_syslog(3, "Internal error in cache.", v13);
            warned_8375 = 1;
          }
          insert_error = 1;
          return 0;
        }
        if ( v14 )
        {
          cache_get_name(cache_tail);
          cache_scan_free(v9);
          ++cache_live_freed;
          v8 = 1;
        }
        else
        {
          cache_scan_free(0);
          v14 = 1;
        }
      }
      v10 = cache_tail;
      if ( a1 && strlen(a1) > 0x31 )
      {
        v11 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 || (v11 = whine_malloc(0x404u)) == 0 )
          {
            insert_error = 1;
            return 0;
          }
          if ( bignames_left )
            --bignames_left;
        }
        cache_unlink();
        *(_DWORD *)(v10 + 40) = v11;
        *(_WORD *)(v10 + 36) = a5 | 0x200;
      }
      else
      {
        cache_unlink();
        *(_WORD *)(v10 + 36) = a5;
        if ( !a1 )
        {
          *(_BYTE *)cache_get_name(v10) = 0;
          goto LABEL_47;
        }
      }
      v12 = (char *)cache_get_name(v10);
      strcpy(v12, a1);
LABEL_47:
      if ( a2 )
      {
        *(_DWORD *)(v10 + 12) = *a2;
        *(_DWORD *)(v10 + 16) = a2[1];
        *(_DWORD *)(v10 + 20) = a2[2];
        *(_DWORD *)(v10 + 24) = a2[3];
      }
      *(_DWORD *)(v10 + 28) = a3 + a4;
      *(_DWORD *)v10 = new_chain;
      new_chain = v10;
      return v10;
    }
    if ( (a5 & 0x180) == 0
      || (a5 & 8) == 0
      || ((a5 & 0x80) == 0 || *(char *)(result + 36) >= 0 || *(_DWORD *)(result + 12) != *a2)
      && ((a5 & 0x100) == 0
       || (*(_BYTE *)(result + 37) & 1) == 0
       || *(_DWORD *)(result + 12) != *a2
       || *(_DWORD *)(result + 16) != a2[1]
       || *(_DWORD *)(result + 20) != a2[2]
       || *(_DWORD *)(result + 24) != a2[3]) )
    {
      insert_error = 1;
      result = 0;
    }
  }
  return result;
}
