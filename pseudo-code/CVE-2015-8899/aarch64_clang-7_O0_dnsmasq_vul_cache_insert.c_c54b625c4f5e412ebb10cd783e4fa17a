__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  __int64 v5; // x0
  char *v6; // x0
  bool v8; // [xsp+24h] [xbp-DCh]
  char dest[16]; // [xsp+84h] [xbp-7Ch] BYREF
  _DWORD *v10; // [xsp+98h] [xbp-68h]
  _DWORD *v11; // [xsp+A0h] [xbp-60h]
  int v12; // [xsp+A8h] [xbp-58h]
  char v13[12]; // [xsp+ACh] [xbp-54h]
  __int64 v14; // [xsp+B8h] [xbp-48h]
  unsigned __int16 v15; // [xsp+C6h] [xbp-3Ah]
  unsigned __int64 v16; // [xsp+C8h] [xbp-38h]
  __int64 v17; // [xsp+D0h] [xbp-30h]
  _DWORD *v18; // [xsp+D8h] [xbp-28h]
  const char *v19; // [xsp+E0h] [xbp-20h]

  v19 = a1;
  v18 = a2;
  v17 = a3;
  v16 = a4;
  v15 = a5;
  *(_DWORD *)&v13[8] = 0;
  *(_QWORD *)v13 = a5 & 4;
  v12 = 0;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(v15 | 0x10000u, v19, v18, 0LL);
    if ( *(_QWORD *)(dnsmasq_daemon + 456) && *(_QWORD *)(dnsmasq_daemon + 456) < v16 )
      v16 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( *(_QWORD *)(dnsmasq_daemon + 448) && *(_QWORD *)(dnsmasq_daemon + 448) > v16 )
      v16 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  if ( insert_error )
    return 0LL;
  v14 = cache_scan_free(v19, v18, v17, v15);
  if ( v14 )
  {
    if ( (v15 & 0x180) != 0 && (v15 & 8) != 0 )
    {
      if ( (v15 & 0x80) != 0 && (*(_WORD *)(v14 + 52) & 0x80) != 0 && *(_DWORD *)(v14 + 24) == *v18 )
        return v14;
      if ( (v15 & 0x100) != 0 && (*(_WORD *)(v14 + 52) & 0x100) != 0 )
      {
        v11 = (_DWORD *)(v14 + 24);
        v10 = v18;
        v8 = 0;
        if ( *(_DWORD *)(v14 + 24) == *v18 )
        {
          v8 = 0;
          if ( v11[1] == v10[1] )
          {
            v8 = 0;
            if ( v11[2] == v10[2] )
              v8 = v11[3] == v10[3];
          }
        }
        if ( v8 )
          return v14;
      }
    }
    insert_error = 1;
    return 0LL;
  }
  while ( 1 )
  {
    v14 = cache_tail;
    if ( !cache_tail )
    {
      insert_error = 1;
      return 0LL;
    }
    if ( (*(_WORD *)(v14 + 52) & 0xC) == 0 )
      break;
    if ( v12 )
    {
      if ( !cache_insert_warned )
      {
        my_syslog(3LL, "Internal error in cache.");
        cache_insert_warned = 1;
      }
      insert_error = 1;
      return 0LL;
    }
    if ( *(_DWORD *)v13 )
    {
      memcpy(dest, (const void *)(v14 + 24), sizeof(dest));
      v12 = 1;
      v5 = cache_get_name(v14);
      cache_scan_free(v5, dest, v17, *(unsigned __int16 *)(v14 + 52));
      ++cache_live_freed;
    }
    else
    {
      cache_scan_free(0LL, 0LL, v17, 0LL);
      *(_DWORD *)v13 = 1;
    }
  }
  if ( v19 && strlen(v19) > 0x31 )
  {
    if ( big_free )
    {
      *(_QWORD *)&v13[4] = big_free;
      big_free = (_QWORD *)*big_free;
    }
    else
    {
      if ( !bignames_left && (v15 & 0x5000) == 0 || (*(_QWORD *)&v13[4] = whine_malloc(1032LL)) == 0LL )
      {
        insert_error = 1;
        return 0LL;
      }
      if ( bignames_left )
        --bignames_left;
    }
  }
  cache_unlink(v14);
  *(_WORD *)(v14 + 52) = v15;
  if ( *(_QWORD *)&v13[4] )
  {
    *(_QWORD *)(v14 + 56) = *(_QWORD *)&v13[4];
    *(_WORD *)(v14 + 52) |= 0x200u;
  }
  if ( v19 )
  {
    v6 = (char *)cache_get_name(v14);
    strcpy(v6, v19);
  }
  else
  {
    *(_BYTE *)cache_get_name(v14) = 0;
  }
  if ( v18 )
    memcpy((void *)(v14 + 24), v18, 0x10uLL);
  *(_QWORD *)(v14 + 40) = v17 + v16;
  *(_QWORD *)v14 = new_chain;
  new_chain = v14;
  return v14;
}
