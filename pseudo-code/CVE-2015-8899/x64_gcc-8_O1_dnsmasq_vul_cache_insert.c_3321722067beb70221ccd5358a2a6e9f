__int64 __fastcall cache_insert(const char *a1, const __m128i *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  int v7; // er12
  __int64 v8; // rbx
  __int64 v9; // rax
  int v10; // edx
  int v11; // ecx
  int v12; // er8
  int v13; // er9
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rax
  __int64 v17; // r15
  __int64 v18; // rax
  char *v19; // rax
  __int64 v20; // rax
  int v22; // [rsp+10h] [rbp-68h]
  unsigned __int16 v23; // [rsp+16h] [rbp-62h]
  __m128i v24; // [rsp+20h] [rbp-58h] BYREF
  unsigned __int64 v25; // [rsp+38h] [rbp-40h]

  v25 = __readfsqword(0x28u);
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    v15 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v15 < a4 && v15 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 456);
    v16 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( v16 > a4 && v16 )
      a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  }
  v7 = insert_error;
  v8 = 0LL;
  if ( !insert_error )
  {
    v9 = cache_scan_free(a1, a2, a3, a5);
    v8 = v9;
    if ( v9 )
    {
      if ( (a5 & 0x180) == 0
        || (a5 & 8) == 0
        || ((a5 & 0x80u) == 0 || *(char *)(v9 + 52) >= 0 || *(_DWORD *)(v9 + 24) != a2->m128i_i32[0])
        && ((a5 & 0x100) == 0
         || (*(_BYTE *)(v9 + 53) & 1) == 0
         || *(_DWORD *)(v9 + 24) != a2->m128i_i32[0]
         || *(_DWORD *)(v9 + 28) != a2->m128i_i32[1]
         || *(_DWORD *)(v9 + 32) != a2->m128i_i32[2]
         || *(_DWORD *)(v9 + 36) != a2->m128i_i32[3]) )
      {
        insert_error = 1;
        v8 = 0LL;
      }
      return v8;
    }
    v22 = a5 & 4;
    while ( 1 )
    {
      v17 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return cache_tail;
      }
      v23 = *(_WORD *)(cache_tail + 52);
      if ( (v23 & 0xC) == 0 )
        break;
      if ( v7 )
      {
        if ( !warned_8855 )
        {
          my_syslog(3, (unsigned int)"Internal error in cache.", v10, v11, v12, v13, a3);
          warned_8855 = 1;
        }
        insert_error = 1;
        return v8;
      }
      if ( v22 )
      {
        v24 = _mm_loadu_si128((const __m128i *)(cache_tail + 24));
        v18 = cache_get_name(cache_tail);
        cache_scan_free(v18, &v24, a3, v23);
        ++cache_live_freed;
        v7 = 1;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v7 = 0;
        v22 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      v8 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 || (v20 = whine_malloc(1032LL)) == 0 )
        {
          insert_error = 1;
          return v8;
        }
        v8 = v20;
        if ( bignames_left )
          --bignames_left;
      }
      cache_unlink(v17);
      *(_QWORD *)(v17 + 56) = v8;
      *(_WORD *)(v17 + 52) = a5 | 0x200;
    }
    else
    {
      cache_unlink(cache_tail);
      *(_WORD *)(v17 + 52) = a5;
      if ( !a1 )
      {
        *(_BYTE *)cache_get_name(v17) = 0;
        goto LABEL_41;
      }
    }
    v19 = (char *)cache_get_name(v17);
    strcpy(v19, a1);
LABEL_41:
    if ( a2 )
      *(__m128i *)(v17 + 24) = _mm_loadu_si128(a2);
    *(_QWORD *)(v17 + 40) = a3 + a4;
    *(_QWORD *)v17 = new_chain;
    new_chain = v17;
    v8 = v17;
  }
  return v8;
}
