__int64 __fastcall cache_insert(const char *a1, _DWORD *a2, __int64 a3, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned __int16 v5; // bx
  unsigned int v6; // er13
  int v7; // er12
  __int64 v8; // rbp
  __int64 v9; // rax
  int v10; // edx
  int v11; // ecx
  int v12; // er8
  int v13; // er9
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rax
  __int64 v17; // r13
  unsigned __int16 v18; // r15
  __int64 v19; // rdx
  __int64 v20; // rax
  __int64 v21; // r12
  char *v22; // rax
  __int64 v23; // rdx
  int v26; // [rsp+24h] [rbp-64h]
  __int64 v27[11]; // [rsp+30h] [rbp-58h] BYREF

  v5 = a5;
  v27[3] = __readfsqword(0x28u);
  v6 = a5;
  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000u, a1, a2, 0LL);
    v15 = *(_QWORD *)(dnsmasq_daemon + 456);
    if ( v15 )
    {
      if ( a4 <= v15 )
        v15 = a4;
      a4 = v15;
    }
    v16 = *(_QWORD *)(dnsmasq_daemon + 448);
    if ( a4 < v16 )
    {
      if ( !v16 )
        v16 = a4;
      a4 = v16;
    }
  }
  v7 = insert_error;
  v8 = 0LL;
  if ( !insert_error )
  {
    v9 = cache_scan_free(a1, a2, a3, v6);
    v8 = v9;
    if ( v9 )
    {
      if ( (v5 & 0x180) == 0
        || (v5 & 8) == 0
        || ((v5 & 0x80u) == 0 || *(char *)(v9 + 52) >= 0 || *(_DWORD *)(v9 + 24) != *a2)
        && ((v5 & 0x100) == 0
         || (*(_BYTE *)(v9 + 53) & 1) == 0
         || *(_DWORD *)(v9 + 24) != *a2
         || *(_DWORD *)(v9 + 28) != a2[1]
         || *(_DWORD *)(v9 + 32) != a2[2]
         || *(_DWORD *)(v9 + 36) != a2[3]) )
      {
        insert_error = 1;
        v8 = 0LL;
      }
      return v8;
    }
    v26 = v5 & 4;
    while ( 1 )
    {
      v17 = cache_tail;
      if ( !cache_tail )
      {
        insert_error = 1;
        return cache_tail;
      }
      v18 = *(_WORD *)(cache_tail + 52);
      if ( (v18 & 0xC) == 0 )
        break;
      if ( v7 )
      {
        if ( !warned_8655 )
        {
          my_syslog(3, (unsigned int)"Internal error in cache.", v10, v11, v12, v13);
          warned_8655 = 1;
        }
        insert_error = 1;
        return v8;
      }
      if ( v26 )
      {
        v19 = *(_QWORD *)(cache_tail + 32);
        v27[0] = *(_QWORD *)(cache_tail + 24);
        v27[1] = v19;
        v20 = cache_get_name(cache_tail);
        cache_scan_free(v20, v27, a3, v18);
        ++cache_live_freed;
        v7 = 1;
      }
      else
      {
        cache_scan_free(0LL, 0LL, a3, 0LL);
        v7 = 0;
        v26 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      v21 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (v5 & 0x5000) == 0 || (v21 = whine_malloc(1032LL)) == 0 )
        {
          insert_error = 1;
          return v8;
        }
        if ( bignames_left )
          --bignames_left;
      }
      cache_unlink(v17);
      *(_QWORD *)(v17 + 56) = v21;
      HIBYTE(v5) |= 2u;
      *(_WORD *)(v17 + 52) = v5;
    }
    else
    {
      cache_unlink(cache_tail);
      *(_WORD *)(v17 + 52) = v5;
      if ( !a1 )
      {
        *(_BYTE *)cache_get_name(v17) = 0;
        goto LABEL_43;
      }
    }
    v22 = (char *)cache_get_name(v17);
    strcpy(v22, a1);
LABEL_43:
    if ( a2 )
    {
      v23 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(v17 + 24) = *(_QWORD *)a2;
      *(_QWORD *)(v17 + 32) = v23;
    }
    *(_QWORD *)(v17 + 40) = a3 + a4;
    *(_QWORD *)v17 = new_chain;
    new_chain = v17;
    v8 = v17;
  }
  return v8;
}
