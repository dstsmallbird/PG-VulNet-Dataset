int __fastcall cache_insert(int a1, void *cp, int a3, int a4, __int16 a5)
{
  int v7; // r10
  int v8; // r6
  int v9; // r0
  int v10; // r2
  int v11; // r10
  int v13; // r1
  int v14; // r2
  int v15; // r3
  int v16; // r0
  int v17; // r8
  int v18; // r12
  unsigned int v19; // r3
  bool v20; // cf
  bool v21; // cc
  int *v22; // r2
  int v23; // r3
  char *v24; // r0
  int v25; // r1
  int v26; // r2
  int v27; // r3
  int v28; // r3
  _BYTE *v29; // r2
  _DWORD v32[4]; // [sp+Ch] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query((unsigned __int16)a5 | 0x10000, a1, cp);
    v19 = *(_DWORD *)(dnsmasq_daemon + 252);
    v20 = 1;
    if ( v19 )
      v20 = v19 >= a4;
    if ( v20 )
      v19 = a4;
    a4 = *(_DWORD *)(dnsmasq_daemon + 248);
    v21 = a4 != 0;
    if ( a4 )
      v21 = a4 > v19;
    if ( !v21 )
      a4 = v19;
  }
  v7 = insert_error;
  if ( insert_error )
    return 0;
  v9 = cache_scan_free(a1, cp, a3, (unsigned __int16)a5);
  v8 = v9;
  if ( !v9 )
  {
    v10 = v7;
    v11 = a5 & 4;
    while ( 1 )
    {
      v17 = cache_tail;
      if ( !cache_tail )
        goto LABEL_27;
      v18 = *(unsigned __int16 *)(cache_tail + 36);
      if ( (v18 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_11088 )
        {
          my_syslog(3, "Internal error in cache.");
          warned_11088 = 1;
        }
        goto LABEL_27;
      }
      if ( v11 )
      {
        v13 = *(_DWORD *)(cache_tail + 16);
        v14 = *(_DWORD *)(cache_tail + 20);
        v15 = *(_DWORD *)(cache_tail + 24);
        v32[0] = *(_DWORD *)(cache_tail + 12);
        v32[1] = v13;
        v32[2] = v14;
        v32[3] = v15;
        if ( (v18 & 0x200) != 0 || (v18 & 2) != 0 )
          v16 = *(_DWORD *)(cache_tail + 40);
        else
          v16 = cache_tail + 40;
        cache_scan_free(v16, v32, a3, v18);
        v10 = 1;
        ++cache_live_freed;
      }
      else
      {
        cache_scan_free(0, 0, a3, 0);
        v10 = 0;
        v11 = 1;
      }
    }
    if ( a1 )
    {
      if ( strlen((const char *)a1) > 0x31 )
      {
        v8 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 )
            goto LABEL_27;
          v8 = whine_malloc(1028);
          if ( !v8 )
            goto LABEL_27;
          if ( bignames_left )
            --bignames_left;
        }
      }
    }
    else
    {
      v8 = 0;
    }
    v22 = *(int **)(v17 + 4);
    v23 = *(_DWORD *)v17;
    if ( v22 )
    {
      *v22 = v23;
      v23 = *(_DWORD *)v17;
    }
    else
    {
      cache_head = *(_DWORD *)v17;
    }
    if ( v23 )
      *(_DWORD *)(v23 + 4) = v22;
    else
      cache_tail = (int)v22;
    *(_WORD *)(v17 + 36) = a5;
    if ( v8 )
    {
      *(_WORD *)(v17 + 36) = a5 | 0x200;
      *(_DWORD *)(v17 + 40) = v8;
      if ( a1 )
        goto LABEL_54;
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
        {
          v24 = (char *)(v17 + 40);
          goto LABEL_55;
        }
LABEL_54:
        v24 = *(char **)(v17 + 40);
LABEL_55:
        strcpy(v24, (const char *)a1);
LABEL_56:
        if ( cp )
        {
          v25 = *((_DWORD *)cp + 1);
          v26 = *((_DWORD *)cp + 2);
          v27 = *((_DWORD *)cp + 3);
          *(_DWORD *)(v17 + 12) = *(_DWORD *)cp;
          *(_DWORD *)(v17 + 16) = v25;
          *(_DWORD *)(v17 + 20) = v26;
          *(_DWORD *)(v17 + 24) = v27;
        }
        v28 = new_chain;
        *(_DWORD *)(v17 + 28) = a4 + a3;
        *(_DWORD *)v17 = v28;
        new_chain = v17;
        return v17;
      }
      if ( (a5 & 0x200) == 0 && (a5 & 2) == 0 )
      {
        v29 = (_BYTE *)(v17 + 40);
LABEL_69:
        *v29 = 0;
        goto LABEL_56;
      }
    }
    v29 = *(_BYTE **)(v17 + 40);
    goto LABEL_69;
  }
  if ( (a5 & 0x180) == 0
    || (a5 & 8) == 0
    || ((a5 & 0x80) == 0 || (*(_WORD *)(v9 + 36) & 0x80) == 0 || *(_DWORD *)(v9 + 12) != *(_DWORD *)cp)
    && ((a5 & 0x100) == 0
     || (*(_WORD *)(v9 + 36) & 0x100) == 0
     || *(_DWORD *)(v9 + 12) != *(_DWORD *)cp
     || *(_DWORD *)(v9 + 16) != *((_DWORD *)cp + 1)
     || *(_DWORD *)(v9 + 20) != *((_DWORD *)cp + 2)
     || *(_DWORD *)(v9 + 24) != *((_DWORD *)cp + 3)) )
  {
LABEL_27:
    v8 = 0;
    insert_error = 1;
  }
  return v8;
}
