__int64 __fastcall cache_insert(const char *a1, void *cp, time_t time1, unsigned __int64 a4, unsigned __int16 a5)
{
  int v10; // w28
  __int64 v11; // x0
  __int64 v12; // x19
  bool v13; // zf
  unsigned __int64 v15; // x0
  bool v16; // cf
  bool v17; // cc
  int v18; // w4
  __int16 v19; // w3
  __int64 v20; // x1
  __int64 v21; // x0
  __int64 v22; // x0
  __int64 v23; // x1
  __int64 *v24; // x2
  char *v25; // x0
  __int64 v26; // x1
  _BYTE *v27; // x0
  int v28; // [xsp+6Ch] [xbp+6Ch]
  __int64 v29[2]; // [xsp+78h] [xbp+78h] BYREF

  if ( (a5 & 0x980) == 0 )
  {
    v10 = insert_error;
    if ( !insert_error )
      goto LABEL_3;
    return 0LL;
  }
  log_query(a5 | 0x10000, (int)a1, cp);
  v10 = insert_error;
  v15 = *(_QWORD *)(dnsmasq_daemon + 456);
  if ( v15 )
    v16 = v15 >= a4;
  else
    v16 = 1;
  if ( v16 )
    v15 = a4;
  a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  if ( a4 )
    v17 = a4 > v15;
  else
    v17 = 0;
  if ( !v17 )
    a4 = v15;
  if ( insert_error )
    return 0LL;
LABEL_3:
  v11 = cache_scan_free((int)a1, (int)cp, time1);
  v12 = v11;
  if ( !v11 )
  {
    v18 = a5 & 4;
    while ( 1 )
    {
      v12 = cache_tail;
      if ( !cache_tail )
        goto LABEL_17;
      v19 = *(_WORD *)(cache_tail + 52);
      if ( (v19 & 0xC) == 0 )
        break;
      if ( v10 )
      {
        if ( !warned_9978 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_9978 = 1;
        }
        goto LABEL_17;
      }
      if ( v18 )
      {
        v20 = *(_QWORD *)(cache_tail + 32);
        v29[0] = *(_QWORD *)(cache_tail + 24);
        v29[1] = v20;
        if ( (v19 & 0x200) != 0 || (LODWORD(v21) = cache_tail + 56, (v19 & 2) != 0) )
          v21 = *(_QWORD *)(cache_tail + 56);
        v28 = v18;
        v10 = 1;
        cache_scan_free(v21, (int)v29, time1);
        v18 = v28;
        ++cache_live_freed;
      }
      else
      {
        v10 = 0;
        cache_scan_free(0, 0, time1);
        v18 = 1;
      }
    }
    if ( a1 && strlen(a1) > 0x31 )
    {
      v22 = big_free;
      if ( big_free )
      {
        big_free = *(_QWORD *)big_free;
      }
      else
      {
        if ( !bignames_left && (a5 & 0x5000) == 0 )
          goto LABEL_17;
        v22 = whine_malloc(1032LL);
        if ( !v22 )
          goto LABEL_17;
        if ( bignames_left )
          --bignames_left;
      }
    }
    else
    {
      v22 = 0LL;
    }
    v23 = *(_QWORD *)v12;
    v24 = *(__int64 **)(v12 + 8);
    if ( v24 )
    {
      *v24 = v23;
      v23 = *(_QWORD *)v12;
    }
    else
    {
      cache_head = *(_QWORD *)v12;
    }
    if ( v23 )
      *(_QWORD *)(v23 + 8) = v24;
    else
      cache_tail = (__int64)v24;
    *(_WORD *)(v12 + 52) = a5;
    if ( v22 )
    {
      *(_WORD *)(v12 + 52) = a5 | 0x200;
      *(_QWORD *)(v12 + 56) = v22;
      if ( a1 )
      {
LABEL_56:
        v25 = *(char **)(v12 + 56);
LABEL_57:
        strcpy(v25, a1);
LABEL_58:
        if ( cp )
        {
          v26 = *((_QWORD *)cp + 1);
          *(_QWORD *)(v12 + 24) = *(_QWORD *)cp;
          *(_QWORD *)(v12 + 32) = v26;
        }
        *(_QWORD *)(v12 + 40) = a4 + time1;
        *(_QWORD *)v12 = new_chain;
        new_chain = v12;
        return v12;
      }
    }
    else
    {
      if ( a1 )
      {
        if ( (a5 & 0x200) == 0 )
        {
          v25 = (char *)(v12 + 56);
          if ( (a5 & 2) == 0 )
            goto LABEL_57;
        }
        goto LABEL_56;
      }
      if ( (a5 & 0x200) == 0 )
      {
        v27 = (_BYTE *)(v12 + 56);
        if ( (a5 & 2) == 0 )
        {
LABEL_64:
          *v27 = 0;
          goto LABEL_58;
        }
      }
    }
    v27 = *(_BYTE **)(v12 + 56);
    goto LABEL_64;
  }
  if ( (a5 & 0x180) == 0
    || ((a5 & 8) != 0 ? (v13 = cp == 0LL) : (v13 = 1),
        v13
     || ((a5 & 0x80) == 0 || (*(_WORD *)(v11 + 52) & 0x80) == 0 || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp)
     && ((a5 & 0x100) == 0
      || (*(_WORD *)(v11 + 52) & 0x100) == 0
      || *(_DWORD *)(v11 + 24) != *(_DWORD *)cp
      || *(_DWORD *)(v11 + 28) != *((_DWORD *)cp + 1)
      || *(_DWORD *)(v11 + 32) != *((_DWORD *)cp + 2)
      || *(_DWORD *)(v11 + 36) != *((_DWORD *)cp + 3))) )
  {
LABEL_17:
    v12 = 0LL;
    insert_error = 1;
  }
  return v12;
}
