int __fastcall cache_insert(const char *a1, _DWORD *a2, int a3, unsigned int a4, unsigned __int16 a5)
{
  unsigned int v7; // r3
  bool v8; // cc
  unsigned int v10; // r3
  bool v11; // cf
  int result; // r0
  int v14; // r4
  int v15; // lr
  int v16; // r10
  int v17; // r1
  int v18; // r2
  int v19; // r3
  int v20; // r0
  int v21; // r9
  char *v22; // r0
  int v23; // r1
  int v24; // r2
  int v25; // r3
  int v28; // [sp+8h] [bp-48h]
  _DWORD v29[4]; // [sp+14h] [bp-3Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v7 = *(_DWORD *)(dnsmasq_daemon + 252);
    v8 = v7 != 0;
    if ( v7 )
      v8 = a4 > v7;
    if ( v8 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 252);
    v10 = *(_DWORD *)(dnsmasq_daemon + 248);
    v11 = 1;
    if ( v10 )
      v11 = a4 >= v10;
    if ( !v11 )
      a4 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  result = 0;
  if ( !insert_error )
  {
    result = cache_scan_free(a1, a2, a3, a5);
    if ( !result )
    {
      v28 = a5 & 4;
      v14 = 0;
      while ( 1 )
      {
        v15 = cache_tail;
        if ( !cache_tail )
        {
          insert_error = 1;
          return 0;
        }
        v16 = *(unsigned __int16 *)(cache_tail + 36);
        if ( (v16 & 0xC) == 0 )
          break;
        if ( v14 )
        {
          if ( !warned_11054 )
          {
            my_syslog(3, "Internal error in cache.");
            warned_11054 = 1;
          }
          insert_error = 1;
          return 0;
        }
        if ( v28 )
        {
          v17 = *(_DWORD *)(cache_tail + 16);
          v18 = *(_DWORD *)(cache_tail + 20);
          v19 = *(_DWORD *)(cache_tail + 24);
          v29[0] = *(_DWORD *)(cache_tail + 12);
          v29[1] = v17;
          v29[2] = v18;
          v29[3] = v19;
          v20 = cache_get_name(cache_tail);
          cache_scan_free(v20, v29, a3, v16);
          ++cache_live_freed;
          v14 = 1;
        }
        else
        {
          cache_scan_free(0, 0, a3, 0);
          v28 = 1;
        }
      }
      if ( a1 && strlen(a1) > 0x31 )
      {
        v21 = big_free;
        if ( big_free )
        {
          big_free = *(_DWORD *)big_free;
        }
        else
        {
          if ( !bignames_left && (a5 & 0x5000) == 0 || (v21 = whine_malloc(1028)) == 0 )
          {
            insert_error = 1;
            return 0;
          }
          if ( bignames_left )
            --bignames_left;
        }
        cache_unlink(v15);
        *(_DWORD *)(v15 + 40) = v21;
        *(_WORD *)(v15 + 36) = a5 | 0x200;
      }
      else
      {
        cache_unlink(v15);
        *(_WORD *)(v15 + 36) = a5;
        if ( !a1 )
        {
          *(_BYTE *)cache_get_name(v15) = 0;
          goto LABEL_53;
        }
      }
      v22 = (char *)cache_get_name(v15);
      strcpy(v22, a1);
LABEL_53:
      if ( a2 )
      {
        v23 = a2[1];
        v24 = a2[2];
        v25 = a2[3];
        *(_DWORD *)(v15 + 12) = *a2;
        *(_DWORD *)(v15 + 16) = v23;
        *(_DWORD *)(v15 + 20) = v24;
        *(_DWORD *)(v15 + 24) = v25;
      }
      *(_DWORD *)(v15 + 28) = a3 + a4;
      *(_DWORD *)v15 = new_chain;
      new_chain = v15;
      return v15;
    }
    if ( (a5 & 0x180) == 0
      || (a5 & 8) == 0
      || ((a5 & 0x80) == 0 || (*(_WORD *)(result + 36) & 0x80) == 0 || *(_DWORD *)(result + 12) != *a2)
      && ((a5 & 0x100) == 0
       || (*(_WORD *)(result + 36) & 0x100) == 0
       || *(_DWORD *)(result + 12) != *a2
       || *(_DWORD *)(result + 16) != a2[1]
       || *(_DWORD *)(result + 20) != a2[2]
       || *(_DWORD *)(result + 24) != a2[3]) )
    {
      insert_error = 1;
      result = 0;
    }
  }
  return result;
}
