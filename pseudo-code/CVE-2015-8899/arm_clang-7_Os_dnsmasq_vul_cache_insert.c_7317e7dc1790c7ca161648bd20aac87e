int __fastcall cache_insert(char *a1, _DWORD *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v9; // r10
  unsigned int v10; // r0
  int v11; // r6
  int v12; // r0
  bool v13; // zf
  bool v14; // zf
  bool v15; // zf
  int v16; // r4
  char *v17; // r5
  int v18; // r9
  int v19; // r3
  char *v20; // lr
  char *v21; // r1
  int v22; // r4
  int v23; // r5
  int v24; // r7
  _DWORD *v25; // r0
  const char *v26; // r5
  int v27; // r4
  _DWORD *v28; // r9
  int v30; // r0
  int *v31; // r0
  int v32; // r1
  int *v33; // r2
  __int16 v34; // r1
  char *v35; // r0
  int v36; // r2
  int v37; // r3
  int v38; // r7
  _DWORD *v39; // [sp+4h] [bp-34h]
  char *s; // [sp+8h] [bp-30h]
  char v41; // [sp+Ch] [bp-2Ch] BYREF

  if ( (a5 & 0x980) != 0 )
  {
    log_query(a5 | 0x10000, a1, a2, 0);
    v9 = a4;
    v10 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( v10 < a4 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 252);
    if ( !v10 )
      v9 = a4;
    if ( *(_DWORD *)(dnsmasq_daemon + 248) > v9 )
      v9 = *(_DWORD *)(dnsmasq_daemon + 248);
  }
  else
  {
    v9 = a4;
  }
  v11 = 0;
  if ( !insert_error )
  {
    v12 = cache_scan_free(a1, a2, a3, a5);
    if ( v12 )
    {
      v13 = (a5 & 0x180) == 0;
      if ( (a5 & 0x180) != 0 )
      {
        v11 = v12;
        v13 = (a5 & 8) == 0;
      }
      if ( v13 )
        goto LABEL_23;
      v14 = (a5 & 0x80) == 0;
      if ( (a5 & 0x80) != 0 )
        v14 = (*(_BYTE *)(v11 + 36) & 0x80) == 0;
      if ( v14 || *(_DWORD *)(v11 + 12) != *a2 )
      {
        v15 = (a5 & 0x100) == 0;
        if ( (a5 & 0x100) != 0 )
          v15 = (*(_BYTE *)(v11 + 37) & 1) == 0;
        if ( v15
          || *(_DWORD *)(v11 + 12) != *a2
          || *(_DWORD *)(v11 + 16) != a2[1]
          || *(_DWORD *)(v11 + 20) != a2[2]
          || *(_DWORD *)(v11 + 24) != a2[3] )
        {
LABEL_23:
          v11 = 0;
          insert_error = 1;
        }
      }
      return v11;
    }
    s = a1;
    v39 = a2;
    v11 = cache_tail;
    if ( !cache_tail )
    {
LABEL_44:
      v11 = 0;
      insert_error = 1;
      return v11;
    }
    v16 = 0;
    v17 = &v41;
    v18 = a5 & 4;
    while ( 1 )
    {
      v19 = *(unsigned __int16 *)(v11 + 36);
      if ( (v19 & 0xC) == 0 )
        break;
      if ( v16 )
      {
        if ( !cache_insert_warned )
        {
          my_syslog(3, "Internal error in cache.");
          cache_insert_warned = 1;
        }
        goto LABEL_44;
      }
      if ( v18 )
      {
        v20 = v17;
        v21 = v17;
        v22 = *(_DWORD *)(v11 + 16);
        v23 = *(_DWORD *)(v11 + 20);
        v24 = *(_DWORD *)(v11 + 24);
        *(_DWORD *)v21 = *(_DWORD *)(v11 + 12);
        *((_DWORD *)v21 + 1) = v22;
        *((_DWORD *)v21 + 2) = v23;
        *((_DWORD *)v21 + 3) = v24;
        if ( (v19 & 0x200) != 0 )
        {
          v25 = *(_DWORD **)(v11 + 40);
        }
        else
        {
          v25 = (_DWORD *)(v11 + 40);
          if ( (v19 & 2) != 0 )
            v25 = (_DWORD *)*v25;
        }
        v17 = v20;
        cache_scan_free(v25, v20, a3, v19);
        v16 = 1;
        ++cache_live_freed;
      }
      else
      {
        v16 = 0;
        cache_scan_free(0, 0, a3, 0);
        v18 = 1;
      }
      v11 = cache_tail;
      if ( !cache_tail )
        goto LABEL_44;
    }
    v26 = s;
    v27 = 0;
    if ( s )
    {
      v28 = v39;
      if ( strlen(s) < 0x32 )
      {
LABEL_58:
        v31 = *(int **)(v11 + 4);
        v32 = *(_DWORD *)v11;
        if ( v31 )
        {
          *v31 = v32;
          v32 = *(_DWORD *)v11;
        }
        else
        {
          cache_head = *(_DWORD *)v11;
        }
        v33 = &cache_tail;
        if ( v32 )
          v33 = (int *)(v32 + 4);
        v34 = a5;
        *v33 = (int)v31;
        *(_WORD *)(v11 + 36) = a5;
        if ( v27 )
        {
          v34 = a5 | 0x200;
          *(_DWORD *)(v11 + 40) = v27;
          *(_WORD *)(v11 + 36) = a5 | 0x200;
        }
        if ( (v34 & 0x200) != 0 )
        {
          v35 = *(char **)(v11 + 40);
        }
        else
        {
          v35 = (char *)(v11 + 40);
          if ( (v34 & 2) != 0 )
            v35 = *(char **)v35;
        }
        if ( v26 )
          strcpy(v35, v26);
        else
          *v35 = 0;
        if ( v28 )
        {
          v36 = v28[1];
          v37 = v28[2];
          v38 = v28[3];
          *(_DWORD *)(v11 + 12) = *v28;
          *(_DWORD *)(v11 + 16) = v36;
          *(_DWORD *)(v11 + 20) = v37;
          *(_DWORD *)(v11 + 24) = v38;
        }
        *(_DWORD *)(v11 + 28) = v9 + a3;
        *(_DWORD *)v11 = new_chain;
        new_chain = v11;
        return v11;
      }
      v27 = big_free;
      if ( big_free )
      {
        big_free = *(_DWORD *)big_free;
        goto LABEL_58;
      }
      if ( !(bignames_left | a5 & 0x5000) )
        goto LABEL_44;
      v30 = whine_malloc(1028);
      if ( !v30 )
        goto LABEL_44;
      v27 = v30;
      v26 = s;
      if ( bignames_left )
        --bignames_left;
    }
    v28 = v39;
    goto LABEL_58;
  }
  return v11;
}
