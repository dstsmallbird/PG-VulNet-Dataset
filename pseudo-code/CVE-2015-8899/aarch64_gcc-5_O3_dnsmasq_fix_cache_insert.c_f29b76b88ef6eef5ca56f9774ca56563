__int64 __fastcall cache_insert(const char *a1, void *cp, time_t time1, unsigned __int64 a4, unsigned __int16 a5)
{
  unsigned __int16 v6; // w19
  __int64 result; // x0
  bool v11; // zf
  unsigned __int64 v12; // x0
  bool v13; // zf
  bool v14; // cf
  int v15; // w27
  int v16; // w4
  __int64 v17; // x26
  __int16 v18; // w3
  __int64 v19; // x1
  __int64 v20; // x0
  __int64 v21; // x0
  _QWORD *v22; // x1
  __int64 v23; // x2
  char *v24; // x0
  __int64 v25; // x3
  __int64 v26; // x2
  _BYTE *v27; // x0
  _QWORD v28[2]; // [xsp+78h] [xbp+78h] BYREF

  v6 = a5;
  if ( (a5 & 0x980) == 0 )
  {
    if ( !insert_error )
      goto LABEL_3;
    return 0LL;
  }
  log_query(a5 | 0x10000, (int)a1, cp);
  v12 = *(_QWORD *)(dnsmasq_daemon + 456);
  if ( a4 > v12 )
    v13 = v12 == 0;
  else
    v13 = 1;
  if ( v13 )
    v12 = a4;
  a4 = *(_QWORD *)(dnsmasq_daemon + 448);
  if ( a4 )
    v14 = v12 >= a4;
  else
    v14 = 1;
  if ( v14 )
    a4 = v12;
  if ( insert_error )
    return 0LL;
LABEL_3:
  result = cache_scan_free((int)a1, (int)cp, time1);
  if ( !result )
  {
    v15 = v6 & 4;
    v16 = 0;
    while ( 1 )
    {
      v17 = cache_tail;
      if ( !cache_tail )
        goto LABEL_15;
      v18 = *(_WORD *)(cache_tail + 52);
      if ( (v18 & 0xC) == 0 )
      {
        if ( a1 && strlen(a1) > 0x31 )
        {
          v21 = big_free;
          if ( big_free )
          {
            big_free = *(_QWORD *)big_free;
          }
          else
          {
            if ( !bignames_left && (v6 & 0x5000) == 0 )
              goto LABEL_15;
            v21 = whine_malloc(1032LL);
            if ( !v21 )
              goto LABEL_15;
            if ( bignames_left )
              --bignames_left;
          }
        }
        else
        {
          v21 = 0LL;
        }
        v22 = *(_QWORD **)(v17 + 8);
        if ( v22 )
        {
          *v22 = *(_QWORD *)v17;
          v23 = *(_QWORD *)v17;
        }
        else
        {
          v23 = *(_QWORD *)v17;
          cache_head = *(_QWORD *)v17;
        }
        if ( v23 )
          *(_QWORD *)(v23 + 8) = v22;
        else
          cache_tail = (__int64)v22;
        *(_WORD *)(v17 + 52) = v6;
        if ( v21 )
        {
          v6 |= 0x200u;
          *(_QWORD *)(v17 + 56) = v21;
          *(_WORD *)(v17 + 52) = v6;
        }
        if ( a1 )
        {
          if ( (v6 & 0x200) != 0 || (v24 = (char *)(v17 + 56), (v6 & 2) != 0) )
            v24 = *(char **)(v17 + 56);
          strcpy(v24, a1);
        }
        else
        {
          if ( (v6 & 0x200) != 0 || (v27 = (_BYTE *)(v17 + 56), (v6 & 2) != 0) )
            v27 = *(_BYTE **)(v17 + 56);
          *v27 = 0;
        }
        if ( cp )
        {
          v25 = *((_QWORD *)cp + 1);
          *(_QWORD *)(v17 + 24) = *(_QWORD *)cp;
          *(_QWORD *)(v17 + 32) = v25;
        }
        *(_QWORD *)(v17 + 40) = a4 + time1;
        result = v17;
        v26 = new_chain;
        new_chain = v17;
        *(_QWORD *)v17 = v26;
        return result;
      }
      if ( v16 )
      {
        if ( !warned_9671 )
        {
          my_syslog(3LL, "Internal error in cache.");
          warned_9671 = 1;
        }
        goto LABEL_15;
      }
      if ( v15 )
      {
        v19 = *(_QWORD *)(cache_tail + 32);
        v28[0] = *(_QWORD *)(cache_tail + 24);
        v28[1] = v19;
        if ( (v18 & 0x200) != 0 || (LODWORD(v20) = cache_tail + 56, (v18 & 2) != 0) )
          v20 = *(_QWORD *)(cache_tail + 56);
        cache_scan_free(v20, (int)v28, time1);
        v16 = 1;
        ++cache_live_freed;
      }
      else
      {
        v15 = 1;
        cache_scan_free(0, 0, time1);
        v16 = 0;
      }
    }
  }
  if ( (v6 & 0x180) == 0
    || ((v6 & 8) != 0 ? (v11 = cp == 0LL) : (v11 = 1),
        v11
     || ((v6 & 0x80) == 0 || (*(_WORD *)(result + 52) & 0x80) == 0 || *(_DWORD *)(result + 24) != *(_DWORD *)cp)
     && ((v6 & 0x100) == 0
      || (*(_WORD *)(result + 52) & 0x100) == 0
      || *(_DWORD *)(result + 24) != *(_DWORD *)cp
      || *(_DWORD *)(result + 28) != *((_DWORD *)cp + 1)
      || *(_DWORD *)(result + 32) != *((_DWORD *)cp + 2)
      || *(_DWORD *)(result + 36) != *((_DWORD *)cp + 3))) )
  {
LABEL_15:
    result = 0LL;
    insert_error = 1;
  }
  return result;
}
